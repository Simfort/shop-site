{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/errors/base-error.ts"],"sourcesContent":["export interface ErrorOptions {\n  stack?: string;\n}\n\nexport interface CommonErrorProperties {\n  /** The database specific error which triggered this one */\n  readonly parent: Error;\n\n  /** The database specific error which triggered this one */\n  readonly original: Error;\n\n  /** The SQL that triggered the error */\n  readonly sql: string;\n}\n\n/**\n * The Base Error all Sequelize Errors inherit from.\n *\n * Sequelize provides a host of custom error classes, to allow you to do easier debugging. All of these errors are exposed on the sequelize object and the sequelize constructor.\n * All sequelize errors inherit from the base JS error object.\n *\n * This means that errors can be accessed using `Sequelize.ValidationError`\n */\nabstract class BaseError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = 'SequelizeBaseError';\n  }\n}\n\nexport default BaseError;\n"],"names":[],"mappings":";;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,SAAA,IAAA;AAAA;AAuBA,MAAA,kBAAiC,MAAM;IACrC,YAAY,OAAA,CAAkB;QAC5B,KAAA,CAAM;QACN,IAAA,CAAK,IAAA,GAAO;IAAA;AAAA;AAIhB,IAAO,qBAAQ","ignoreList":[0]}},
    {"offset": {"line": 27, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 32, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/errors/database-error.ts"],"sourcesContent":["import BaseError, { CommonErrorProperties, ErrorOptions } from './base-error';\n\nexport interface DatabaseErrorParent\n  extends Error,\n    Pick<CommonErrorProperties, 'sql'> {\n  /** The parameters for the sql that triggered the error */\n  readonly parameters?: object;\n}\n\nexport interface DatabaseErrorSubclassOptions extends ErrorOptions {\n  parent?: DatabaseErrorParent;\n  message?: string;\n}\n\n/**\n * A base class for all database related errors.\n */\nclass DatabaseError\n  extends BaseError\n  implements DatabaseErrorParent, CommonErrorProperties\n{\n  parent: Error;\n  original: Error;\n  sql: string;\n  parameters: object;\n\n  /**\n   * @param parent The database specific error which triggered this one\n   * @param options\n   */\n  constructor(parent: DatabaseErrorParent, options: ErrorOptions = {}) {\n    super(parent.message);\n    this.name = 'SequelizeDatabaseError';\n\n    this.parent = parent;\n    this.original = parent;\n\n    this.sql = parent.sql;\n    this.parameters = parent.parameters ?? {};\n\n    if (options.stack) {\n      this.stack = options.stack;\n    }\n  }\n}\n\nexport default DatabaseError;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,SAAA,IAAA;AAAA;AAAA,IAAA,oBAA+D;AAiB/D,MAAA,sBACU,kBAAA,OAAA,CAEV;IAUE,YAAY,MAAA,EAA6B,UAAwB,CAAA,CAAA,CAAI;QACnE,KAAA,CAAM,OAAO,OAAA;QAVf,cAAA,IAAA,EAAA;QACA,cAAA,IAAA,EAAA;QACA,cAAA,IAAA,EAAA;QACA,cAAA,IAAA,EAAA;QAxBF,IAAA;QAgCI,IAAA,CAAK,IAAA,GAAO;QAEZ,IAAA,CAAK,MAAA,GAAS;QACd,IAAA,CAAK,QAAA,GAAW;QAEhB,IAAA,CAAK,GAAA,GAAM,OAAO,GAAA;QAClB,IAAA,CAAK,UAAA,GAAa,CAAA,KAAA,OAAO,UAAA,KAAP,OAAA,KAAqB,CAAA;QAEvC,IAAI,QAAQ,KAAA,EAAO;YACjB,IAAA,CAAK,KAAA,GAAQ,QAAQ,KAAA;QAAA;IAAA;AAAA;AAK3B,IAAO,yBAAQ","ignoreList":[0]}},
    {"offset": {"line": 99, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/errors/aggregate-error.ts"],"sourcesContent":["import BaseError from './base-error';\n\n/**\n * A wrapper for multiple Errors\n *\n * @param errors The aggregated errors that occurred\n */\nclass AggregateError extends BaseError {\n  /** the aggregated errors that occurred */\n  readonly errors: Array<AggregateError | Error>;\n\n  constructor(errors: Array<AggregateError | Error>) {\n    super();\n    this.errors = errors;\n    this.name = 'AggregateError';\n  }\n\n  toString(): string {\n    const message = `AggregateError of:\\n${this.errors\n      .map((error: Error | AggregateError) =>\n        error === this\n          ? '[Circular AggregateError]'\n          : error instanceof AggregateError\n            ? String(error).replace(/\\n$/, '').replace(/^/gm, '  ')\n            : String(error).replace(/^/gm, '    ').substring(2)\n      )\n      .join('\\n')}\\n`;\n    return message;\n  }\n}\n\nexport default AggregateError;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,SAAA,IAAA;AAAA;AAAA,IAAA,oBAAsB;AAOtB,MAAA,uBAA6B,kBAAA,OAAA,CAAU;IAIrC,YAAY,MAAA,CAAuC;QACjD,KAAA;QAHO,cAAA,IAAA,EAAA;QAIP,IAAA,CAAK,MAAA,GAAS;QACd,IAAA,CAAK,IAAA,GAAO;IAAA;IAGd,WAAmB;QACjB,MAAM,UAAU,CAAA;AAAA,EAAuB,IAAA,CAAK,MAAA,CACzC,GAAA,CAAI,CAAC,QACJ,UAAU,IAAA,GACN,8BACA,iBAAiB,iBACf,OAAO,OAAO,OAAA,CAAQ,OAAO,IAAI,OAAA,CAAQ,OAAO,QAChD,OAAO,OAAO,OAAA,CAAQ,OAAO,QAAQ,SAAA,CAAU,IAEtD,IAAA,CAAK,MAAA;AAAA,CAAA;QACR,OAAO;IAAA;AAAA;AAIX,IAAO,0BAAQ","ignoreList":[0]}},
    {"offset": {"line": 167, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/errors/association-error.ts"],"sourcesContent":["import BaseError from './base-error';\n\n/**\n * Thrown when an association is improperly constructed (see message for details)\n */\nclass AssociationError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'SequelizeAssociationError';\n  }\n}\n\nexport default AssociationError;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,SAAA,IAAA;AAAA;AAAA,IAAA,oBAAsB;AAKtB,MAAA,yBAA+B,kBAAA,OAAA,CAAU;IACvC,YAAY,OAAA,CAAiB;QAC3B,KAAA,CAAM;QACN,IAAA,CAAK,IAAA,GAAO;IAAA;AAAA;AAIhB,IAAO,4BAAQ","ignoreList":[0]}},
    {"offset": {"line": 217, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 222, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/errors/bulk-record-error.ts"],"sourcesContent":["import type { Model } from '..';\nimport BaseError from './base-error';\n\n/**\n * Thrown when bulk operation fails, it represent per record level error.\n * Used with AggregateError\n *\n * @param error Error for a given record/instance\n * @param record DAO instance that error belongs to\n */\nclass BulkRecordError extends BaseError {\n  errors: Error;\n  record: Model;\n\n  constructor(error: Error, record: Model) {\n    super(error.message);\n    this.name = 'SequelizeBulkRecordError';\n    this.errors = error;\n    this.record = record;\n  }\n}\n\nexport default BulkRecordError;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,SAAA,IAAA;AAAA;AACA,IAAA,oBAAsB;AAStB,MAAA,wBAA8B,kBAAA,OAAA,CAAU;IAItC,YAAY,KAAA,EAAc,MAAA,CAAe;QACvC,KAAA,CAAM,MAAM,OAAA;QAJd,cAAA,IAAA,EAAA;QACA,cAAA,IAAA,EAAA;QAIE,IAAA,CAAK,IAAA,GAAO;QACZ,IAAA,CAAK,MAAA,GAAS;QACd,IAAA,CAAK,MAAA,GAAS;IAAA;AAAA;AAIlB,IAAO,4BAAQ","ignoreList":[0]}},
    {"offset": {"line": 281, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 286, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/errors/connection-error.ts"],"sourcesContent":["import BaseError from './base-error';\n\n/**\n * A base class for all connection related errors.\n */\nclass ConnectionError extends BaseError {\n  /** The connection specific error which triggered this one */\n  parent: Error;\n  original: Error;\n\n  constructor(parent: Error) {\n    super(parent ? parent.message : '');\n    this.name = 'SequelizeConnectionError';\n    this.parent = parent;\n    this.original = parent;\n  }\n}\n\nexport default ConnectionError;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,SAAA,IAAA;AAAA;AAAA,IAAA,oBAAsB;AAKtB,MAAA,wBAA8B,kBAAA,OAAA,CAAU;IAKtC,YAAY,MAAA,CAAe;QACzB,KAAA,CAAM,SAAS,OAAO,OAAA,GAAU;QAJlC,cAAA,IAAA,EAAA;QACA,cAAA,IAAA,EAAA;QAIE,IAAA,CAAK,IAAA,GAAO;QACZ,IAAA,CAAK,MAAA,GAAS;QACd,IAAA,CAAK,QAAA,GAAW;IAAA;AAAA;AAIpB,IAAO,2BAAQ","ignoreList":[0]}},
    {"offset": {"line": 345, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 350, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/errors/eager-loading-error.ts"],"sourcesContent":["import BaseError from './base-error';\n\n/**\n * Thrown when an include statement is improperly constructed (see message for details)\n */\nclass EagerLoadingError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'SequelizeEagerLoadingError';\n  }\n}\n\nexport default EagerLoadingError;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,SAAA,IAAA;AAAA;AAAA,IAAA,oBAAsB;AAKtB,MAAA,0BAAgC,kBAAA,OAAA,CAAU;IACxC,YAAY,OAAA,CAAiB;QAC3B,KAAA,CAAM;QACN,IAAA,CAAK,IAAA,GAAO;IAAA;AAAA;AAIhB,IAAO,8BAAQ","ignoreList":[0]}},
    {"offset": {"line": 395, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 400, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/errors/empty-result-error.ts"],"sourcesContent":["import BaseError from './base-error';\n\n/**\n * Thrown when a record was not found, Usually used with rejectOnEmpty mode (see message for details)\n */\nclass EmptyResultError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'SequelizeEmptyResultError';\n  }\n}\n\nexport default EmptyResultError;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,SAAA,IAAA;AAAA;AAAA,IAAA,oBAAsB;AAKtB,MAAA,yBAA+B,kBAAA,OAAA,CAAU;IACvC,YAAY,OAAA,CAAiB;QAC3B,KAAA,CAAM;QACN,IAAA,CAAK,IAAA,GAAO;IAAA;AAAA;AAIhB,IAAO,6BAAQ","ignoreList":[0]}},
    {"offset": {"line": 445, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 450, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/errors/instance-error.ts"],"sourcesContent":["import BaseError from './base-error';\n\n/**\n * Thrown when a some problem occurred with Instance methods (see message for details)\n */\nclass InstanceError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'SequelizeInstanceError';\n  }\n}\n\nexport default InstanceError;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,SAAA,IAAA;AAAA;AAAA,IAAA,oBAAsB;AAKtB,MAAA,sBAA4B,kBAAA,OAAA,CAAU;IACpC,YAAY,OAAA,CAAiB;QAC3B,KAAA,CAAM;QACN,IAAA,CAAK,IAAA,GAAO;IAAA;AAAA;AAIhB,IAAO,yBAAQ","ignoreList":[0]}},
    {"offset": {"line": 495, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 500, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/errors/optimistic-lock-error.ts"],"sourcesContent":["import BaseError from './base-error';\n\ninterface OptimisticLockErrorOptions {\n  message?: string;\n\n  /** The name of the model on which the update was attempted */\n  modelName?: string;\n\n  /** The values of the attempted update */\n  values?: Record<string, unknown>;\n  where?: Record<string, unknown>;\n}\n\n/**\n * Thrown when attempting to update a stale model instance\n */\nclass OptimisticLockError extends BaseError {\n  modelName: string | undefined;\n  values: Record<string, unknown> | undefined;\n  where: Record<string, unknown> | undefined;\n\n  constructor(options: OptimisticLockErrorOptions) {\n    options = options || {};\n    options.message =\n      options.message ||\n      `Attempting to update a stale model instance: ${options.modelName}`;\n\n    super(options.message);\n    this.name = 'SequelizeOptimisticLockError';\n    this.modelName = options.modelName;\n    this.values = options.values;\n    this.where = options.where;\n  }\n}\n\nexport default OptimisticLockError;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,SAAA,IAAA;AAAA;AAAA,IAAA,oBAAsB;AAgBtB,MAAA,4BAAkC,kBAAA,OAAA,CAAU;IAK1C,YAAY,OAAA,CAAqC;QAC/C,UAAU,WAAW,CAAA;QACrB,QAAQ,OAAA,GACN,QAAQ,OAAA,IACR,CAAA,6CAAA,EAAgD,QAAQ,SAAA,EAAA;QAE1D,KAAA,CAAM,QAAQ,OAAA;QAVhB,cAAA,IAAA,EAAA;QACA,cAAA,IAAA,EAAA;QACA,cAAA,IAAA,EAAA;QASE,IAAA,CAAK,IAAA,GAAO;QACZ,IAAA,CAAK,SAAA,GAAY,QAAQ,SAAA;QACzB,IAAA,CAAK,MAAA,GAAS,QAAQ,MAAA;QACtB,IAAA,CAAK,KAAA,GAAQ,QAAQ,KAAA;IAAA;AAAA;AAIzB,IAAO,gCAAQ","ignoreList":[0]}},
    {"offset": {"line": 563, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 568, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/errors/query-error.ts"],"sourcesContent":["import BaseError from './base-error';\n\n/**\n * Thrown when a query is passed invalid options (see message for details)\n */\nclass QueryError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'SequelizeQueryError';\n  }\n}\n\nexport default QueryError;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,SAAA,IAAA;AAAA;AAAA,IAAA,oBAAsB;AAKtB,MAAA,mBAAyB,kBAAA,OAAA,CAAU;IACjC,YAAY,OAAA,CAAiB;QAC3B,KAAA,CAAM;QACN,IAAA,CAAK,IAAA,GAAO;IAAA;AAAA;AAIhB,IAAO,sBAAQ","ignoreList":[0]}},
    {"offset": {"line": 613, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 618, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/errors/sequelize-scope-error.ts"],"sourcesContent":["import BaseError from './base-error';\n\n/**\n * Scope Error. Thrown when the sequelize cannot query the specified scope.\n */\nclass SequelizeScopeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'SequelizeScopeError';\n  }\n}\n\nexport default SequelizeScopeError;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,SAAA,IAAA;AAAA;AAAA,IAAA,oBAAsB;AAKtB,MAAA,4BAAkC,kBAAA,OAAA,CAAU;IAC1C,YAAY,OAAA,CAAiB;QAC3B,KAAA,CAAM;QACN,IAAA,CAAK,IAAA,GAAO;IAAA;AAAA;AAIhB,IAAO,gCAAQ","ignoreList":[0]}},
    {"offset": {"line": 663, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 668, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/errors/validation-error.ts"],"sourcesContent":["import type { Model } from '..';\nimport type { ErrorOptions } from './base-error';\nimport BaseError from './base-error';\n\n/**\n * An enum that is used internally by the `ValidationErrorItem` class\n * that maps current `type` strings (as given to ValidationErrorItem.constructor()) to\n * our new `origin` values.\n */\nexport enum ValidationErrorItemType {\n  'notnull violation' = 'CORE',\n  'string violation' = 'CORE',\n  'unique violation' = 'DB',\n  'validation error' = 'FUNCTION',\n}\n\n/**\n * An enum that defines valid ValidationErrorItem `origin` values\n */\nexport enum ValidationErrorItemOrigin {\n  /**\n   * specifies errors that originate from the sequelize \"core\"\n   */\n  CORE = 'CORE',\n\n  /**\n   * specifies validation errors that originate from the storage engine\n   */\n  DB = 'DB',\n\n  /**\n   * specifies validation errors that originate from validator functions (both built-in and custom) defined for a given attribute\n   */\n  FUNCTION = 'FUNCTION',\n}\n\n/**\n * Validation Error Item\n * Instances of this class are included in the `ValidationError.errors` property.\n */\nexport class ValidationErrorItem {\n  /**\n   * @deprecated Will be removed in v7\n   */\n  static TypeStringMap = ValidationErrorItemType;\n\n  /**\n   * @deprecated Will be removed in v7\n   */\n  static Origins = ValidationErrorItemOrigin;\n\n  /**\n   * An error message\n   */\n  readonly message: string;\n\n  /**\n   * The type/origin of the validation error\n   */\n  readonly type: keyof typeof ValidationErrorItemType | null;\n\n  /**\n   * The field that triggered the validation error\n   */\n  readonly path: string | null;\n\n  /**\n   * The value that generated the error\n   */\n  readonly value: string | null;\n\n  readonly origin: keyof typeof ValidationErrorItemOrigin | null;\n\n  /**\n   * The DAO instance that caused the validation error\n   */\n  readonly instance: Model | null;\n\n  /**\n   * A validation \"key\", used for identification\n   */\n  readonly validatorKey: string | null;\n\n  /**\n   * Property name of the BUILT-IN validator function that caused the validation error (e.g. \"in\" or \"len\"), if applicable\n   */\n  readonly validatorName: string | null;\n\n  /**\n   * Parameters used with the BUILT-IN validator function, if applicable\n   */\n  readonly validatorArgs: unknown[];\n\n  /**\n   * Creates a new ValidationError item. Instances of this class are included in the `ValidationError.errors` property.\n   *\n   * @param message An error message\n   * @param type The type/origin of the validation error\n   * @param path The field that triggered the validation error\n   * @param value The value that generated the error\n   * @param instance the DAO instance that caused the validation error\n   * @param validatorKey a validation \"key\", used for identification\n   * @param fnName property name of the BUILT-IN validator function that caused the validation error (e.g. \"in\" or \"len\"), if applicable\n   * @param fnArgs parameters used with the BUILT-IN validator function, if applicable\n   */\n  constructor(\n    message: string,\n    type:\n      | keyof typeof ValidationErrorItemType\n      | keyof typeof ValidationErrorItemOrigin,\n    path: string,\n    value: string,\n    instance: Model,\n    validatorKey: string,\n    fnName: string,\n    fnArgs: unknown[]\n  ) {\n    this.message = message || '';\n    this.type = null;\n    this.path = path || null;\n\n    this.value = value !== undefined ? value : null;\n\n    this.origin = null;\n\n    this.instance = instance || null;\n\n    this.validatorKey = validatorKey || null;\n\n    this.validatorName = fnName || null;\n\n    this.validatorArgs = fnArgs || [];\n\n    if (type) {\n      if (this.isValidationErrorItemOrigin(type)) {\n        this.origin = type;\n      } else {\n        const lowercaseType = this.normalizeString(type);\n        const realType = ValidationErrorItemType[lowercaseType];\n\n        if (realType && ValidationErrorItemOrigin[realType]) {\n          this.origin = realType;\n          this.type = type;\n        }\n      }\n    }\n\n    // This doesn't need captureStackTrace because it's not a subclass of Error\n  }\n\n  private isValidationErrorItemOrigin(\n    origin:\n      | keyof typeof ValidationErrorItemOrigin\n      | keyof typeof ValidationErrorItemType\n  ): origin is keyof typeof ValidationErrorItemOrigin {\n    return (\n      ValidationErrorItemOrigin[\n        origin as keyof typeof ValidationErrorItemOrigin\n      ] !== undefined\n    );\n  }\n\n  private normalizeString<T extends string>(str: T): T {\n    return str.toLowerCase().trim() as T;\n  }\n\n  /**\n   * return a lowercase, trimmed string \"key\" that identifies the validator.\n   *\n   * Note: the string will be empty if the instance has neither a valid `validatorKey` property nor a valid `validatorName` property\n   *\n   * @param useTypeAsNS controls whether the returned value is \"namespace\",\n   *                    this parameter is ignored if the validator's `type` is not one of ValidationErrorItem.Origins\n   * @param NSSeparator a separator string for concatenating the namespace, must be not be empty,\n   *                    defaults to \".\" (fullstop). only used and validated if useTypeAsNS is TRUE.\n   * @throws {Error}    thrown if NSSeparator is found to be invalid.\n   */\n  getValidatorKey(useTypeAsNS: boolean, NSSeparator: string): string {\n    const useTANS = useTypeAsNS === undefined || !!useTypeAsNS;\n    const NSSep = NSSeparator === undefined ? '.' : NSSeparator;\n\n    const type = this.origin;\n    const key = this.validatorKey || this.validatorName;\n    const useNS = useTANS && type && ValidationErrorItemOrigin[type];\n\n    if (useNS && (typeof NSSep !== 'string' || !NSSep.length)) {\n      throw new Error('Invalid namespace separator given, must be a non-empty string');\n    }\n\n    if (!(typeof key === 'string' && key.length)) {\n      return '';\n    }\n\n    return (useNS ? [this.origin, key].join(NSSep) : key).toLowerCase().trim();\n  }\n}\n\n/**\n * Validation Error. Thrown when the sequelize validation has failed. The error contains an `errors` property,\n * which is an array with 1 or more ValidationErrorItems, one for each validation that failed.\n *\n * @param message Error message\n * @param errors Array of ValidationErrorItem objects describing the validation errors\n */\nclass ValidationError extends BaseError {\n  /** Array of ValidationErrorItem objects describing the validation errors */\n  readonly errors: ValidationErrorItem[];\n\n  constructor(\n    message: string,\n    errors: ValidationErrorItem[],\n    options: ErrorOptions = {}\n  ) {\n    super(message);\n    this.name = 'SequelizeValidationError';\n    this.message = 'Validation Error';\n    this.errors = errors || [];\n\n    // Use provided error message if available...\n    if (message) {\n      this.message = message;\n\n      // ... otherwise create a concatenated message out of existing errors.\n    } else if (this.errors.length > 0 && this.errors[0].message) {\n      this.message = this.errors\n        .map(\n          (err: ValidationErrorItem) =>\n            `${err.type || err.origin}: ${err.message}`\n        )\n        .join(',\\n');\n    }\n\n    // Allow overriding the stack if the original stacktrace is uninformative\n    if (options.stack) {\n      this.stack = options.stack;\n    }\n  }\n\n  /**\n   * Gets all validation error items for the path / field specified.\n   *\n   * @param {string} path The path to be checked for error items\n   *\n   * @returns {Array<ValidationErrorItem>} Validation error items for the specified path\n   */\n  get(path: string): ValidationErrorItem[] {\n    return this.errors.reduce<ValidationErrorItem[]>((reduced, error) => {\n      if (error.path === path) {\n        reduced.push(error);\n      }\n      return reduced;\n    }, []);\n  }\n}\n\nexport default ValidationError;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 817, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 822, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/errors/connection/access-denied-error.ts"],"sourcesContent":["import ConnectionError from '../connection-error';\n\n/**\n * Thrown when a connection to a database is refused due to insufficient privileges\n */\nclass AccessDeniedError extends ConnectionError {\n  constructor(parent: Error) {\n    super(parent);\n    this.name = 'SequelizeAccessDeniedError';\n  }\n}\n\nexport default AccessDeniedError;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,SAAA,IAAA;AAAA;AAAA,IAAA,0BAA4B;AAK5B,MAAA,0BAAgC,wBAAA,OAAA,CAAgB;IAC9C,YAAY,MAAA,CAAe;QACzB,KAAA,CAAM;QACN,IAAA,CAAK,IAAA,GAAO;IAAA;AAAA;AAIhB,IAAO,8BAAQ","ignoreList":[0]}},
    {"offset": {"line": 867, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 872, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/errors/connection/connection-acquire-timeout-error.ts"],"sourcesContent":["import ConnectionError from '../connection-error';\n\n/**\n * Thrown when connection is not acquired due to timeout\n */\nclass ConnectionAcquireTimeoutError extends ConnectionError {\n  constructor(parent: Error) {\n    super(parent);\n    this.name = 'SequelizeConnectionAcquireTimeoutError';\n  }\n}\n\nexport default ConnectionAcquireTimeoutError;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,SAAA,IAAA;AAAA;AAAA,IAAA,0BAA4B;AAK5B,MAAA,sCAA4C,wBAAA,OAAA,CAAgB;IAC1D,YAAY,MAAA,CAAe;QACzB,KAAA,CAAM;QACN,IAAA,CAAK,IAAA,GAAO;IAAA;AAAA;AAIhB,IAAO,2CAAQ","ignoreList":[0]}},
    {"offset": {"line": 917, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 922, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/errors/connection/connection-refused-error.ts"],"sourcesContent":["import ConnectionError from '../connection-error';\n\n/**\n * Thrown when a connection to a database is refused\n */\nclass ConnectionRefusedError extends ConnectionError {\n  constructor(parent: Error) {\n    super(parent);\n    this.name = 'SequelizeConnectionRefusedError';\n  }\n}\n\nexport default ConnectionRefusedError;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,SAAA,IAAA;AAAA;AAAA,IAAA,0BAA4B;AAK5B,MAAA,+BAAqC,wBAAA,OAAA,CAAgB;IACnD,YAAY,MAAA,CAAe;QACzB,KAAA,CAAM;QACN,IAAA,CAAK,IAAA,GAAO;IAAA;AAAA;AAIhB,IAAO,mCAAQ","ignoreList":[0]}},
    {"offset": {"line": 967, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 972, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/errors/connection/connection-timed-out-error.ts"],"sourcesContent":["import ConnectionError from '../connection-error';\n\n/**\n * Thrown when a connection to a database times out\n */\nclass ConnectionTimedOutError extends ConnectionError {\n  constructor(parent: Error) {\n    super(parent);\n    this.name = 'SequelizeConnectionTimedOutError';\n  }\n}\n\nexport default ConnectionTimedOutError;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,SAAA,IAAA;AAAA;AAAA,IAAA,0BAA4B;AAK5B,MAAA,gCAAsC,wBAAA,OAAA,CAAgB;IACpD,YAAY,MAAA,CAAe;QACzB,KAAA,CAAM;QACN,IAAA,CAAK,IAAA,GAAO;IAAA;AAAA;AAIhB,IAAO,qCAAQ","ignoreList":[0]}},
    {"offset": {"line": 1017, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1022, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/errors/connection/host-not-found-error.ts"],"sourcesContent":["import ConnectionError from '../connection-error';\n\n/**\n * Thrown when a connection to a database has a hostname that was not found\n */\nclass HostNotFoundError extends ConnectionError {\n  constructor(parent: Error) {\n    super(parent);\n    this.name = 'SequelizeHostNotFoundError';\n  }\n}\n\nexport default HostNotFoundError;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,SAAA,IAAA;AAAA;AAAA,IAAA,0BAA4B;AAK5B,MAAA,0BAAgC,wBAAA,OAAA,CAAgB;IAC9C,YAAY,MAAA,CAAe;QACzB,KAAA,CAAM;QACN,IAAA,CAAK,IAAA,GAAO;IAAA;AAAA;AAIhB,IAAO,+BAAQ","ignoreList":[0]}},
    {"offset": {"line": 1067, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1072, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/errors/connection/host-not-reachable-error.ts"],"sourcesContent":["import ConnectionError from '../connection-error';\n\n/**\n * Thrown when a connection to a database has a hostname that was not reachable\n */\nclass HostNotReachableError extends ConnectionError {\n  constructor(parent: Error) {\n    super(parent);\n    this.name = 'SequelizeHostNotReachableError';\n  }\n}\n\nexport default HostNotReachableError;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,SAAA,IAAA;AAAA;AAAA,IAAA,0BAA4B;AAK5B,MAAA,8BAAoC,wBAAA,OAAA,CAAgB;IAClD,YAAY,MAAA,CAAe;QACzB,KAAA,CAAM;QACN,IAAA,CAAK,IAAA,GAAO;IAAA;AAAA;AAIhB,IAAO,mCAAQ","ignoreList":[0]}},
    {"offset": {"line": 1117, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1122, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/errors/connection/invalid-connection-error.ts"],"sourcesContent":["import ConnectionError from '../connection-error';\n\n/**\n * Thrown when a connection to a database has invalid values for any of the connection parameters\n */\nclass InvalidConnectionError extends ConnectionError {\n  constructor(parent: Error) {\n    super(parent);\n    this.name = 'SequelizeInvalidConnectionError';\n  }\n}\n\nexport default InvalidConnectionError;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,SAAA,IAAA;AAAA;AAAA,IAAA,0BAA4B;AAK5B,MAAA,+BAAqC,wBAAA,OAAA,CAAgB;IACnD,YAAY,MAAA,CAAe;QACzB,KAAA,CAAM;QACN,IAAA,CAAK,IAAA,GAAO;IAAA;AAAA;AAIhB,IAAO,mCAAQ","ignoreList":[0]}},
    {"offset": {"line": 1167, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1172, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/errors/database/exclusion-constraint-error.ts"],"sourcesContent":["import DatabaseError, { DatabaseErrorSubclassOptions } from '../database-error';\n\ninterface ExclusionConstraintErrorOptions {\n  constraint?: string;\n  fields?: Record<string, string | number>;\n  table?: string;\n}\n\n/**\n * Thrown when an exclusion constraint is violated in the database\n */\nclass ExclusionConstraintError extends DatabaseError implements ExclusionConstraintErrorOptions {\n  constraint: string | undefined;\n  fields: Record<string, string | number> | undefined;\n  table: string | undefined;\n\n  constructor(\n    options: DatabaseErrorSubclassOptions & ExclusionConstraintErrorOptions\n  ) {\n    options = options || {};\n    options.parent = options.parent || { sql: '', name: '', message: '' };\n\n    super(options.parent, { stack: options.stack });\n    this.name = 'SequelizeExclusionConstraintError';\n\n    this.message = options.message || options.parent.message || '';\n    this.constraint = options.constraint;\n    this.fields = options.fields;\n    this.table = options.table;\n  }\n}\n\nexport default ExclusionConstraintError;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,SAAA,IAAA;AAAA;AAAA,IAAA,wBAA4D;AAW5D,MAAA,iCAAuC,sBAAA,OAAA,CAAyD;IAK9F,YACE,OAAA,CACA;QACA,UAAU,WAAW,CAAA;QACrB,QAAQ,MAAA,GAAS,QAAQ,MAAA,IAAU;YAAE,KAAK;YAAI,MAAM;YAAI,SAAS;QAAA;QAEjE,KAAA,CAAM,QAAQ,MAAA,EAAQ;YAAE,OAAO,QAAQ,KAAA;QAAA;QAVzC,cAAA,IAAA,EAAA;QACA,cAAA,IAAA,EAAA;QACA,cAAA,IAAA,EAAA;QASE,IAAA,CAAK,IAAA,GAAO;QAEZ,IAAA,CAAK,OAAA,GAAU,QAAQ,OAAA,IAAW,QAAQ,MAAA,CAAO,OAAA,IAAW;QAC5D,IAAA,CAAK,UAAA,GAAa,QAAQ,UAAA;QAC1B,IAAA,CAAK,MAAA,GAAS,QAAQ,MAAA;QACtB,IAAA,CAAK,KAAA,GAAQ,QAAQ,KAAA;IAAA;AAAA;AAIzB,IAAO,qCAAQ","ignoreList":[0]}},
    {"offset": {"line": 1242, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1247, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/errors/database/foreign-key-constraint-error.ts"],"sourcesContent":["import DatabaseError, { DatabaseErrorSubclassOptions } from '../database-error';\n\nexport enum RelationshipType {\n  parent = 'parent',\n  child = 'child',\n}\n\ninterface ForeignKeyConstraintErrorOptions {\n  table?: string;\n  fields?: { [field: string]: string };\n  value?: unknown;\n  index?: string;\n  reltype?: RelationshipType;\n}\n\n/**\n * Thrown when a foreign key constraint is violated in the database\n */\nclass ForeignKeyConstraintError extends DatabaseError {\n  table: string | undefined;\n  fields: { [field: string]: string } | undefined;\n  value: unknown;\n  index: string | undefined;\n  reltype: RelationshipType | undefined;\n\n  constructor(\n    options: ForeignKeyConstraintErrorOptions & DatabaseErrorSubclassOptions\n  ) {\n    options = options || {};\n    options.parent = options.parent || { sql: '', name: '', message: '' };\n\n    super(options.parent, { stack: options.stack });\n    this.name = 'SequelizeForeignKeyConstraintError';\n\n    this.message =\n      options.message || options.parent.message || 'Database Error';\n    this.fields = options.fields;\n    this.table = options.table;\n    this.value = options.value;\n    this.index = options.index;\n    this.reltype = options.reltype;\n  }\n}\n\nexport default ForeignKeyConstraintError;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,kBAAA,IAAA;IAAA,SAAA,IAAA;AAAA;AAAA,IAAA,wBAA4D;AAErD,IAAK,mBAAL,aAAA,GAAA,CAAA,CAAK,sBAAL;IACL,iBAAA,CAAA,SAAA,GAAS;IACT,iBAAA,CAAA,QAAA,GAAQ;IAFE,OAAA;AAAA,CAAA,EAAA,oBAAA,CAAA;AAgBZ,MAAA,kCAAwC,sBAAA,OAAA,CAAc;IAOpD,YACE,OAAA,CACA;QACA,UAAU,WAAW,CAAA;QACrB,QAAQ,MAAA,GAAS,QAAQ,MAAA,IAAU;YAAE,KAAK;YAAI,MAAM;YAAI,SAAS;QAAA;QAEjE,KAAA,CAAM,QAAQ,MAAA,EAAQ;YAAE,OAAO,QAAQ,KAAA;QAAA;QAZzC,cAAA,IAAA,EAAA;QACA,cAAA,IAAA,EAAA;QACA,cAAA,IAAA,EAAA;QACA,cAAA,IAAA,EAAA;QACA,cAAA,IAAA,EAAA;QASE,IAAA,CAAK,IAAA,GAAO;QAEZ,IAAA,CAAK,OAAA,GACH,QAAQ,OAAA,IAAW,QAAQ,MAAA,CAAO,OAAA,IAAW;QAC/C,IAAA,CAAK,MAAA,GAAS,QAAQ,MAAA;QACtB,IAAA,CAAK,KAAA,GAAQ,QAAQ,KAAA;QACrB,IAAA,CAAK,KAAA,GAAQ,QAAQ,KAAA;QACrB,IAAA,CAAK,KAAA,GAAQ,QAAQ,KAAA;QACrB,IAAA,CAAK,OAAA,GAAU,QAAQ,OAAA;IAAA;AAAA;AAI3B,IAAO,uCAAQ","ignoreList":[0]}},
    {"offset": {"line": 1327, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1332, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/errors/database/timeout-error.ts"],"sourcesContent":["import { ErrorOptions } from '../base-error';\nimport DatabaseError, { DatabaseErrorParent } from '../database-error';\n\n/**\n * Thrown when a database query times out because of a deadlock\n */\nclass TimeoutError extends DatabaseError {\n  constructor(parent: DatabaseErrorParent, options: ErrorOptions = {}) {\n    super(parent, options);\n    this.name = 'SequelizeTimeoutError';\n  }\n}\n\nexport default TimeoutError;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,SAAA,IAAA;AAAA;AACA,IAAA,wBAAmD;AAKnD,MAAA,qBAA2B,sBAAA,OAAA,CAAc;IACvC,YAAY,MAAA,EAA6B,UAAwB,CAAA,CAAA,CAAI;QACnE,KAAA,CAAM,QAAQ;QACd,IAAA,CAAK,IAAA,GAAO;IAAA;AAAA;AAIhB,IAAO,wBAAQ","ignoreList":[0]}},
    {"offset": {"line": 1377, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1382, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/errors/database/unknown-constraint-error.ts"],"sourcesContent":["import DatabaseError, { DatabaseErrorSubclassOptions } from '../database-error';\n\ninterface UnknownConstraintErrorOptions {\n  constraint?: string;\n  fields?: Record<string, string | number>;\n  table?: string;\n}\n\n/**\n * Thrown when constraint name is not found in the database\n */\nclass UnknownConstraintError extends DatabaseError implements UnknownConstraintErrorOptions {\n  constraint: string | undefined;\n  fields: Record<string, string | number> | undefined;\n  table: string | undefined;\n\n  constructor(\n    options: UnknownConstraintErrorOptions & DatabaseErrorSubclassOptions\n  ) {\n    options = options || {};\n    options.parent = options.parent || { sql: '', name: '', message: '' };\n\n    super(options.parent, { stack: options.stack });\n    this.name = 'SequelizeUnknownConstraintError';\n\n    this.message = options.message || 'The specified constraint does not exist';\n    this.constraint = options.constraint;\n    this.fields = options.fields;\n    this.table = options.table;\n  }\n}\n\nexport default UnknownConstraintError;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,SAAA,IAAA;AAAA;AAAA,IAAA,wBAA4D;AAW5D,MAAA,+BAAqC,sBAAA,OAAA,CAAuD;IAK1F,YACE,OAAA,CACA;QACA,UAAU,WAAW,CAAA;QACrB,QAAQ,MAAA,GAAS,QAAQ,MAAA,IAAU;YAAE,KAAK;YAAI,MAAM;YAAI,SAAS;QAAA;QAEjE,KAAA,CAAM,QAAQ,MAAA,EAAQ;YAAE,OAAO,QAAQ,KAAA;QAAA;QAVzC,cAAA,IAAA,EAAA;QACA,cAAA,IAAA,EAAA;QACA,cAAA,IAAA,EAAA;QASE,IAAA,CAAK,IAAA,GAAO;QAEZ,IAAA,CAAK,OAAA,GAAU,QAAQ,OAAA,IAAW;QAClC,IAAA,CAAK,UAAA,GAAa,QAAQ,UAAA;QAC1B,IAAA,CAAK,MAAA,GAAS,QAAQ,MAAA;QACtB,IAAA,CAAK,KAAA,GAAQ,QAAQ,KAAA;IAAA;AAAA;AAIzB,IAAO,mCAAQ","ignoreList":[0]}},
    {"offset": {"line": 1452, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1457, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/errors/validation/unique-constraint-error.ts"],"sourcesContent":["import { CommonErrorProperties, ErrorOptions } from '../base-error';\nimport ValidationError, { ValidationErrorItem } from '../validation-error';\n\ninterface UniqueConstraintErrorParent\n  extends Error,\n    Pick<CommonErrorProperties, 'sql'> {}\n\nexport interface UniqueConstraintErrorOptions extends ErrorOptions {\n  parent?: UniqueConstraintErrorParent;\n  original?: UniqueConstraintErrorParent;\n  errors?: ValidationErrorItem[];\n  fields?: Record<string, unknown>;\n  message?: string;\n}\n\n/**\n * Thrown when a unique constraint is violated in the database\n */\nclass UniqueConstraintError extends ValidationError implements CommonErrorProperties {\n  readonly parent: UniqueConstraintErrorParent;\n  readonly original: UniqueConstraintErrorParent;\n  readonly fields: Record<string, unknown>;\n  readonly sql: string;\n\n  constructor(options: UniqueConstraintErrorOptions) {\n    options = options ?? {};\n    options.parent = options.parent ?? { sql: '', name: '', message: '' };\n    options.message =\n      options.message || options.parent.message || 'Validation Error';\n    options.errors = options.errors ?? [];\n    super(options.message, options.errors, { stack: options.stack });\n\n    this.name = 'SequelizeUniqueConstraintError';\n    this.fields = options.fields ?? {};\n    this.parent = options.parent;\n    this.original = options.parent;\n    this.sql = options.parent.sql;\n  }\n}\n\nexport default UniqueConstraintError;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,SAAA,IAAA;AAAA;AACA,IAAA,0BAAqD;AAiBrD,MAAA,8BAAoC,wBAAA,OAAA,CAAiD;IAMnF,YAAY,OAAA,CAAuC;QAxBrD,IAAA,IAAA,IAAA;QAyBI,UAAU,WAAA,OAAA,UAAW,CAAA;QACrB,QAAQ,MAAA,GAAS,CAAA,KAAA,QAAQ,MAAA,KAAR,OAAA,KAAkB;YAAE,KAAK;YAAI,MAAM;YAAI,SAAS;QAAA;QACjE,QAAQ,OAAA,GACN,QAAQ,OAAA,IAAW,QAAQ,MAAA,CAAO,OAAA,IAAW;QAC/C,QAAQ,MAAA,GAAS,CAAA,KAAA,QAAQ,MAAA,KAAR,OAAA,KAAkB,EAAA;QACnC,KAAA,CAAM,QAAQ,OAAA,EAAS,QAAQ,MAAA,EAAQ;YAAE,OAAO,QAAQ,KAAA;QAAA;QAXjD,cAAA,IAAA,EAAA;QACA,cAAA,IAAA,EAAA;QACA,cAAA,IAAA,EAAA;QACA,cAAA,IAAA,EAAA;QAUP,IAAA,CAAK,IAAA,GAAO;QACZ,IAAA,CAAK,MAAA,GAAS,CAAA,KAAA,QAAQ,MAAA,KAAR,OAAA,KAAkB,CAAA;QAChC,IAAA,CAAK,MAAA,GAAS,QAAQ,MAAA;QACtB,IAAA,CAAK,QAAA,GAAW,QAAQ,MAAA;QACxB,IAAA,CAAK,GAAA,GAAM,QAAQ,MAAA,CAAO,GAAA;IAAA;AAAA;AAI9B,IAAO,kCAAQ","ignoreList":[0]}},
    {"offset": {"line": 1531, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1536, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/mssql/async-queue.ts"],"sourcesContent":["import BaseError from '../../errors/base-error';\nimport ConnectionError from '../../errors/connection-error';\n\n/**\n * Thrown when a connection to a database is closed while an operation is in progress\n */\nexport class AsyncQueueError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'SequelizeAsyncQueueError';\n  }\n}\n\nclass AsyncQueue {\n  previous: Promise<unknown>;\n  closed: boolean;\n  rejectCurrent: (reason?: any) => void;\n\n  constructor() {\n    this.previous = Promise.resolve();\n    this.closed = false;\n    this.rejectCurrent = () => {\n      /** do nothing */\n    };\n  }\n\n  close() {\n    this.closed = true;\n    this.rejectCurrent(\n      new ConnectionError(\n        new AsyncQueueError(\n          'the connection was closed before this query could finish executing'\n        )\n      )\n    );\n  }\n\n  enqueue(asyncFunction: (...args: any[]) => Promise<unknown>) {\n    // This outer promise might seems superflous since down below we return asyncFunction().then(resolve, reject).\n    // However, this ensures that this.previous will never be a rejected promise so the queue will\n    // always keep going, while still communicating rejection from asyncFunction to the user.\n    return new Promise((resolve, reject) => {\n      this.previous = this.previous.then(() => {\n        this.rejectCurrent = reject;\n        if (this.closed) {\n          return reject(\n            new ConnectionError(\n              new AsyncQueueError(\n                'the connection was closed before this query could be executed'\n              )\n            )\n          );\n        }\n        return asyncFunction().then(resolve, reject);\n      });\n    });\n  }\n}\n\nexport default AsyncQueue;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,iBAAA,IAAA;IAAA,SAAA,IAAA;AAAA;AAAA,IAAA,oBAAsB;AACtB,IAAA,0BAA4B;AAKrB,MAAA,wBAA8B,kBAAA,OAAA,CAAU;IAC7C,YAAY,OAAA,CAAiB;QAC3B,KAAA,CAAM;QACN,IAAA,CAAK,IAAA,GAAO;IAAA;AAAA;AAIhB,MAAA,WAAiB;IAKf,aAAc;QAJd,cAAA,IAAA,EAAA;QACA,cAAA,IAAA,EAAA;QACA,cAAA,IAAA,EAAA;QAGE,IAAA,CAAK,QAAA,GAAW,QAAQ,OAAA;QACxB,IAAA,CAAK,MAAA,GAAS;QACd,IAAA,CAAK,aAAA,GAAgB,KAAM,CAAA;IAAA;IAK7B,QAAQ;QACN,IAAA,CAAK,MAAA,GAAS;QACd,IAAA,CAAK,aAAA,CACH,IAAI,wBAAA,OAAA,CACF,IAAI,gBACF;IAAA;IAMR,QAAQ,aAAA,EAAqD;QAI3D,OAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;YACtC,IAAA,CAAK,QAAA,GAAW,IAAA,CAAK,QAAA,CAAS,IAAA,CAAK,MAAM;gBACvC,IAAA,CAAK,aAAA,GAAgB;gBACrB,IAAI,IAAA,CAAK,MAAA,EAAQ;oBACf,OAAO,OACL,IAAI,wBAAA,OAAA,CACF,IAAI,gBACF;gBAAA;gBAKR,OAAO,gBAAgB,IAAA,CAAK,SAAS;YAAA;QAAA;IAAA;AAAA;AAM7C,IAAO,sBAAQ","ignoreList":[0]}},
    {"offset": {"line": 1618, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1623, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/errors/index.ts"],"sourcesContent":["export { default as BaseError } from './base-error';\n\nexport { default as DatabaseError } from './database-error';\nexport { default as AggregateError } from './aggregate-error';\nexport { default as AssociationError } from './association-error';\nexport { default as BulkRecordError } from './bulk-record-error';\nexport { default as ConnectionError } from './connection-error';\nexport { default as EagerLoadingError } from './eager-loading-error';\nexport { default as EmptyResultError } from './empty-result-error';\nexport { default as InstanceError } from './instance-error';\nexport { default as OptimisticLockError } from './optimistic-lock-error';\nexport { default as QueryError } from './query-error';\nexport { default as SequelizeScopeError } from './sequelize-scope-error';\nexport {\n  default as ValidationError,\n  ValidationErrorItem,\n  ValidationErrorItemOrigin,\n  ValidationErrorItemType\n} from './validation-error';\n\nexport { default as AccessDeniedError } from './connection/access-denied-error';\nexport { default as ConnectionAcquireTimeoutError } from './connection/connection-acquire-timeout-error';\nexport { default as ConnectionRefusedError } from './connection/connection-refused-error';\nexport { default as ConnectionTimedOutError } from './connection/connection-timed-out-error';\nexport { default as HostNotFoundError } from './connection/host-not-found-error';\nexport { default as HostNotReachableError } from './connection/host-not-reachable-error';\nexport { default as InvalidConnectionError } from './connection/invalid-connection-error';\n\nexport { default as ExclusionConstraintError } from './database/exclusion-constraint-error';\nexport { default as ForeignKeyConstraintError } from './database/foreign-key-constraint-error';\nexport { default as TimeoutError } from './database/timeout-error';\nexport { default as UnknownConstraintError } from './database/unknown-constraint-error';\n\nexport { default as UniqueConstraintError } from './validation/unique-constraint-error';\n\nexport { AsyncQueueError } from '../dialects/mssql/async-queue';\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,mBAAA,IAAA,2BAAA,OAAA;IAAA,gBAAA,IAAA,uBAAA,OAAA;IAAA,kBAAA,IAAA,yBAAA,OAAA;IAAA,iBAAA,IAAA,mBAAA,eAAA;IAAA,WAAA,IAAA,kBAAA,OAAA;IAAA,iBAAA,IAAA,yBAAA,OAAA;IAAA,+BAAA,IAAA,wCAAA,OAAA;IAAA,iBAAA,IAAA,wBAAA,OAAA;IAAA,wBAAA,IAAA,gCAAA,OAAA;IAAA,yBAAA,IAAA,kCAAA,OAAA;IAAA,eAAA,IAAA,sBAAA,OAAA;IAAA,mBAAA,IAAA,2BAAA,OAAA;IAAA,kBAAA,IAAA,0BAAA,OAAA;IAAA,0BAAA,IAAA,kCAAA,OAAA;IAAA,2BAAA,IAAA,oCAAA,OAAA;IAAA,mBAAA,IAAA,4BAAA,OAAA;IAAA,uBAAA,IAAA,gCAAA,OAAA;IAAA,eAAA,IAAA,sBAAA,OAAA;IAAA,wBAAA,IAAA,gCAAA,OAAA;IAAA,qBAAA,IAAA,6BAAA,OAAA;IAAA,YAAA,IAAA,mBAAA,OAAA;IAAA,qBAAA,IAAA,6BAAA,OAAA;IAAA,cAAA,IAAA,qBAAA,OAAA;IAAA,uBAAA,IAAA,+BAAA,OAAA;IAAA,wBAAA,IAAA,gCAAA,OAAA;IAAA,iBAAA,IAAA,wBAAA,OAAA;IAAA,qBAAA,IAAA,wBAAA,mBAAA;IAAA,2BAAA,IAAA,wBAAA,yBAAA;IAAA,yBAAA,IAAA,wBAAA,uBAAA;AAAA;AAAA,IAAA,oBAAqC;AAErC,IAAA,wBAAyC;AACzC,IAAA,yBAA0C;AAC1C,IAAA,2BAA4C;AAC5C,IAAA,2BAA2C;AAC3C,IAAA,0BAA2C;AAC3C,IAAA,6BAA6C;AAC7C,IAAA,4BAA4C;AAC5C,IAAA,wBAAyC;AACzC,IAAA,+BAA+C;AAC/C,IAAA,qBAAsC;AACtC,IAAA,+BAA+C;AAC/C,IAAA,0BAKO;AAEP,IAAA,6BAA6C;AAC7C,IAAA,0CAAyD;AACzD,IAAA,kCAAkD;AAClD,IAAA,oCAAmD;AACnD,IAAA,8BAA6C;AAC7C,IAAA,kCAAiD;AACjD,IAAA,kCAAkD;AAElD,IAAA,oCAAoD;AACpD,IAAA,sCAAqD;AACrD,IAAA,uBAAwC;AACxC,IAAA,kCAAkD;AAElD,IAAA,iCAAiD;AAEjD,IAAA,qBAAgC","ignoreList":[0]}},
    {"offset": {"line": 1714, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1719, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/utils/validator-extras.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst validator = _.cloneDeep(require('validator'));\nconst moment = require('moment');\n\nconst extensions = {\n  extend(name, fn) {\n    this[name] = fn;\n\n    return this;\n  },\n  notEmpty(str) {\n    return !str.match(/^[\\s\\t\\r\\n]*$/);\n  },\n  len(str, min, max) {\n    return this.isLength(str, min, max);\n  },\n  isUrl(str) {\n    return this.isURL(str);\n  },\n  isIPv6(str) {\n    return this.isIP(str, 6);\n  },\n  isIPv4(str) {\n    return this.isIP(str, 4);\n  },\n  notIn(str, values) {\n    return !this.isIn(str, values);\n  },\n  regex(str, pattern, modifiers) {\n    str += '';\n    if (Object.prototype.toString.call(pattern).slice(8, -1) !== 'RegExp') {\n      pattern = new RegExp(pattern, modifiers);\n    }\n    return str.match(pattern);\n  },\n  notRegex(str, pattern, modifiers) {\n    return !this.regex(str, pattern, modifiers);\n  },\n  isDecimal(str) {\n    return str !== '' && !!str.match(/^(?:-?(?:[0-9]+))?(?:\\.[0-9]*)?(?:[eE][+-]?(?:[0-9]+))?$/);\n  },\n  min(str, val) {\n    const number = parseFloat(str);\n    return isNaN(number) || number >= val;\n  },\n  max(str, val) {\n    const number = parseFloat(str);\n    return isNaN(number) || number <= val;\n  },\n  not(str, pattern, modifiers) {\n    return this.notRegex(str, pattern, modifiers);\n  },\n  contains(str, elem) {\n    return !!elem && str.includes(elem);\n  },\n  notContains(str, elem) {\n    return !this.contains(str, elem);\n  },\n  is(str, pattern, modifiers) {\n    return this.regex(str, pattern, modifiers);\n  }\n};\nexports.extensions = extensions;\n\n// instance based validators\nvalidator.isImmutable = function(value, validatorArgs, field, modelInstance) {\n  return modelInstance.isNewRecord || modelInstance.dataValues[field] === modelInstance._previousDataValues[field];\n};\n\n// extra validators\nvalidator.notNull = function(val) {\n  return val !== null && val !== undefined;\n};\n\n// https://github.com/chriso/validator.js/blob/6.2.0/validator.js\n_.forEach(extensions, (extend, key) => {\n  validator[key] = extend;\n});\n\n// map isNull to isEmpty\n// https://github.com/chriso/validator.js/commit/e33d38a26ee2f9666b319adb67c7fc0d3dea7125\nvalidator.isNull = validator.isEmpty;\n\n// isDate removed in 7.0.0\n// https://github.com/chriso/validator.js/commit/095509fc707a4dc0e99f85131df1176ad6389fc9\nvalidator.isDate = function(dateString) {\n  // avoid http://momentjs.com/guides/#/warnings/js-date/\n  // by doing a preliminary check on `dateString`\n  const parsed = Date.parse(dateString);\n  if (isNaN(parsed)) {\n    // fail if we can't parse it\n    return false;\n  }\n  // otherwise convert to ISO 8601 as moment prefers\n  // http://momentjs.com/docs/#/parsing/string/\n  const date = new Date(parsed);\n  return moment(date.toISOString()).isValid();\n};\n\nexports.validator = validator;\n"],"names":[],"mappings":";AAEA,MAAM,IAAI,QAAQ;AAClB,MAAM,YAAY,EAAE,SAAA,CAAU,QAAQ;AACtC,MAAM,SAAS,QAAQ;AAEvB,MAAM,aAAa;IACjB,QAAO,IAAA,EAAM,EAAA,EAAI;QACf,IAAA,CAAK,KAAA,GAAQ;QAEb,OAAO,IAAA;IAAA;IAET,UAAS,GAAA,EAAK;QACZ,OAAO,CAAC,IAAI,KAAA,CAAM;IAAA;IAEpB,KAAI,GAAA,EAAK,GAAA,EAAK,GAAA,EAAK;QACjB,OAAO,IAAA,CAAK,QAAA,CAAS,KAAK,KAAK;IAAA;IAEjC,OAAM,GAAA,EAAK;QACT,OAAO,IAAA,CAAK,KAAA,CAAM;IAAA;IAEpB,QAAO,GAAA,EAAK;QACV,OAAO,IAAA,CAAK,IAAA,CAAK,KAAK;IAAA;IAExB,QAAO,GAAA,EAAK;QACV,OAAO,IAAA,CAAK,IAAA,CAAK,KAAK;IAAA;IAExB,OAAM,GAAA,EAAK,MAAA,EAAQ;QACjB,OAAO,CAAC,IAAA,CAAK,IAAA,CAAK,KAAK;IAAA;IAEzB,OAAM,GAAA,EAAK,OAAA,EAAS,SAAA,EAAW;QAC7B,OAAO;QACP,IAAI,OAAO,SAAA,CAAU,QAAA,CAAS,IAAA,CAAK,SAAS,KAAA,CAAM,GAAG,CAAA,OAAQ,UAAU;YACrE,UAAU,IAAI,OAAO,SAAS;QAAA;QAEhC,OAAO,IAAI,KAAA,CAAM;IAAA;IAEnB,UAAS,GAAA,EAAK,OAAA,EAAS,SAAA,EAAW;QAChC,OAAO,CAAC,IAAA,CAAK,KAAA,CAAM,KAAK,SAAS;IAAA;IAEnC,WAAU,GAAA,EAAK;QACb,OAAO,QAAQ,MAAM,CAAC,CAAC,IAAI,KAAA,CAAM;IAAA;IAEnC,KAAI,GAAA,EAAK,GAAA,EAAK;QACZ,MAAM,SAAS,WAAW;QAC1B,OAAO,MAAM,WAAW,UAAU;IAAA;IAEpC,KAAI,GAAA,EAAK,GAAA,EAAK;QACZ,MAAM,SAAS,WAAW;QAC1B,OAAO,MAAM,WAAW,UAAU;IAAA;IAEpC,KAAI,GAAA,EAAK,OAAA,EAAS,SAAA,EAAW;QAC3B,OAAO,IAAA,CAAK,QAAA,CAAS,KAAK,SAAS;IAAA;IAErC,UAAS,GAAA,EAAK,IAAA,EAAM;QAClB,OAAO,CAAC,CAAC,QAAQ,IAAI,QAAA,CAAS;IAAA;IAEhC,aAAY,GAAA,EAAK,IAAA,EAAM;QACrB,OAAO,CAAC,IAAA,CAAK,QAAA,CAAS,KAAK;IAAA;IAE7B,IAAG,GAAA,EAAK,OAAA,EAAS,SAAA,EAAW;QAC1B,OAAO,IAAA,CAAK,KAAA,CAAM,KAAK,SAAS;IAAA;AAAA;AAGpC,QAAQ,UAAA,GAAa;AAGrB,UAAU,WAAA,GAAc,SAAS,KAAA,EAAO,aAAA,EAAe,KAAA,EAAO,aAAA,EAAe;IAC3E,OAAO,cAAc,WAAA,IAAe,cAAc,UAAA,CAAW,MAAA,KAAW,cAAc,mBAAA,CAAoB,MAAA;AAAA;AAI5G,UAAU,OAAA,GAAU,SAAS,GAAA,EAAK;IAChC,OAAO,QAAQ,QAAQ,QAAQ,KAAA;AAAA;AAIjC,EAAE,OAAA,CAAQ,YAAY,CAAC,QAAQ,QAAQ;IACrC,SAAA,CAAU,IAAA,GAAO;AAAA;AAKnB,UAAU,MAAA,GAAS,UAAU,OAAA;AAI7B,UAAU,MAAA,GAAS,SAAS,UAAA,EAAY;IAGtC,MAAM,SAAS,KAAK,KAAA,CAAM;IAC1B,IAAI,MAAM,SAAS;QAEjB,OAAO;IAAA;IAIT,MAAM,OAAO,IAAI,KAAK;IACtB,OAAO,OAAO,KAAK,WAAA,IAAe,OAAA;AAAA;AAGpC,QAAQ,SAAA,GAAY","ignoreList":[0]}},
    {"offset": {"line": 1800, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1805, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/utils/logger.ts"],"sourcesContent":["/**\n * @file Sequelize module for debug and deprecation messages.\n * It require a `context` for which messages will be printed.\n *\n * @module logging\n * @access package\n */\nimport nodeDebug from 'debug';\nimport util from 'util';\n\n/**\n * The configuration for sequelize's logging interface.\n *\n * @access package\n */\nexport interface LoggerConfig {\n  /**\n   * The context which the logger should log in.\n   *\n   * @default 'sequelize'\n   */\n  context?: string;\n}\n\nexport class Logger {\n  protected config: LoggerConfig;\n\n  constructor({ context = 'sequelize', ...rest }: Partial<LoggerConfig> = {}) {\n    this.config = {\n      context,\n      ...rest\n    };\n  }\n\n  /**\n   * Logs a warning in the logger's context.\n   *\n   * @param message The message of the warning.\n   */\n  warn(message: string): void {\n    console.warn(`(${this.config.context}) Warning: ${message}`);\n  }\n\n  /**\n   * Uses node's util.inspect to stringify a value.\n   *\n   * @param value The value which should be inspected.\n   * @returns The string of the inspected value.\n   */\n  inspect(value: unknown): string {\n    return util.inspect(value, {\n      showHidden: false,\n      depth: 1\n    });\n  }\n\n  /**\n   * Gets a debugger for a context.\n   *\n   * @param name The name of the context.\n   * @returns A debugger interace which can be used to debug.\n   */\n  debugContext(name: string): nodeDebug.Debugger {\n    return nodeDebug(`${this.config.context}:${name}`);\n  }\n}\n\nexport const logger = new Logger();\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,QAAA,IAAA;IAAA,QAAA,IAAA;AAAA;AAOA,IAAA,eAAsB;AACtB,IAAA,cAAiB;AAgBV,MAAA,OAAa;IAGlB,YAAY,KAA4D,CAAA,CAAA,CAAI;QAFlE,cAAA,IAAA,EAAA;QAEE,IAAA,KAAA,IAAE,EAAA,UAAU,WAAA,EAAA,GAAZ,IAA4B,OAAA,UAA5B,IAA4B;YAA1B;SAAA;QACZ,IAAA,CAAK,MAAA,GAAS,eAAA;YACZ;QAAA,GACG;IAAA;IASP,KAAK,OAAA,EAAuB;QAC1B,QAAQ,IAAA,CAAK,CAAA,CAAA,EAAI,IAAA,CAAK,MAAA,CAAO,OAAA,CAAA,WAAA,EAAqB,SAAA;IAAA;IASpD,QAAQ,KAAA,EAAwB;QAC9B,OAAO,YAAA,OAAA,CAAK,OAAA,CAAQ,OAAO;YACzB,YAAY;YACZ,OAAO;QAAA;IAAA;IAUX,aAAa,IAAA,EAAkC;QAC7C,OAAO,CAAA,GAAA,aAAA,OAAA,EAAU,GAAG,IAAA,CAAK,MAAA,CAAO,OAAA,CAAA,CAAA,EAAW,MAAA;IAAA;AAAA;AAIxC,MAAM,SAAS,IAAI","ignoreList":[0]}},
    {"offset": {"line": 1896, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1901, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/utils/class-to-invokable.ts"],"sourcesContent":["/**\n * Utility type for a class which can be called in addion to being used as a constructor.\n */\ninterface Invokeable<Args extends Array<any>, Instance> {\n  (...args: Args): Instance;\n  new (...args: Args): Instance;\n}\n\n/**\n * Wraps a constructor to not need the `new` keyword using a proxy.\n * Only used for data types.\n *\n * @param {ProxyConstructor} Class The class instance to wrap as invocable.\n * @returns {Proxy} Wrapped class instance.\n * @private\n */\nexport function classToInvokable<Args extends Array<any>, Instance extends object>(\n  Class: new (...args: Args) => Instance\n): Invokeable<Args, Instance> {\n  return new Proxy<Invokeable<Args, Instance>>(Class as any, {\n    apply(_target, _thisArg, args: Args) {\n      return new Class(...args);\n    },\n    construct(_target, args: Args) {\n      return new Class(...args);\n    }\n  });\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,kBAAA,IAAA;AAAA;AAgBO,SAAA,iBACL,KAAA,EAC4B;IAC5B,OAAO,IAAI,MAAkC,OAAc;QACzD,OAAM,OAAA,EAAS,QAAA,EAAU,IAAA,EAAY;YACnC,OAAO,IAAI,MAAM,GAAG;QAAA;QAEtB,WAAU,OAAA,EAAS,IAAA,EAAY;YAC7B,OAAO,IAAI,MAAM,GAAG;QAAA;IAAA;AAAA","ignoreList":[0]}},
    {"offset": {"line": 1925, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1930, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/utils/join-sql-fragments.ts"],"sourcesContent":["import { SQLFragment, TruthySQLFragment } from '../generic/sql-fragment';\n\nfunction doesNotWantLeadingSpace(str: string): boolean {\n  return /^[;,)]/.test(str);\n}\nfunction doesNotWantTrailingSpace(str: string): boolean {\n  return /\\($/.test(str);\n}\n\n/**\n * Joins an array of strings with a single space between them,\n * except for:\n *\n * - Strings starting with ';', ',' and ')', which do not get a leading space.\n * - Strings ending with '(', which do not get a trailing space.\n *\n * @param {string[]} parts\n * @returns {string}\n * @private\n */\nfunction singleSpaceJoinHelper(parts: string[]): string {\n  return parts.reduce(\n    ({ skipNextLeadingSpace, result }, part) => {\n      if (skipNextLeadingSpace || doesNotWantLeadingSpace(part)) {\n        result += part.trim();\n      } else {\n        result += ` ${part.trim()}`;\n      }\n      return {\n        skipNextLeadingSpace: doesNotWantTrailingSpace(part),\n        result\n      };\n    },\n    {\n      skipNextLeadingSpace: true,\n      result: ''\n    }\n  ).result;\n}\n\n/**\n * Joins an array with a single space, auto trimming when needed.\n *\n * Certain elements do not get leading/trailing spaces.\n *\n * @param {SQLFragment[]} array The array to be joined. Falsy values are skipped. If an\n * element is another array, this function will be called recursively on that array.\n * Otherwise, if a non-string, non-falsy value is present, a TypeError will be thrown.\n *\n * @returns {string} The joined string.\n *\n * @private\n */\nexport function joinSQLFragments(array: SQLFragment[]): string {\n  if (array.length === 0) return '';\n\n  const truthyArray: TruthySQLFragment[] = array.filter(\n    (x): x is string | SQLFragment[] => !!x\n  );\n  const flattenedArray: string[] = truthyArray.map(\n    (fragment: TruthySQLFragment) => {\n      if (Array.isArray(fragment)) {\n        return joinSQLFragments(fragment);\n      }\n\n      return fragment;\n    }\n  );\n\n  // Ensure strings\n  for (const fragment of flattenedArray) {\n    if (fragment && typeof fragment !== 'string') {\n      throw new JoinSQLFragmentsError(\n        flattenedArray,\n        fragment,\n        `Tried to construct a SQL string with a non-string, non-falsy fragment (${fragment}).`\n      );\n    }\n  }\n\n  // Trim fragments\n  const trimmedArray = flattenedArray.map(x => x.trim());\n\n  // Skip full-whitespace fragments (empty after the above trim)\n  const nonEmptyStringArray = trimmedArray.filter(x => x !== '');\n\n  return singleSpaceJoinHelper(nonEmptyStringArray);\n}\n\nexport class JoinSQLFragmentsError extends TypeError {\n  args: SQLFragment[];\n  fragment: any; // iirc this error is only used when we get an invalid fragment.\n\n  constructor(args: SQLFragment[], fragment: any, message: string) {\n    super(message);\n    \n    this.args = args;\n    this.fragment = fragment;\n    this.name = 'JoinSQLFragmentsError';\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,uBAAA,IAAA;IAAA,kBAAA,IAAA;AAAA;AAEA,SAAA,wBAAiC,GAAA,EAAsB;IACrD,OAAO,SAAS,IAAA,CAAK;AAAA;AAEvB,SAAA,yBAAkC,GAAA,EAAsB;IACtD,OAAO,MAAM,IAAA,CAAK;AAAA;AAcpB,SAAA,sBAA+B,KAAA,EAAyB;IACtD,OAAO,MAAM,MAAA,CACX,CAAC,EAAE,oBAAA,EAAsB,MAAA,EAAA,EAAU,SAAS;QAC1C,IAAI,wBAAwB,wBAAwB,OAAO;YACzD,UAAU,KAAK,IAAA;QAAA,OACV;YACL,UAAU,CAAA,CAAA,EAAI,KAAK,IAAA,IAAA;QAAA;QAErB,OAAO;YACL,sBAAsB,yBAAyB;YAC/C;QAAA;IAAA,GAGJ;QACE,sBAAsB;QACtB,QAAQ;IAAA,GAEV,MAAA;AAAA;AAgBG,SAAA,iBAA0B,KAAA,EAA8B;IAC7D,IAAI,MAAM,MAAA,KAAW,GAAG,OAAO;IAE/B,MAAM,cAAmC,MAAM,MAAA,CAC7C,CAAC,IAAmC,CAAC,CAAC;IAExC,MAAM,iBAA2B,YAAY,GAAA,CAC3C,CAAC,aAAgC;QAC/B,IAAI,MAAM,OAAA,CAAQ,WAAW;YAC3B,OAAO,iBAAiB;QAAA;QAG1B,OAAO;IAAA;IAKX,KAAA,MAAW,YAAY,eAAgB;QACrC,IAAI,YAAY,OAAO,aAAa,UAAU;YAC5C,MAAM,IAAI,sBACR,gBACA,UACA,CAAA,uEAAA,EAA0E,SAAA,EAAA,CAAA;QAAA;IAAA;IAMhF,MAAM,eAAe,eAAe,GAAA,CAAI,CAAA,IAAK,EAAE,IAAA;IAG/C,MAAM,sBAAsB,aAAa,MAAA,CAAO,CAAA,IAAK,MAAM;IAE3D,OAAO,sBAAsB;AAAA;AAGxB,MAAA,8BAAoC,UAAU;IAInD,YAAY,IAAA,EAAqB,QAAA,EAAe,OAAA,CAAiB;QAC/D,KAAA,CAAM;QAJR,cAAA,IAAA,EAAA;QACA,cAAA,IAAA,EAAA;QAKE,IAAA,CAAK,IAAA,GAAO;QACZ,IAAA,CAAK,QAAA,GAAW;QAChB,IAAA,CAAK,IAAA,GAAO;IAAA;AAAA","ignoreList":[0]}},
    {"offset": {"line": 2005, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2010, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/postgres/hstore.js"],"sourcesContent":["'use strict';\n\nconst hstore = require('pg-hstore')({ sanitize: true });\n\nfunction stringify(data) {\n  if (data === null) return null;\n  return hstore.stringify(data);\n}\nexports.stringify = stringify;\n\nfunction parse(value) {\n  if (value === null) return null;\n  return hstore.parse(value);\n}\nexports.parse = parse;\n"],"names":[],"mappings":";AAEA,MAAM,SAAS,QAAQ;;;;KAAa;IAAE,UAAU;AAAA;AAEhD,SAAA,UAAmB,IAAA,EAAM;IACvB,IAAI,SAAS,MAAM,OAAO;IAC1B,OAAO,OAAO,SAAA,CAAU;AAAA;AAE1B,QAAQ,SAAA,GAAY;AAEpB,SAAA,MAAe,KAAA,EAAO;IACpB,IAAI,UAAU,MAAM,OAAO;IAC3B,OAAO,OAAO,KAAA,CAAM;AAAA;AAEtB,QAAQ,KAAA,GAAQ","ignoreList":[0]}},
    {"offset": {"line": 2028, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2033, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/postgres/range.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\n\nfunction stringifyRangeBound(bound) {\n  if (bound === null) {\n    return '' ;\n  }\n  if (bound === Infinity || bound === -Infinity) {\n    return bound.toString().toLowerCase();\n  }\n  return JSON.stringify(bound);\n}\n\nfunction parseRangeBound(bound, parseType) {\n  if (!bound) {\n    return null;\n  }\n  if (bound === 'infinity') {\n    return Infinity;\n  }\n  if (bound === '-infinity') {\n    return -Infinity;\n  }\n  return parseType(bound);\n\n}\n\nfunction stringify(data) {\n  if (data === null) return null;\n\n  if (!Array.isArray(data)) throw new Error('range must be an array');\n  if (!data.length) return 'empty';\n  if (data.length !== 2) throw new Error('range array length must be 0 (empty) or 2 (lower and upper bounds)');\n\n  if (Object.prototype.hasOwnProperty.call(data, 'inclusive')) {\n    if (data.inclusive === false) data.inclusive = [false, false];\n    else if (!data.inclusive) data.inclusive = [true, false];\n    else if (data.inclusive === true) data.inclusive = [true, true];\n  } else {\n    data.inclusive = [true, false];\n  }\n\n  _.each(data, (value, index) => {\n    if (_.isObject(value)) {\n      if (Object.prototype.hasOwnProperty.call(value, 'inclusive')) data.inclusive[index] = !!value.inclusive;\n      if (Object.prototype.hasOwnProperty.call(value, 'value')) data[index] = value.value;\n    }\n  });\n\n  const lowerBound = stringifyRangeBound(data[0]);\n  const upperBound = stringifyRangeBound(data[1]);\n\n  return `${(data.inclusive[0] ? '[' : '(') + lowerBound},${upperBound}${data.inclusive[1] ? ']' : ')'}`;\n}\nexports.stringify = stringify;\n\nfunction parse(value, parser) {\n  if (value === null) return null;\n  if (value === 'empty') {\n    return [];\n  }\n\n  let result = value\n    .substring(1, value.length - 1)\n    .split(',', 2);\n\n  if (result.length !== 2) return value;\n\n  result = result.map((item, index) => {\n    return {\n      value: parseRangeBound(item, parser),\n      inclusive: index === 0 ? value[0] === '[' : value[value.length - 1] === ']'\n    };\n  });\n\n  return result;\n}\nexports.parse = parse;\n"],"names":[],"mappings":";AAEA,MAAM,IAAI,QAAQ;AAElB,SAAA,oBAA6B,KAAA,EAAO;IAClC,IAAI,UAAU,MAAM;QAClB,OAAO;IAAA;IAET,IAAI,UAAU,YAAY,UAAU,CAAA,UAAW;QAC7C,OAAO,MAAM,QAAA,GAAW,WAAA;IAAA;IAE1B,OAAO,KAAK,SAAA,CAAU;AAAA;AAGxB,SAAA,gBAAyB,KAAA,EAAO,SAAA,EAAW;IACzC,IAAI,CAAC,OAAO;QACV,OAAO;IAAA;IAET,IAAI,UAAU,YAAY;QACxB,OAAO;IAAA;IAET,IAAI,UAAU,aAAa;QACzB,OAAO,CAAA;IAAA;IAET,OAAO,UAAU;AAAA;AAInB,SAAA,UAAmB,IAAA,EAAM;IACvB,IAAI,SAAS,MAAM,OAAO;IAE1B,IAAI,CAAC,MAAM,OAAA,CAAQ,OAAO,MAAM,IAAI,MAAM;IAC1C,IAAI,CAAC,KAAK,MAAA,EAAQ,OAAO;IACzB,IAAI,KAAK,MAAA,KAAW,GAAG,MAAM,IAAI,MAAM;IAEvC,IAAI,OAAO,SAAA,CAAU,cAAA,CAAe,IAAA,CAAK,MAAM,cAAc;QAC3D,IAAI,KAAK,SAAA,KAAc,OAAO,KAAK,SAAA,GAAY;YAAC;YAAO;SAAA;aAAA,IAC9C,CAAC,KAAK,SAAA,EAAW,KAAK,SAAA,GAAY;YAAC;YAAM;SAAA;aAAA,IACzC,KAAK,SAAA,KAAc,MAAM,KAAK,SAAA,GAAY;YAAC;YAAM;SAAA;IAAA,OACrD;QACL,KAAK,SAAA,GAAY;YAAC;YAAM;SAAA;IAAA;IAG1B,EAAE,IAAA,CAAK,MAAM,CAAC,OAAO,UAAU;QAC7B,IAAI,EAAE,QAAA,CAAS,QAAQ;YACrB,IAAI,OAAO,SAAA,CAAU,cAAA,CAAe,IAAA,CAAK,OAAO,cAAc,KAAK,SAAA,CAAU,MAAA,GAAS,CAAC,CAAC,MAAM,SAAA;YAC9F,IAAI,OAAO,SAAA,CAAU,cAAA,CAAe,IAAA,CAAK,OAAO,UAAU,IAAA,CAAK,MAAA,GAAS,MAAM,KAAA;QAAA;IAAA;IAIlF,MAAM,aAAa,oBAAoB,IAAA,CAAK,EAAA;IAC5C,MAAM,aAAa,oBAAoB,IAAA,CAAK,EAAA;IAE5C,OAAO,GAAI,CAAA,KAAK,SAAA,CAAU,EAAA,GAAK,MAAM,GAAA,IAAO,WAAA,CAAA,EAAc,aAAa,KAAK,SAAA,CAAU,EAAA,GAAK,MAAM,KAAA;AAAA;AAEnG,QAAQ,SAAA,GAAY;AAEpB,SAAA,MAAe,KAAA,EAAO,MAAA,EAAQ;IAC5B,IAAI,UAAU,MAAM,OAAO;IAC3B,IAAI,UAAU,SAAS;QACrB,OAAO,EAAA;IAAA;IAGT,IAAI,SAAS,MACV,SAAA,CAAU,GAAG,MAAM,MAAA,GAAS,GAC5B,KAAA,CAAM,KAAK;IAEd,IAAI,OAAO,MAAA,KAAW,GAAG,OAAO;IAEhC,SAAS,OAAO,GAAA,CAAI,CAAC,MAAM,UAAU;QACnC,OAAO;YACL,OAAO,gBAAgB,MAAM;YAC7B,WAAW,UAAU,IAAI,KAAA,CAAM,EAAA,KAAO,MAAM,KAAA,CAAM,MAAM,MAAA,GAAS,EAAA,KAAO;QAAA;IAAA;IAI5E,OAAO;AAAA;AAET,QAAQ,KAAA,GAAQ","ignoreList":[0]}},
    {"offset": {"line": 2107, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2112, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/postgres/data-types.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst wkx = require('wkx');\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'http://www.postgresql.org/docs/9.4/static/datatype.html');\n\n  /**\n   * Removes unsupported Postgres options, i.e., LENGTH, UNSIGNED and ZEROFILL, for the integer data types.\n   *\n   * @param {object} dataType The base integer data type.\n   * @private\n   */\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._length || dataType.options.length || dataType._unsigned || dataType._zerofill) {\n      warn(`PostgresSQL does not support '${dataType.key}' with LENGTH, UNSIGNED or ZEROFILL. Plain '${dataType.key}' will be used instead.`);\n      dataType._length = undefined;\n      dataType.options.length = undefined;\n      dataType._unsigned = undefined;\n      dataType._zerofill = undefined;\n    }\n  }\n\n  /**\n   * types:\n   * {\n   *   oids: [oid],\n   *   array_oids: [oid]\n   * }\n   *\n   * @see oid here https://github.com/lib/pq/blob/master/oid/types.go\n   */\n\n  BaseTypes.UUID.types.postgres = ['uuid'];\n  BaseTypes.CIDR.types.postgres = ['cidr'];\n  BaseTypes.INET.types.postgres = ['inet'];\n  BaseTypes.MACADDR.types.postgres = ['macaddr'];\n  BaseTypes.TSVECTOR.types.postgres = ['tsvector'];\n  BaseTypes.JSON.types.postgres = ['json'];\n  BaseTypes.JSONB.types.postgres = ['jsonb'];\n  BaseTypes.TIME.types.postgres = ['time'];\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    _stringify(value, options) {\n      if (value === Infinity) {\n        return 'Infinity';\n      }\n      if (value === -Infinity) {\n        return '-Infinity';\n      }\n      return super._stringify(value, options);\n    }\n    _sanitize(value, options) {\n      if ((!options || options && !options.raw) && value !== Infinity && value !== -Infinity) {\n        if (typeof value === 'string') {\n          const lower = value.toLowerCase();\n          if (lower === 'infinity') {\n            return Infinity;\n          }\n          if (lower === '-infinity') {\n            return -Infinity;\n          }\n        }\n        return super._sanitize(value);\n      }\n      return value;\n    }\n    static parse(value) {\n      if (value === 'infinity') {\n        return Infinity;\n      }\n      if (value === '-infinity') {\n        return -Infinity;\n      }\n      return value;\n    }\n  }\n\n  BaseTypes.DATEONLY.types.postgres = ['date'];\n\n  class DECIMAL extends BaseTypes.DECIMAL {\n    static parse(value) {\n      return value;\n    }\n  }\n\n  // numeric\n  BaseTypes.DECIMAL.types.postgres = ['numeric'];\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (this._binary) {\n        return 'BYTEA';\n      }\n      return super.toSql();\n    }\n  }\n\n  BaseTypes.STRING.types.postgres = ['varchar'];\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      if (this._length) {\n        warn('PostgreSQL does not support TEXT with options. Plain `TEXT` will be used instead.');\n        this._length = undefined;\n      }\n      return 'TEXT';\n    }\n  }\n\n  BaseTypes.TEXT.types.postgres = ['text'];\n\n  class CITEXT extends BaseTypes.CITEXT {\n    static parse(value) {\n      return value;\n    }\n  }\n\n  BaseTypes.CITEXT.types.postgres = ['citext'];\n\n  class CHAR extends BaseTypes.CHAR {\n    toSql() {\n      if (this._binary) {\n        return 'BYTEA';\n      }\n      return super.toSql();\n    }\n  }\n\n  BaseTypes.CHAR.types.postgres = ['char', 'bpchar'];\n\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return 'BOOLEAN';\n    }\n    _sanitize(value) {\n      if (value !== null && value !== undefined) {\n        if (Buffer.isBuffer(value) && value.length === 1) {\n          // Bit fields are returned as buffers\n          value = value[0];\n        }\n        if (typeof value === 'string') {\n          // Only take action on valid boolean strings.\n          return ['true', 't'].includes(value) ? true : ['false', 'f'].includes(value) ? false : value;\n        }\n        if (typeof value === 'number') {\n          // Only take action on valid boolean integers.\n          return value === 1 ? true : value === 0 ? false : value;\n        }\n      }\n      return value;\n    }\n  }\n\n  BOOLEAN.parse = BOOLEAN.prototype._sanitize;\n\n  BaseTypes.BOOLEAN.types.postgres = ['bool'];\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return 'TIMESTAMP WITH TIME ZONE';\n    }\n    validate(value) {\n      if (value !== Infinity && value !== -Infinity) {\n        return super.validate(value);\n      }\n      return true;\n    }\n    _stringify(value, options) {\n      if (value === Infinity) {\n        return 'Infinity';\n      }\n      if (value === -Infinity) {\n        return '-Infinity';\n      }\n      return super._stringify(value, options);\n    }\n    _sanitize(value, options) {\n      if ((!options || options && !options.raw) && !(value instanceof Date) && !!value && value !== Infinity && value !== -Infinity) {\n        if (typeof value === 'string') {\n          const lower = value.toLowerCase();\n          if (lower === 'infinity') {\n            return Infinity;\n          }\n          if (lower === '-infinity') {\n            return -Infinity;\n          }\n        }\n        return new Date(value);\n      }\n      return value;\n    }\n  }\n\n  BaseTypes.DATE.types.postgres = ['timestamptz'];\n\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  // int2\n  BaseTypes.TINYINT.types.postgres = ['int2'];\n\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  // int2\n  BaseTypes.SMALLINT.types.postgres = ['int2'];\n\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  INTEGER.parse = function parse(value) {\n    return parseInt(value, 10);\n  };\n\n  // int4\n  BaseTypes.INTEGER.types.postgres = ['int4'];\n\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  // int8\n  BaseTypes.BIGINT.types.postgres = ['int8'];\n\n  class REAL extends BaseTypes.REAL {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  // float4\n  BaseTypes.REAL.types.postgres = ['float4'];\n\n  class DOUBLE extends BaseTypes.DOUBLE {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  // float8\n  BaseTypes.DOUBLE.types.postgres = ['float8'];\n\n  class FLOAT extends BaseTypes.FLOAT {\n    constructor(length, decimals) {\n      super(length, decimals);\n      // POSTGRES does only support lengths as parameter.\n      // Values between 1-24 result in REAL\n      // Values between 25-53 result in DOUBLE PRECISION\n      // If decimals are provided remove these and print a warning\n      if (this._decimals) {\n        warn('PostgreSQL does not support FLOAT with decimals. Plain `FLOAT` will be used instead.');\n        this._length = undefined;\n        this.options.length = undefined;\n        this._decimals = undefined;\n      }\n      if (this._unsigned) {\n        warn('PostgreSQL does not support FLOAT unsigned. `UNSIGNED` was removed.');\n        this._unsigned = undefined;\n      }\n      if (this._zerofill) {\n        warn('PostgreSQL does not support FLOAT zerofill. `ZEROFILL` was removed.');\n        this._zerofill = undefined;\n      }\n    }\n  }\n  delete FLOAT.parse; // Float has no separate type in PG\n\n  class BLOB extends BaseTypes.BLOB {\n    toSql() {\n      if (this._length) {\n        warn('PostgreSQL does not support BLOB (BYTEA) with options. Plain `BYTEA` will be used instead.');\n        this._length = undefined;\n      }\n      return 'BYTEA';\n    }\n    _hexify(hex) {\n      // bytea hex format http://www.postgresql.org/docs/current/static/datatype-binary.html\n      return `E'\\\\\\\\x${hex}'`;\n    }\n  }\n\n  BaseTypes.BLOB.types.postgres = ['bytea'];\n\n  class GEOMETRY extends BaseTypes.GEOMETRY {\n    toSql() {\n      let result = this.key;\n      if (this.type) {\n        result += `(${this.type}`;\n        if (this.srid) {\n          result += `,${this.srid}`;\n        }\n        result += ')';\n      }\n      return result;\n    }\n    static parse(value) {\n      const b = Buffer.from(value, 'hex');\n      return wkx.Geometry.parse(b).toGeoJSON({ shortCrs: true });\n    }\n    _stringify(value, options) {\n      return `ST_GeomFromGeoJSON(${options.escape(JSON.stringify(value))})`;\n    }\n    _bindParam(value, options) {\n      return `ST_GeomFromGeoJSON(${options.bindParam(value)})`;\n    }\n  }\n\n  BaseTypes.GEOMETRY.types.postgres = ['geometry'];\n\n\n  class GEOGRAPHY extends BaseTypes.GEOGRAPHY {\n    toSql() {\n      let result = 'GEOGRAPHY';\n      if (this.type) {\n        result += `(${this.type}`;\n        if (this.srid) {\n          result += `,${this.srid}`;\n        }\n        result += ')';\n      }\n      return result;\n    }\n    static parse(value) {\n      const b = Buffer.from(value, 'hex');\n      return wkx.Geometry.parse(b).toGeoJSON({ shortCrs: true });\n    }\n    _stringify(value, options) {\n      return `ST_GeomFromGeoJSON(${options.escape(JSON.stringify(value))})`;\n    }\n    bindParam(value, options) {\n      return `ST_GeomFromGeoJSON(${options.bindParam(value)})`;\n    }\n  }\n\n  BaseTypes.GEOGRAPHY.types.postgres = ['geography'];\n\n  let hstore;\n\n  class HSTORE extends BaseTypes.HSTORE {\n    constructor() {\n      super();\n      if (!hstore) {\n        // All datatype files are loaded at import - make sure we don't load the hstore parser before a hstore is instantiated\n        hstore = require('./hstore');\n      }\n    }\n    _value(value) {\n      if (!hstore) {\n        // All datatype files are loaded at import - make sure we don't load the hstore parser before a hstore is instantiated\n        hstore = require('./hstore');\n      }\n      return hstore.stringify(value);\n    }\n    _stringify(value) {\n      return `'${this._value(value)}'`;\n    }\n    _bindParam(value, options) {\n      return options.bindParam(this._value(value));\n    }\n    static parse(value) {\n      if (!hstore) {\n        // All datatype files are loaded at import - make sure we don't load the hstore parser before a hstore is instantiated\n        hstore = require('./hstore');\n      }\n      return hstore.parse(value);\n    }\n  }\n\n  HSTORE.prototype.escape = false;\n\n  BaseTypes.HSTORE.types.postgres = ['hstore'];\n\n  class RANGE extends BaseTypes.RANGE {\n    _value(values, options) {\n      if (!Array.isArray(values)) {\n        return this.options.subtype.stringify(values, options);\n      }\n      const valueInclusivity = [true, false];\n      const valuesStringified = values.map((value, index) => {\n        if (_.isObject(value) && Object.prototype.hasOwnProperty.call(value, 'value')) {\n          if (Object.prototype.hasOwnProperty.call(value, 'inclusive')) {\n            valueInclusivity[index] = value.inclusive;\n          }\n          value = value.value;\n        }\n        if (value === null || value === -Infinity || value === Infinity) {\n          // Pass through \"unbounded\" bounds unchanged\n          return value;\n        }\n        if (this.options.subtype.stringify) {\n          return this.options.subtype.stringify(value, options);\n        }\n        return options.escape(value);\n      });\n      // Array.map does not preserve extra array properties\n      valuesStringified.inclusive = valueInclusivity;\n      return range.stringify(valuesStringified);\n    }\n    _stringify(values, options) {\n      const value = this._value(values, options);\n      if (!Array.isArray(values)) {\n        return `'${value}'::${this.toCastType()}`;\n      }\n      return `'${value}'`;\n    }\n    _bindParam(values, options) {\n      const value = this._value(values, options);\n      if (!Array.isArray(values)) {\n        return `${options.bindParam(value)}::${this.toCastType()}`;\n      }\n      return options.bindParam(value);\n    }\n    toSql() {\n      return BaseTypes.RANGE.types.postgres.subtypes[this._subtype.toLowerCase()];\n    }\n    toCastType() {\n      return BaseTypes.RANGE.types.postgres.castTypes[this._subtype.toLowerCase()];\n    }\n    static parse(value, options = { parser: val => val }) {\n      return range.parse(value, options.parser);\n    }\n  }\n  const range = require('./range');\n\n  RANGE.prototype.escape = false;\n\n  BaseTypes.RANGE.types.postgres = {\n    subtypes: {\n      integer: 'int4range',\n      decimal: 'numrange',\n      date: 'tstzrange',\n      dateonly: 'daterange',\n      bigint: 'int8range'\n    },\n    castTypes: {\n      integer: 'int4',\n      decimal: 'numeric',\n      date: 'timestamptz',\n      dateonly: 'date',\n      bigint: 'int8'\n    }\n  };\n\n  // TODO: Why are base types being manipulated??\n  BaseTypes.ARRAY.prototype.escape = false;\n  BaseTypes.ARRAY.prototype._value = function _value(values, options) {\n    return values.map(value => {\n      if (options && options.bindParam && this.type && this.type._value) {\n        return this.type._value(value, options);\n      }\n      if (this.type && this.type.stringify) {\n        value = this.type.stringify(value, options);\n\n        if (this.type.escape === false) {\n          return value;\n        }\n      }\n      return options.escape(value);\n    }, this);\n  };\n  BaseTypes.ARRAY.prototype._stringify = function _stringify(values, options) {\n    let str = `ARRAY[${this._value(values, options).join(',')}]`;\n\n    if (this.type) {\n      const Utils = require('../../utils');\n      let castKey = this.toSql();\n\n      if (this.type instanceof BaseTypes.ENUM) {\n        const table = options.field.Model.getTableName();\n        const useSchema = table.schema !== undefined;\n        const schemaWithDelimiter = useSchema ? `${Utils.addTicks(table.schema, '\"')}${table.delimiter}` : '';\n\n        castKey = `${Utils.addTicks(\n          Utils.generateEnumName(useSchema ? table.tableName : table, options.field.field),\n          '\"'\n        ) }[]`;\n\n        str += `::${schemaWithDelimiter}${castKey}`;\n      } else {\n        str += `::${castKey}`;\n      }\n    }\n\n    return str;\n  };\n  BaseTypes.ARRAY.prototype._bindParam = function _bindParam(values, options) {\n    return options.bindParam(this._value(values, options));\n  };\n\n  class ENUM extends BaseTypes.ENUM {\n    static parse(value) {\n      return value;\n    }\n  }\n\n  BaseTypes.ENUM.types.postgres = [null];\n\n  return {\n    DECIMAL,\n    BLOB,\n    STRING,\n    CHAR,\n    TEXT,\n    CITEXT,\n    TINYINT,\n    SMALLINT,\n    INTEGER,\n    BIGINT,\n    BOOLEAN,\n    DATE,\n    DATEONLY,\n    REAL,\n    'DOUBLE PRECISION': DOUBLE,\n    FLOAT,\n    GEOMETRY,\n    GEOGRAPHY,\n    HSTORE,\n    RANGE,\n    ENUM\n  };\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2624, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2629, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/mysql/data-types.js"],"sourcesContent":["'use strict';\n\nconst wkx = require('wkx');\nconst _ = require('lodash');\nconst momentTz = require('moment-timezone');\nconst moment = require('moment');\n\nmodule.exports = BaseTypes => {\n  BaseTypes.ABSTRACT.prototype.dialectTypes = 'https://dev.mysql.com/doc/refman/5.7/en/data-types.html';\n\n  /**\n   * types: [buffer_type, ...]\n   *\n   * @see buffer_type here https://dev.mysql.com/doc/refman/5.7/en/c-api-prepared-statement-type-codes.html\n   * @see hex here https://github.com/sidorares/node-mysql2/blob/master/lib/constants/types.js\n   */\n\n  BaseTypes.DATE.types.mysql = ['DATETIME'];\n  BaseTypes.STRING.types.mysql = ['VAR_STRING'];\n  BaseTypes.CHAR.types.mysql = ['STRING'];\n  BaseTypes.TEXT.types.mysql = ['BLOB'];\n  BaseTypes.TINYINT.types.mysql = ['TINY'];\n  BaseTypes.SMALLINT.types.mysql = ['SHORT'];\n  BaseTypes.MEDIUMINT.types.mysql = ['INT24'];\n  BaseTypes.INTEGER.types.mysql = ['LONG'];\n  BaseTypes.BIGINT.types.mysql = ['LONGLONG'];\n  BaseTypes.FLOAT.types.mysql = ['FLOAT'];\n  BaseTypes.TIME.types.mysql = ['TIME'];\n  BaseTypes.DATEONLY.types.mysql = ['DATE'];\n  BaseTypes.BOOLEAN.types.mysql = ['TINY'];\n  BaseTypes.BLOB.types.mysql = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.mysql = ['NEWDECIMAL'];\n  BaseTypes.UUID.types.mysql = false;\n  BaseTypes.ENUM.types.mysql = false;\n  BaseTypes.REAL.types.mysql = ['DOUBLE'];\n  BaseTypes.DOUBLE.types.mysql = ['DOUBLE'];\n  BaseTypes.GEOMETRY.types.mysql = ['GEOMETRY'];\n  BaseTypes.JSON.types.mysql = ['JSON'];\n\n  class DECIMAL extends BaseTypes.DECIMAL {\n    toSql() {\n      let definition = super.toSql();\n      if (this._unsigned) {\n        definition += ' UNSIGNED';\n      }\n      if (this._zerofill) {\n        definition += ' ZEROFILL';\n      }\n      return definition;\n    }\n  }\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return this._length ? `DATETIME(${this._length})` : 'DATETIME';\n    }\n    _stringify(date, options) {\n      if (!moment.isMoment(date)) {\n        date = this._applyTimezone(date, options);\n      }\n      // Fractional DATETIMEs only supported on MySQL 5.6.4+\n      if (this._length) {\n        return date.format('YYYY-MM-DD HH:mm:ss.SSS');\n      }\n      return date.format('YYYY-MM-DD HH:mm:ss');\n    }\n    static parse(value, options) {\n      value = value.string();\n      if (value === null) {\n        return value;\n      }\n      if (momentTz.tz.zone(options.timezone)) {\n        value = momentTz.tz(value, options.timezone).toDate();\n      }\n      else {\n        value = new Date(`${value} ${options.timezone}`);\n      }\n      return value;\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return value.string();\n    }\n  }\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return 'CHAR(36) BINARY';\n    }\n  }\n\n  const SUPPORTED_GEOMETRY_TYPES = ['POINT', 'LINESTRING', 'POLYGON'];\n\n  class GEOMETRY extends BaseTypes.GEOMETRY {\n    constructor(type, srid) {\n      super(type, srid);\n      if (_.isEmpty(this.type)) {\n        this.sqlType = this.key;\n        return;\n      }\n      if (SUPPORTED_GEOMETRY_TYPES.includes(this.type)) {\n        this.sqlType = this.type;\n        return;\n      }\n      throw new Error(`Supported geometry types are: ${SUPPORTED_GEOMETRY_TYPES.join(', ')}`);\n    }\n    static parse(value) {\n      value = value.buffer();\n      // Empty buffer, MySQL doesn't support POINT EMPTY\n      // check, https://dev.mysql.com/worklog/task/?id=2381\n      if (!value || value.length === 0) {\n        return null;\n      }\n      // For some reason, discard the first 4 bytes\n      value = value.slice(4);\n      return wkx.Geometry.parse(value).toGeoJSON({ shortCrs: true });\n    }\n    toSql() {\n      return this.sqlType;\n    }\n  }\n\n  class ENUM extends BaseTypes.ENUM {\n    toSql(options) {\n      return `ENUM(${this.values.map(value => options.escape(value)).join(', ')})`;\n    }\n  }\n\n  class JSONTYPE extends BaseTypes.JSON {\n    _stringify(value, options) {\n      return options.operation === 'where' && typeof value === 'string' ? value : JSON.stringify(value);\n    }\n  }\n\n  return {\n    ENUM,\n    DATE,\n    DATEONLY,\n    UUID,\n    GEOMETRY,\n    DECIMAL,\n    JSON: JSONTYPE\n  };\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2797, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2802, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/mariadb/data-types.js"],"sourcesContent":["'use strict';\n\nconst wkx = require('wkx');\nconst _ = require('lodash');\nconst momentTz = require('moment-timezone');\nconst moment = require('moment');\n\nmodule.exports = BaseTypes => {\n  BaseTypes.ABSTRACT.prototype.dialectTypes = 'https://mariadb.com/kb/en/library/resultset/#field-types';\n\n  /**\n   * types: [buffer_type, ...]\n   *\n   * @see documentation : https://mariadb.com/kb/en/library/resultset/#field-types\n   * @see connector implementation : https://github.com/MariaDB/mariadb-connector-nodejs/blob/master/lib/const/field-type.js\n   */\n\n  BaseTypes.DATE.types.mariadb = ['DATETIME'];\n  BaseTypes.STRING.types.mariadb = ['VAR_STRING'];\n  BaseTypes.CHAR.types.mariadb = ['STRING'];\n  BaseTypes.TEXT.types.mariadb = ['BLOB'];\n  BaseTypes.TINYINT.types.mariadb = ['TINY'];\n  BaseTypes.SMALLINT.types.mariadb = ['SHORT'];\n  BaseTypes.MEDIUMINT.types.mariadb = ['INT24'];\n  BaseTypes.INTEGER.types.mariadb = ['LONG'];\n  BaseTypes.BIGINT.types.mariadb = ['LONGLONG'];\n  BaseTypes.FLOAT.types.mariadb = ['FLOAT'];\n  BaseTypes.TIME.types.mariadb = ['TIME'];\n  BaseTypes.DATEONLY.types.mariadb = ['DATE'];\n  BaseTypes.BOOLEAN.types.mariadb = ['TINY'];\n  BaseTypes.BLOB.types.mariadb = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.mariadb = ['NEWDECIMAL'];\n  BaseTypes.UUID.types.mariadb = false;\n  BaseTypes.ENUM.types.mariadb = false;\n  BaseTypes.REAL.types.mariadb = ['DOUBLE'];\n  BaseTypes.DOUBLE.types.mariadb = ['DOUBLE'];\n  BaseTypes.GEOMETRY.types.mariadb = ['GEOMETRY'];\n  BaseTypes.JSON.types.mariadb = ['JSON'];\n\n  class DECIMAL extends BaseTypes.DECIMAL {\n    toSql() {\n      let definition = super.toSql();\n      if (this._unsigned) {\n        definition += ' UNSIGNED';\n      }\n      if (this._zerofill) {\n        definition += ' ZEROFILL';\n      }\n      return definition;\n    }\n  }\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return this._length ? `DATETIME(${this._length})` : 'DATETIME';\n    }\n    _stringify(date, options) {\n      if (!moment.isMoment(date)) {\n        date = this._applyTimezone(date, options);\n      }\n\n      return date.format('YYYY-MM-DD HH:mm:ss.SSS');\n    }\n    static parse(value, options) {\n      value = value.string();\n      if (value === null) {\n        return value;\n      }\n      if (momentTz.tz.zone(options.timezone)) {\n        value = momentTz.tz(value, options.timezone).toDate();\n      }\n      else {\n        value = new Date(`${value} ${options.timezone}`);\n      }\n      return value;\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return value.string();\n    }\n  }\n\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return 'CHAR(36) BINARY';\n    }\n  }\n\n  class GEOMETRY extends BaseTypes.GEOMETRY {\n    constructor(type, srid) {\n      super(type, srid);\n      if (_.isEmpty(this.type)) {\n        this.sqlType = this.key;\n      }\n      else {\n        this.sqlType = this.type;\n      }\n    }\n    static parse(value) {\n      value = value.buffer();\n      // Empty buffer, MySQL doesn't support POINT EMPTY\n      // check, https://dev.mysql.com/worklog/task/?id=2381\n      if (!value || value.length === 0) {\n        return null;\n      }\n      // For some reason, discard the first 4 bytes\n      value = value.slice(4);\n      return wkx.Geometry.parse(value).toGeoJSON({ shortCrs: true });\n    }\n    toSql() {\n      return this.sqlType;\n    }\n  }\n\n  class ENUM extends BaseTypes.ENUM {\n    toSql(options) {\n      return `ENUM(${this.values.map(value => options.escape(value)).join(', ')})`;\n    }\n  }\n\n  class JSONTYPE extends BaseTypes.JSON {\n    _stringify(value, options) {\n      return options.operation === 'where' && typeof value === 'string' ? value\n        : JSON.stringify(value);\n    }\n  }\n\n  return {\n    ENUM,\n    DATE,\n    DATEONLY,\n    UUID,\n    GEOMETRY,\n    DECIMAL,\n    JSON: JSONTYPE\n  };\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2958, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2963, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/sqlite/data-types.js"],"sourcesContent":["'use strict';\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'https://www.sqlite.org/datatype3.html');\n\n  /**\n   * Removes unsupported SQLite options, i.e., UNSIGNED and ZEROFILL, for the integer data types.\n   *\n   * @param {object} dataType The base integer data type.\n   * @private\n   */\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._zerofill || dataType._unsigned) {\n      warn(`SQLite does not support '${dataType.key}' with UNSIGNED or ZEROFILL. Plain '${dataType.key}' will be used instead.`);\n      dataType._unsigned = undefined;\n      dataType._zerofill = undefined;\n    }\n  }\n\n  /**\n   * @see https://sqlite.org/datatype3.html\n   */\n\n  BaseTypes.DATE.types.sqlite = ['DATETIME'];\n  BaseTypes.STRING.types.sqlite = ['VARCHAR', 'VARCHAR BINARY'];\n  BaseTypes.CHAR.types.sqlite = ['CHAR', 'CHAR BINARY'];\n  BaseTypes.TEXT.types.sqlite = ['TEXT'];\n  BaseTypes.TINYINT.types.sqlite = ['TINYINT'];\n  BaseTypes.SMALLINT.types.sqlite = ['SMALLINT'];\n  BaseTypes.MEDIUMINT.types.sqlite = ['MEDIUMINT'];\n  BaseTypes.INTEGER.types.sqlite = ['INTEGER'];\n  BaseTypes.BIGINT.types.sqlite = ['BIGINT'];\n  BaseTypes.FLOAT.types.sqlite = ['FLOAT'];\n  BaseTypes.TIME.types.sqlite = ['TIME'];\n  BaseTypes.DATEONLY.types.sqlite = ['DATE'];\n  BaseTypes.BOOLEAN.types.sqlite = ['TINYINT'];\n  BaseTypes.BLOB.types.sqlite = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.sqlite = ['DECIMAL'];\n  BaseTypes.UUID.types.sqlite = ['UUID'];\n  BaseTypes.ENUM.types.sqlite = false;\n  BaseTypes.REAL.types.sqlite = ['REAL'];\n  BaseTypes.DOUBLE.types.sqlite = ['DOUBLE PRECISION'];\n  BaseTypes.GEOMETRY.types.sqlite = false;\n  BaseTypes.JSON.types.sqlite = ['JSON', 'JSONB'];\n\n  class JSONTYPE extends BaseTypes.JSON {\n    static parse(data) {\n      return JSON.parse(data);\n    }\n  }\n\n  class DATE extends BaseTypes.DATE {\n    static parse(date, options) {\n      if (!date.includes('+')) {\n        // For backwards compat. Dates inserted by sequelize < 2.0dev12 will not have a timestamp set\n        return new Date(date + options.timezone);\n      }\n      return new Date(date); // We already have a timezone stored in the string\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(date) {\n      return date;\n    }\n  }\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (this._binary) {\n        return `VARCHAR BINARY(${this._length})`;\n      }\n      return super.toSql(this);\n    }\n  }\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      if (this._length) {\n        warn('SQLite does not support TEXT with options. Plain `TEXT` will be used instead.');\n        this._length = undefined;\n      }\n      return 'TEXT';\n    }\n  }\n\n  class CITEXT extends BaseTypes.CITEXT {\n    toSql() {\n      return 'TEXT COLLATE NOCASE';\n    }\n  }\n\n  class CHAR extends BaseTypes.CHAR {\n    toSql() {\n      if (this._binary) {\n        return `CHAR BINARY(${this._length})`;\n      }\n      return super.toSql();\n    }\n  }\n\n  class NUMBER extends BaseTypes.NUMBER {\n    toSql() {\n      let result = this.key;\n      if (this._unsigned) {\n        result += ' UNSIGNED';\n      }\n      if (this._zerofill) {\n        result += ' ZEROFILL';\n      }\n      if (this._length) {\n        result += `(${this._length}`;\n        if (typeof this._decimals === 'number') {\n          result += `,${this._decimals}`;\n        }\n        result += ')';\n      }\n      return result;\n    }\n  }\n\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class MEDIUMINT extends BaseTypes.MEDIUMINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class FLOAT extends BaseTypes.FLOAT {\n  }\n\n  class DOUBLE extends BaseTypes.DOUBLE {\n  }\n\n  class REAL extends BaseTypes.REAL { }\n\n  function parseFloating(value) {\n    if (typeof value !== 'string') {\n      return value;\n    }\n    if (value === 'NaN') {\n      return NaN;\n    }\n    if (value === 'Infinity') {\n      return Infinity;\n    }\n    if (value === '-Infinity') {\n      return -Infinity;\n    }\n  }\n  for (const floating of [FLOAT, DOUBLE, REAL]) {\n    floating.parse = parseFloating;\n  }\n\n\n  for (const num of [FLOAT, DOUBLE, REAL, TINYINT, SMALLINT, MEDIUMINT, INTEGER, BIGINT]) {\n    num.prototype.toSql = NUMBER.prototype.toSql;\n  }\n\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return 'TEXT';\n    }\n  }\n\n  return {\n    DATE,\n    DATEONLY,\n    STRING,\n    CHAR,\n    NUMBER,\n    FLOAT,\n    REAL,\n    'DOUBLE PRECISION': DOUBLE,\n    TINYINT,\n    SMALLINT,\n    MEDIUMINT,\n    INTEGER,\n    BIGINT,\n    TEXT,\n    ENUM,\n    JSON: JSONTYPE,\n    CITEXT\n  };\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3198, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3203, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/mssql/data-types.js"],"sourcesContent":["'use strict';\n\nconst moment = require('moment');\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'https://msdn.microsoft.com/en-us/library/ms187752%28v=sql.110%29.aspx');\n\n  /**\n   * Removes unsupported MSSQL options, i.e., LENGTH, UNSIGNED and ZEROFILL, for the integer data types.\n   *\n   * @param {object} dataType The base integer data type.\n   * @private\n   */\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._length || dataType.options.length || dataType._unsigned || dataType._zerofill) {\n      warn(`MSSQL does not support '${dataType.key}' with options. Plain '${dataType.key}' will be used instead.`);\n      dataType._length = undefined;\n      dataType.options.length = undefined;\n      dataType._unsigned = undefined;\n      dataType._zerofill = undefined;\n    }\n  }\n\n  /**\n   * types: [hex, ...]\n   *\n   * @see hex here https://github.com/tediousjs/tedious/blob/master/src/data-type.ts\n   */\n\n  BaseTypes.DATE.types.mssql = [43];\n  BaseTypes.STRING.types.mssql = [231, 173];\n  BaseTypes.CHAR.types.mssql = [175];\n  BaseTypes.TEXT.types.mssql = false;\n  // https://msdn.microsoft.com/en-us/library/ms187745(v=sql.110).aspx\n  BaseTypes.TINYINT.types.mssql = [30];\n  BaseTypes.SMALLINT.types.mssql = [34];\n  BaseTypes.MEDIUMINT.types.mssql = false;\n  BaseTypes.INTEGER.types.mssql = [38];\n  BaseTypes.BIGINT.types.mssql = false;\n  BaseTypes.FLOAT.types.mssql = [109];\n  BaseTypes.TIME.types.mssql = [41];\n  BaseTypes.DATEONLY.types.mssql = [40];\n  BaseTypes.BOOLEAN.types.mssql = [104];\n  BaseTypes.BLOB.types.mssql = [165];\n  BaseTypes.DECIMAL.types.mssql = [106];\n  BaseTypes.UUID.types.mssql = false;\n  BaseTypes.ENUM.types.mssql = false;\n  BaseTypes.REAL.types.mssql = [109];\n  BaseTypes.DOUBLE.types.mssql = [109];\n  // BaseTypes.GEOMETRY.types.mssql = [240]; // not yet supported\n  BaseTypes.GEOMETRY.types.mssql = false;\n\n  class BLOB extends BaseTypes.BLOB {\n    toSql() {\n      if (this._length) {\n        if (this._length.toLowerCase() === 'tiny') { // tiny = 2^8\n          warn('MSSQL does not support BLOB with the `length` = `tiny` option. `VARBINARY(256)` will be used instead.');\n          return 'VARBINARY(256)';\n        }\n        warn('MSSQL does not support BLOB with the `length` option. `VARBINARY(MAX)` will be used instead.');\n      }\n      return 'VARBINARY(MAX)';\n    }\n    _hexify(hex) {\n      return `0x${hex}`;\n    }\n  }\n\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (!this._binary) {\n        return `NVARCHAR(${this._length})`;\n      }\n      return `BINARY(${this._length})`;\n    }\n    _stringify(value, options) {\n      if (this._binary) {\n        return BLOB.prototype._stringify(value);\n      }\n      return options.escape(value);\n    }\n    _bindParam(value, options) {\n      return options.bindParam(this._binary ? Buffer.from(value) : value);\n    }\n  }\n\n  STRING.prototype.escape = false;\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      // TEXT is deprecated in mssql and it would normally be saved as a non-unicode string.\n      // Using unicode is just future proof\n      if (this._length) {\n        if (this._length.toLowerCase() === 'tiny') { // tiny = 2^8\n          warn('MSSQL does not support TEXT with the `length` = `tiny` option. `NVARCHAR(256)` will be used instead.');\n          return 'NVARCHAR(256)';\n        }\n        warn('MSSQL does not support TEXT with the `length` option. `NVARCHAR(MAX)` will be used instead.');\n      }\n      return 'NVARCHAR(MAX)';\n    }\n  }\n\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return 'BIT';\n    }\n  }\n\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return 'CHAR(36)';\n    }\n  }\n\n  class NOW extends BaseTypes.NOW {\n    toSql() {\n      return 'GETDATE()';\n    }\n  }\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return 'DATETIMEOFFSET';\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return moment(value).format('YYYY-MM-DD');\n    }\n  }\n\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class REAL extends BaseTypes.REAL {\n    constructor(length, decimals) {\n      super(length, decimals);\n      // MSSQL does not support any options for real\n      if (this._length || this.options.length || this._unsigned || this._zerofill) {\n        warn('MSSQL does not support REAL with options. Plain `REAL` will be used instead.');\n        this._length = undefined;\n        this.options.length = undefined;\n        this._unsigned = undefined;\n        this._zerofill = undefined;\n      }\n    }\n  }\n  class FLOAT extends BaseTypes.FLOAT {\n    constructor(length, decimals) {\n      super(length, decimals);\n      // MSSQL does only support lengths as option.\n      // Values between 1-24 result in 7 digits precision (4 bytes storage size)\n      // Values between 25-53 result in 15 digits precision (8 bytes storage size)\n      // If decimals are provided remove these and print a warning\n      if (this._decimals) {\n        warn('MSSQL does not support Float with decimals. Plain `FLOAT` will be used instead.');\n        this._length = undefined;\n        this.options.length = undefined;\n      }\n      if (this._unsigned) {\n        warn('MSSQL does not support Float unsigned. `UNSIGNED` was removed.');\n        this._unsigned = undefined;\n      }\n      if (this._zerofill) {\n        warn('MSSQL does not support Float zerofill. `ZEROFILL` was removed.');\n        this._zerofill = undefined;\n      }\n    }\n  }\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return 'VARCHAR(255)';\n    }\n  }\n\n  return {\n    BLOB,\n    BOOLEAN,\n    ENUM,\n    STRING,\n    UUID,\n    DATE,\n    DATEONLY,\n    NOW,\n    TINYINT,\n    SMALLINT,\n    INTEGER,\n    BIGINT,\n    REAL,\n    FLOAT,\n    TEXT\n  };\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3413, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3418, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/db2/data-types.js"],"sourcesContent":["'use strict';\n\nconst momentTz = require('moment-timezone');\nconst moment = require('moment');\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined,\n    'https://www.ibm.com/support/knowledgecenter/SSEPGG_11.1.0/' +\n    'com.ibm.db2.luw.sql.ref.doc/doc/r0008478.html');\n\n  /**\n   * Removes unsupported Db2 options, i.e., LENGTH, UNSIGNED and ZEROFILL,\n   * for the integer data types.\n   *\n   * @param {object} dataType The base integer data type.\n   * @private\n   */\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._length || dataType.options.length || dataType._unsigned || dataType._zerofill) {\n      warn(`Db2 does not support '${dataType.key}' with options. Plain '${dataType.key}' will be used instead.`);\n      dataType._length = undefined;\n      dataType.options.length = undefined;\n      dataType._unsigned = undefined;\n      dataType._zerofill = undefined;\n    }\n  }\n\n  /**\n   * types: [hex, ...]\n   *\n   * @see Data types and table columns: https://www.ibm.com/support/knowledgecenter/en/SSEPGG_11.1.0/com.ibm.db2.luw.admin.dbobj.doc/doc/c0055357.html \n   */\n\n  BaseTypes.DATE.types.db2 = ['TIMESTAMP'];\n  BaseTypes.STRING.types.db2 = ['VARCHAR'];\n  BaseTypes.CHAR.types.db2 = ['CHAR'];\n  BaseTypes.TEXT.types.db2 = ['VARCHAR', 'CLOB'];\n  BaseTypes.TINYINT.types.db2 = ['SMALLINT'];\n  BaseTypes.SMALLINT.types.db2 = ['SMALLINT'];\n  BaseTypes.MEDIUMINT.types.db2 = ['INTEGER'];\n  BaseTypes.INTEGER.types.db2 = ['INTEGER'];\n  BaseTypes.BIGINT.types.db2 = ['BIGINT'];\n  BaseTypes.FLOAT.types.db2 = ['DOUBLE', 'REAL', 'FLOAT'];\n  BaseTypes.TIME.types.db2 = ['TIME'];\n  BaseTypes.DATEONLY.types.db2 = ['DATE'];\n  BaseTypes.BOOLEAN.types.db2 = ['BOOLEAN', 'BOOL', 'SMALLINT', 'BIT'];\n  BaseTypes.BLOB.types.db2 = ['BLOB'];\n  BaseTypes.DECIMAL.types.db2 = ['DECIMAL'];\n  BaseTypes.UUID.types.db2 = ['CHAR () FOR BIT DATA'];\n  BaseTypes.ENUM.types.db2 = ['VARCHAR'];\n  BaseTypes.REAL.types.db2 = ['REAL'];\n  BaseTypes.DOUBLE.types.db2 = ['DOUBLE'];\n  BaseTypes.GEOMETRY.types.db2 = false;\n\n  class BLOB extends BaseTypes.BLOB {\n    toSql() {\n      if (this._length) {\n        if (this._length.toLowerCase() === 'tiny') { // tiny = 255 bytes\n          return 'BLOB(255)';\n        }\n        if (this._length.toLowerCase() === 'medium') { // medium = 16M\n          return 'BLOB(16M)';\n        }\n        if (this._length.toLowerCase() === 'long') { // long = 2GB\n          return 'BLOB(2G)';\n        }\n        return `BLOB(${ this._length })`;\n      }\n      return 'BLOB'; // 1MB\n    }\n    escape(blob) {\n      return `BLOB('${ blob.toString().replace(/'/g, \"''\") }')`;\n    }\n    _stringify(value) {\n      if (Buffer.isBuffer(value)) {\n        return `BLOB('${ value.toString().replace(/'/g, \"''\") }')`;\n      }\n      if (Array.isArray(value)) {\n        value = Buffer.from(value);\n      } else {\n        value = Buffer.from(value.toString());\n      }\n      const hex = value.toString('hex');\n      return this._hexify(hex);\n    }\n    _hexify(hex) {\n      return `x'${ hex }'`;\n    }\n  }\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (!this._binary) {\n        if (this._length <= 4000) {\n          return `VARCHAR(${ this._length })`;\n        }\n        return `CLOB(${ this._length })`;\n      }\n      if (this._length < 255) {\n        return `CHAR(${ this._length }) FOR BIT DATA`;\n      }\n      if (this._length <= 4000) {\n        return `VARCHAR(${ this._length }) FOR BIT DATA`;\n      }\n      return `BLOB(${ this._length })`;\n    }\n    _stringify(value, options) {\n      if (this._binary) {\n        return BLOB.prototype._hexify(value.toString('hex'));\n      }\n      return options.escape(value);\n    }\n    _bindParam(value, options) {\n      return options.bindParam(this._binary ? Buffer.from(value) : value);\n    }\n  }\n  STRING.prototype.escape = false;\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      let len = 0;\n      if (this._length) {\n        switch (this._length.toLowerCase()) {\n          case 'tiny':\n            len = 256; // tiny = 2^8\n            break;\n          case 'medium':\n            len = 8192; // medium = 2^13 = 8k\n            break;\n          case 'long':\n            len = 65536; // long = 64k\n            break;\n        }\n        if ( isNaN(this._length) ) {\n          this._length = 32672;\n        }\n        if (len > 0 ) { this._length = len; }\n      } else { this._length = 32672; }\n      if ( this._length > 32672 )\n      {\n        len = `CLOB(${ this._length })`;\n      }\n      else\n      {\n        len = `VARCHAR(${ this._length })`;\n      }\n      warn(`Db2 does not support TEXT datatype. ${len} will be used instead.`);\n      return len;\n    }\n  }\n\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return 'BOOLEAN';\n    }\n    _sanitize(value) {\n      if (value !== null && value !== undefined) {\n        if (Buffer.isBuffer(value) && value.length === 1) {\n          // Bit fields are returned as buffers\n          value = value[0];\n        }\n\n        if (typeof value === 'string') {\n          // Only take action on valid boolean strings.\n          value = value === 'true' ? true : value === 'false' ? false : value;\n          value = value === '\\u0001' ? true : value === '\\u0000' ? false : value;\n\n        } else if (typeof value === 'number') {\n          // Only take action on valid boolean integers.\n          value = value === 1 ? true : value === 0 ? false : value;\n        }\n      }\n\n      return value;\n    }\n  }\n  BOOLEAN.parse = BOOLEAN.prototype._sanitize;\n\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return 'CHAR(36) FOR BIT DATA';\n    }\n  }\n\n  class NOW extends BaseTypes.NOW {\n    toSql() {\n      return 'CURRENT TIME';\n    }\n  }\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      if (this._length < 0) { this._length = 0; }\n      if (this._length > 6) { this._length = 6; }\n      return `TIMESTAMP${ this._length ? `(${ this._length })` : ''}`;\n    }\n    _stringify(date, options) {\n      if (!moment.isMoment(date)) {\n        date = this._applyTimezone(date, options);\n      }\n\n      if (this._length > 0) {\n        let msec = '.';\n        for ( let i = 0; i < this._length && i < 6; i++ ) {\n          msec += 'S';\n        }\n        return date.format(`YYYY-MM-DD HH:mm:ss${msec}`);\n      }\n      return date.format('YYYY-MM-DD HH:mm:ss');\n    }\n    static parse(value) {\n      if (typeof value !== 'string') {\n        value = value.string();\n      }\n      if (value === null) {\n        return value;\n      }\n      value = new Date(momentTz.utc(value));\n      return value;\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return momentTz(value).format('YYYY-MM-DD');\n    }\n  }\n\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class REAL extends BaseTypes.REAL {\n    constructor(length, decimals) {\n      super(length, decimals);\n      // Db2 does not support any options for real\n      if (this._length || this.options.length || this._unsigned || this._zerofill) {\n        warn('Db2 does not support REAL with options. Plain `REAL` will be used instead.');\n        this._length = undefined;\n        this.options.length = undefined;\n        this._unsigned = undefined;\n        this._zerofill = undefined;\n      }\n    }\n  }\n\n  class FLOAT extends BaseTypes.FLOAT {\n    constructor(length, decimals) {\n      super(length, decimals);\n      // Db2 does only support lengths as option.\n      // Values between 1-24 result in 7 digits precision (4 bytes storage size)\n      // Values between 25-53 result in 15 digits precision (8 bytes size)\n      // If decimals are provided remove these and print a warning\n      if (this._decimals) {\n        warn('Db2 does not support Float with decimals. Plain `FLOAT` will be used instead.');\n        this._length = undefined;\n        this.options.length = undefined;\n      }\n      if (this._unsigned) {\n        warn('Db2 does not support Float unsigned. `UNSIGNED` was removed.');\n        this._unsigned = undefined;\n      }\n      if (this._zerofill) {\n        warn('Db2 does not support Float zerofill. `ZEROFILL` was removed.');\n        this._zerofill = undefined;\n      }\n    }\n  }\n\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return 'VARCHAR(255)';\n    }\n  }\n\n  class DOUBLE extends BaseTypes.DOUBLE {\n    constructor(length, decimals) {\n      super(length, decimals);\n      // db2 does not support any parameters for double\n      if (this._length || this.options.length ||\n          this._unsigned || this._zerofill)\n      {\n        warn('db2 does not support DOUBLE with options. ' +\n             'Plain DOUBLE will be used instead.');\n        this._length = undefined;\n        this.options.length = undefined;\n        this._unsigned = undefined;\n        this._zerofill = undefined;\n      }\n    }\n    toSql() {\n      return 'DOUBLE';\n    }\n  }\n  DOUBLE.prototype.key = DOUBLE.key = 'DOUBLE';\n\n  return {\n    BLOB,\n    BOOLEAN,\n    ENUM,\n    STRING,\n    UUID,\n    DATE,\n    DATEONLY,\n    NOW,\n    TINYINT,\n    SMALLINT,\n    INTEGER,\n    DOUBLE,\n    'DOUBLE PRECISION': DOUBLE,\n    BIGINT,\n    REAL,\n    FLOAT,\n    TEXT\n  };\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3756, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3761, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/snowflake/data-types.js"],"sourcesContent":["'use strict';\n\nconst momentTz = require('moment-timezone');\nconst moment = require('moment');\n\nmodule.exports = BaseTypes => {\n  BaseTypes.ABSTRACT.prototype.dialectTypes = 'https://dev.snowflake.com/doc/refman/5.7/en/data-types.html';\n\n  /**\n   * types: [buffer_type, ...]\n   *\n   * @see buffer_type here https://dev.snowflake.com/doc/refman/5.7/en/c-api-prepared-statement-type-codes.html\n   * @see hex here https://github.com/sidorares/node-mysql2/blob/master/lib/constants/types.js\n   */\n\n  BaseTypes.DATE.types.snowflake = ['DATETIME'];\n  BaseTypes.STRING.types.snowflake = ['VAR_STRING'];\n  BaseTypes.CHAR.types.snowflake = ['STRING'];\n  BaseTypes.TEXT.types.snowflake = ['BLOB'];\n  BaseTypes.TINYINT.types.snowflake = ['TINY'];\n  BaseTypes.SMALLINT.types.snowflake = ['SHORT'];\n  BaseTypes.MEDIUMINT.types.snowflake = ['INT24'];\n  BaseTypes.INTEGER.types.snowflake = ['LONG'];\n  BaseTypes.BIGINT.types.snowflake = ['LONGLONG'];\n  BaseTypes.FLOAT.types.snowflake = ['FLOAT'];\n  BaseTypes.TIME.types.snowflake = ['TIME'];\n  BaseTypes.DATEONLY.types.snowflake = ['DATE'];\n  BaseTypes.BOOLEAN.types.snowflake = ['TINY'];\n  BaseTypes.BLOB.types.snowflake = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.snowflake = ['NEWDECIMAL'];\n  BaseTypes.UUID.types.snowflake = false;\n  // Enum is not supported\n  // https://docs.snowflake.com/en/sql-reference/data-types-unsupported.html\n  BaseTypes.ENUM.types.snowflake = false;\n  BaseTypes.REAL.types.snowflake = ['DOUBLE'];\n  BaseTypes.DOUBLE.types.snowflake = ['DOUBLE'];\n  BaseTypes.GEOMETRY.types.snowflake = ['GEOMETRY'];\n  BaseTypes.JSON.types.snowflake = ['JSON'];\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return 'TIMESTAMP';\n    }\n    _stringify(date, options) {\n      if (!moment.isMoment(date)) {\n        date = this._applyTimezone(date, options);\n      }\n      if (this._length) {\n        return date.format('YYYY-MM-DD HH:mm:ss.SSS');\n      }\n      return date.format('YYYY-MM-DD HH:mm:ss');\n    }\n    static parse(value, options) {\n      value = value.string();\n      if (value === null) {\n        return value;\n      }\n      if (momentTz.tz.zone(options.timezone)) {\n        value = momentTz.tz(value, options.timezone).toDate();\n      }\n      else {\n        value = new Date(`${value} ${options.timezone}`);\n      }\n      return value;\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return value.string();\n    }\n  }\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      // https://community.snowflake.com/s/question/0D50Z00009LH2fl/what-is-the-best-way-to-store-uuids\n      return 'VARCHAR(36)';\n    }\n  }\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      return 'TEXT';\n    }\n  }\n\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return 'BOOLEAN';\n    }\n  }\n\n  class JSONTYPE extends BaseTypes.JSON {\n    _stringify(value, options) {\n      return options.operation === 'where' && typeof value === 'string' ? value : JSON.stringify(value);\n    }\n  }\n\n  return {\n    TEXT,\n    DATE,\n    BOOLEAN,\n    DATEONLY,\n    UUID,\n    JSON: JSONTYPE\n  };\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3887, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3892, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/oracle/data-types.js"],"sourcesContent":["// Copyright (c) 2022, Oracle and/or its affiliates. All rights reserved\n\n'use strict';\n\nconst moment = require('moment');\nconst momentTz = require('moment-timezone');\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(\n    undefined,\n    'https://www.oracle.com/pls/topic/lookup?ctx=dblatest&id=GUID-D424D23B-0933-425F-BC69-9C0E6724693C'\n  );\n\n  BaseTypes.DATE.types.oracle = ['TIMESTAMP', 'TIMESTAMP WITH LOCAL TIME ZONE'];\n  BaseTypes.STRING.types.oracle = ['VARCHAR2', 'NVARCHAR2'];\n  BaseTypes.CHAR.types.oracle = ['CHAR', 'RAW'];\n  BaseTypes.TEXT.types.oracle = ['CLOB'];\n  BaseTypes.TINYINT.types.oracle = ['NUMBER'];\n  BaseTypes.SMALLINT.types.oracle = ['NUMBER'];\n  BaseTypes.MEDIUMINT.types.oracle = ['NUMBER'];\n  BaseTypes.INTEGER.types.oracle = ['INTEGER'];\n  BaseTypes.BIGINT.types.oracle = ['NUMBER'];\n  BaseTypes.FLOAT.types.oracle = ['BINARY_FLOAT'];\n  BaseTypes.DATEONLY.types.oracle = ['DATE'];\n  BaseTypes.BOOLEAN.types.oracle = ['CHAR(1)'];\n  BaseTypes.BLOB.types.oracle = ['BLOB'];\n  BaseTypes.DECIMAL.types.oracle = ['NUMBER'];\n  BaseTypes.UUID.types.oracle = ['VARCHAR2'];\n  BaseTypes.ENUM.types.oracle = ['VARCHAR2'];\n  BaseTypes.REAL.types.oracle = ['BINARY_DOUBLE'];\n  BaseTypes.DOUBLE.types.oracle = ['BINARY_DOUBLE'];\n  BaseTypes.JSON.types.oracle = ['BLOB'];\n  BaseTypes.GEOMETRY.types.oracle = false;\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (this.length > 4000 || this._binary && this._length > 2000) {\n        warn(\n          'Oracle supports length up to 32764 bytes or characters; Be sure that your administrator has extended the MAX_STRING_SIZE parameter. Check https://docs.oracle.com/pls/topic/lookup?ctx=dblatest&id=GUID-7B72E154-677A-4342-A1EA-C74C1EA928E6'\n        );\n      }\n      if (!this._binary) {\n        return `NVARCHAR2(${this._length})`;\n      }\n      return `RAW(${this._length})`;\n    }\n\n    _stringify(value, options) {\n      if (this._binary) {\n        // For Binary numbers we're converting a buffer to hex then\n        // sending it over the wire as a string,\n        // We pass it through escape function to remove un-necessary quotes\n        // this.format in insert/bulkinsert query calls stringify hence we need to convert binary buffer\n        // to hex string. Since this block is used by both bind (insert/bulkinsert) and\n        // non-bind (select query where clause) hence we need to\n        // have an operation that supports both\n        return options.escape(value.toString('hex'));\n      }\n      return options.escape(value);\n    }\n\n    _getBindDef(oracledb) {\n      if (this._binary) {\n        return { type: oracledb.DB_TYPE_RAW, maxSize: this._length };\n      }\n      return { type: oracledb.DB_TYPE_VARCHAR, maxSize: this._length };\n    }\n\n    _bindParam(value, options) {\n      return options.bindParam(value);\n    }\n  }\n\n  STRING.prototype.escape = false;\n\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return 'CHAR(1)';\n    }\n\n    _getBindDef(oracledb) {\n      return { type: oracledb.DB_TYPE_CHAR, maxSize: 1 };\n    }\n\n    _stringify(value) {\n      // If value is true we return '1'\n      // If value is false we return '0'\n      // Else we return it as is\n      // Converting number to char since in bindDef\n      // the type would be oracledb.DB_TYPE_CHAR\n      return value === true ? '1' : value === false ? '0' : value;\n    }\n\n    _sanitize(value) {\n      if (typeof value === 'string') {\n        // If value is a string we return true if among '1' and 'true'\n        // We return false if among '0' and 'false'\n        // Else return the value as is and let the DB raise error for invalid values\n        return value === '1' || value === 'true' ? true : value === '0' || value === 'false' ? false : value;\n      }\n      return super._sanitize(value);\n    }\n  }\n\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return 'VARCHAR2(36)';\n    }\n\n    _getBindDef(oracledb) {\n      return { type: oracledb.DB_TYPE_VARCHAR, maxSize: 36 };\n    }\n  }\n\n  class NOW extends BaseTypes.NOW {\n    toSql() {\n      return 'SYSDATE';\n    }\n\n    _stringify() {\n      return 'SYSDATE';\n    }\n  }\n\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return 'VARCHAR2(512)';\n    }\n\n    _getBindDef(oracledb) {\n      return { type: oracledb.DB_TYPE_VARCHAR, maxSize: 512 };\n    }\n  }\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      return 'CLOB';\n    }\n\n    _getBindDef(oracledb) {\n      return { type: oracledb.DB_TYPE_CLOB };\n    }\n  }\n\n  class CHAR extends BaseTypes.CHAR {\n    toSql() {\n      if (this._binary) {\n        warn('Oracle CHAR.BINARY datatype is not of Fixed Length.');\n        return `RAW(${this._length})`;\n      }\n      return super.toSql();\n    }\n\n    _getBindDef(oracledb) {\n      if (this._binary) {\n        return { type: oracledb.DB_TYPE_RAW, maxSize: this._length };\n      }\n      return { type: oracledb.DB_TYPE_CHAR, maxSize: this._length };\n    }\n\n    _bindParam(value, options) {\n      return options.bindParam(value);\n    }\n  }\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return 'TIMESTAMP WITH LOCAL TIME ZONE';\n    }\n\n    _getBindDef(oracledb) {\n      return { type: oracledb.DB_TYPE_TIMESTAMP_LTZ };\n    }\n\n    _stringify(date, options) {\n      const format = 'YYYY-MM-DD HH24:MI:SS.FFTZH:TZM';\n\n      date = this._applyTimezone(date, options);\n\n      const formatedDate = date.format('YYYY-MM-DD HH:mm:ss.SSS Z');\n\n      return `TO_TIMESTAMP_TZ('${formatedDate}','${format}')`;\n    }\n\n    _applyTimezone(date, options) {\n      if (options.timezone) {\n        if (momentTz.tz.zone(options.timezone)) {\n          date = momentTz(date).tz(options.timezone);\n        } else {\n          date = moment(date).utcOffset(options.timezone);\n        }\n      } else {\n        date = momentTz(date);\n      }\n      return date;\n    }\n\n    static parse(value, options) {\n      if (value === null) {\n        return value;\n      }\n      if (options && moment.tz.zone(options.timezone)) {\n        value = moment.tz(value.toString(), options.timezone).toDate();\n      }\n      return value;\n    }\n\n    /**\n     * avoids appending TO_TIMESTAMP_TZ in _stringify\n     *\n     * @override\n     */\n    _bindParam(value, options) {\n      return options.bindParam(value);\n    }\n  }\n\n  DATE.prototype.escape = false;\n\n  class DECIMAL extends BaseTypes.DECIMAL {\n    toSql() {\n      let result = '';\n      if (this._length) {\n        result += `(${this._length}`;\n        if (typeof this._decimals === 'number') {\n          result += `,${this._decimals}`;\n        }\n        result += ')';\n      }\n\n      if (!this._length && this._precision) {\n        result += `(${this._precision}`;\n        if (typeof this._scale === 'number') {\n          result += `,${this._scale}`;\n        }\n        result += ')';\n      }\n\n      return `NUMBER${result}`;\n    }\n\n    _getBindDef(oracledb) {\n      return { type: oracledb.DB_TYPE_NUMBER };\n    }\n  }\n\n  class TINYINT extends BaseTypes.TINYINT {\n    toSql() {\n      return 'NUMBER(3)';\n    }\n\n    _getBindDef(oracledb) {\n      return { type: oracledb.DB_TYPE_NUMBER };\n    }\n  }\n\n  class SMALLINT extends BaseTypes.SMALLINT {\n    toSql() {\n      if (this._length) {\n        return `NUMBER(${this._length},0)`;\n      }\n      return 'SMALLINT';\n    }\n\n    _getBindDef(oracledb) {\n      return { type: oracledb.DB_TYPE_NUMBER };\n    }\n  }\n\n  class MEDIUMINT extends BaseTypes.MEDIUMINT {\n    toSql() {\n      return 'NUMBER(8)';\n    }\n\n    _getBindDef(oracledb) {\n      return { type: oracledb.DB_TYPE_NUMBER };\n    }\n  }\n\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      if (!(this instanceof BIGINT)) return new BIGINT(length);\n      BaseTypes.BIGINT.apply(this, arguments);\n\n      // ORACLE does not support any options for bigint\n      if (this._length || this.options.length || this._unsigned || this._zerofill) {\n        warn('Oracle does not support BIGINT with options');\n        this._length = undefined;\n        this.options.length = undefined;\n        this._unsigned = undefined;\n        this._zerofill = undefined;\n      }\n    }\n\n    toSql() {\n      return 'NUMBER(19)';\n    }\n\n    _getBindDef(oracledb) {\n      return { type: oracledb.DB_TYPE_NUMBER };\n    }\n\n    _sanitize(value) {\n      if (typeof value === 'bigint' || typeof value === 'number') {\n        return value.toString();\n      }\n      return value;\n    }\n\n  }\n\n  class NUMBER extends BaseTypes.NUMBER {\n    _getBindDef(oracledb) {\n      return { type: oracledb.DB_TYPE_NUMBER };\n    }\n  }\n\n  class INTEGER extends BaseTypes.INTEGER {\n    toSql() {\n      if (this._length) {\n        return `NUMBER(${this._length},0)`;\n      }\n      return 'INTEGER';\n    }\n\n    _getBindDef(oracledb) {\n      return { type: oracledb.DB_TYPE_NUMBER };\n    }\n  }\n\n  class FLOAT extends BaseTypes.FLOAT {\n    toSql() {\n      return 'BINARY_FLOAT';\n    }\n\n    _getBindDef(oracledb) {\n      return { type: oracledb.DB_TYPE_BINARY_FLOAT };\n    }\n  }\n\n  class REAL extends BaseTypes.REAL {\n    toSql() {\n      return 'BINARY_DOUBLE';\n    }\n\n    // https://www.oracle.com/pls/topic/lookup?ctx=dblatest&id=GUID-0BA2E065-8006-426C-A3CB-1F6B0C8F283C\n    _stringify(value) {\n      if (value === Number.POSITIVE_INFINITY) {\n        return 'inf';\n      }\n      if (value === Number.NEGATIVE_INFINITY) {\n        return '-inf';\n      }\n      return value;\n    }\n\n    _getBindDef(oracledb) {\n      return { type: oracledb.DB_TYPE_BINARY_DOUBLE };\n    }\n  }\n\n  class BLOB extends BaseTypes.BLOB {\n    // Generic hexify returns X'${hex}' but Oracle expects '${hex}' for BLOB datatype\n    _hexify(hex) {\n      return `'${hex}'`;\n    }\n\n    toSql() {\n      return 'BLOB';\n    }\n\n    _getBindDef(oracledb) {\n      return { type: oracledb.DB_TYPE_BLOB };\n    }\n  }\n\n  class JSONTYPE extends BaseTypes.JSON {\n    toSql() {\n      return 'BLOB';\n    }\n\n    _getBindDef(oracledb) {\n      return { type: oracledb.DB_TYPE_BLOB };\n    }\n\n    _stringify(value, options) {\n      return options.operation === 'where' && typeof value === 'string' ? value : JSON.stringify(value);\n    }\n\n    _bindParam(value, options) {\n      return options.bindParam(Buffer.from(JSON.stringify(value)));\n    }\n  }\n\n  class DOUBLE extends BaseTypes.DOUBLE {\n    constructor(length, decimals) {\n      super(length, decimals);\n      if (!(this instanceof DOUBLE)) return new BaseTypes.DOUBLE(length, decimals);\n      BaseTypes.DOUBLE.apply(this, arguments);\n\n      if (this._length || this._unsigned || this._zerofill) {\n        warn('Oracle does not support DOUBLE with options.');\n        this._length = undefined;\n        this.options.length = undefined;\n        this._unsigned = undefined;\n        this._zerofill = undefined;\n      }\n\n      this.key = 'DOUBLE PRECISION';\n    }\n\n    _getBindDef(oracledb) {\n      return { type: oracledb.DB_TYPE_BINARY_DOUBLE };\n    }\n\n    toSql() {\n      return 'BINARY_DOUBLE';\n    }\n  }\n  class DATEONLY extends BaseTypes.DATEONLY {\n    parse(value) {\n      return moment(value).format('YYYY-MM-DD');\n    }\n\n    _sanitize(value) {\n      if (value) {\n        return moment(value).format('YYYY-MM-DD');\n      }\n      return value;\n    }\n\n    _stringify(date, options) {\n      // If date is not null only then we format the date\n      if (date) {\n        const format = 'YYYY/MM/DD';\n        return options.escape(`TO_DATE('${date}','${format}')`);\n      }\n      return options.escape(date);\n    }\n\n    _getBindDef(oracledb) {\n      return { type: oracledb.DB_TYPE_DATE };\n    }\n\n    /**\n     * avoids appending TO_DATE in _stringify\n     *\n     * @override\n     */\n    _bindParam(value, options) {\n      if (typeof value === 'string') {\n        return options.bindParam(new Date(value));\n      }\n      return options.bindParam(value);\n\n    }\n  }\n\n  DATEONLY.prototype.escape = false;\n\n  return {\n    BOOLEAN,\n    'DOUBLE PRECISION': DOUBLE,\n    DOUBLE,\n    STRING,\n    TINYINT,\n    SMALLINT,\n    MEDIUMINT,\n    BIGINT,\n    NUMBER,\n    INTEGER,\n    FLOAT,\n    UUID,\n    DATEONLY,\n    DATE,\n    NOW,\n    BLOB,\n    ENUM,\n    TEXT,\n    CHAR,\n    JSON: JSONTYPE,\n    REAL,\n    DECIMAL\n  };\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 4359, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4364, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/data-types.js"],"sourcesContent":["'use strict';\n\nconst util = require('util');\nconst _ = require('lodash');\nconst wkx = require('wkx');\nconst sequelizeErrors = require('./errors');\nconst Validator = require('./utils/validator-extras').validator;\nconst momentTz = require('moment-timezone');\nconst moment = require('moment');\nconst { logger } = require('./utils/logger');\nconst warnings = {};\nconst { classToInvokable } = require('./utils/class-to-invokable');\nconst { joinSQLFragments } = require('./utils/join-sql-fragments');\n\nclass ABSTRACT {\n  toString(options) {\n    return this.toSql(options);\n  }\n  toSql() {\n    return this.key;\n  }\n  stringify(value, options) {\n    if (this._stringify) {\n      return this._stringify(value, options);\n    }\n    return value;\n  }\n  bindParam(value, options) {\n    if (this._bindParam) {\n      return this._bindParam(value, options);\n    }\n    return options.bindParam(this.stringify(value, options));\n  }\n  static toString() {\n    return this.name;\n  }\n  static warn(link, text) {\n    if (!warnings[text]) {\n      warnings[text] = true;\n      logger.warn(`${text} \\n>> Check: ${link}`);\n    }\n  }\n  static extend(oldType) {\n    return new this(oldType.options);\n  }\n}\n\nABSTRACT.prototype.dialectTypes = '';\n\n/**\n * STRING A variable length string\n */\nclass STRING extends ABSTRACT {\n  /**\n   * @param {number} [length=255] length of string\n   * @param {boolean} [binary=false] Is this binary?\n   */\n  constructor(length, binary) {\n    super();\n    const options = typeof length === 'object' && length || { length, binary };\n    this.options = options;\n    this._binary = options.binary;\n    this._length = options.length || 255;\n  }\n  toSql() {\n    return joinSQLFragments([\n      `VARCHAR(${this._length})`,\n      this._binary && 'BINARY'\n    ]);\n  }\n  validate(value) {\n    if (Object.prototype.toString.call(value) !== '[object String]') {\n      if (this.options.binary && Buffer.isBuffer(value) || typeof value === 'number') {\n        return true;\n      }\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid string', value));\n    }\n    return true;\n  }\n\n  get BINARY() {\n    this._binary = true;\n    this.options.binary = true;\n    return this;\n  }\n\n  static get BINARY() {\n    return new this().BINARY;\n  }\n}\n\n/**\n * CHAR A fixed length string\n */\nclass CHAR extends STRING {\n  /**\n   * @param {number} [length=255] length of string\n   * @param {boolean} [binary=false] Is this binary?\n   */\n  constructor(length, binary) {\n    super(typeof length === 'object' && length || { length, binary });\n  }\n  toSql() {\n    return joinSQLFragments([\n      `CHAR(${this._length})`,\n      this._binary && 'BINARY'\n    ]);\n  }\n}\n\n/**\n * Unlimited length TEXT column\n */\nclass TEXT extends ABSTRACT {\n  /**\n   * @param {string} [length=''] could be tiny, medium, long.\n   */\n  constructor(length) {\n    super();\n    const options = typeof length === 'object' && length || { length };\n    this.options = options;\n    this._length = options.length || '';\n  }\n  toSql() {\n    switch (this._length.toLowerCase()) {\n      case 'tiny':\n        return 'TINYTEXT';\n      case 'medium':\n        return 'MEDIUMTEXT';\n      case 'long':\n        return 'LONGTEXT';\n      default:\n        return this.key;\n    }\n  }\n  validate(value) {\n    if (typeof value !== 'string') {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid string', value));\n    }\n    return true;\n  }\n}\n\n/**\n * An unlimited length case-insensitive text column.\n * Original case is preserved but acts case-insensitive when comparing values (such as when finding or unique constraints).\n * Only available in Postgres and SQLite.\n *\n */\nclass CITEXT extends ABSTRACT {\n  toSql() {\n    return 'CITEXT';\n  }\n  validate(value) {\n    if (typeof value !== 'string') {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid string', value));\n    }\n    return true;\n  }\n}\n\n/**\n * Base number type which is used to build other types\n */\nclass NUMBER extends ABSTRACT {\n  /**\n   * @param {object} options type options\n   * @param {string|number} [options.length] length of type, like `INT(4)`\n   * @param {boolean} [options.zerofill] Is zero filled?\n   * @param {boolean} [options.unsigned] Is unsigned?\n   * @param {string|number} [options.decimals] number of decimal points, used with length `FLOAT(5, 4)`\n   * @param {string|number} [options.precision] defines precision for decimal type\n   * @param {string|number} [options.scale] defines scale for decimal type\n   */\n  constructor(options = {}) {\n    super();\n    if (typeof options === 'number') {\n      options = {\n        length: options\n      };\n    }\n    this.options = options;\n    this._length = options.length;\n    this._zerofill = options.zerofill;\n    this._decimals = options.decimals;\n    this._precision = options.precision;\n    this._scale = options.scale;\n    this._unsigned = options.unsigned;\n  }\n  toSql() {\n    let result = this.key;\n    if (this._length) {\n      result += `(${this._length}`;\n      if (typeof this._decimals === 'number') {\n        result += `,${this._decimals}`;\n      }\n      result += ')';\n    }\n    if (this._unsigned) {\n      result += ' UNSIGNED';\n    }\n    if (this._zerofill) {\n      result += ' ZEROFILL';\n    }\n    return result;\n  }\n  validate(value) {\n    if (!Validator.isFloat(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format(`%j is not a valid ${this.key.toLowerCase()}`, value));\n    }\n    return true;\n  }\n  _stringify(number) {\n    if (typeof number === 'number' || typeof number === 'bigint' || typeof number === 'boolean' || number === null || number === undefined) {\n      return number;\n    }\n    if (typeof number.toString === 'function') {\n      return number.toString();\n    }\n    return number;\n  }\n\n  get UNSIGNED() {\n    this._unsigned = true;\n    this.options.unsigned = true;\n    return this;\n  }\n\n  get ZEROFILL() {\n    this._zerofill = true;\n    this.options.zerofill = true;\n    return this;\n  }\n\n  static get UNSIGNED() {\n    return new this().UNSIGNED;\n  }\n\n  static get ZEROFILL() {\n    return new this().ZEROFILL;\n  }\n}\n\n/**\n * A 32 bit integer\n */\nclass INTEGER extends NUMBER {\n  validate(value) {\n    if (!Validator.isInt(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format(`%j is not a valid ${this.key.toLowerCase()}`, value));\n    }\n    return true;\n  }\n}\n\n/**\n * A 8 bit integer\n */\nclass TINYINT extends INTEGER {\n}\n\n/**\n * A 16 bit integer\n */\nclass SMALLINT extends INTEGER {\n}\n\n/**\n * A 24 bit integer\n */\nclass MEDIUMINT extends INTEGER {\n}\n\n/**\n * A 64 bit integer\n */\nclass BIGINT extends INTEGER {\n}\n\n/**\n * Floating point number (4-byte precision).\n */\nclass FLOAT extends NUMBER {\n  /**\n   * @param {string|number} [length] length of type, like `FLOAT(4)`\n   * @param {string|number} [decimals] number of decimal points, used with length `FLOAT(5, 4)`\n   */\n  constructor(length, decimals) {\n    super(typeof length === 'object' && length || { length, decimals });\n  }\n  validate(value) {\n    if (!Validator.isFloat(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid float', value));\n    }\n    return true;\n  }\n}\n\n/**\n * Floating point number (4-byte precision).\n */\nclass REAL extends NUMBER {\n  /**\n   * @param {string|number} [length] length of type, like `REAL(4)`\n   * @param {string|number} [decimals] number of decimal points, used with length `REAL(5, 4)`\n   */\n  constructor(length, decimals) {\n    super(typeof length === 'object' && length || { length, decimals });\n  }\n}\n\n/**\n * Floating point number (8-byte precision).\n */\nclass DOUBLE extends NUMBER {\n  /**\n   * @param {string|number} [length] length of type, like `DOUBLE PRECISION(25)`\n   * @param {string|number} [decimals] number of decimal points, used with length `DOUBLE PRECISION(25, 10)`\n   */\n  constructor(length, decimals) {\n    super(typeof length === 'object' && length || { length, decimals });\n  }\n}\n\n/**\n * Decimal type, variable precision, take length as specified by user\n */\nclass DECIMAL extends NUMBER {\n  /**\n   * @param {string|number} [precision] defines precision\n   * @param {string|number} [scale] defines scale\n   */\n  constructor(precision, scale) {\n    super(typeof precision === 'object' && precision || { precision, scale });\n  }\n  toSql() {\n    if (this._precision || this._scale) {\n      return `DECIMAL(${[this._precision, this._scale].filter(_.identity).join(',')})`;\n    }\n    return 'DECIMAL';\n  }\n  validate(value) {\n    if (!Validator.isDecimal(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid decimal', value));\n    }\n    return true;\n  }\n}\n\n// TODO: Create intermediate class\nconst protoExtensions = {\n  escape: false,\n  _value(value) {\n    if (isNaN(value)) {\n      return 'NaN';\n    }\n    if (!isFinite(value)) {\n      const sign = value < 0 ? '-' : '';\n      return `${sign}Infinity`;\n    }\n\n    return value;\n  },\n  _stringify(value) {\n    return `'${this._value(value)}'`;\n  },\n  _bindParam(value, options) {\n    return options.bindParam(this._value(value));\n  }\n};\n\nfor (const floating of [FLOAT, DOUBLE, REAL]) {\n  Object.assign(floating.prototype, protoExtensions);\n}\n\n/**\n * A boolean / tinyint column, depending on dialect\n */\nclass BOOLEAN extends ABSTRACT {\n  toSql() {\n    return 'TINYINT(1)';\n  }\n  validate(value) {\n    if (!Validator.isBoolean(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid boolean', value));\n    }\n    return true;\n  }\n  _sanitize(value) {\n    if (value !== null && value !== undefined) {\n      if (Buffer.isBuffer(value) && value.length === 1) {\n        // Bit fields are returned as buffers\n        value = value[0];\n      }\n      const type = typeof value;\n      if (type === 'string') {\n        // Only take action on valid boolean strings.\n        return value === 'true' ? true : value === 'false' ? false : value;\n      }\n      if (type === 'number') {\n        // Only take action on valid boolean integers.\n        return value === 1 ? true : value === 0 ? false : value;\n      }\n    }\n    return value;\n  }\n}\n\n\nBOOLEAN.parse = BOOLEAN.prototype._sanitize;\n\n/**\n * A time column\n *\n */\nclass TIME extends ABSTRACT {\n  toSql() {\n    return 'TIME';\n  }\n}\n\n/**\n * Date column with timezone, default is UTC\n */\nclass DATE extends ABSTRACT {\n  /**\n   * @param {string|number} [length] precision to allow storing milliseconds\n   */\n  constructor(length) {\n    super();\n    const options = typeof length === 'object' && length || { length };\n    this.options = options;\n    this._length = options.length || '';\n  }\n  toSql() {\n    return 'DATETIME';\n  }\n  validate(value) {\n    if (!Validator.isDate(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid date', value));\n    }\n    return true;\n  }\n  _sanitize(value, options) {\n    if ((!options || options && !options.raw) && !(value instanceof Date) && !!value) {\n      return new Date(value);\n    }\n    return value;\n  }\n  _isChanged(value, originalValue) {\n    if (originalValue && !!value &&\n      (value === originalValue ||\n        value instanceof Date && originalValue instanceof Date && value.getTime() === originalValue.getTime())) {\n      return false;\n    }\n    // not changed when set to same empty value\n    if (!originalValue && !value && originalValue === value) {\n      return false;\n    }\n    return true;\n  }\n  _applyTimezone(date, options) {\n    if (options.timezone) {\n      if (momentTz.tz.zone(options.timezone)) {\n        return momentTz(date).tz(options.timezone);\n      }\n      return date = moment(date).utcOffset(options.timezone);\n    }\n    return momentTz(date);\n  }\n  _stringify(date, options) {\n    if (!moment.isMoment(date)) {\n      date = this._applyTimezone(date, options);\n    }\n    // Z here means current timezone, _not_ UTC\n    return date.format('YYYY-MM-DD HH:mm:ss.SSS Z');\n  }\n}\n\n/**\n * A date only column (no timestamp)\n */\nclass DATEONLY extends ABSTRACT {\n  toSql() {\n    return 'DATE';\n  }\n  _stringify(date) {\n    return moment(date).format('YYYY-MM-DD');\n  }\n  _sanitize(value, options) {\n    if ((!options || options && !options.raw) && !!value) {\n      return moment(value).format('YYYY-MM-DD');\n    }\n    return value;\n  }\n  _isChanged(value, originalValue) {\n    if (originalValue && !!value && originalValue === value) {\n      return false;\n    }\n    // not changed when set to same empty value\n    if (!originalValue && !value && originalValue === value) {\n      return false;\n    }\n    return true;\n  }\n}\n\n/**\n * A key / value store column. Only available in Postgres.\n */\nclass HSTORE extends ABSTRACT {\n  validate(value) {\n    if (!_.isPlainObject(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid hstore', value));\n    }\n    return true;\n  }\n}\n\n/**\n * A JSON string column. Available in MySQL, Postgres and SQLite\n */\nclass JSONTYPE extends ABSTRACT {\n  validate() {\n    return true;\n  }\n  _stringify(value) {\n    return JSON.stringify(value);\n  }\n}\n\n/**\n * A binary storage JSON column. Only available in Postgres.\n */\nclass JSONB extends JSONTYPE {\n}\n\n/**\n * A default value of the current timestamp\n */\nclass NOW extends ABSTRACT {\n}\n\n/**\n * Binary storage\n */\nclass BLOB extends ABSTRACT {\n  /**\n   * @param {string} [length=''] could be tiny, medium, long.\n   */\n  constructor(length) {\n    super();\n    const options = typeof length === 'object' && length || { length };\n    this.options = options;\n    this._length = options.length || '';\n  }\n  toSql() {\n    switch (this._length.toLowerCase()) {\n      case 'tiny':\n        return 'TINYBLOB';\n      case 'medium':\n        return 'MEDIUMBLOB';\n      case 'long':\n        return 'LONGBLOB';\n      default:\n        return this.key;\n    }\n  }\n  validate(value) {\n    if (typeof value !== 'string' && !Buffer.isBuffer(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid blob', value));\n    }\n    return true;\n  }\n  _stringify(value) {\n    if (!Buffer.isBuffer(value)) {\n      if (Array.isArray(value)) {\n        value = Buffer.from(value);\n      }\n      else {\n        value = Buffer.from(value.toString());\n      }\n    }\n    const hex = value.toString('hex');\n    return this._hexify(hex);\n  }\n  _hexify(hex) {\n    return `X'${hex}'`;\n  }\n  _bindParam(value, options) {\n    if (!Buffer.isBuffer(value)) {\n      if (Array.isArray(value)) {\n        value = Buffer.from(value);\n      }\n      else {\n        value = Buffer.from(value.toString());\n      }\n    }\n    return options.bindParam(value);\n  }\n}\n\n\nBLOB.prototype.escape = false;\n\n/**\n * Range types are data types representing a range of values of some element type (called the range's subtype).\n * Only available in Postgres. See [the Postgres documentation](http://www.postgresql.org/docs/9.4/static/rangetypes.html) for more details\n */\nclass RANGE extends ABSTRACT {\n  /**\n   * @param {ABSTRACT} subtype A subtype for range, like RANGE(DATE)\n   */\n  constructor(subtype) {\n    super();\n    const options = _.isPlainObject(subtype) ? subtype : { subtype };\n    if (!options.subtype)\n      options.subtype = new INTEGER();\n    if (typeof options.subtype === 'function') {\n      options.subtype = new options.subtype();\n    }\n    this._subtype = options.subtype.key;\n    this.options = options;\n  }\n  validate(value) {\n    if (!Array.isArray(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid range', value));\n    }\n    if (value.length !== 2) {\n      throw new sequelizeErrors.ValidationError('A range must be an array with two elements');\n    }\n    return true;\n  }\n}\n\n/**\n * A column storing a unique universal identifier.\n * Use with `UUIDV1` or `UUIDV4` for default values.\n */\nclass UUID extends ABSTRACT {\n  validate(value, options) {\n    if (typeof value !== 'string' || !Validator.isUUID(value) && (!options || !options.acceptStrings)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid uuid', value));\n    }\n    return true;\n  }\n}\n\n/**\n * A default unique universal identifier generated following the UUID v1 standard\n */\nclass UUIDV1 extends ABSTRACT {\n  validate(value, options) {\n    if (typeof value !== 'string' || !Validator.isUUID(value) && (!options || !options.acceptStrings)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid uuid', value));\n    }\n    return true;\n  }\n}\n\n/**\n * A default unique universal identifier generated following the UUID v4 standard\n */\nclass UUIDV4 extends ABSTRACT {\n  validate(value, options) {\n    if (typeof value !== 'string' || !Validator.isUUID(value, 4) && (!options || !options.acceptStrings)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid uuidv4', value));\n    }\n    return true;\n  }\n}\n\n/**\n * A virtual value that is not stored in the DB. This could for example be useful if you want to provide a default value in your model that is returned to the user but not stored in the DB.\n *\n * You could also use it to validate a value before permuting and storing it. VIRTUAL also takes a return type and dependency fields as arguments\n * If a virtual attribute is present in `attributes` it will automatically pull in the extra fields as well.\n * Return type is mostly useful for setups that rely on types like GraphQL.\n *\n * @example <caption>Checking password length before hashing it</caption>\n * sequelize.define('user', {\n *   password_hash: DataTypes.STRING,\n *   password: {\n *     type: DataTypes.VIRTUAL,\n *     set: function (val) {\n *        // Remember to set the data value, otherwise it won't be validated\n *        this.setDataValue('password', val);\n *        this.setDataValue('password_hash', this.salt + val);\n *      },\n *      validate: {\n *         isLongEnough: function (val) {\n *           if (val.length < 7) {\n *             throw new Error(\"Please choose a longer password\")\n *          }\n *       }\n *     }\n *   }\n * })\n *\n * # In the above code the password is stored plainly in the password field so it can be validated, but is never stored in the DB.\n *\n * @example <caption>Virtual with dependency fields</caption>\n * {\n *   active: {\n *     type: new DataTypes.VIRTUAL(DataTypes.BOOLEAN, ['createdAt']),\n *     get: function() {\n *       return this.get('createdAt') > Date.now() - (7 * 24 * 60 * 60 * 1000)\n *     }\n *   }\n * }\n *\n */\nclass VIRTUAL extends ABSTRACT {\n  /**\n   * @param {ABSTRACT} [ReturnType] return type for virtual type\n   * @param {Array} [fields] array of fields this virtual type is dependent on\n   */\n  constructor(ReturnType, fields) {\n    super();\n    if (typeof ReturnType === 'function')\n      ReturnType = new ReturnType();\n    this.returnType = ReturnType;\n    this.fields = fields;\n  }\n}\n\n/**\n * An enumeration, Postgres Only\n *\n * @example\n * DataTypes.ENUM('value', 'another value')\n * DataTypes.ENUM(['value', 'another value'])\n * DataTypes.ENUM({\n *   values: ['value', 'another value']\n * })\n */\nclass ENUM extends ABSTRACT {\n  /**\n   * @param {...any|{ values: any[] }|any[]} args either array of values or options object with values array. It also supports variadic values\n   */\n  constructor(...args) {\n    super();\n    const value = args[0];\n    const options = typeof value === 'object' && !Array.isArray(value) && value || {\n      values: args.reduce((result, element) => {\n        return result.concat(Array.isArray(element) ? element : [element]);\n      }, [])\n    };\n    this.values = options.values;\n    this.options = options;\n  }\n  validate(value) {\n    if (!this.values.includes(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid choice in %j', value, this.values));\n    }\n    return true;\n  }\n}\n\n/**\n * An array of `type`. Only available in Postgres.\n *\n * @example\n * DataTypes.ARRAY(DataTypes.DECIMAL)\n */\nclass ARRAY extends ABSTRACT {\n  /**\n   * @param {ABSTRACT} type type of array values\n   */\n  constructor(type) {\n    super();\n    const options = _.isPlainObject(type) ? type : { type };\n    this.options = options;\n    this.type = typeof options.type === 'function' ? new options.type() : options.type;\n  }\n  toSql() {\n    return `${this.type.toSql()}[]`;\n  }\n  validate(value) {\n    if (!Array.isArray(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid array', value));\n    }\n    return true;\n  }\n  static is(obj, type) {\n    return obj instanceof ARRAY && obj.type instanceof type;\n  }\n}\n\n/**\n * A column storing Geometry information.\n * It is only available in PostgreSQL (with PostGIS), MariaDB or MySQL.\n *\n * GeoJSON is accepted as input and returned as output.\n *\n * In PostGIS, the GeoJSON is parsed using the PostGIS function `ST_GeomFromGeoJSON`.\n * In MySQL it is parsed using the function `ST_GeomFromText`.\n *\n * Therefore, one can just follow the [GeoJSON spec](https://tools.ietf.org/html/rfc7946) for handling geometry objects.  See the following examples:\n *\n * @example <caption>Defining a Geometry type attribute</caption>\n * DataTypes.GEOMETRY\n * DataTypes.GEOMETRY('POINT')\n * DataTypes.GEOMETRY('POINT', 4326)\n *\n * @example <caption>Create a new point</caption>\n * const point = { type: 'Point', coordinates: [-76.984722, 39.807222]}; // GeoJson format: [lng, lat]\n *\n * User.create({username: 'username', geometry: point });\n *\n * @example <caption>Create a new linestring</caption>\n * const line = { type: 'LineString', 'coordinates': [ [100.0, 0.0], [101.0, 1.0] ] };\n *\n * User.create({username: 'username', geometry: line });\n *\n * @example <caption>Create a new polygon</caption>\n * const polygon = { type: 'Polygon', coordinates: [\n *                 [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],\n *                   [100.0, 1.0], [100.0, 0.0] ]\n *                 ]};\n *\n * User.create({username: 'username', geometry: polygon });\n *\n * @example <caption>Create a new point with a custom SRID</caption>\n * const point = {\n *   type: 'Point',\n *   coordinates: [-76.984722, 39.807222], // GeoJson format: [lng, lat]\n *   crs: { type: 'name', properties: { name: 'EPSG:4326'} }\n * };\n *\n * User.create({username: 'username', geometry: point })\n *\n *\n * @see {@link DataTypes.GEOGRAPHY}\n */\nclass GEOMETRY extends ABSTRACT {\n  /**\n   * @param {string} [type] Type of geometry data\n   * @param {string} [srid] SRID of type\n   */\n  constructor(type, srid) {\n    super();\n    const options = _.isPlainObject(type) ? type : { type, srid };\n    this.options = options;\n    this.type = options.type;\n    this.srid = options.srid;\n  }\n  _stringify(value, options) {\n    return `ST_GeomFromText(${options.escape(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n  _bindParam(value, options) {\n    return `ST_GeomFromText(${options.bindParam(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n}\n\nGEOMETRY.prototype.escape = false;\n\n/**\n * A geography datatype represents two dimensional spacial objects in an elliptic coord system.\n *\n * __The difference from geometry and geography type:__\n *\n * PostGIS 1.5 introduced a new spatial type called geography, which uses geodetic measurement instead of Cartesian measurement.\n * Coordinate points in the geography type are always represented in WGS 84 lon lat degrees (SRID 4326),\n * but measurement functions and relationships ST_Distance, ST_DWithin, ST_Length, and ST_Area always return answers in meters or assume inputs in meters.\n *\n * __What is best to use? It depends:__\n *\n * When choosing between the geometry and geography type for data storage, you should consider what you’ll be using it for.\n * If all you do are simple measurements and relationship checks on your data, and your data covers a fairly large area, then most likely you’ll be better off storing your data using the new geography type.\n * Although the new geography data type can cover the globe, the geometry type is far from obsolete.\n * The geometry type has a much richer set of functions than geography, relationship checks are generally faster, and it has wider support currently across desktop and web-mapping tools\n *\n * @example <caption>Defining a Geography type attribute</caption>\n * DataTypes.GEOGRAPHY\n * DataTypes.GEOGRAPHY('POINT')\n * DataTypes.GEOGRAPHY('POINT', 4326)\n */\nclass GEOGRAPHY extends ABSTRACT {\n  /**\n   * @param {string} [type] Type of geography data\n   * @param {string} [srid] SRID of type\n   */\n  constructor(type, srid) {\n    super();\n    const options = _.isPlainObject(type) ? type : { type, srid };\n    this.options = options;\n    this.type = options.type;\n    this.srid = options.srid;\n  }\n  _stringify(value, options) {\n    return `ST_GeomFromText(${options.escape(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n  _bindParam(value, options) {\n    return `ST_GeomFromText(${options.bindParam(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n}\n\n\nGEOGRAPHY.prototype.escape = false;\n\n/**\n * The cidr type holds an IPv4 or IPv6 network specification. Takes 7 or 19 bytes.\n *\n * Only available for Postgres\n */\nclass CIDR extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== 'string' || !Validator.isIPRange(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid CIDR', value));\n    }\n    return true;\n  }\n}\n\n/**\n * The INET type holds an IPv4 or IPv6 host address, and optionally its subnet. Takes 7 or 19 bytes\n *\n * Only available for Postgres\n */\nclass INET extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== 'string' || !Validator.isIP(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid INET', value));\n    }\n    return true;\n  }\n}\n\n/**\n * The MACADDR type stores MAC addresses. Takes 6 bytes\n *\n * Only available for Postgres\n *\n */\nclass MACADDR extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== 'string' || !Validator.isMACAddress(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid MACADDR', value));\n    }\n    return true;\n  }\n}\n\n/**\n * The TSVECTOR type stores text search vectors.\n *\n * Only available for Postgres\n *\n */\nclass TSVECTOR extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== 'string') {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid string', value));\n    }\n    return true;\n  }\n}\n\n/**\n * A convenience class holding commonly used data types. The data types are used when defining a new model using `Sequelize.define`, like this:\n * ```js\n * sequelize.define('model', {\n *   column: DataTypes.INTEGER\n * })\n * ```\n * When defining a model you can just as easily pass a string as type, but often using the types defined here is beneficial. For example, using `DataTypes.BLOB`, mean\n * that that column will be returned as an instance of `Buffer` when being fetched by sequelize.\n *\n * To provide a length for the data type, you can invoke it like a function: `INTEGER(2)`\n *\n * Some data types have special properties that can be accessed in order to change the data type.\n * For example, to get an unsigned integer with zerofill you can do `DataTypes.INTEGER.UNSIGNED.ZEROFILL`.\n * The order you access the properties in do not matter, so `DataTypes.INTEGER.ZEROFILL.UNSIGNED` is fine as well.\n *\n * * All number types (`INTEGER`, `BIGINT`, `FLOAT`, `DOUBLE`, `REAL`, `DECIMAL`) expose the properties `UNSIGNED` and `ZEROFILL`\n * * The `CHAR` and `STRING` types expose the `BINARY` property\n *\n * Three of the values provided here (`NOW`, `UUIDV1` and `UUIDV4`) are special default values, that should not be used to define types. Instead they are used as shorthands for\n * defining default values. For example, to get a uuid field with a default value generated following v1 of the UUID standard:\n * ```js\n * sequelize.define('model', {\n *   uuid: {\n *     type: DataTypes.UUID,\n *     defaultValue: DataTypes.UUIDV1,\n *     primaryKey: true\n *   }\n * })\n * ```\n * There may be times when you want to generate your own UUID conforming to some other algorithm. This is accomplished\n * using the defaultValue property as well, but instead of specifying one of the supplied UUID types, you return a value\n * from a function.\n * ```js\n * sequelize.define('model', {\n *   uuid: {\n *     type: DataTypes.UUID,\n *     defaultValue: function() {\n *       return generateMyId()\n *     },\n *     primaryKey: true\n *   }\n * })\n * ```\n */\nconst DataTypes = module.exports = {\n  ABSTRACT,\n  STRING,\n  CHAR,\n  TEXT,\n  NUMBER,\n  TINYINT,\n  SMALLINT,\n  MEDIUMINT,\n  INTEGER,\n  BIGINT,\n  FLOAT,\n  TIME,\n  DATE,\n  DATEONLY,\n  BOOLEAN,\n  NOW,\n  BLOB,\n  DECIMAL,\n  NUMERIC: DECIMAL,\n  UUID,\n  UUIDV1,\n  UUIDV4,\n  HSTORE,\n  JSON: JSONTYPE,\n  JSONB,\n  VIRTUAL,\n  ARRAY,\n  ENUM,\n  RANGE,\n  REAL,\n  'DOUBLE PRECISION': DOUBLE,\n  DOUBLE,\n  GEOMETRY,\n  GEOGRAPHY,\n  CIDR,\n  INET,\n  MACADDR,\n  CITEXT,\n  TSVECTOR\n};\n\n_.each(DataTypes, (dataType, name) => {\n  // guard for aliases\n  if (!Object.prototype.hasOwnProperty.call(dataType, 'key')) {\n    dataType.types = {};\n    dataType.key = dataType.prototype.key = name;\n  }\n});\n\nconst dialectMap = {};\ndialectMap.postgres = require('./dialects/postgres/data-types')(DataTypes);\ndialectMap.mysql = require('./dialects/mysql/data-types')(DataTypes);\ndialectMap.mariadb = require('./dialects/mariadb/data-types')(DataTypes);\ndialectMap.sqlite = require('./dialects/sqlite/data-types')(DataTypes);\ndialectMap.mssql = require('./dialects/mssql/data-types')(DataTypes);\ndialectMap.db2 = require('./dialects/db2/data-types')(DataTypes);\ndialectMap.snowflake = require('./dialects/snowflake/data-types')(DataTypes);\ndialectMap.oracle = require('./dialects/oracle/data-types')(DataTypes);\n\nconst dialectList = Object.values(dialectMap);\n\nfor (const dataTypes of dialectList) {\n  _.each(dataTypes, (DataType, key) => {\n    if (!DataType.key) {\n      DataType.key = DataType.prototype.key = key;\n    }\n  });\n}\n\n// Wrap all data types to not require `new`\nfor (const dataTypes of [DataTypes, ...dialectList]) {\n  _.each(dataTypes, (DataType, key) => {\n    dataTypes[key] = classToInvokable(DataType);\n  });\n}\n\nObject.assign(DataTypes, dialectMap);\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 5077, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5082, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/sql-string.js"],"sourcesContent":["'use strict';\n\nconst moment = require('moment');\nconst dataTypes = require('./data-types');\nconst { logger } = require('./utils/logger');\n\nfunction arrayToList(array, timeZone, dialect, format) {\n  return array.reduce((sql, val, i) => {\n    if (i !== 0) {\n      sql += ', ';\n    }\n    if (Array.isArray(val)) {\n      sql += `(${arrayToList(val, timeZone, dialect, format)})`;\n    } else {\n      sql += escape(val, timeZone, dialect, format);\n    }\n    return sql;\n  }, '');\n}\nexports.arrayToList = arrayToList;\n\nfunction escape(val, timeZone, dialect, format) {\n  let prependN = false;\n  if (val === undefined || val === null) {\n    return 'NULL';\n  }\n  switch (typeof val) {\n    case 'boolean':\n    // SQLite doesn't have true/false support. MySQL aliases true/false to 1/0\n    // for us. Postgres actually has a boolean type with true/false literals,\n    // but sequelize doesn't use it yet.\n      if (['sqlite', 'mssql', 'oracle'].includes(dialect)) {\n        return +!!val;\n      }\n      return (!!val).toString();\n    case 'number':\n    case 'bigint':\n      return val.toString();\n    case 'string':\n    // In mssql, prepend N to all quoted vals which are originally a string (for\n    // unicode compatibility)\n      prependN = dialect === 'mssql';\n      break;\n  }\n\n  if (val instanceof Date) {\n    val = dataTypes[dialect].DATE.prototype.stringify(val, { timezone: timeZone });\n  }\n\n  if (Buffer.isBuffer(val)) {\n    if (dataTypes[dialect].BLOB) {\n      return dataTypes[dialect].BLOB.prototype.stringify(val);\n    }\n\n    return dataTypes.BLOB.prototype.stringify(val);\n  }\n\n  if (Array.isArray(val)) {\n    const partialEscape = escVal => escape(escVal, timeZone, dialect, format);\n    if (dialect === 'postgres' && !format) {\n      return dataTypes.ARRAY.prototype.stringify(val, { escape: partialEscape });\n    }\n    return arrayToList(val, timeZone, dialect, format);\n  }\n\n  if (!val.replace) {\n    throw new Error(`Invalid value ${logger.inspect(val)}`);\n  }\n\n  if (['postgres', 'sqlite', 'mssql', 'snowflake', 'db2'].includes(dialect)) {\n    // http://www.postgresql.org/docs/8.2/static/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS\n    // http://stackoverflow.com/q/603572/130598\n    val = val.replace(/'/g, \"''\");\n\n    if (dialect === 'postgres') {\n      // null character is not allowed in Postgres\n      val = val.replace(/\\0/g, '\\\\0');\n    }\n  } else if (dialect === 'oracle' && typeof val === 'string') {\n    if (val.startsWith('TO_TIMESTAMP_TZ') || val.startsWith('TO_DATE')) {\n      // Split the string using parentheses to isolate the function name, parameters, and potential extra parts\n      const splitVal = val.split(/\\(|\\)/);\n    \n      // Validate that the split result has exactly three parts (function name, parameters, and an empty string)\n      // and that there are no additional SQL commands after the function call (indicated by the last empty string).\n      if (splitVal.length !== 3 || splitVal[2] !== '') {\n        throw new Error('Invalid SQL function call.'); // Error if function call has unexpected format\n      }\n    \n      // Extract the function name (either 'TO_TIMESTAMP_TZ' or 'TO_DATE') and the contents inside the parentheses\n      const functionName = splitVal[0].trim(); // Function name should be 'TO_TIMESTAMP_TZ' or 'TO_DATE'\n      const insideParens = splitVal[1].trim(); // This contains the parameters (date value and format string)\n    \n      if (functionName !== 'TO_TIMESTAMP_TZ' && functionName !== 'TO_DATE') {\n        throw new Error('Invalid SQL function call. Expected TO_TIMESTAMP_TZ or TO_DATE.');\n      }\n    \n      // Split the parameters inside the parentheses by commas (should contain exactly two: date and format)\n      const params = insideParens.split(',');\n    \n      // Validate that the parameters contain exactly two parts (date value and format string)\n      if (params.length !== 2) {\n        throw new Error('Unexpected input received.\\nSequelize supports TO_TIMESTAMP_TZ or TO_DATE exclusively with a combination of value and format.');\n      }\n    \n      // Extract the date value (first parameter) and remove single quotes around it\n      const dateValue = params[0].trim().replace(/'/g, '');\n      const formatValue = params[1].trim();\n    \n      if (functionName === 'TO_TIMESTAMP_TZ') {\n        const expectedFormat = \"'YYYY-MM-DD HH24:MI:SS.FFTZH:TZM'\";\n        // Validate that the formatValue is equal to expectedFormat since that is the only format used within sequelize\n        if (formatValue !== expectedFormat) {\n          throw new Error(`Invalid format string for TO_TIMESTAMP_TZ. Expected format: ${expectedFormat}`);\n        }\n      \n        // Validate the date value using Moment.js with the expected format\n        const formattedDate = moment(dateValue).format('YYYY-MM-DD HH:mm:ss.SSS Z');\n      \n        // If the formatted date doesn't match the input date value, throw an error\n        if (formattedDate !== dateValue) {\n          throw new Error(\"Invalid date value for TO_TIMESTAMP_TZ. Expected format: 'YYYY-MM-DD HH:mm:ss.SSS Z'\");\n        }\n      } else if (functionName === 'TO_DATE') {\n        const expectedFormat = \"'YYYY/MM/DD'\";\n        // Validate that the formatValue is equal to expectedFormat since that is the only format used within sequelize\n        if (formatValue !== expectedFormat) {\n          throw new Error(`Invalid format string for TO_DATE. Expected format: ${expectedFormat}`);\n        }\n      \n        // Validate the date value using Moment.js with the expected format\n        const formattedDate = moment(dateValue).format('YYYY-MM-DD');\n      \n        // If the formatted date doesn't match the input date value, throw an error\n        if (formattedDate !== dateValue) {\n          throw new Error(\"Invalid date value for TO_DATE. Expected format: 'YYYY-MM-DD'\");\n        }\n      }\n\n      return val;\n    }\n    \n    val = val.replace(/'/g, \"''\");\n  } else {\n\n    // eslint-disable-next-line no-control-regex\n    val = val.replace(/[\\0\\n\\r\\b\\t\\\\'\"\\x1a]/g, s => {\n      switch (s) {\n        case '\\0': return '\\\\0';\n        case '\\n': return '\\\\n';\n        case '\\r': return '\\\\r';\n        case '\\b': return '\\\\b';\n        case '\\t': return '\\\\t';\n        case '\\x1a': return '\\\\Z';\n        default: return `\\\\${s}`;\n      }\n    });\n  }\n  return `${(prependN ? \"N'\" : \"'\") + val}'`;\n}\nexports.escape = escape;\n\nfunction format(sql, values, timeZone, dialect) {\n  values = [].concat(values);\n\n  if (typeof sql !== 'string') {\n    throw new Error(`Invalid SQL string provided: ${sql}`);\n  }\n\n  return sql.replace(/\\?/g, match => {\n    if (!values.length) {\n      return match;\n    }\n\n    return escape(values.shift(), timeZone, dialect, true);\n  });\n}\nexports.format = format;\n\nfunction formatNamedParameters(sql, values, timeZone, dialect) {\n  return sql.replace(/:+(?!\\d)(\\w+)/g, (value, key) => {\n    if ('postgres' === dialect && '::' === value.slice(0, 2)) {\n      return value;\n    }\n\n    if (values[key] !== undefined) {\n      return escape(values[key], timeZone, dialect, true);\n    }\n    throw new Error(`Named parameter \"${value}\" has no value in the given object.`);\n  });\n}\nexports.formatNamedParameters = formatNamedParameters;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 5244, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5249, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/operators.ts"],"sourcesContent":["interface OpTypes {\n  /**\n   * Operator -|- (PG range is adjacent to operator)\n   *\n   * ```js\n   * [Op.adjacent]: [1, 2]\n   * ```\n   * In SQL\n   * ```sql\n   * -|- [1, 2)\n   * ```\n   */\n  readonly adjacent: unique symbol;\n  /**\n   * Operator ALL\n   *\n   * ```js\n   * [Op.gt]: {\n   *  [Op.all]: literal('SELECT 1')\n   * }\n   * ```\n   * In SQL\n   * ```sql\n   * > ALL (SELECT 1)\n   * ```\n   */\n  readonly all: unique symbol;\n  /**\n   * Operator AND\n   *\n   * ```js\n   * [Op.and]: {a: 5}\n   * ```\n   * In SQL\n   * ```sql\n   * AND (a = 5)\n   * ```\n   */\n  readonly and: unique symbol;\n  /**\n   * Operator ANY ARRAY (PG only)\n   *\n   * ```js\n   * [Op.any]: [2,3]\n   * ```\n   * In SQL\n   * ```sql\n   * ANY ARRAY[2, 3]::INTEGER\n   * ```\n   *\n   * Operator LIKE ANY ARRAY (also works for iLike and notLike)\n   *\n   * ```js\n   * [Op.like]: { [Op.any]: ['cat', 'hat']}\n   * ```\n   * In SQL\n   * ```sql\n   * LIKE ANY ARRAY['cat', 'hat']\n   * ```\n   */\n  readonly any: unique symbol;\n  /**\n   * Operator BETWEEN\n   *\n   * ```js\n   * [Op.between]: [6, 10]\n   * ```\n   * In SQL\n   * ```sql\n   * BETWEEN 6 AND 10\n   * ```\n   */\n  readonly between: unique symbol;\n  /**\n   * With dialect specific column identifiers (PG in this example)\n   *\n   * ```js\n   * [Op.col]: 'user.organization_id'\n   * ```\n   * In SQL\n   * ```sql\n   * = \"user\".\"organization_id\"\n   * ```\n   */\n  readonly col: unique symbol;\n  /**\n   * Operator <@ (PG array contained by operator)\n   *\n   * ```js\n   * [Op.contained]: [1, 2]\n   * ```\n   * In SQL\n   * ```sql\n   * <@ [1, 2)\n   * ```\n   */\n  readonly contained: unique symbol;\n  /**\n   * Operator @> (PG array contains operator)\n   *\n   * ```js\n   * [Op.contains]: [1, 2]\n   * ```\n   * In SQL\n   * ```sql\n   * @> [1, 2)\n   * ```\n   */\n  readonly contains: unique symbol;\n  /**\n   * Operator LIKE\n   *\n   * ```js\n   * [Op.endsWith]: 'hat'\n   * ```\n   * In SQL\n   * ```sql\n   * LIKE '%hat'\n   * ```\n   */\n  readonly endsWith: unique symbol;\n  /**\n   * Operator =\n   *\n   * ```js\n   * [Op.eq]: 3\n   * ```\n   * In SQL\n   * ```sql\n   * = 3\n   * ```\n   */\n  readonly eq: unique symbol;\n  /**\n   * Operator >\n   *\n   * ```js\n   * [Op.gt]: 6\n   * ```\n   * In SQL\n   * ```sql\n   * > 6\n   * ```\n   */\n  readonly gt: unique symbol;\n  /**\n   * Operator >=\n   *\n   * ```js\n   * [Op.gte]: 6\n   * ```\n   * In SQL\n   * ```sql\n   * >= 6\n   * ```\n   */\n  readonly gte: unique symbol;\n\n  /**\n   * Operator ILIKE (case insensitive) (PG only)\n   *\n   * ```js\n   * [Op.iLike]: '%hat'\n   * ```\n   * In SQL\n   * ```sql\n   * ILIKE '%hat'\n   * ```\n   */\n  readonly iLike: unique symbol;\n  /**\n   * Operator IN\n   *\n   * ```js\n   * [Op.in]: [1, 2]\n   * ```\n   * In SQL\n   * ```sql\n   * IN [1, 2]\n   * ```\n   */\n  readonly in: unique symbol;\n  /**\n   * Operator ~* (PG only)\n   *\n   * ```js\n   * [Op.iRegexp]: '^[h|a|t]'\n   * ```\n   * In SQL\n   * ```sql\n   * ~* '^[h|a|t]'\n   * ```\n   */\n  readonly iRegexp: unique symbol;\n  /**\n   * Operator IS\n   *\n   * ```js\n   * [Op.is]: null\n   * ```\n   * In SQL\n   * ```sql\n   * IS null\n   * ```\n   */\n  readonly is: unique symbol;\n  /**\n   * Operator LIKE\n   *\n   * ```js\n   * [Op.like]: '%hat'\n   * ```\n   * In SQL\n   * ```sql\n   * LIKE '%hat'\n   * ```\n   */\n  readonly like: unique symbol;\n  /**\n   * Operator <\n   *\n   * ```js\n   * [Op.lt]: 10\n   * ```\n   * In SQL\n   * ```sql\n   * < 10\n   * ```\n   */\n  readonly lt: unique symbol;\n  /**\n   * Operator <=\n   *\n   * ```js\n   * [Op.lte]: 10\n   * ```\n   * In SQL\n   * ```sql\n   * <= 10\n   * ```\n   */\n  readonly lte: unique symbol;\n  /**\n   * Operator @@\n   *\n   * ```js\n   * [Op.match]: Sequelize.fn('to_tsquery', 'fat & rat')`\n   * ```\n   * In SQL\n   * ```sql\n   * @@ to_tsquery('fat & rat')\n   * ```\n   */\n  readonly match: unique symbol;\n  /**\n   * Operator !=\n   *\n   * ```js\n   * [Op.ne]: 20\n   * ```\n   * In SQL\n   * ```sql\n   * != 20\n   * ```\n   */\n  readonly ne: unique symbol;\n  /**\n   * Operator &> (PG range does not extend to the left of operator)\n   *\n   * ```js\n   * [Op.noExtendLeft]: [1, 2]\n   * ```\n   * In SQL\n   * ```sql\n   * &> [1, 2)\n   * ```\n   */\n  readonly noExtendLeft: unique symbol;\n  /**\n   * Operator &< (PG range does not extend to the right of operator)\n   *\n   * ```js\n   * [Op.noExtendRight]: [1, 2]\n   * ```\n   * In SQL\n   * ```sql\n   * &< [1, 2)\n   * ```\n   */\n  readonly noExtendRight: unique symbol;\n  /**\n   * Operator NOT\n   *\n   * ```js\n   * [Op.not]: true\n   * ```\n   * In SQL\n   * ```sql\n   * IS NOT TRUE\n   * ```\n   */\n  readonly not: unique symbol;\n  /**\n   * Operator NOT BETWEEN\n   *\n   * ```js\n   * [Op.notBetween]: [11, 15]\n   * ```\n   * In SQL\n   * ```sql\n   * NOT BETWEEN 11 AND 15\n   * ```\n   */\n  readonly notBetween: unique symbol;\n  /**\n   * Operator NOT ILIKE (case insensitive) (PG only)\n   *\n   * ```js\n   * [Op.notILike]: '%hat'\n   * ```\n   * In SQL\n   * ```sql\n   * NOT ILIKE '%hat'\n   * ```\n   */\n  readonly notILike: unique symbol;\n  /**\n   * Operator NOT IN\n   *\n   * ```js\n   * [Op.notIn]: [1, 2]\n   * ```\n   * In SQL\n   * ```sql\n   * NOT IN [1, 2]\n   * ```\n   */\n  readonly notIn: unique symbol;\n  /**\n   * Operator !~* (PG only)\n   *\n   * ```js\n   * [Op.notIRegexp]: '^[h|a|t]'\n   * ```\n   * In SQL\n   * ```sql\n   * !~* '^[h|a|t]'\n   * ```\n   */\n  readonly notIRegexp: unique symbol;\n  /**\n   * Operator NOT LIKE\n   *\n   * ```js\n   * [Op.notLike]: '%hat'\n   * ```\n   * In SQL\n   * ```sql\n   * NOT LIKE '%hat'\n   * ```\n   */\n  readonly notLike: unique symbol;\n  /**\n   * Operator NOT REGEXP (MySQL/PG only)\n   *\n   * ```js\n   * [Op.notRegexp]: '^[h|a|t]'\n   * ```\n   * In SQL\n   * ```sql\n   * NOT REGEXP/!~ '^[h|a|t]'\n   * ```\n   */\n  readonly notRegexp: unique symbol;\n  /**\n   * Operator OR\n   *\n   * ```js\n   * [Op.or]: [{a: 5}, {a: 6}]\n   * ```\n   * In SQL\n   * ```sql\n   * (a = 5 OR a = 6)\n   * ```\n   */\n  readonly or: unique symbol;\n  /**\n   * Operator && (PG array overlap operator)\n   *\n   * ```js\n   * [Op.overlap]: [1, 2]\n   * ```\n   * In SQL\n   * ```sql\n   * && [1, 2)\n   * ```\n   */\n  readonly overlap: unique symbol;\n  /**\n   * Internal placeholder\n   *\n   * ```js\n   * [Op.placeholder]: true\n   * ```\n   */\n  readonly placeholder: unique symbol;\n  /**\n   * Operator REGEXP (MySQL/PG only)\n   *\n   * ```js\n   * [Op.regexp]: '^[h|a|t]'\n   * ```\n   * In SQL\n   * ```sql\n   * REGEXP/~ '^[h|a|t]'\n   * ```\n   */\n  readonly regexp: unique symbol;\n  /**\n   * Operator LIKE\n   *\n   * ```js\n   * [Op.startsWith]: 'hat'\n   * ```\n   * In SQL\n   * ```sql\n   * LIKE 'hat%'\n   * ```\n   */\n  readonly startsWith: unique symbol;\n  /**\n   * Operator << (PG range strictly left of operator)\n   *\n   * ```js\n   * [Op.strictLeft]: [1, 2]\n   * ```\n   * In SQL\n   * ```sql\n   * << [1, 2)\n   * ```\n   */\n  readonly strictLeft: unique symbol;\n  /**\n   * Operator >> (PG range strictly right of operator)\n   *\n   * ```js\n   * [Op.strictRight]: [1, 2]\n   * ```\n   * In SQL\n   * ```sql\n   * >> [1, 2)\n   * ```\n   */\n  readonly strictRight: unique symbol;\n  /**\n   * Operator LIKE\n   *\n   * ```js\n   * [Op.substring]: 'hat'\n   * ```\n   * In SQL\n   * ```sql\n   * LIKE '%hat%'\n   * ```\n   */\n  readonly substring: unique symbol;\n  /**\n   * Operator VALUES\n   *\n   * ```js\n   * [Op.values]: [4, 5, 6]\n   * ```\n   * In SQL\n   * ```sql\n   * VALUES (4), (5), (6)\n   * ```\n   */\n  readonly values: unique symbol;\n}\n\n// Note: These symbols are registered in the Global Symbol Registry\n//  to counter bugs when two different versions of this library are loaded\n//  Source issue: https://github.com/sequelize/sequelize/issues/8663\n// This is not an endorsement of having two different versions of the library loaded at the same time,\n//  a lot more is going to silently break if you do this.\nexport const Op: OpTypes = {\n  eq: Symbol.for('eq'),\n  ne: Symbol.for('ne'),\n  gte: Symbol.for('gte'),\n  gt: Symbol.for('gt'),\n  lte: Symbol.for('lte'),\n  lt: Symbol.for('lt'),\n  not: Symbol.for('not'),\n  is: Symbol.for('is'),\n  in: Symbol.for('in'),\n  notIn: Symbol.for('notIn'),\n  like: Symbol.for('like'),\n  notLike: Symbol.for('notLike'),\n  iLike: Symbol.for('iLike'),\n  notILike: Symbol.for('notILike'),\n  startsWith: Symbol.for('startsWith'),\n  endsWith: Symbol.for('endsWith'),\n  substring: Symbol.for('substring'),\n  regexp: Symbol.for('regexp'),\n  notRegexp: Symbol.for('notRegexp'),\n  iRegexp: Symbol.for('iRegexp'),\n  notIRegexp: Symbol.for('notIRegexp'),\n  between: Symbol.for('between'),\n  notBetween: Symbol.for('notBetween'),\n  overlap: Symbol.for('overlap'),\n  contains: Symbol.for('contains'),\n  contained: Symbol.for('contained'),\n  adjacent: Symbol.for('adjacent'),\n  strictLeft: Symbol.for('strictLeft'),\n  strictRight: Symbol.for('strictRight'),\n  noExtendRight: Symbol.for('noExtendRight'),\n  noExtendLeft: Symbol.for('noExtendLeft'),\n  and: Symbol.for('and'),\n  or: Symbol.for('or'),\n  any: Symbol.for('any'),\n  all: Symbol.for('all'),\n  values: Symbol.for('values'),\n  col: Symbol.for('col'),\n  placeholder: Symbol.for('placeholder'),\n  join: Symbol.for('join'),\n  match: Symbol.for('match')\n} as OpTypes;\n\nexport default Op;\n\n// https://github.com/sequelize/sequelize/issues/13791\n// remove me in v7: kept for backward compatibility as `export default Op` is\n// transpiled to `module.exports.default` instead of `module.exports`\nmodule.exports = Op;\n"],"names":[],"mappings":";;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,IAAA,IAAA;IAAA,SAAA,IAAA;AAAA;AAqeO,MAAM,KAAc;IACzB,IAAI,OAAO,GAAA,CAAI;IACf,IAAI,OAAO,GAAA,CAAI;IACf,KAAK,OAAO,GAAA,CAAI;IAChB,IAAI,OAAO,GAAA,CAAI;IACf,KAAK,OAAO,GAAA,CAAI;IAChB,IAAI,OAAO,GAAA,CAAI;IACf,KAAK,OAAO,GAAA,CAAI;IAChB,IAAI,OAAO,GAAA,CAAI;IACf,IAAI,OAAO,GAAA,CAAI;IACf,OAAO,OAAO,GAAA,CAAI;IAClB,MAAM,OAAO,GAAA,CAAI;IACjB,SAAS,OAAO,GAAA,CAAI;IACpB,OAAO,OAAO,GAAA,CAAI;IAClB,UAAU,OAAO,GAAA,CAAI;IACrB,YAAY,OAAO,GAAA,CAAI;IACvB,UAAU,OAAO,GAAA,CAAI;IACrB,WAAW,OAAO,GAAA,CAAI;IACtB,QAAQ,OAAO,GAAA,CAAI;IACnB,WAAW,OAAO,GAAA,CAAI;IACtB,SAAS,OAAO,GAAA,CAAI;IACpB,YAAY,OAAO,GAAA,CAAI;IACvB,SAAS,OAAO,GAAA,CAAI;IACpB,YAAY,OAAO,GAAA,CAAI;IACvB,SAAS,OAAO,GAAA,CAAI;IACpB,UAAU,OAAO,GAAA,CAAI;IACrB,WAAW,OAAO,GAAA,CAAI;IACtB,UAAU,OAAO,GAAA,CAAI;IACrB,YAAY,OAAO,GAAA,CAAI;IACvB,aAAa,OAAO,GAAA,CAAI;IACxB,eAAe,OAAO,GAAA,CAAI;IAC1B,cAAc,OAAO,GAAA,CAAI;IACzB,KAAK,OAAO,GAAA,CAAI;IAChB,IAAI,OAAO,GAAA,CAAI;IACf,KAAK,OAAO,GAAA,CAAI;IAChB,KAAK,OAAO,GAAA,CAAI;IAChB,QAAQ,OAAO,GAAA,CAAI;IACnB,KAAK,OAAO,GAAA,CAAI;IAChB,aAAa,OAAO,GAAA,CAAI;IACxB,MAAM,OAAO,GAAA,CAAI;IACjB,OAAO,OAAO,GAAA,CAAI;AAAA;AAGpB,IAAO,oBAAQ;AAKf,OAAO,OAAA,GAAU","ignoreList":[0]}},
    {"offset": {"line": 5308, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5313, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/utils.js"],"sourcesContent":["'use strict';\n\nconst DataTypes = require('./data-types');\nconst SqlString = require('./sql-string');\nconst _ = require('lodash');\nconst baseIsNative = require('lodash/_baseIsNative');\nconst uuidv1 = require('uuid').v1;\nconst uuidv4 = require('uuid').v4;\nconst operators = require('./operators');\nconst operatorsSet = new Set(Object.values(operators));\n\nlet inflection = require('inflection');\n\nexports.classToInvokable = require('./utils/class-to-invokable').classToInvokable;\nexports.joinSQLFragments = require('./utils/join-sql-fragments').joinSQLFragments;\n\nfunction useInflection(_inflection) {\n  inflection = _inflection;\n}\nexports.useInflection = useInflection;\n\nfunction camelizeIf(str, condition) {\n  let result = str;\n\n  if (condition) {\n    result = camelize(str);\n  }\n\n  return result;\n}\nexports.camelizeIf = camelizeIf;\n\nfunction underscoredIf(str, condition) {\n  let result = str;\n\n  if (condition) {\n    result = underscore(str);\n  }\n\n  return result;\n}\nexports.underscoredIf = underscoredIf;\n\nfunction isPrimitive(val) {\n  const type = typeof val;\n  return ['string', 'number', 'boolean'].includes(type);\n}\nexports.isPrimitive = isPrimitive;\n\n// Same concept as _.merge, but don't overwrite properties that have already been assigned\nfunction mergeDefaults(a, b) {\n  return _.mergeWith(a, b, (objectValue, sourceValue) => {\n    // If it's an object, let _ handle it this time, we will be called again for each property\n    if (!_.isPlainObject(objectValue) && objectValue !== undefined) {\n      // _.isNative includes a check for core-js and throws an error if present.\n      // Depending on _baseIsNative bypasses the core-js check.\n      if (_.isFunction(objectValue) && baseIsNative(objectValue)) {\n        return sourceValue || objectValue;\n      }\n      return objectValue;\n    }\n  });\n}\nexports.mergeDefaults = mergeDefaults;\n\n// An alternative to _.merge, which doesn't clone its arguments\n// Cloning is a bad idea because options arguments may contain references to sequelize\n// models - which again reference database libs which don't like to be cloned (in particular pg-native)\nfunction merge() {\n  const result = {};\n\n  for (const obj of arguments) {\n    _.forOwn(obj, (value, key) => {\n      if (value !== undefined) {\n        if (!result[key]) {\n          result[key] = value;\n        } else if (_.isPlainObject(value) && _.isPlainObject(result[key])) {\n          result[key] = merge(result[key], value);\n        } else if (Array.isArray(value) && Array.isArray(result[key])) {\n          result[key] = value.concat(result[key]);\n        } else {\n          result[key] = value;\n        }\n      }\n    });\n  }\n\n  return result;\n}\nexports.merge = merge;\n\nfunction spliceStr(str, index, count, add) {\n  return str.slice(0, index) + add + str.slice(index + count);\n}\nexports.spliceStr = spliceStr;\n\nfunction camelize(str) {\n  return str.trim().replace(/[-_\\s]+(.)?/g, (match, c) => c.toUpperCase());\n}\nexports.camelize = camelize;\n\nfunction underscore(str) {\n  return inflection.underscore(str);\n}\nexports.underscore = underscore;\n\nfunction singularize(str) {\n  return inflection.singularize(str);\n}\nexports.singularize = singularize;\n\nfunction pluralize(str) {\n  return inflection.pluralize(str);\n}\nexports.pluralize = pluralize;\n\n/**\n * @deprecated use {@link injectReplacements} instead. This method has been removed in v7.\n *\n * @param {unknown[]} arr - first item is the SQL, following items are the positional replacements.\n * @param {AbstractDialect} dialect\n */\nfunction format(arr, dialect) {\n  const timeZone = null;\n  // Make a clone of the array beacuse format modifies the passed args\n  return SqlString.format(arr[0], arr.slice(1), timeZone, dialect);\n}\nexports.format = format;\n\n/**\n * @deprecated use {@link injectReplacements} instead. This method has been removed in v7.\n *\n * @param {string} sql\n * @param {object} parameters\n * @param {AbstractDialect} dialect\n */\nfunction formatNamedParameters(sql, parameters, dialect) {\n  const timeZone = null;\n  return SqlString.formatNamedParameters(sql, parameters, timeZone, dialect);\n}\nexports.formatNamedParameters = formatNamedParameters;\n\nfunction cloneDeep(obj, onlyPlain) {\n  obj = obj || {};\n  return _.cloneDeepWith(obj, elem => {\n    // Do not try to customize cloning of arrays or POJOs\n    if (Array.isArray(elem) || _.isPlainObject(elem)) {\n      return undefined;\n    }\n\n    // If we specified to clone only plain objects & arrays, we ignore everyhing else\n    // In any case, don't clone stuff that's an object, but not a plain one - fx example sequelize models and instances\n    if (onlyPlain || typeof elem === 'object') {\n      return elem;\n    }\n\n    // Preserve special data-types like `fn` across clones. _.get() is used for checking up the prototype chain\n    if (elem && typeof elem.clone === 'function') {\n      return elem.clone();\n    }\n  });\n}\nexports.cloneDeep = cloneDeep;\n\n/* Expand and normalize finder options */\nfunction mapFinderOptions(options, Model) {\n  if (options.attributes && Array.isArray(options.attributes)) {\n    options.attributes = Model._injectDependentVirtualAttributes(options.attributes);\n    options.attributes = options.attributes.filter(v => !Model._virtualAttributes.has(v));\n  }\n\n  mapOptionFieldNames(options, Model);\n\n  return options;\n}\nexports.mapFinderOptions = mapFinderOptions;\n\n/* Used to map field names in attributes and where conditions */\nfunction mapOptionFieldNames(options, Model) {\n  if (Array.isArray(options.attributes)) {\n    options.attributes = options.attributes.map(attr => {\n      // Object lookups will force any variable to strings, we don't want that for special objects etc\n      if (typeof attr !== 'string') return attr;\n      // Map attributes to aliased syntax attributes\n      if (Model.rawAttributes[attr] && attr !== Model.rawAttributes[attr].field) {\n        return [Model.rawAttributes[attr].field, attr];\n      }\n      return attr;\n    });\n  }\n\n  if (options.where && _.isPlainObject(options.where)) {\n    options.where = mapWhereFieldNames(options.where, Model);\n  }\n\n  return options;\n}\nexports.mapOptionFieldNames = mapOptionFieldNames;\n\nfunction mapWhereFieldNames(attributes, Model) {\n  if (attributes) {\n    attributes = cloneDeep(attributes);\n    getComplexKeys(attributes).forEach(attribute => {\n      const rawAttribute = Model.rawAttributes[attribute];\n\n      if (rawAttribute && rawAttribute.field !== rawAttribute.fieldName) {\n        attributes[rawAttribute.field] = attributes[attribute];\n        delete attributes[attribute];\n      }\n\n      if (_.isPlainObject(attributes[attribute])\n        && !(rawAttribute && (\n          rawAttribute.type instanceof DataTypes.HSTORE\n          || rawAttribute.type instanceof DataTypes.JSON))) { // Prevent renaming of HSTORE & JSON fields\n        attributes[attribute] = mapOptionFieldNames({\n          where: attributes[attribute]\n        }, Model).where;\n      }\n\n      if (Array.isArray(attributes[attribute])) {\n        attributes[attribute].forEach((where, index) => {\n          if (_.isPlainObject(where)) {\n            attributes[attribute][index] = mapWhereFieldNames(where, Model);\n          }\n        });\n      }\n\n    });\n  }\n\n  return attributes;\n}\nexports.mapWhereFieldNames = mapWhereFieldNames;\n\n/* Used to map field names in values */\nfunction mapValueFieldNames(dataValues, fields, Model) {\n  const values = {};\n\n  for (const attr of fields) {\n    if (dataValues[attr] !== undefined && !Model._virtualAttributes.has(attr)) {\n      // Field name mapping\n      if (Model.rawAttributes[attr] && Model.rawAttributes[attr].field && Model.rawAttributes[attr].field !== attr) {\n        values[Model.rawAttributes[attr].field] = dataValues[attr];\n      } else {\n        values[attr] = dataValues[attr];\n      }\n    }\n  }\n\n  return values;\n}\nexports.mapValueFieldNames = mapValueFieldNames;\n\nfunction isColString(value) {\n  return typeof value === 'string' && value[0] === '$' && value[value.length - 1] === '$';\n}\nexports.isColString = isColString;\n\nfunction canTreatArrayAsAnd(arr) {\n  return arr.some(arg => _.isPlainObject(arg) || arg instanceof Where);\n}\nexports.canTreatArrayAsAnd = canTreatArrayAsAnd;\n\nfunction combineTableNames(tableName1, tableName2) {\n  return tableName1.toLowerCase() < tableName2.toLowerCase() ? tableName1 + tableName2 : tableName2 + tableName1;\n}\nexports.combineTableNames = combineTableNames;\n\nfunction toDefaultValue(value, dialect) {\n  if (typeof value === 'function') {\n    const tmp = value();\n    if (tmp instanceof DataTypes.ABSTRACT) {\n      return tmp.toSql();\n    }\n    return tmp;\n  }\n  if (value instanceof DataTypes.UUIDV1) {\n    return uuidv1();\n  }\n  if (value instanceof DataTypes.UUIDV4) {\n    return uuidv4();\n  }\n  if (value instanceof DataTypes.NOW) {\n    return now(dialect);\n  }\n  if (Array.isArray(value)) {\n    return value.slice();\n  }\n  if (_.isPlainObject(value)) {\n    return { ...value };\n  }\n  return value;\n}\nexports.toDefaultValue = toDefaultValue;\n\n/**\n * Determine if the default value provided exists and can be described\n * in a db schema using the DEFAULT directive.\n *\n * @param  {*} value Any default value.\n * @returns {boolean} yes / no.\n * @private\n */\nfunction defaultValueSchemable(value) {\n  if (value === undefined) { return false; }\n\n  // TODO this will be schemable when all supported db\n  // have been normalized for this case\n  if (value instanceof DataTypes.NOW) { return false; }\n\n  if (value instanceof DataTypes.UUIDV1 || value instanceof DataTypes.UUIDV4) { return false; }\n\n  return typeof value !== 'function';\n}\nexports.defaultValueSchemable = defaultValueSchemable;\n\nfunction removeNullValuesFromHash(hash, omitNull, options) {\n  let result = hash;\n\n  options = options || {};\n  options.allowNull = options.allowNull || [];\n\n  if (omitNull) {\n    const _hash = {};\n\n    _.forIn(hash, (val, key) => {\n      if (options.allowNull.includes(key) || key.endsWith('Id') || val !== null && val !== undefined) {\n        _hash[key] = val;\n      }\n    });\n\n    result = _hash;\n  }\n\n  return result;\n}\nexports.removeNullValuesFromHash = removeNullValuesFromHash;\n\nconst dialects = new Set(['mariadb', 'mysql', 'postgres', 'sqlite', 'mssql', 'db2', 'oracle']);\n\nfunction now(dialect) {\n  const d = new Date();\n  if (!dialects.has(dialect)) {\n    d.setMilliseconds(0);\n  }\n  return d;\n}\nexports.now = now;\n\n// Note: Use the `quoteIdentifier()` and `escape()` methods on the\n// `QueryInterface` instead for more portable code.\n\nconst TICK_CHAR = '`';\nexports.TICK_CHAR = TICK_CHAR;\n\nfunction addTicks(s, tickChar) {\n  tickChar = tickChar || TICK_CHAR;\n  return tickChar + removeTicks(s, tickChar) + tickChar;\n}\nexports.addTicks = addTicks;\n\nfunction removeTicks(s, tickChar) {\n  tickChar = tickChar || TICK_CHAR;\n  return s.replace(new RegExp(tickChar, 'g'), '');\n}\nexports.removeTicks = removeTicks;\n\n/**\n * Receives a tree-like object and returns a plain object which depth is 1.\n *\n * - Input:\n *\n *  {\n *    name: 'John',\n *    address: {\n *      street: 'Fake St. 123',\n *      coordinates: {\n *        longitude: 55.6779627,\n *        latitude: 12.5964313\n *      }\n *    }\n *  }\n *\n * - Output:\n *\n *  {\n *    name: 'John',\n *    address.street: 'Fake St. 123',\n *    address.coordinates.latitude: 55.6779627,\n *    address.coordinates.longitude: 12.5964313\n *  }\n *\n * @param {object} value an Object\n * @returns {object} a flattened object\n * @private\n */\nfunction flattenObjectDeep(value) {\n  if (!_.isPlainObject(value)) return value;\n  const flattenedObj = {};\n\n  function flattenObject(obj, subPath) {\n    Object.keys(obj).forEach(key => {\n      const pathToProperty = subPath ? `${subPath}.${key}` : key;\n      if (typeof obj[key] === 'object' && obj[key] !== null) {\n        flattenObject(obj[key], pathToProperty);\n      } else {\n        flattenedObj[pathToProperty] = _.get(obj, key);\n      }\n    });\n    return flattenedObj;\n  }\n\n  return flattenObject(value, undefined);\n}\nexports.flattenObjectDeep = flattenObjectDeep;\n\n/**\n * Utility functions for representing SQL functions, and columns that should be escaped.\n * Please do not use these functions directly, use Sequelize.fn and Sequelize.col instead.\n *\n * @private\n */\nclass SequelizeMethod {}\nexports.SequelizeMethod = SequelizeMethod;\n\nclass Fn extends SequelizeMethod {\n  constructor(fn, args) {\n    super();\n    this.fn = fn;\n    this.args = args;\n  }\n  clone() {\n    return new Fn(this.fn, this.args);\n  }\n}\nexports.Fn = Fn;\n\nclass Col extends SequelizeMethod {\n  constructor(col, ...args) {\n    super();\n    if (args.length > 0) {\n      col = args;\n    }\n    this.col = col;\n  }\n}\nexports.Col = Col;\n\nclass Cast extends SequelizeMethod {\n  constructor(val, type, json) {\n    super();\n    this.val = val;\n    this.type = (type || '').trim();\n    this.json = json || false;\n  }\n}\nexports.Cast = Cast;\n\nclass Literal extends SequelizeMethod {\n  constructor(val) {\n    super();\n    this.val = val;\n  }\n}\nexports.Literal = Literal;\n\nclass Json extends SequelizeMethod {\n  constructor(conditionsOrPath, value) {\n    super();\n    if (_.isObject(conditionsOrPath)) {\n      this.conditions = conditionsOrPath;\n    } else {\n      this.path = conditionsOrPath;\n      if (value) {\n        this.value = value;\n      }\n    }\n  }\n}\nexports.Json = Json;\n\nclass Where extends SequelizeMethod {\n  constructor(attribute, comparator, logic) {\n    super();\n    if (logic === undefined) {\n      logic = comparator;\n      comparator = '=';\n    }\n\n    this.attribute = attribute;\n    this.comparator = comparator;\n    this.logic = logic;\n  }\n}\nexports.Where = Where;\n\n//Collection of helper methods to make it easier to work with symbol operators\n\n/**\n * getOperators\n *\n * @param  {object} obj\n * @returns {Array<symbol>} All operators properties of obj\n * @private\n */\nfunction getOperators(obj) {\n  return Object.getOwnPropertySymbols(obj).filter(s => operatorsSet.has(s));\n}\nexports.getOperators = getOperators;\n\n/**\n * getComplexKeys\n *\n * @param  {object} obj\n * @returns {Array<string|symbol>} All keys including operators\n * @private\n */\nfunction getComplexKeys(obj) {\n  return getOperators(obj).concat(Object.keys(obj));\n}\nexports.getComplexKeys = getComplexKeys;\n\n/**\n * getComplexSize\n *\n * @param  {object|Array} obj\n * @returns {number}      Length of object properties including operators if obj is array returns its length\n * @private\n */\nfunction getComplexSize(obj) {\n  return Array.isArray(obj) ? obj.length : getComplexKeys(obj).length;\n}\nexports.getComplexSize = getComplexSize;\n\n/**\n * Returns true if a where clause is empty, even with Symbols\n *\n * @param  {object} obj\n * @returns {boolean}\n * @private\n */\nfunction isWhereEmpty(obj) {\n  return !!obj && _.isEmpty(obj) && getOperators(obj).length === 0;\n}\nexports.isWhereEmpty = isWhereEmpty;\n\n/**\n * Returns ENUM name by joining table and column name\n *\n * @param {string} tableName\n * @param {string} columnName\n * @returns {string}\n * @private\n */\nfunction generateEnumName(tableName, columnName) {\n  return `enum_${tableName}_${columnName}`;\n}\nexports.generateEnumName = generateEnumName;\n\n/**\n * Returns an new Object which keys are camelized\n *\n * @param {object} obj\n * @returns {string}\n * @private\n */\nfunction camelizeObjectKeys(obj) {\n  const newObj = new Object();\n  Object.keys(obj).forEach(key => {\n    newObj[camelize(key)] = obj[key];\n  });\n  return newObj;\n}\nexports.camelizeObjectKeys = camelizeObjectKeys;\n\n/**\n * Assigns own and inherited enumerable string and symbol keyed properties of source\n * objects to the destination object.\n *\n * https://lodash.com/docs/4.17.4#defaults\n *\n * **Note:** This method mutates `object`.\n *\n * @param {object} object The destination object.\n * @param {...object} [sources] The source objects.\n * @returns {object} Returns `object`.\n * @private\n */\nfunction defaults(object, ...sources) {\n  object = Object(object);\n\n  sources.forEach(source => {\n    if (source) {\n      source = Object(source);\n\n      getComplexKeys(source).forEach(key => {\n        const value = object[key];\n        if (\n          value === undefined ||\n            _.eq(value, Object.prototype[key]) &&\n            !Object.prototype.hasOwnProperty.call(object, key)\n\n        ) {\n          object[key] = source[key];\n        }\n      });\n    }\n  });\n\n  return object;\n}\nexports.defaults = defaults;\n\n/**\n *\n * @param {object} index\n * @param {Array}  index.fields\n * @param {string} [index.name]\n * @param {string|object} tableName\n *\n * @returns {object}\n * @private\n */\nfunction nameIndex(index, tableName) {\n  if (tableName.tableName) tableName = tableName.tableName;\n\n  if (!Object.prototype.hasOwnProperty.call(index, 'name')) {\n    const fields = index.fields.map(\n      field => typeof field === 'string' ? field : field.name || field.attribute\n    );\n    index.name = underscore(`${tableName}_${fields.join('_')}`);\n  }\n\n  return index;\n}\nexports.nameIndex = nameIndex;\n\n/**\n * Checks if 2 arrays intersect.\n *\n * @param {Array} arr1\n * @param {Array} arr2\n * @private\n */\nfunction intersects(arr1, arr2) {\n  return arr1.some(v => arr2.includes(v));\n}\nexports.intersects = intersects;\n\n/**\n * Stringify a value as JSON with some differences:\n * - bigints are stringified as a json string. (`safeStringifyJson({ val: 1n })` outputs `'{ \"val\": \"1\" }'`).\n *   This is because of a decision by TC39 to not support bigint in JSON.stringify https://github.com/tc39/proposal-bigint/issues/24\n *\n * @param {any} value the value to stringify.\n * @returns {string} the resulting json.\n */\nfunction safeStringifyJson(value /* : any */) /* : string */ {\n  return JSON.stringify(value, (key, value) => {\n    if (typeof value === 'bigint') {\n      return String(value);\n    }\n\n    return value;\n  });\n}\n\nexports.safeStringifyJson = safeStringifyJson;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 5761, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5766, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/associations/helpers.js"],"sourcesContent":["'use strict';\n\nfunction checkNamingCollision(association) {\n  if (Object.prototype.hasOwnProperty.call(association.source.rawAttributes, association.as)) {\n    throw new Error(\n      `Naming collision between attribute '${association.as}'` +\n      ` and association '${association.as}' on model ${association.source.name}` +\n      '. To remedy this, change either foreignKey or as in your association definition'\n    );\n  }\n}\nexports.checkNamingCollision = checkNamingCollision;\n\nfunction addForeignKeyConstraints(newAttribute, source, target, options, key) {\n  // FK constraints are opt-in: users must either set `foreignKeyConstraints`\n  // on the association, or request an `onDelete` or `onUpdate` behavior\n\n  if (options.foreignKeyConstraint || options.onDelete || options.onUpdate) {\n    // Find primary keys: composite keys not supported with this approach\n    const primaryKeys = Object.keys(source.primaryKeys)\n      .map(primaryKeyAttribute => source.rawAttributes[primaryKeyAttribute].field || primaryKeyAttribute);\n\n    if (primaryKeys.length === 1 || !primaryKeys.includes(key)) {\n      newAttribute.references = {\n        model: source.getTableName(),\n        key: key || primaryKeys[0]\n      };\n\n      newAttribute.onDelete = options.onDelete;\n      newAttribute.onUpdate = options.onUpdate;\n    }\n  }\n}\nexports.addForeignKeyConstraints = addForeignKeyConstraints;\n\n/**\n * Mixin (inject) association methods to model prototype\n *\n * @private\n *\n * @param {object} association instance\n * @param {object} obj Model prototype\n * @param {Array} methods Method names to inject\n * @param {object} aliases Mapping between model and association method names\n *\n */\nfunction mixinMethods(association, obj, methods, aliases) {\n  aliases = aliases || {};\n\n  for (const method of methods) {\n    // don't override custom methods\n    if (!Object.prototype.hasOwnProperty.call(obj, association.accessors[method])) {\n      const realMethod = aliases[method] || method;\n\n      obj[association.accessors[method]] = function() {\n        return association[realMethod](this, ...Array.from(arguments));\n      };\n    }\n  }\n}\nexports.mixinMethods = mixinMethods;\n"],"names":[],"mappings":";AAEA,SAAA,qBAA8B,WAAA,EAAa;IACzC,IAAI,OAAO,SAAA,CAAU,cAAA,CAAe,IAAA,CAAK,YAAY,MAAA,CAAO,aAAA,EAAe,YAAY,EAAA,GAAK;QAC1F,MAAM,IAAI,MACR,CAAA,oCAAA,EAAuC,YAAY,EAAA,CAAA,mBAAA,EAC9B,YAAY,EAAA,CAAA,WAAA,EAAgB,YAAY,MAAA,CAAO,IAAA,CAAA,+EAAA,CAAA;IAAA;AAAA;AAK1E,QAAQ,oBAAA,GAAuB;AAE/B,SAAA,yBAAkC,YAAA,EAAc,MAAA,EAAQ,MAAA,EAAQ,OAAA,EAAS,GAAA,EAAK;IAI5E,IAAI,QAAQ,oBAAA,IAAwB,QAAQ,QAAA,IAAY,QAAQ,QAAA,EAAU;QAExE,MAAM,cAAc,OAAO,IAAA,CAAK,OAAO,WAAA,EACpC,GAAA,CAAI,CAAA,sBAAuB,OAAO,aAAA,CAAc,oBAAA,CAAqB,KAAA,IAAS;QAEjF,IAAI,YAAY,MAAA,KAAW,KAAK,CAAC,YAAY,QAAA,CAAS,MAAM;YAC1D,aAAa,UAAA,GAAa;gBACxB,OAAO,OAAO,YAAA;gBACd,KAAK,OAAO,WAAA,CAAY,EAAA;YAAA;YAG1B,aAAa,QAAA,GAAW,QAAQ,QAAA;YAChC,aAAa,QAAA,GAAW,QAAQ,QAAA;QAAA;IAAA;AAAA;AAItC,QAAQ,wBAAA,GAA2B;AAanC,SAAA,aAAsB,WAAA,EAAa,GAAA,EAAK,OAAA,EAAS,OAAA,EAAS;IACxD,UAAU,WAAW,CAAA;IAErB,KAAA,MAAW,UAAU,QAAS;QAE5B,IAAI,CAAC,OAAO,SAAA,CAAU,cAAA,CAAe,IAAA,CAAK,KAAK,YAAY,SAAA,CAAU,OAAA,GAAU;YAC7E,MAAM,aAAa,OAAA,CAAQ,OAAA,IAAW;YAEtC,GAAA,CAAI,YAAY,SAAA,CAAU,OAAA,CAAA,GAAW,WAAW;gBAC9C,OAAO,WAAA,CAAY,WAAA,CAAY,IAAA,EAAM,GAAG,MAAM,IAAA,CAAK;YAAA;QAAA;IAAA;AAAA;AAK3D,QAAQ,YAAA,GAAe","ignoreList":[0]}},
    {"offset": {"line": 5799, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5804, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/associations/base.js"],"sourcesContent":["'use strict';\n\nconst { AssociationError } = require('./../errors');\n\n/**\n * Creating associations in sequelize is done by calling one of the belongsTo / hasOne / hasMany / belongsToMany functions on a model (the source), and providing another model as the first argument to the function (the target).\n *\n * * hasOne - adds a foreign key to the target and singular association mixins to the source.\n * * belongsTo - add a foreign key and singular association mixins to the source.\n * * hasMany - adds a foreign key to target and plural association mixins to the source.\n * * belongsToMany - creates an N:M association with a join table and adds plural association mixins to the source. The junction table is created with sourceId and targetId.\n *\n * Creating an association will add a foreign key constraint to the attributes. All associations use `CASCADE` on update and `SET NULL` on delete, except for n:m, which also uses `CASCADE` on delete.\n *\n * When creating associations, you can provide an alias, via the `as` option. This is useful if the same model is associated twice, or you want your association to be called something other than the name of the target model.\n *\n * As an example, consider the case where users have many pictures, one of which is their profile picture. All pictures have a `userId`, but in addition the user model also has a `profilePictureId`, to be able to easily load the user's profile picture.\n *\n * ```js\n * User.hasMany(Picture)\n * User.belongsTo(Picture, { as: 'ProfilePicture', constraints: false })\n *\n * user.getPictures() // gets you all pictures\n * user.getProfilePicture() // gets you only the profile picture\n *\n * User.findAll({\n *   where: ...,\n *   include: [\n *     { model: Picture }, // load all pictures\n *     { model: Picture, as: 'ProfilePicture' }, // load the profile picture.\n *     // Notice that the spelling must be the exact same as the one in the association\n *   ]\n * })\n * ```\n * To get full control over the foreign key column added by sequelize, you can use the `foreignKey` option. It can either be a string, that specifies the name, or and object type definition,\n * equivalent to those passed to `sequelize.define`.\n *\n * ```js\n * User.hasMany(Picture, { foreignKey: 'uid' })\n * ```\n *\n * The foreign key column in Picture will now be called `uid` instead of the default `userId`.\n *\n * ```js\n * User.hasMany(Picture, {\n *   foreignKey: {\n *     name: 'uid',\n *     allowNull: false\n *   }\n * })\n * ```\n *\n * This specifies that the `uid` column cannot be null. In most cases this will already be covered by the foreign key constraints, which sequelize creates automatically, but can be useful in case where the foreign keys are disabled, e.g. due to circular references (see `constraints: false` below).\n *\n * When fetching associated models, you can limit your query to only load some models. These queries are written in the same way as queries to `find`/`findAll`. To only get pictures in JPG, you can do:\n *\n * ```js\n * user.getPictures({\n *   where: {\n *     format: 'jpg'\n *   }\n * })\n * ```\n *\n * There are several ways to update and add new associations. Continuing with our example of users and pictures:\n * ```js\n * user.addPicture(p) // Add a single picture\n * user.setPictures([p1, p2]) // Associate user with ONLY these two picture, all other associations will be deleted\n * user.addPictures([p1, p2]) // Associate user with these two pictures, but don't touch any current associations\n * ```\n *\n * You don't have to pass in a complete object to the association functions, if your associated model has a single primary key:\n *\n * ```js\n * user.addPicture(req.query.pid) // Here pid is just an integer, representing the primary key of the picture\n * ```\n *\n * In the example above we have specified that a user belongs to his profile picture. Conceptually, this might not make sense, but since we want to add the foreign key to the user model this is the way to do it.\n *\n * Note how we also specified `constraints: false` for profile picture. This is because we add a foreign key from user to picture (profilePictureId), and from picture to user (userId). If we were to add foreign keys to both, it would create a cyclic dependency, and sequelize would not know which table to create first, since user depends on picture, and picture depends on user. These kinds of problems are detected by sequelize before the models are synced to the database, and you will get an error along the lines of `Error: Cyclic dependency found. 'users' is dependent of itself`. If you encounter this, you should either disable some constraints, or rethink your associations completely.\n */\nclass Association {\n  constructor(source, target, options = {}) {\n    /**\n     * @type {Model}\n     */\n    this.source = source;\n\n    /**\n     * @type {Model}\n     */\n    this.target = target;\n\n    this.options = options;\n    this.scope = options.scope;\n    this.isSelfAssociation = this.source === this.target;\n    this.as = options.as;\n\n    /**\n     * The type of the association. One of `HasMany`, `BelongsTo`, `HasOne`, `BelongsToMany`\n     *\n     * @type {string}\n     */\n    this.associationType = '';\n\n    if (source.hasAlias(options.as)) {\n      throw new AssociationError(`You have used the alias ${options.as} in two separate associations. ` +\n      'Aliased associations must have unique aliases.'\n      );\n    }\n  }\n\n  /**\n   * Normalize input\n   *\n   * @param {Array|string} input it may be array or single obj, instance or primary key\n   *\n   * @private\n   * @returns {Array} built objects\n   */\n  toInstanceArray(input) {\n    if (!Array.isArray(input)) {\n      input = [input];\n    }\n\n    return input.map(element => {\n      if (element instanceof this.target) return element;\n\n      const tmpInstance = {};\n      tmpInstance[this.target.primaryKeyAttribute] = element;\n\n      return this.target.build(tmpInstance, { isNewRecord: false });\n    });\n  }\n\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return this.as;\n  }\n}\n\nmodule.exports = Association;\n"],"names":[],"mappings":";AAEA,MAAM,EAAE,gBAAA,EAAA,GAAqB,QAAQ;AA+ErC,MAAA,YAAkB;IAChB,YAAY,MAAA,EAAQ,MAAA,EAAQ,UAAU,CAAA,CAAA,CAAI;QAIxC,IAAA,CAAK,MAAA,GAAS;QAKd,IAAA,CAAK,MAAA,GAAS;QAEd,IAAA,CAAK,OAAA,GAAU;QACf,IAAA,CAAK,KAAA,GAAQ,QAAQ,KAAA;QACrB,IAAA,CAAK,iBAAA,GAAoB,IAAA,CAAK,MAAA,KAAW,IAAA,CAAK,MAAA;QAC9C,IAAA,CAAK,EAAA,GAAK,QAAQ,EAAA;QAOlB,IAAA,CAAK,eAAA,GAAkB;QAEvB,IAAI,OAAO,QAAA,CAAS,QAAQ,EAAA,GAAK;YAC/B,MAAM,IAAI,iBAAiB,CAAA,wBAAA,EAA2B,QAAQ,EAAA,CAAA,6EAAA,CAAA;QAAA;IAAA;IAclE,gBAAgB,KAAA,EAAO;QACrB,IAAI,CAAC,MAAM,OAAA,CAAQ,QAAQ;YACzB,QAAQ;gBAAC;aAAA;QAAA;QAGX,OAAO,MAAM,GAAA,CAAI,CAAA,YAAW;YAC1B,IAAI,mBAAmB,IAAA,CAAK,MAAA,EAAQ,OAAO;YAE3C,MAAM,cAAc,CAAA;YACpB,WAAA,CAAY,IAAA,CAAK,MAAA,CAAO,mBAAA,CAAA,GAAuB;YAE/C,OAAO,IAAA,CAAK,MAAA,CAAO,KAAA,CAAM,aAAa;gBAAE,aAAa;YAAA;QAAA;IAAA;IAAA,CAIxD,OAAO,GAAA,CAAI,8BAAA,GAAiC;QAC3C,OAAO,IAAA,CAAK,EAAA;IAAA;AAAA;AAIhB,OAAO,OAAA,GAAU","ignoreList":[0]}},
    {"offset": {"line": 5839, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5844, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/associations/belongs-to.js"],"sourcesContent":["'use strict';\n\nconst Utils = require('./../utils');\nconst Helpers = require('./helpers');\nconst _ = require('lodash');\nconst Association = require('./base');\nconst Op = require('../operators');\n\n/**\n * One-to-one association\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.belongsTo(Project)` the getter will be `user.getProject()`.\n *\n * @see {@link Model.belongsTo}\n */\nclass BelongsTo extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    this.associationType = 'BelongsTo';\n    this.isSingleAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.as) {\n      this.isAliased = true;\n      this.options.name = {\n        singular: this.as\n      };\n    } else {\n      this.as = this.target.options.name.singular;\n      this.options.name = this.target.options.name;\n    }\n\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelize(\n        [\n          this.as,\n          this.target.primaryKeyAttribute\n        ].join('_')\n      );\n    }\n\n    this.identifier = this.foreignKey;\n    if (this.source.rawAttributes[this.identifier]) {\n      this.identifierField = this.source.rawAttributes[this.identifier].field || this.identifier;\n    }\n\n    if (\n      this.options.targetKey\n      && !this.target.rawAttributes[this.options.targetKey]\n    ) {\n      throw new Error(`Unknown attribute \"${this.options.targetKey}\" passed as targetKey, define this attribute on model \"${this.target.name}\" first`);\n    }\n\n    this.targetKey = this.options.targetKey || this.target.primaryKeyAttribute;\n    this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    this.targetKeyIsPrimary = this.targetKey === this.target.primaryKeyAttribute;\n    this.targetIdentifier = this.targetKey;\n\n    this.associationAccessor = this.as;\n    this.options.useHooks = options.useHooks;\n\n    // Get singular name, trying to uppercase the first letter, unless the model forbids it\n    const singular = _.upperFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: `get${singular}`,\n      set: `set${singular}`,\n      create: `create${singular}`\n    };\n  }\n\n  // the id is in the source table\n  _injectAttributes() {\n    const newAttributes = {\n      [this.foreignKey]: {\n        type: this.options.keyType || this.target.rawAttributes[this.targetKey].type,\n        allowNull: true,\n        ...this.foreignKeyAttribute\n      }\n    };\n\n    if (this.options.constraints !== false) {\n      const source = this.source.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (source.allowNull ? 'SET NULL' : 'NO ACTION');\n      this.options.onUpdate = this.options.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.target, this.source, this.options, this.targetKeyField);\n    Utils.mergeDefaults(this.source.rawAttributes, newAttributes);\n\n    this.source.refreshAttributes();\n\n    this.identifierField = this.source.rawAttributes[this.foreignKey].field || this.foreignKey;\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'set', 'create'];\n\n    Helpers.mixinMethods(this, obj, methods);\n  }\n\n  /**\n   * Get the associated instance.\n   *\n   * @param {Model|Array<Model>} instances source instances\n   * @param {object}         [options] find options\n   * @param {string|boolean} [options.scope]  Apply a scope on the related model, or remove its default scope by passing false.\n   * @param {string}         [options.schema] Apply a schema on the related model\n   *\n   * @see\n   * {@link Model.findOne} for a full explanation of options\n   *\n   * @returns {Promise<Model>}\n   */\n  async get(instances, options) {\n    const where = {};\n    let Target = this.target;\n    let instance;\n\n    options = Utils.cloneDeep(options);\n\n    if (Object.prototype.hasOwnProperty.call(options, 'scope')) {\n      if (!options.scope) {\n        Target = Target.unscoped();\n      } else {\n        Target = Target.scope(options.scope);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(options, 'schema')) {\n      Target = Target.schema(options.schema, options.schemaDelimiter);\n    }\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    if (instances) {\n      where[this.targetKey] = {\n        [Op.in]: instances.map(_instance => _instance.get(this.foreignKey))\n      };\n    } else {\n      if (this.targetKeyIsPrimary && !options.where) {\n        return Target.findByPk(instance.get(this.foreignKey), options);\n      }\n      where[this.targetKey] = instance.get(this.foreignKey);\n      options.limit = null;\n    }\n\n    options.where = options.where ?\n      { [Op.and]: [where, options.where] } :\n      where;\n\n    if (instances) {\n      const results = await Target.findAll(options);\n      const result = {};\n      for (const _instance of instances) {\n        result[_instance.get(this.foreignKey, { raw: true })] = null;\n      }\n\n      for (const _instance of results) {\n        result[_instance.get(this.targetKey, { raw: true })] = _instance;\n      }\n\n      return result;\n    }\n\n    return Target.findOne(options);\n  }\n\n  /**\n   * Set the associated model.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {?Model|string|number} [associatedInstance] An persisted instance or the primary key of an instance to associate with this. Pass `null` or `undefined` to remove the association.\n   * @param {object} [options={}] options passed to `this.save`\n   * @param {boolean} [options.save=true] Skip saving this after setting the foreign key if false.\n   *\n   *  @returns {Promise}\n   */\n  async set(sourceInstance, associatedInstance, options = {}) {\n    let value = associatedInstance;\n\n    if (associatedInstance instanceof this.target) {\n      value = associatedInstance[this.targetKey];\n    }\n\n    sourceInstance.set(this.foreignKey, value);\n\n    if (options.save === false) return;\n\n    options = {\n      fields: [this.foreignKey],\n      allowNull: [this.foreignKey],\n      association: true,\n      ...options\n    };\n\n    // passes the changed field to save, so only that field get updated.\n    return await sourceInstance.save(options);\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {object} [values={}] values to create associated model instance with\n   * @param {object} [options={}] Options passed to `target.create` and setAssociation.\n   *\n   * @see\n   * {@link Model#create}  for a full explanation of options\n   *\n   * @returns {Promise<Model>} The created target model\n   */\n  async create(sourceInstance, values, options) {\n    values = values || {};\n    options = options || {};\n\n    const newAssociatedObject = await this.target.create(values, options);\n    await sourceInstance[this.accessors.set](newAssociatedObject, options);\n\n    return newAssociatedObject;\n  }\n\n  verifyAssociationAlias(alias) {\n    if (typeof alias === 'string') {\n      return this.as === alias;\n    }\n\n    if (alias && alias.singular) {\n      return this.as === alias.singular;\n    }\n\n    return !this.isAliased;\n  }\n}\n\nmodule.exports = BelongsTo;\nmodule.exports.BelongsTo = BelongsTo;\nmodule.exports.default = BelongsTo;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 6032, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6037, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/associations/has-many.js"],"sourcesContent":["'use strict';\n\nconst Utils = require('./../utils');\nconst Helpers = require('./helpers');\nconst _ = require('lodash');\nconst Association = require('./base');\nconst Op = require('../operators');\n\n/**\n * One-to-many association\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.hasMany(Project)` the getter will be `user.getProjects()`.\n * If the association is aliased, use the alias instead, e.g. `User.hasMany(Project, { as: 'jobs' })` will be `user.getJobs()`.\n *\n * @see {@link Model.hasMany}\n */\nclass HasMany extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    this.associationType = 'HasMany';\n    this.targetAssociation = null;\n    this.sequelize = source.sequelize;\n    this.isMultiAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.options.through) {\n      throw new Error('N:M associations are not supported with hasMany. Use belongsToMany instead');\n    }\n\n    /*\n    * If self association, this is the target association\n    */\n    if (this.isSelfAssociation) {\n      this.targetAssociation = this;\n    }\n\n    if (this.as) {\n      this.isAliased = true;\n\n      if (_.isPlainObject(this.as)) {\n        this.options.name = this.as;\n        this.as = this.as.plural;\n      } else {\n        this.options.name = {\n          plural: this.as,\n          singular: Utils.singularize(this.as)\n        };\n      }\n    } else {\n      this.as = this.target.options.name.plural;\n      this.options.name = this.target.options.name;\n    }\n\n    /*\n     * Foreign key setup\n     */\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelize(\n        [\n          this.source.options.name.singular,\n          this.source.primaryKeyAttribute\n        ].join('_')\n      );\n    }\n\n    if (this.target.rawAttributes[this.foreignKey]) {\n      this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n      this.foreignKeyField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    }\n\n    /*\n     * Source key setup\n     */\n    this.sourceKey = this.options.sourceKey || this.source.primaryKeyAttribute;\n\n    if (this.source.rawAttributes[this.sourceKey]) {\n      this.sourceKeyAttribute = this.sourceKey;\n      this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n    } else {\n      this.sourceKeyAttribute = this.source.primaryKeyAttribute;\n      this.sourceKeyField = this.source.primaryKeyField;\n    }\n\n    // Get singular and plural names\n    // try to uppercase the first letter, unless the model forbids it\n    const plural = _.upperFirst(this.options.name.plural);\n    const singular = _.upperFirst(this.options.name.singular);\n\n    this.associationAccessor = this.as;\n    this.accessors = {\n      get: `get${plural}`,\n      set: `set${plural}`,\n      addMultiple: `add${plural}`,\n      add: `add${singular}`,\n      create: `create${singular}`,\n      remove: `remove${singular}`,\n      removeMultiple: `remove${plural}`,\n      hasSingle: `has${singular}`,\n      hasAll: `has${plural}`,\n      count: `count${plural}`\n    };\n  }\n\n  // the id is in the target table\n  // or in an extra table which connects two tables\n  _injectAttributes() {\n    const newAttributes = {\n      [this.foreignKey]: {\n        type: this.options.keyType || this.source.rawAttributes[this.sourceKeyAttribute].type,\n        allowNull: true,\n        ...this.foreignKeyAttribute\n      }\n    };\n\n    // Create a new options object for use with addForeignKeyConstraints, to avoid polluting this.options in case it is later used for a n:m\n    const constraintOptions = { ...this.options };\n\n    if (this.options.constraints !== false) {\n      const target = this.target.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      constraintOptions.onDelete = constraintOptions.onDelete || (target.allowNull ? 'SET NULL' : 'CASCADE');\n      constraintOptions.onUpdate = constraintOptions.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.source, this.target, constraintOptions, this.sourceKeyField);\n    Utils.mergeDefaults(this.target.rawAttributes, newAttributes);\n\n    this.target.refreshAttributes();\n    this.source.refreshAttributes();\n\n    this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.foreignKeyField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'count', 'hasSingle', 'hasAll', 'set', 'add', 'addMultiple', 'remove', 'removeMultiple', 'create'];\n    const aliases = {\n      hasSingle: 'has',\n      hasAll: 'has',\n      addMultiple: 'add',\n      removeMultiple: 'remove'\n    };\n\n    Helpers.mixinMethods(this, obj, methods, aliases);\n  }\n\n  /**\n   * Get everything currently associated with this, using an optional where clause.\n   *\n   * @param {Model|Array<Model>} instances source instances\n   * @param {object} [options] find options\n   * @param {object} [options.where] An optional where clause to limit the associated models\n   * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   * @param {string} [options.schema] Apply a schema on the related model\n   *\n   * @see\n   * {@link Model.findAll}  for a full explanation of options\n   *\n   * @returns {Promise<Array<Model>>}\n   */\n  async get(instances, options = {}) {\n    const where = {};\n\n    let Model = this.target;\n    let instance;\n    let values;\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    options = { ...options };\n\n    if (this.scope) {\n      Object.assign(where, this.scope);\n    }\n\n    if (instances) {\n      values = instances.map(_instance => _instance.get(this.sourceKey, { raw: true }));\n\n      if (options.limit && instances.length > 1) {\n        options.groupedLimit = {\n          limit: options.limit,\n          on: this, // association\n          values\n        };\n\n        delete options.limit;\n      } else {\n        where[this.foreignKey] = {\n          [Op.in]: values\n        };\n        delete options.groupedLimit;\n      }\n    } else {\n      where[this.foreignKey] = instance.get(this.sourceKey, { raw: true });\n    }\n\n    options.where = options.where ?\n      { [Op.and]: [where, options.where] } :\n      where;\n\n    if (Object.prototype.hasOwnProperty.call(options, 'scope')) {\n      if (!options.scope) {\n        Model = Model.unscoped();\n      } else {\n        Model = Model.scope(options.scope);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(options, 'schema')) {\n      Model = Model.schema(options.schema, options.schemaDelimiter);\n    }\n\n    const results = await Model.findAll(options);\n    if (instance) return results;\n\n    const result = {};\n    for (const _instance of instances) {\n      result[_instance.get(this.sourceKey, { raw: true })] = [];\n    }\n\n    for (const _instance of results) {\n      result[_instance.get(this.foreignKey, { raw: true })].push(_instance);\n    }\n\n    return result;\n  }\n\n  /**\n   * Count everything currently associated with this, using an optional where clause.\n   *\n   * @param {Model}        instance the source instance\n   * @param {object}         [options] find & count options\n   * @param {object}         [options.where] An optional where clause to limit the associated models\n   * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   *\n   * @returns {Promise<number>}\n   */\n  async count(instance, options) {\n    options = Utils.cloneDeep(options);\n\n    options.attributes = [\n      [\n        this.sequelize.fn(\n          'COUNT',\n          this.sequelize.col(`${this.target.name}.${this.target.primaryKeyField}`)\n        ),\n        'count'\n      ]\n    ];\n    options.raw = true;\n    options.plain = true;\n\n    const result = await this.get(instance, options);\n\n    return parseInt(result.count, 10);\n  }\n\n  /**\n   * Check if one or more rows are associated with `this`.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {Model|Model[]|string[]|string|number[]|number} [targetInstances] Can be an array of instances or their primary keys\n   * @param {object} [options] Options passed to getAssociations\n   *\n   * @returns {Promise}\n   */\n  async has(sourceInstance, targetInstances, options) {\n    const where = {};\n\n    if (!Array.isArray(targetInstances)) {\n      targetInstances = [targetInstances];\n    }\n\n    options = {\n      ...options,\n      scope: false,\n      attributes: [this.target.primaryKeyAttribute],\n      raw: true\n    };\n\n    where[Op.or] = targetInstances.map(instance => {\n      if (instance instanceof this.target) {\n        return instance.where();\n      }\n      return {\n        [this.target.primaryKeyAttribute]: instance\n      };\n    });\n\n    options.where = {\n      [Op.and]: [\n        where,\n        options.where\n      ]\n    };\n\n    const associatedObjects = await this.get(sourceInstance, options);\n\n    return associatedObjects.length === targetInstances.length;\n  }\n\n  /**\n   * Set the associated models by passing an array of persisted instances or their primary keys. Everything that is not in the passed array will be un-associated\n   *\n   * @param {Model} sourceInstance source instance to associate new instances with\n   * @param {Model|Model[]|string[]|string|number[]|number} [targetInstances] An array of persisted instances or primary key of instances to associate with this. Pass `null` or `undefined` to remove all associations.\n   * @param {object} [options] Options passed to `target.findAll` and `update`.\n   * @param {object} [options.validate] Run validation for the join model\n   *\n   * @returns {Promise}\n   */\n  async set(sourceInstance, targetInstances, options) {\n    if (targetInstances === null) {\n      targetInstances = [];\n    } else {\n      targetInstances = this.toInstanceArray(targetInstances);\n    }\n\n    const oldAssociations = await this.get(sourceInstance, { ...options, scope: false, raw: true });\n    const promises = [];\n    const obsoleteAssociations = oldAssociations.filter(old =>\n      !targetInstances.find(obj =>\n        obj[this.target.primaryKeyAttribute] === old[this.target.primaryKeyAttribute]\n      )\n    );\n    const unassociatedObjects = targetInstances.filter(obj =>\n      !oldAssociations.find(old =>\n        obj[this.target.primaryKeyAttribute] === old[this.target.primaryKeyAttribute]\n      )\n    );\n    let updateWhere;\n    let update;\n\n    if (obsoleteAssociations.length > 0) {\n      update = {};\n      update[this.foreignKey] = null;\n\n      updateWhere = {\n        [this.target.primaryKeyAttribute]: obsoleteAssociations.map(associatedObject =>\n          associatedObject[this.target.primaryKeyAttribute]\n        )\n      };\n\n\n      promises.push(this.target.unscoped().update(\n        update,\n        {\n          ...options,\n          where: updateWhere\n        }\n      ));\n    }\n\n    if (unassociatedObjects.length > 0) {\n      updateWhere = {};\n\n      update = {};\n      update[this.foreignKey] = sourceInstance.get(this.sourceKey);\n\n      Object.assign(update, this.scope);\n      updateWhere[this.target.primaryKeyAttribute] = unassociatedObjects.map(unassociatedObject =>\n        unassociatedObject[this.target.primaryKeyAttribute]\n      );\n\n      promises.push(this.target.unscoped().update(\n        update,\n        {\n          ...options,\n          where: updateWhere\n        }\n      ));\n    }\n\n    await Promise.all(promises);\n\n    return sourceInstance;\n  }\n\n  /**\n   * Associate one or more target rows with `this`. This method accepts a Model / string / number to associate a single row,\n   * or a mixed array of Model / string / numbers to associate multiple rows.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {Model|Model[]|string[]|string|number[]|number} [targetInstances] A single instance or primary key, or a mixed array of persisted instances or primary keys\n   * @param {object} [options] Options passed to `target.update`.\n   *\n   * @returns {Promise}\n   */\n  async add(sourceInstance, targetInstances, options = {}) {\n    if (!targetInstances) return Promise.resolve();\n\n\n    targetInstances = this.toInstanceArray(targetInstances);\n\n    const update = {\n      [this.foreignKey]: sourceInstance.get(this.sourceKey),\n      ...this.scope\n    };\n\n    const where = {\n      [this.target.primaryKeyAttribute]: targetInstances.map(unassociatedObject =>\n        unassociatedObject.get(this.target.primaryKeyAttribute)\n      )\n    };\n\n    await this.target.unscoped().update(update, { ...options, where });\n\n    return sourceInstance;\n  }\n\n  /**\n   * Un-associate one or several target rows.\n   *\n   * @param {Model} sourceInstance instance to un associate instances with\n   * @param {Model|Model[]|string|string[]|number|number[]} [targetInstances] Can be an Instance or its primary key, or a mixed array of instances and primary keys\n   * @param {object} [options] Options passed to `target.update`\n   *\n   * @returns {Promise}\n   */\n  async remove(sourceInstance, targetInstances, options = {}) {\n    const update = {\n      [this.foreignKey]: null\n    };\n\n    targetInstances = this.toInstanceArray(targetInstances);\n\n    const where = {\n      [this.foreignKey]: sourceInstance.get(this.sourceKey),\n      [this.target.primaryKeyAttribute]: targetInstances.map(targetInstance =>\n        targetInstance.get(this.target.primaryKeyAttribute)\n      )\n    };\n\n    await this.target.unscoped().update(update, { ...options, where });\n\n    return this;\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Model} sourceInstance source instance\n   * @param {object} [values] values for target model instance\n   * @param {object} [options] Options passed to `target.create`\n   *\n   * @returns {Promise}\n   */\n  async create(sourceInstance, values, options = {}) {\n    if (Array.isArray(options)) {\n      options = {\n        fields: options\n      };\n    }\n\n    if (values === undefined) {\n      values = {};\n    }\n\n    if (this.scope) {\n      for (const attribute of Object.keys(this.scope)) {\n        values[attribute] = this.scope[attribute];\n        if (options.fields) options.fields.push(attribute);\n      }\n    }\n\n    values[this.foreignKey] = sourceInstance.get(this.sourceKey);\n    if (options.fields) options.fields.push(this.foreignKey);\n    return await this.target.create(values, options);\n  }\n\n  verifyAssociationAlias(alias) {\n    if (typeof alias === 'string') {\n      return this.as === alias;\n    }\n\n    if (alias && alias.plural) {\n      return this.as === alias.plural;\n    }\n\n    return !this.isAliased;\n  }\n}\n\nmodule.exports = HasMany;\nmodule.exports.HasMany = HasMany;\nmodule.exports.default = HasMany;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 6384, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6389, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/associations/has-one.js"],"sourcesContent":["'use strict';\n\nconst Utils = require('./../utils');\nconst Helpers = require('./helpers');\nconst _ = require('lodash');\nconst Association = require('./base');\nconst Op = require('../operators');\n\n/**\n * One-to-one association\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.hasOne(Project)` the getter will be `user.getProject()`.\n * This is almost the same as `belongsTo` with one exception - The foreign key will be defined on the target model.\n *\n * @see {@link Model.hasOne}\n */\nclass HasOne extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    this.associationType = 'HasOne';\n    this.isSingleAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.as) {\n      this.isAliased = true;\n      this.options.name = {\n        singular: this.as\n      };\n    } else {\n      this.as = this.target.options.name.singular;\n      this.options.name = this.target.options.name;\n    }\n\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelize(\n        [\n          Utils.singularize(this.options.as || this.source.name),\n          this.source.primaryKeyAttribute\n        ].join('_')\n      );\n    }\n\n    if (\n      this.options.sourceKey\n      && !this.source.rawAttributes[this.options.sourceKey]\n    ) {\n      throw new Error(`Unknown attribute \"${this.options.sourceKey}\" passed as sourceKey, define this attribute on model \"${this.source.name}\" first`);\n    }\n\n    this.sourceKey = this.sourceKeyAttribute = this.options.sourceKey || this.source.primaryKeyAttribute;\n    this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n    this.sourceKeyIsPrimary = this.sourceKey === this.source.primaryKeyAttribute;\n\n    this.associationAccessor = this.as;\n    this.options.useHooks = options.useHooks;\n\n    if (this.target.rawAttributes[this.foreignKey]) {\n      this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    }\n\n    // Get singular name, trying to uppercase the first letter, unless the model forbids it\n    const singular = _.upperFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: `get${singular}`,\n      set: `set${singular}`,\n      create: `create${singular}`\n    };\n  }\n\n  // the id is in the target table\n  _injectAttributes() {\n    const newAttributes = {\n      [this.foreignKey]: {\n        type: this.options.keyType || this.source.rawAttributes[this.sourceKey].type,\n        allowNull: true,\n        ...this.foreignKeyAttribute\n      }\n    };\n\n    if (this.options.constraints !== false) {\n      const target = this.target.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (target.allowNull ? 'SET NULL' : 'CASCADE');\n      this.options.onUpdate = this.options.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.source, this.target, this.options, this.sourceKeyField);\n    Utils.mergeDefaults(this.target.rawAttributes, newAttributes);\n\n    this.target.refreshAttributes();\n\n    this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'set', 'create'];\n\n    Helpers.mixinMethods(this, obj, methods);\n  }\n\n  /**\n   * Get the associated instance.\n   *\n   * @param {Model|Array<Model>} instances source instances\n   * @param {object}         [options] find options\n   * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   * @param {string} [options.schema] Apply a schema on the related model\n   *\n   * @see\n   * {@link Model.findOne} for a full explanation of options\n   *\n   * @returns {Promise<Model>}\n   */\n  async get(instances, options) {\n    const where = {};\n\n    let Target = this.target;\n    let instance;\n\n    options = Utils.cloneDeep(options);\n\n    if (Object.prototype.hasOwnProperty.call(options, 'scope')) {\n      if (!options.scope) {\n        Target = Target.unscoped();\n      } else {\n        Target = Target.scope(options.scope);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(options, 'schema')) {\n      Target = Target.schema(options.schema, options.schemaDelimiter);\n    }\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    if (instances) {\n      where[this.foreignKey] = {\n        [Op.in]: instances.map(_instance => _instance.get(this.sourceKey))\n      };\n    } else {\n      where[this.foreignKey] = instance.get(this.sourceKey);\n    }\n\n    if (this.scope) {\n      Object.assign(where, this.scope);\n    }\n\n    options.where = options.where ?\n      { [Op.and]: [where, options.where] } :\n      where;\n\n    if (instances) {\n      const results = await Target.findAll(options);\n      const result = {};\n      for (const _instance of instances) {\n        result[_instance.get(this.sourceKey, { raw: true })] = null;\n      }\n\n      for (const _instance of results) {\n        result[_instance.get(this.foreignKey, { raw: true })] = _instance;\n      }\n\n      return result;\n    }\n\n    return Target.findOne(options);\n  }\n\n  /**\n   * Set the associated model.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {?Model|string|number} [associatedInstance] An persisted instance or the primary key of an instance to associate with this. Pass `null` or `undefined` to remove the association.\n   * @param {object} [options] Options passed to getAssociation and `target.save`\n   *\n   * @returns {Promise}\n   */\n  async set(sourceInstance, associatedInstance, options) {\n    options = { ...options, scope: false };\n\n    const oldInstance = await sourceInstance[this.accessors.get](options);\n    // TODO Use equals method once #5605 is resolved\n    const alreadyAssociated = oldInstance && associatedInstance && this.target.primaryKeyAttributes.every(attribute =>\n      oldInstance.get(attribute, { raw: true }) === (associatedInstance.get ? associatedInstance.get(attribute, { raw: true }) : associatedInstance)\n    );\n\n    if (oldInstance && !alreadyAssociated) {\n      oldInstance[this.foreignKey] = null;\n\n      await oldInstance.save({\n        ...options,\n        fields: [this.foreignKey],\n        allowNull: [this.foreignKey],\n        association: true\n      });\n    }\n    if (associatedInstance && !alreadyAssociated) {\n      if (!(associatedInstance instanceof this.target)) {\n        const tmpInstance = {};\n        tmpInstance[this.target.primaryKeyAttribute] = associatedInstance;\n        associatedInstance = this.target.build(tmpInstance, {\n          isNewRecord: false\n        });\n      }\n\n      Object.assign(associatedInstance, this.scope);\n      associatedInstance.set(this.foreignKey, sourceInstance.get(this.sourceKeyAttribute));\n\n      return associatedInstance.save(options);\n    }\n\n    return null;\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {object} [values={}] values to create associated model instance with\n   * @param {object} [options] Options passed to `target.create` and setAssociation.\n   *\n   * @see\n   * {@link Model#create} for a full explanation of options\n   *\n   * @returns {Promise<Model>} The created target model\n   */\n  async create(sourceInstance, values, options) {\n    values = values || {};\n    options = options || {};\n\n    if (this.scope) {\n      for (const attribute of Object.keys(this.scope)) {\n        values[attribute] = this.scope[attribute];\n        if (options.fields) {\n          options.fields.push(attribute);\n        }\n      }\n    }\n\n    values[this.foreignKey] = sourceInstance.get(this.sourceKeyAttribute);\n    if (options.fields) {\n      options.fields.push(this.foreignKey);\n    }\n\n    return await this.target.create(values, options);\n  }\n\n  verifyAssociationAlias(alias) {\n    if (typeof alias === 'string') {\n      return this.as === alias;\n    }\n\n    if (alias && alias.singular) {\n      return this.as === alias.singular;\n    }\n\n    return !this.isAliased;\n  }\n}\n\nmodule.exports = HasOne;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 6603, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6608, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/associations/belongs-to-many.js"],"sourcesContent":["'use strict';\n\nconst Utils = require('./../utils');\nconst Helpers = require('./helpers');\nconst _ = require('lodash');\nconst Association = require('./base');\nconst BelongsTo = require('./belongs-to');\nconst HasMany = require('./has-many');\nconst HasOne = require('./has-one');\nconst AssociationError = require('../errors').AssociationError;\nconst EmptyResultError = require('../errors').EmptyResultError;\nconst Op = require('../operators');\n\n/**\n * Many-to-many association with a join table.\n *\n * When the join table has additional attributes, these can be passed in the options object:\n *\n * ```js\n * UserProject = sequelize.define('user_project', {\n *   role: Sequelize.STRING\n * });\n * User.belongsToMany(Project, { through: UserProject });\n * Project.belongsToMany(User, { through: UserProject });\n * // through is required!\n *\n * user.addProject(project, { through: { role: 'manager' }});\n * ```\n *\n * All methods allow you to pass either a persisted instance, its primary key, or a mixture:\n *\n * ```js\n * const project = await Project.create({ id: 11 });\n * await user.addProjects([project, 12]);\n * ```\n *\n * If you want to set several target instances, but with different attributes you have to set the attributes on the instance, using a property with the name of the through model:\n *\n * ```js\n * p1.UserProjects = {\n *   started: true\n * }\n * user.setProjects([p1, p2], { through: { started: false }}) // The default value is false, but p1 overrides that.\n * ```\n *\n * Similarly, when fetching through a join table with custom attributes, these attributes will be available as an object with the name of the through model.\n * ```js\n * const projects = await user.getProjects();\n * const p1 = projects[0];\n * p1.UserProjects.started // Is this project started yet?\n * ```\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.belongsToMany(Project)` the getter will be `user.getProjects()`.\n *\n * @see {@link Model.belongsToMany}\n */\nclass BelongsToMany extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    if (this.options.through === undefined || this.options.through === true || this.options.through === null) {\n      throw new AssociationError(`${source.name}.belongsToMany(${target.name}) requires through option, pass either a string or a model`);\n    }\n\n    if (!this.options.through.model) {\n      this.options.through = {\n        model: options.through\n      };\n    }\n\n    this.associationType = 'BelongsToMany';\n    this.targetAssociation = null;\n    this.sequelize = source.sequelize;\n    this.through = { ...this.options.through };\n    this.isMultiAssociation = true;\n    this.doubleLinked = false;\n\n    if (!this.as && this.isSelfAssociation) {\n      throw new AssociationError('\\'as\\' must be defined for many-to-many self-associations');\n    }\n\n    if (this.as) {\n      this.isAliased = true;\n\n      if (_.isPlainObject(this.as)) {\n        this.options.name = this.as;\n        this.as = this.as.plural;\n      } else {\n        this.options.name = {\n          plural: this.as,\n          singular: Utils.singularize(this.as)\n        };\n      }\n    } else {\n      this.as = this.target.options.name.plural;\n      this.options.name = this.target.options.name;\n    }\n\n    this.combinedTableName = Utils.combineTableNames(\n      this.source.tableName,\n      this.isSelfAssociation ? this.as || this.target.tableName : this.target.tableName\n    );\n\n    /*\n    * If self association, this is the target association - Unless we find a pairing association\n    */\n    if (this.isSelfAssociation) {\n      this.targetAssociation = this;\n    }\n\n    /*\n    * Find paired association (if exists)\n    */\n    _.each(this.target.associations, association => {\n      if (association.associationType !== 'BelongsToMany') return;\n      if (association.target !== this.source) return;\n\n      if (this.options.through.model === association.options.through.model) {\n        this.paired = association;\n        association.paired = this;\n      }\n    });\n\n    /*\n    * Default/generated source/target keys\n    */\n    this.sourceKey = this.options.sourceKey || this.source.primaryKeyAttribute;\n    this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n\n    if (this.options.targetKey) {\n      this.targetKey = this.options.targetKey;\n      this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    } else {\n      this.targetKeyDefault = true;\n      this.targetKey = this.target.primaryKeyAttribute;\n      this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    }\n\n    this._createForeignAndOtherKeys();\n\n    if (typeof this.through.model === 'string') {\n      if (!this.sequelize.isDefined(this.through.model)) {\n        this.through.model = this.sequelize.define(this.through.model, {}, Object.assign(this.options, {\n          tableName: this.through.model,\n          indexes: [], //we don't want indexes here (as referenced in #2416)\n          paranoid: this.through.paranoid ? this.through.paranoid : false, // Default to non-paranoid join (referenced in #11991)\n          validate: {} // Don't propagate model-level validations\n        }));\n      } else {\n        this.through.model = this.sequelize.model(this.through.model);\n      }\n    }\n\n    Object.assign(this.options, _.pick(this.through.model.options, [\n      'timestamps', 'createdAt', 'updatedAt', 'deletedAt', 'paranoid'\n    ]));\n\n    if (this.paired) {\n      let needInjectPaired = false;\n\n      if (this.targetKeyDefault) {\n        this.targetKey = this.paired.sourceKey;\n        this.targetKeyField = this.paired.sourceKeyField;\n        this._createForeignAndOtherKeys();\n      }\n      if (this.paired.targetKeyDefault) {\n        // in this case paired.otherKey depends on paired.targetKey,\n        // so cleanup previously wrong generated otherKey\n        if (this.paired.targetKey !== this.sourceKey) {\n          delete this.through.model.rawAttributes[this.paired.otherKey];\n          this.paired.targetKey = this.sourceKey;\n          this.paired.targetKeyField = this.sourceKeyField;\n          this.paired._createForeignAndOtherKeys();\n          needInjectPaired = true;\n        }\n      }\n\n      if (this.otherKeyDefault) {\n        this.otherKey = this.paired.foreignKey;\n      }\n      if (this.paired.otherKeyDefault) {\n        // If paired otherKey was inferred we should make sure to clean it up\n        // before adding a new one that matches the foreignKey\n        if (this.paired.otherKey !== this.foreignKey) {\n          delete this.through.model.rawAttributes[this.paired.otherKey];\n          this.paired.otherKey = this.foreignKey;\n          needInjectPaired = true;\n        }\n      }\n\n      if (needInjectPaired) {\n        this.paired._injectAttributes();\n      }\n    }\n\n    if (this.through) {\n      this.throughModel = this.through.model;\n    }\n\n    this.options.tableName = this.combinedName = this.through.model === Object(this.through.model) ? this.through.model.tableName : this.through.model;\n\n    this.associationAccessor = this.as;\n\n    // Get singular and plural names, trying to uppercase the first letter, unless the model forbids it\n    const plural = _.upperFirst(this.options.name.plural);\n    const singular = _.upperFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: `get${plural}`,\n      set: `set${plural}`,\n      addMultiple: `add${plural}`,\n      add: `add${singular}`,\n      create: `create${singular}`,\n      remove: `remove${singular}`,\n      removeMultiple: `remove${plural}`,\n      hasSingle: `has${singular}`,\n      hasAll: `has${plural}`,\n      count: `count${plural}`\n    };\n  }\n\n  _createForeignAndOtherKeys() {\n    /*\n    * Default/generated foreign/other keys\n    */\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else {\n      this.foreignKeyAttribute = {};\n      this.foreignKey = this.options.foreignKey || Utils.camelize(\n        [\n          this.source.options.name.singular,\n          this.sourceKey\n        ].join('_')\n      );\n    }\n\n    if (_.isObject(this.options.otherKey)) {\n      this.otherKeyAttribute = this.options.otherKey;\n      this.otherKey = this.otherKeyAttribute.name || this.otherKeyAttribute.fieldName;\n    } else {\n      if (!this.options.otherKey) {\n        this.otherKeyDefault = true;\n      }\n\n      this.otherKeyAttribute = {};\n      this.otherKey = this.options.otherKey || Utils.camelize(\n        [\n          this.isSelfAssociation ? Utils.singularize(this.as) : this.target.options.name.singular,\n          this.targetKey\n        ].join('_')\n      );\n    }\n  }\n\n  // the id is in the target table\n  // or in an extra table which connects two tables\n  _injectAttributes() {\n    this.identifier = this.foreignKey;\n    this.foreignIdentifier = this.otherKey;\n\n    // remove any PKs previously defined by sequelize\n    // but ignore any keys that are part of this association (#5865)\n    _.each(this.through.model.rawAttributes, (attribute, attributeName) => {\n      if (attribute.primaryKey === true && attribute._autoGenerated === true) {\n        if ([this.foreignKey, this.otherKey].includes(attributeName)) {\n          // this key is still needed as it's part of the association\n          // so just set primaryKey to false\n          attribute.primaryKey = false;\n        }\n        else {\n          delete this.through.model.rawAttributes[attributeName];\n        }\n        this.primaryKeyDeleted = true;\n      }\n    });\n\n    const sourceKey = this.source.rawAttributes[this.sourceKey];\n    const sourceKeyType = sourceKey.type;\n    const sourceKeyField = this.sourceKeyField;\n    const targetKey = this.target.rawAttributes[this.targetKey];\n    const targetKeyType = targetKey.type;\n    const targetKeyField = this.targetKeyField;\n    const sourceAttribute = { type: sourceKeyType, ...this.foreignKeyAttribute };\n    const targetAttribute = { type: targetKeyType, ...this.otherKeyAttribute };\n\n    if (this.primaryKeyDeleted === true) {\n      targetAttribute.primaryKey = sourceAttribute.primaryKey = true;\n    } else if (this.through.unique !== false) {\n      let uniqueKey;\n      if (typeof this.options.uniqueKey === 'string' && this.options.uniqueKey !== '') {\n        uniqueKey = this.options.uniqueKey;\n      } else {\n        uniqueKey = [this.through.model.tableName, this.foreignKey, this.otherKey, 'unique'].join('_');\n      }\n      targetAttribute.unique = sourceAttribute.unique = uniqueKey;\n    }\n\n    if (!this.through.model.rawAttributes[this.foreignKey]) {\n      this.through.model.rawAttributes[this.foreignKey] = {\n        _autoGenerated: true\n      };\n    }\n\n    if (!this.through.model.rawAttributes[this.otherKey]) {\n      this.through.model.rawAttributes[this.otherKey] = {\n        _autoGenerated: true\n      };\n    }\n\n    if (this.options.constraints !== false) {\n      sourceAttribute.references = {\n        model: this.source.getTableName(),\n        key: sourceKeyField\n      };\n      // For the source attribute the passed option is the priority\n      sourceAttribute.onDelete = this.options.onDelete || this.through.model.rawAttributes[this.foreignKey].onDelete;\n      sourceAttribute.onUpdate = this.options.onUpdate || this.through.model.rawAttributes[this.foreignKey].onUpdate;\n\n      if (!sourceAttribute.onDelete) sourceAttribute.onDelete = 'CASCADE';\n      if (!sourceAttribute.onUpdate) sourceAttribute.onUpdate = 'CASCADE';\n\n      targetAttribute.references = {\n        model: this.target.getTableName(),\n        key: targetKeyField\n      };\n      // But the for target attribute the previously defined option is the priority (since it could've been set by another belongsToMany call)\n      targetAttribute.onDelete = this.through.model.rawAttributes[this.otherKey].onDelete || this.options.onDelete;\n      targetAttribute.onUpdate = this.through.model.rawAttributes[this.otherKey].onUpdate || this.options.onUpdate;\n\n      if (!targetAttribute.onDelete) targetAttribute.onDelete = 'CASCADE';\n      if (!targetAttribute.onUpdate) targetAttribute.onUpdate = 'CASCADE';\n    }\n\n    Object.assign(this.through.model.rawAttributes[this.foreignKey], sourceAttribute);\n    Object.assign(this.through.model.rawAttributes[this.otherKey], targetAttribute);\n\n    this.through.model.refreshAttributes();\n\n    this.identifierField = this.through.model.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.foreignIdentifierField = this.through.model.rawAttributes[this.otherKey].field || this.otherKey;\n\n    // For Db2 server, a reference column of a FOREIGN KEY must be unique\n    // else, server throws SQL0573N error. Hence, setting it here explicitly\n    // for non primary columns.\n    if (this.options.sequelize.options.dialect === 'db2' &&\n        this.source.rawAttributes[this.sourceKey].primaryKey !== true) {\n      this.source.rawAttributes[this.sourceKey].unique = true;\n    }\n\n    if (this.paired && !this.paired.foreignIdentifierField) {\n      this.paired.foreignIdentifierField = this.through.model.rawAttributes[this.paired.otherKey].field || this.paired.otherKey;\n    }\n\n    this.toSource = new BelongsTo(this.through.model, this.source, {\n      foreignKey: this.foreignKey\n    });\n    this.manyFromSource = new HasMany(this.source, this.through.model, {\n      foreignKey: this.foreignKey\n    });\n    this.oneFromSource = new HasOne(this.source, this.through.model, {\n      foreignKey: this.foreignKey,\n      sourceKey: this.sourceKey,\n      as: this.through.model.name\n    });\n\n    this.toTarget = new BelongsTo(this.through.model, this.target, {\n      foreignKey: this.otherKey\n    });\n    this.manyFromTarget = new HasMany(this.target, this.through.model, {\n      foreignKey: this.otherKey\n    });\n    this.oneFromTarget = new HasOne(this.target, this.through.model, {\n      foreignKey: this.otherKey,\n      sourceKey: this.targetKey,\n      as: this.through.model.name\n    });\n\n    if (this.paired && this.paired.otherKeyDefault) {\n      this.paired.toTarget = new BelongsTo(this.paired.through.model, this.paired.target, {\n        foreignKey: this.paired.otherKey\n      });\n\n      this.paired.oneFromTarget = new HasOne(this.paired.target, this.paired.through.model, {\n        foreignKey: this.paired.otherKey,\n        sourceKey: this.paired.targetKey,\n        as: this.paired.through.model.name\n      });\n    }\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'count', 'hasSingle', 'hasAll', 'set', 'add', 'addMultiple', 'remove', 'removeMultiple', 'create'];\n    const aliases = {\n      hasSingle: 'has',\n      hasAll: 'has',\n      addMultiple: 'add',\n      removeMultiple: 'remove'\n    };\n\n    Helpers.mixinMethods(this, obj, methods, aliases);\n  }\n\n  /**\n   * Get everything currently associated with this, using an optional where clause.\n   *\n   * @see\n   * {@link Model} for a full explanation of options\n   *\n   * @param {Model} instance instance\n   * @param {object} [options] find options\n   * @param {object} [options.where] An optional where clause to limit the associated models\n   * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   * @param {string} [options.schema] Apply a schema on the related model\n   * @param {object} [options.through.where] An optional where clause applied to through model (join table)\n   * @param {boolean} [options.through.paranoid=true] If true, only non-deleted records will be returned from the join table. If false, both deleted and non-deleted records will be returned. Only applies if through model is paranoid\n   *\n   * @returns {Promise<Array<Model>>}\n   */\n  async get(instance, options) {\n    options = Utils.cloneDeep(options) || {};\n\n    const through = this.through;\n    let scopeWhere;\n    let throughWhere;\n\n    if (this.scope) {\n      scopeWhere = { ...this.scope };\n    }\n\n    options.where = {\n      [Op.and]: [\n        scopeWhere,\n        options.where\n      ]\n    };\n\n    if (Object(through.model) === through.model) {\n      throughWhere = {};\n      throughWhere[this.foreignKey] = instance.get(this.sourceKey);\n\n      if (through.scope) {\n        Object.assign(throughWhere, through.scope);\n      }\n\n      //If a user pass a where on the options through options, make an \"and\" with the current throughWhere\n      if (options.through && options.through.where) {\n        throughWhere = {\n          [Op.and]: [throughWhere, options.through.where]\n        };\n      }\n\n      options.include = options.include || [];\n      options.include.push({\n        association: this.oneFromTarget,\n        attributes: options.joinTableAttributes,\n        required: true,\n        paranoid: _.get(options.through, 'paranoid', true),\n        where: throughWhere\n      });\n    }\n\n    let model = this.target;\n    if (Object.prototype.hasOwnProperty.call(options, 'scope')) {\n      if (!options.scope) {\n        model = model.unscoped();\n      } else {\n        model = model.scope(options.scope);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(options, 'schema')) {\n      model = model.schema(options.schema, options.schemaDelimiter);\n    }\n\n    return model.findAll(options);\n  }\n\n  /**\n   * Count everything currently associated with this, using an optional where clause.\n   *\n   * @param {Model} instance instance\n   * @param {object} [options] find options\n   * @param {object} [options.where] An optional where clause to limit the associated models\n   * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   *\n   * @returns {Promise<number>}\n   */\n  async count(instance, options) {\n    const sequelize = this.target.sequelize;\n\n    options = Utils.cloneDeep(options);\n    options.attributes = [\n      [sequelize.fn('COUNT', sequelize.col([this.target.name, this.targetKeyField].join('.'))), 'count']\n    ];\n    options.joinTableAttributes = [];\n    options.raw = true;\n    options.plain = true;\n\n    const result = await this.get(instance, options);\n\n    return parseInt(result.count, 10);\n  }\n\n  /**\n   * Check if one or more instance(s) are associated with this. If a list of instances is passed, the function returns true if _all_ instances are associated\n   *\n   * @param {Model} sourceInstance source instance to check for an association with\n   * @param {Model|Model[]|string[]|string|number[]|number} [instances] Can be an array of instances or their primary keys\n   * @param {object} [options] Options passed to getAssociations\n   *\n   * @returns {Promise<boolean>}\n   */\n  async has(sourceInstance, instances, options) {\n    if (!Array.isArray(instances)) {\n      instances = [instances];\n    }\n\n    options = {\n      raw: true,\n      ...options,\n      scope: false,\n      attributes: [this.targetKey],\n      joinTableAttributes: []\n    };\n\n    const instancePrimaryKeys = instances.map(instance => {\n      if (instance instanceof this.target) {\n        return instance.where();\n      }\n      return {\n        [this.targetKey]: instance\n      };\n    });\n\n    options.where = {\n      [Op.and]: [\n        { [Op.or]: instancePrimaryKeys },\n        options.where\n      ]\n    };\n\n    const associatedObjects = await this.get(sourceInstance, options);\n\n    return _.differenceWith(instancePrimaryKeys, associatedObjects,\n      (a, b) => _.isEqual(a[this.targetKey], b[this.targetKey])).length === 0;\n  }\n\n  /**\n   * Set the associated models by passing an array of instances or their primary keys.\n   * Everything that it not in the passed array will be un-associated.\n   *\n   * @param {Model} sourceInstance source instance to associate new instances with\n   * @param {Model|Model[]|string[]|string|number[]|number} [newAssociatedObjects] A single instance or primary key, or a mixed array of persisted instances or primary keys\n   * @param {object} [options] Options passed to `through.findAll`, `bulkCreate`, `update` and `destroy`\n   * @param {object} [options.validate] Run validation for the join model\n   * @param {object} [options.through] Additional attributes for the join table.\n   *\n   * @returns {Promise}\n   */\n  async set(sourceInstance, newAssociatedObjects, options) {\n    options = options || {};\n\n    const sourceKey = this.sourceKey;\n    const targetKey = this.targetKey;\n    const identifier = this.identifier;\n    const foreignIdentifier = this.foreignIdentifier;\n\n    if (newAssociatedObjects === null) {\n      newAssociatedObjects = [];\n    } else {\n      newAssociatedObjects = this.toInstanceArray(newAssociatedObjects);\n    }\n    const where = {\n      [identifier]: sourceInstance.get(sourceKey),\n      ...this.through.scope\n    };\n\n    const updateAssociations = currentRows => {\n      const obsoleteAssociations = [];\n      const promises = [];\n      const defaultAttributes = options.through || {};\n\n      const unassociatedObjects = newAssociatedObjects.filter(obj =>\n        !currentRows.some(currentRow => currentRow[foreignIdentifier] === obj.get(targetKey))\n      );\n\n      for (const currentRow of currentRows) {\n        const newObj = newAssociatedObjects.find(obj => currentRow[foreignIdentifier] === obj.get(targetKey));\n\n        if (!newObj) {\n          obsoleteAssociations.push(currentRow);\n        } else {\n          let throughAttributes = newObj[this.through.model.name];\n          // Quick-fix for subtle bug when using existing objects that might have the through model attached (not as an attribute object)\n          if (throughAttributes instanceof this.through.model) {\n            throughAttributes = {};\n          }\n\n          const attributes = { ...defaultAttributes, ...throughAttributes };\n\n          if (Object.keys(attributes).length) {\n            promises.push(\n              this.through.model.update(attributes, Object.assign(options, {\n                where: {\n                  [identifier]: sourceInstance.get(sourceKey),\n                  [foreignIdentifier]: newObj.get(targetKey)\n                }\n              }\n              ))\n            );\n          }\n        }\n      }\n\n      if (obsoleteAssociations.length > 0) {\n        promises.push(\n          this.through.model.destroy({\n            ...options,\n            where: {\n              [identifier]: sourceInstance.get(sourceKey),\n              [foreignIdentifier]: obsoleteAssociations.map(obsoleteAssociation => obsoleteAssociation[foreignIdentifier]),\n              ...this.through.scope\n            }\n          })\n        );\n      }\n\n      if (unassociatedObjects.length > 0) {\n        const bulk = unassociatedObjects.map(unassociatedObject => {\n          return {\n            ...defaultAttributes,\n            ...unassociatedObject[this.through.model.name],\n            [identifier]: sourceInstance.get(sourceKey),\n            [foreignIdentifier]: unassociatedObject.get(targetKey),\n            ...this.through.scope\n          };\n        });\n\n        promises.push(this.through.model.bulkCreate(bulk, { validate: true, ...options }));\n      }\n\n      return Promise.all(promises);\n    };\n\n    try {\n      const currentRows = await this.through.model.findAll({ ...options, where, raw: true });\n      return await updateAssociations(currentRows);\n    } catch (error) {\n      if (error instanceof EmptyResultError) return updateAssociations([]);\n      throw error;\n    }\n  }\n\n  /**\n   * Associate one or several rows with source instance. It will not un-associate any already associated instance\n   * that may be missing from `newInstances`.\n   *\n   * @param {Model} sourceInstance source instance to associate new instances with\n   * @param {Model|Model[]|string[]|string|number[]|number} [newInstances] A single instance or primary key, or a mixed array of persisted instances or primary keys\n   * @param {object} [options] Options passed to `through.findAll`, `bulkCreate` and `update`\n   * @param {object} [options.validate] Run validation for the join model.\n   * @param {object} [options.through] Additional attributes for the join table.\n   *\n   * @returns {Promise}\n   */\n  async add(sourceInstance, newInstances, options) {\n    // If newInstances is null or undefined, no-op\n    if (!newInstances) return Promise.resolve();\n\n    options = { ...options };\n\n    const association = this;\n    const sourceKey = association.sourceKey;\n    const targetKey = association.targetKey;\n    const identifier = association.identifier;\n    const foreignIdentifier = association.foreignIdentifier;\n    const defaultAttributes = options.through || {};\n\n    newInstances = association.toInstanceArray(newInstances);\n\n    const where = {\n      [identifier]: sourceInstance.get(sourceKey),\n      [foreignIdentifier]: newInstances.map(newInstance => newInstance.get(targetKey)),\n      ...association.through.scope\n    };\n\n    const updateAssociations = currentRows => {\n      const promises = [];\n      const unassociatedObjects = [];\n      const changedAssociations = [];\n      for (const obj of newInstances) {\n        const existingAssociation = currentRows && currentRows.find(current => current[foreignIdentifier] === obj.get(targetKey));\n\n        if (!existingAssociation) {\n          unassociatedObjects.push(obj);\n        } else {\n          const throughAttributes = obj[association.through.model.name];\n          const attributes = { ...defaultAttributes, ...throughAttributes };\n\n          if (Object.keys(attributes).some(attribute => attributes[attribute] !== existingAssociation[attribute])) {\n            changedAssociations.push(obj);\n          }\n        }\n      }\n\n      if (unassociatedObjects.length > 0) {\n        const bulk = unassociatedObjects.map(unassociatedObject => {\n          const throughAttributes = unassociatedObject[association.through.model.name];\n          const attributes = { ...defaultAttributes, ...throughAttributes };\n\n          attributes[identifier] = sourceInstance.get(sourceKey);\n          attributes[foreignIdentifier] = unassociatedObject.get(targetKey);\n\n          Object.assign(attributes, association.through.scope);\n\n          return attributes;\n        });\n\n        promises.push(association.through.model.bulkCreate(bulk, { validate: true, ...options }));\n      }\n\n      for (const assoc of changedAssociations) {\n        let throughAttributes = assoc[association.through.model.name];\n        const attributes = { ...defaultAttributes, ...throughAttributes };\n        // Quick-fix for subtle bug when using existing objects that might have the through model attached (not as an attribute object)\n        if (throughAttributes instanceof association.through.model) {\n          throughAttributes = {};\n        }\n\n        promises.push(association.through.model.update(attributes, Object.assign(options, { where: {\n          [identifier]: sourceInstance.get(sourceKey),\n          [foreignIdentifier]: assoc.get(targetKey)\n        } })));\n      }\n\n      return Promise.all(promises);\n    };\n\n    try {\n      const currentRows = await association.through.model.findAll({ ...options, where, raw: true });\n      const [associations] = await updateAssociations(currentRows);\n      return associations;\n    } catch (error) {\n      if (error instanceof EmptyResultError) return updateAssociations();\n      throw error;\n    }\n  }\n\n  /**\n   * Un-associate one or more instance(s).\n   *\n   * @param {Model} sourceInstance instance to un associate instances with\n   * @param {Model|Model[]|string|string[]|number|number[]} [oldAssociatedObjects] Can be an Instance or its primary key, or a mixed array of instances and primary keys\n   * @param {object} [options] Options passed to `through.destroy`\n   *\n   * @returns {Promise}\n   */\n  remove(sourceInstance, oldAssociatedObjects, options) {\n    const association = this;\n\n    options = options || {};\n\n    oldAssociatedObjects = association.toInstanceArray(oldAssociatedObjects);\n\n    const where = {\n      [association.identifier]: sourceInstance.get(association.sourceKey),\n      [association.foreignIdentifier]: oldAssociatedObjects.map(newInstance => newInstance.get(association.targetKey))\n    };\n\n    return association.through.model.destroy({ ...options, where });\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Model} sourceInstance source instance\n   * @param {object} [values] values for target model\n   * @param {object} [options] Options passed to create and add\n   * @param {object} [options.through] Additional attributes for the join table\n   *\n   * @returns {Promise}\n   */\n  async create(sourceInstance, values, options) {\n    const association = this;\n\n    options = options || {};\n    values = values || {};\n\n    if (Array.isArray(options)) {\n      options = {\n        fields: options\n      };\n    }\n\n    if (association.scope) {\n      Object.assign(values, association.scope);\n      if (options.fields) {\n        options.fields = options.fields.concat(Object.keys(association.scope));\n      }\n    }\n\n    // Create the related model instance\n    const newAssociatedObject = await association.target.create(values, options);\n\n    await sourceInstance[association.accessors.add](newAssociatedObject, _.omit(options, ['fields']));\n    return newAssociatedObject;\n  }\n\n  verifyAssociationAlias(alias) {\n    if (typeof alias === 'string') {\n      return this.as === alias;\n    }\n\n    if (alias && alias.plural) {\n      return this.as === alias.plural;\n    }\n\n    return !this.isAliased;\n  }\n}\n\nmodule.exports = BelongsToMany;\nmodule.exports.BelongsToMany = BelongsToMany;\nmodule.exports.default = BelongsToMany;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAEA,MAAM,QAAQ,QAAQ;AACtB,MAAM,UAAU,QAAQ;AACxB,MAAM,IAAI,QAAQ;AAClB,MAAM,cAAc,QAAQ;AAC5B,MAAM,YAAY,QAAQ;AAC1B,MAAM,UAAU,QAAQ;AACxB,MAAM,SAAS,QAAQ;AACvB,MAAM,mBAAmB,QAAQ,gGAAa,gBAAA;AAC9C,MAAM,mBAAmB,QAAQ,gGAAa,gBAAA;AAC9C,MAAM,KAAK,QAAQ;AA6CnB,MAAA,sBAA4B,YAAY;IACtC,YAAY,MAAA,EAAQ,MAAA,EAAQ,OAAA,CAAS;QACnC,KAAA,CAAM,QAAQ,QAAQ;QAEtB,IAAI,IAAA,CAAK,OAAA,CAAQ,OAAA,KAAY,KAAA,KAAa,IAAA,CAAK,OAAA,CAAQ,OAAA,KAAY,QAAQ,IAAA,CAAK,OAAA,CAAQ,OAAA,KAAY,MAAM;YACxG,MAAM,IAAI,iBAAiB,GAAG,OAAO,IAAA,CAAA,eAAA,EAAsB,OAAO,IAAA,CAAA,0DAAA,CAAA;QAAA;QAGpE,IAAI,CAAC,IAAA,CAAK,OAAA,CAAQ,OAAA,CAAQ,KAAA,EAAO;YAC/B,IAAA,CAAK,OAAA,CAAQ,OAAA,GAAU;gBACrB,OAAO,QAAQ,OAAA;YAAA;QAAA;QAInB,IAAA,CAAK,eAAA,GAAkB;QACvB,IAAA,CAAK,iBAAA,GAAoB;QACzB,IAAA,CAAK,SAAA,GAAY,OAAO,SAAA;QACxB,IAAA,CAAK,OAAA,GAAU,eAAA,CAAA,GAAK,IAAA,CAAK,OAAA,CAAQ,OAAA;QACjC,IAAA,CAAK,kBAAA,GAAqB;QAC1B,IAAA,CAAK,YAAA,GAAe;QAEpB,IAAI,CAAC,IAAA,CAAK,EAAA,IAAM,IAAA,CAAK,iBAAA,EAAmB;YACtC,MAAM,IAAI,iBAAiB;QAAA;QAG7B,IAAI,IAAA,CAAK,EAAA,EAAI;YACX,IAAA,CAAK,SAAA,GAAY;YAEjB,IAAI,EAAE,aAAA,CAAc,IAAA,CAAK,EAAA,GAAK;gBAC5B,IAAA,CAAK,OAAA,CAAQ,IAAA,GAAO,IAAA,CAAK,EAAA;gBACzB,IAAA,CAAK,EAAA,GAAK,IAAA,CAAK,EAAA,CAAG,MAAA;YAAA,OACb;gBACL,IAAA,CAAK,OAAA,CAAQ,IAAA,GAAO;oBAClB,QAAQ,IAAA,CAAK,EAAA;oBACb,UAAU,MAAM,WAAA,CAAY,IAAA,CAAK,EAAA;gBAAA;YAAA;QAAA,OAGhC;YACL,IAAA,CAAK,EAAA,GAAK,IAAA,CAAK,MAAA,CAAO,OAAA,CAAQ,IAAA,CAAK,MAAA;YACnC,IAAA,CAAK,OAAA,CAAQ,IAAA,GAAO,IAAA,CAAK,MAAA,CAAO,OAAA,CAAQ,IAAA;QAAA;QAG1C,IAAA,CAAK,iBAAA,GAAoB,MAAM,iBAAA,CAC7B,IAAA,CAAK,MAAA,CAAO,SAAA,EACZ,IAAA,CAAK,iBAAA,GAAoB,IAAA,CAAK,EAAA,IAAM,IAAA,CAAK,MAAA,CAAO,SAAA,GAAY,IAAA,CAAK,MAAA,CAAO,SAAA;QAM1E,IAAI,IAAA,CAAK,iBAAA,EAAmB;YAC1B,IAAA,CAAK,iBAAA,GAAoB,IAAA;QAAA;QAM3B,EAAE,IAAA,CAAK,IAAA,CAAK,MAAA,CAAO,YAAA,EAAc,CAAA,gBAAe;YAC9C,IAAI,YAAY,eAAA,KAAoB,iBAAiB;YACrD,IAAI,YAAY,MAAA,KAAW,IAAA,CAAK,MAAA,EAAQ;YAExC,IAAI,IAAA,CAAK,OAAA,CAAQ,OAAA,CAAQ,KAAA,KAAU,YAAY,OAAA,CAAQ,OAAA,CAAQ,KAAA,EAAO;gBACpE,IAAA,CAAK,MAAA,GAAS;gBACd,YAAY,MAAA,GAAS,IAAA;YAAA;QAAA;QAOzB,IAAA,CAAK,SAAA,GAAY,IAAA,CAAK,OAAA,CAAQ,SAAA,IAAa,IAAA,CAAK,MAAA,CAAO,mBAAA;QACvD,IAAA,CAAK,cAAA,GAAiB,IAAA,CAAK,MAAA,CAAO,aAAA,CAAc,IAAA,CAAK,SAAA,CAAA,CAAW,KAAA,IAAS,IAAA,CAAK,SAAA;QAE9E,IAAI,IAAA,CAAK,OAAA,CAAQ,SAAA,EAAW;YAC1B,IAAA,CAAK,SAAA,GAAY,IAAA,CAAK,OAAA,CAAQ,SAAA;YAC9B,IAAA,CAAK,cAAA,GAAiB,IAAA,CAAK,MAAA,CAAO,aAAA,CAAc,IAAA,CAAK,SAAA,CAAA,CAAW,KAAA,IAAS,IAAA,CAAK,SAAA;QAAA,OACzE;YACL,IAAA,CAAK,gBAAA,GAAmB;YACxB,IAAA,CAAK,SAAA,GAAY,IAAA,CAAK,MAAA,CAAO,mBAAA;YAC7B,IAAA,CAAK,cAAA,GAAiB,IAAA,CAAK,MAAA,CAAO,aAAA,CAAc,IAAA,CAAK,SAAA,CAAA,CAAW,KAAA,IAAS,IAAA,CAAK,SAAA;QAAA;QAGhF,IAAA,CAAK,0BAAA;QAEL,IAAI,OAAO,IAAA,CAAK,OAAA,CAAQ,KAAA,KAAU,UAAU;YAC1C,IAAI,CAAC,IAAA,CAAK,SAAA,CAAU,SAAA,CAAU,IAAA,CAAK,OAAA,CAAQ,KAAA,GAAQ;gBACjD,IAAA,CAAK,OAAA,CAAQ,KAAA,GAAQ,IAAA,CAAK,SAAA,CAAU,MAAA,CAAO,IAAA,CAAK,OAAA,CAAQ,KAAA,EAAO,CAAA,GAAI,OAAO,MAAA,CAAO,IAAA,CAAK,OAAA,EAAS;oBAC7F,WAAW,IAAA,CAAK,OAAA,CAAQ,KAAA;oBACxB,SAAS,EAAA;oBACT,UAAU,IAAA,CAAK,OAAA,CAAQ,QAAA,GAAW,IAAA,CAAK,OAAA,CAAQ,QAAA,GAAW;oBAC1D,UAAU,CAAA;gBAAA;YAAA,OAEP;gBACL,IAAA,CAAK,OAAA,CAAQ,KAAA,GAAQ,IAAA,CAAK,SAAA,CAAU,KAAA,CAAM,IAAA,CAAK,OAAA,CAAQ,KAAA;YAAA;QAAA;QAI3D,OAAO,MAAA,CAAO,IAAA,CAAK,OAAA,EAAS,EAAE,IAAA,CAAK,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,OAAA,EAAS;YAC7D;YAAc;YAAa;YAAa;YAAa;SAAA;QAGvD,IAAI,IAAA,CAAK,MAAA,EAAQ;YACf,IAAI,mBAAmB;YAEvB,IAAI,IAAA,CAAK,gBAAA,EAAkB;gBACzB,IAAA,CAAK,SAAA,GAAY,IAAA,CAAK,MAAA,CAAO,SAAA;gBAC7B,IAAA,CAAK,cAAA,GAAiB,IAAA,CAAK,MAAA,CAAO,cAAA;gBAClC,IAAA,CAAK,0BAAA;YAAA;YAEP,IAAI,IAAA,CAAK,MAAA,CAAO,gBAAA,EAAkB;gBAGhC,IAAI,IAAA,CAAK,MAAA,CAAO,SAAA,KAAc,IAAA,CAAK,SAAA,EAAW;oBAC5C,OAAO,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,aAAA,CAAc,IAAA,CAAK,MAAA,CAAO,QAAA,CAAA;oBACpD,IAAA,CAAK,MAAA,CAAO,SAAA,GAAY,IAAA,CAAK,SAAA;oBAC7B,IAAA,CAAK,MAAA,CAAO,cAAA,GAAiB,IAAA,CAAK,cAAA;oBAClC,IAAA,CAAK,MAAA,CAAO,0BAAA;oBACZ,mBAAmB;gBAAA;YAAA;YAIvB,IAAI,IAAA,CAAK,eAAA,EAAiB;gBACxB,IAAA,CAAK,QAAA,GAAW,IAAA,CAAK,MAAA,CAAO,UAAA;YAAA;YAE9B,IAAI,IAAA,CAAK,MAAA,CAAO,eAAA,EAAiB;gBAG/B,IAAI,IAAA,CAAK,MAAA,CAAO,QAAA,KAAa,IAAA,CAAK,UAAA,EAAY;oBAC5C,OAAO,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,aAAA,CAAc,IAAA,CAAK,MAAA,CAAO,QAAA,CAAA;oBACpD,IAAA,CAAK,MAAA,CAAO,QAAA,GAAW,IAAA,CAAK,UAAA;oBAC5B,mBAAmB;gBAAA;YAAA;YAIvB,IAAI,kBAAkB;gBACpB,IAAA,CAAK,MAAA,CAAO,iBAAA;YAAA;QAAA;QAIhB,IAAI,IAAA,CAAK,OAAA,EAAS;YAChB,IAAA,CAAK,YAAA,GAAe,IAAA,CAAK,OAAA,CAAQ,KAAA;QAAA;QAGnC,IAAA,CAAK,OAAA,CAAQ,SAAA,GAAY,IAAA,CAAK,YAAA,GAAe,IAAA,CAAK,OAAA,CAAQ,KAAA,KAAU,OAAO,IAAA,CAAK,OAAA,CAAQ,KAAA,IAAS,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,SAAA,GAAY,IAAA,CAAK,OAAA,CAAQ,KAAA;QAE7I,IAAA,CAAK,mBAAA,GAAsB,IAAA,CAAK,EAAA;QAGhC,MAAM,SAAS,EAAE,UAAA,CAAW,IAAA,CAAK,OAAA,CAAQ,IAAA,CAAK,MAAA;QAC9C,MAAM,WAAW,EAAE,UAAA,CAAW,IAAA,CAAK,OAAA,CAAQ,IAAA,CAAK,QAAA;QAEhD,IAAA,CAAK,SAAA,GAAY;YACf,KAAK,CAAA,GAAA,EAAM,QAAA;YACX,KAAK,CAAA,GAAA,EAAM,QAAA;YACX,aAAa,CAAA,GAAA,EAAM,QAAA;YACnB,KAAK,CAAA,GAAA,EAAM,UAAA;YACX,QAAQ,CAAA,MAAA,EAAS,UAAA;YACjB,QAAQ,CAAA,MAAA,EAAS,UAAA;YACjB,gBAAgB,CAAA,MAAA,EAAS,QAAA;YACzB,WAAW,CAAA,GAAA,EAAM,UAAA;YACjB,QAAQ,CAAA,GAAA,EAAM,QAAA;YACd,OAAO,CAAA,KAAA,EAAQ,QAAA;QAAA;IAAA;IAInB,6BAA6B;QAI3B,IAAI,EAAE,QAAA,CAAS,IAAA,CAAK,OAAA,CAAQ,UAAA,GAAa;YACvC,IAAA,CAAK,mBAAA,GAAsB,IAAA,CAAK,OAAA,CAAQ,UAAA;YACxC,IAAA,CAAK,UAAA,GAAa,IAAA,CAAK,mBAAA,CAAoB,IAAA,IAAQ,IAAA,CAAK,mBAAA,CAAoB,SAAA;QAAA,OACvE;YACL,IAAA,CAAK,mBAAA,GAAsB,CAAA;YAC3B,IAAA,CAAK,UAAA,GAAa,IAAA,CAAK,OAAA,CAAQ,UAAA,IAAc,MAAM,QAAA,CACjD;gBACE,IAAA,CAAK,MAAA,CAAO,OAAA,CAAQ,IAAA,CAAK,QAAA;gBACzB,IAAA,CAAK,SAAA;aAAA,CACL,IAAA,CAAK;QAAA;QAIX,IAAI,EAAE,QAAA,CAAS,IAAA,CAAK,OAAA,CAAQ,QAAA,GAAW;YACrC,IAAA,CAAK,iBAAA,GAAoB,IAAA,CAAK,OAAA,CAAQ,QAAA;YACtC,IAAA,CAAK,QAAA,GAAW,IAAA,CAAK,iBAAA,CAAkB,IAAA,IAAQ,IAAA,CAAK,iBAAA,CAAkB,SAAA;QAAA,OACjE;YACL,IAAI,CAAC,IAAA,CAAK,OAAA,CAAQ,QAAA,EAAU;gBAC1B,IAAA,CAAK,eAAA,GAAkB;YAAA;YAGzB,IAAA,CAAK,iBAAA,GAAoB,CAAA;YACzB,IAAA,CAAK,QAAA,GAAW,IAAA,CAAK,OAAA,CAAQ,QAAA,IAAY,MAAM,QAAA,CAC7C;gBACE,IAAA,CAAK,iBAAA,GAAoB,MAAM,WAAA,CAAY,IAAA,CAAK,EAAA,IAAM,IAAA,CAAK,MAAA,CAAO,OAAA,CAAQ,IAAA,CAAK,QAAA;gBAC/E,IAAA,CAAK,SAAA;aAAA,CACL,IAAA,CAAK;QAAA;IAAA;IAOb,oBAAoB;QAClB,IAAA,CAAK,UAAA,GAAa,IAAA,CAAK,UAAA;QACvB,IAAA,CAAK,iBAAA,GAAoB,IAAA,CAAK,QAAA;QAI9B,EAAE,IAAA,CAAK,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,aAAA,EAAe,CAAC,WAAW,kBAAkB;YACrE,IAAI,UAAU,UAAA,KAAe,QAAQ,UAAU,cAAA,KAAmB,MAAM;gBACtE,IAAI;oBAAC,IAAA,CAAK,UAAA;oBAAY,IAAA,CAAK,QAAA;iBAAA,CAAU,QAAA,CAAS,gBAAgB;oBAG5D,UAAU,UAAA,GAAa;gBAAA,OAEpB;oBACH,OAAO,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,aAAA,CAAc,cAAA;gBAAA;gBAE1C,IAAA,CAAK,iBAAA,GAAoB;YAAA;QAAA;QAI7B,MAAM,YAAY,IAAA,CAAK,MAAA,CAAO,aAAA,CAAc,IAAA,CAAK,SAAA,CAAA;QACjD,MAAM,gBAAgB,UAAU,IAAA;QAChC,MAAM,iBAAiB,IAAA,CAAK,cAAA;QAC5B,MAAM,YAAY,IAAA,CAAK,MAAA,CAAO,aAAA,CAAc,IAAA,CAAK,SAAA,CAAA;QACjD,MAAM,gBAAgB,UAAU,IAAA;QAChC,MAAM,iBAAiB,IAAA,CAAK,cAAA;QAC5B,MAAM,kBAAkB,eAAA;YAAE,MAAM;QAAA,GAAkB,IAAA,CAAK,mBAAA;QACvD,MAAM,kBAAkB,eAAA;YAAE,MAAM;QAAA,GAAkB,IAAA,CAAK,iBAAA;QAEvD,IAAI,IAAA,CAAK,iBAAA,KAAsB,MAAM;YACnC,gBAAgB,UAAA,GAAa,gBAAgB,UAAA,GAAa;QAAA,OAAA,IACjD,IAAA,CAAK,OAAA,CAAQ,MAAA,KAAW,OAAO;YACxC,IAAI;YACJ,IAAI,OAAO,IAAA,CAAK,OAAA,CAAQ,SAAA,KAAc,YAAY,IAAA,CAAK,OAAA,CAAQ,SAAA,KAAc,IAAI;gBAC/E,YAAY,IAAA,CAAK,OAAA,CAAQ,SAAA;YAAA,OACpB;gBACL,YAAY;oBAAC,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,SAAA;oBAAW,IAAA,CAAK,UAAA;oBAAY,IAAA,CAAK,QAAA;oBAAU;iBAAA,CAAU,IAAA,CAAK;YAAA;YAE5F,gBAAgB,MAAA,GAAS,gBAAgB,MAAA,GAAS;QAAA;QAGpD,IAAI,CAAC,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,aAAA,CAAc,IAAA,CAAK,UAAA,CAAA,EAAa;YACtD,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,aAAA,CAAc,IAAA,CAAK,UAAA,CAAA,GAAc;gBAClD,gBAAgB;YAAA;QAAA;QAIpB,IAAI,CAAC,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,aAAA,CAAc,IAAA,CAAK,QAAA,CAAA,EAAW;YACpD,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,aAAA,CAAc,IAAA,CAAK,QAAA,CAAA,GAAY;gBAChD,gBAAgB;YAAA;QAAA;QAIpB,IAAI,IAAA,CAAK,OAAA,CAAQ,WAAA,KAAgB,OAAO;YACtC,gBAAgB,UAAA,GAAa;gBAC3B,OAAO,IAAA,CAAK,MAAA,CAAO,YAAA;gBACnB,KAAK;YAAA;YAGP,gBAAgB,QAAA,GAAW,IAAA,CAAK,OAAA,CAAQ,QAAA,IAAY,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,aAAA,CAAc,IAAA,CAAK,UAAA,CAAA,CAAY,QAAA;YACtG,gBAAgB,QAAA,GAAW,IAAA,CAAK,OAAA,CAAQ,QAAA,IAAY,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,aAAA,CAAc,IAAA,CAAK,UAAA,CAAA,CAAY,QAAA;YAEtG,IAAI,CAAC,gBAAgB,QAAA,EAAU,gBAAgB,QAAA,GAAW;YAC1D,IAAI,CAAC,gBAAgB,QAAA,EAAU,gBAAgB,QAAA,GAAW;YAE1D,gBAAgB,UAAA,GAAa;gBAC3B,OAAO,IAAA,CAAK,MAAA,CAAO,YAAA;gBACnB,KAAK;YAAA;YAGP,gBAAgB,QAAA,GAAW,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,aAAA,CAAc,IAAA,CAAK,QAAA,CAAA,CAAU,QAAA,IAAY,IAAA,CAAK,OAAA,CAAQ,QAAA;YACpG,gBAAgB,QAAA,GAAW,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,aAAA,CAAc,IAAA,CAAK,QAAA,CAAA,CAAU,QAAA,IAAY,IAAA,CAAK,OAAA,CAAQ,QAAA;YAEpG,IAAI,CAAC,gBAAgB,QAAA,EAAU,gBAAgB,QAAA,GAAW;YAC1D,IAAI,CAAC,gBAAgB,QAAA,EAAU,gBAAgB,QAAA,GAAW;QAAA;QAG5D,OAAO,MAAA,CAAO,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,aAAA,CAAc,IAAA,CAAK,UAAA,CAAA,EAAa;QACjE,OAAO,MAAA,CAAO,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,aAAA,CAAc,IAAA,CAAK,QAAA,CAAA,EAAW;QAE/D,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,iBAAA;QAEnB,IAAA,CAAK,eAAA,GAAkB,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,aAAA,CAAc,IAAA,CAAK,UAAA,CAAA,CAAY,KAAA,IAAS,IAAA,CAAK,UAAA;QACvF,IAAA,CAAK,sBAAA,GAAyB,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,aAAA,CAAc,IAAA,CAAK,QAAA,CAAA,CAAU,KAAA,IAAS,IAAA,CAAK,QAAA;QAK5F,IAAI,IAAA,CAAK,OAAA,CAAQ,SAAA,CAAU,OAAA,CAAQ,OAAA,KAAY,SAC3C,IAAA,CAAK,MAAA,CAAO,aAAA,CAAc,IAAA,CAAK,SAAA,CAAA,CAAW,UAAA,KAAe,MAAM;YACjE,IAAA,CAAK,MAAA,CAAO,aAAA,CAAc,IAAA,CAAK,SAAA,CAAA,CAAW,MAAA,GAAS;QAAA;QAGrD,IAAI,IAAA,CAAK,MAAA,IAAU,CAAC,IAAA,CAAK,MAAA,CAAO,sBAAA,EAAwB;YACtD,IAAA,CAAK,MAAA,CAAO,sBAAA,GAAyB,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,aAAA,CAAc,IAAA,CAAK,MAAA,CAAO,QAAA,CAAA,CAAU,KAAA,IAAS,IAAA,CAAK,MAAA,CAAO,QAAA;QAAA;QAGnH,IAAA,CAAK,QAAA,GAAW,IAAI,UAAU,IAAA,CAAK,OAAA,CAAQ,KAAA,EAAO,IAAA,CAAK,MAAA,EAAQ;YAC7D,YAAY,IAAA,CAAK,UAAA;QAAA;QAEnB,IAAA,CAAK,cAAA,GAAiB,IAAI,QAAQ,IAAA,CAAK,MAAA,EAAQ,IAAA,CAAK,OAAA,CAAQ,KAAA,EAAO;YACjE,YAAY,IAAA,CAAK,UAAA;QAAA;QAEnB,IAAA,CAAK,aAAA,GAAgB,IAAI,OAAO,IAAA,CAAK,MAAA,EAAQ,IAAA,CAAK,OAAA,CAAQ,KAAA,EAAO;YAC/D,YAAY,IAAA,CAAK,UAAA;YACjB,WAAW,IAAA,CAAK,SAAA;YAChB,IAAI,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,IAAA;QAAA;QAGzB,IAAA,CAAK,QAAA,GAAW,IAAI,UAAU,IAAA,CAAK,OAAA,CAAQ,KAAA,EAAO,IAAA,CAAK,MAAA,EAAQ;YAC7D,YAAY,IAAA,CAAK,QAAA;QAAA;QAEnB,IAAA,CAAK,cAAA,GAAiB,IAAI,QAAQ,IAAA,CAAK,MAAA,EAAQ,IAAA,CAAK,OAAA,CAAQ,KAAA,EAAO;YACjE,YAAY,IAAA,CAAK,QAAA;QAAA;QAEnB,IAAA,CAAK,aAAA,GAAgB,IAAI,OAAO,IAAA,CAAK,MAAA,EAAQ,IAAA,CAAK,OAAA,CAAQ,KAAA,EAAO;YAC/D,YAAY,IAAA,CAAK,QAAA;YACjB,WAAW,IAAA,CAAK,SAAA;YAChB,IAAI,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,IAAA;QAAA;QAGzB,IAAI,IAAA,CAAK,MAAA,IAAU,IAAA,CAAK,MAAA,CAAO,eAAA,EAAiB;YAC9C,IAAA,CAAK,MAAA,CAAO,QAAA,GAAW,IAAI,UAAU,IAAA,CAAK,MAAA,CAAO,OAAA,CAAQ,KAAA,EAAO,IAAA,CAAK,MAAA,CAAO,MAAA,EAAQ;gBAClF,YAAY,IAAA,CAAK,MAAA,CAAO,QAAA;YAAA;YAG1B,IAAA,CAAK,MAAA,CAAO,aAAA,GAAgB,IAAI,OAAO,IAAA,CAAK,MAAA,CAAO,MAAA,EAAQ,IAAA,CAAK,MAAA,CAAO,OAAA,CAAQ,KAAA,EAAO;gBACpF,YAAY,IAAA,CAAK,MAAA,CAAO,QAAA;gBACxB,WAAW,IAAA,CAAK,MAAA,CAAO,SAAA;gBACvB,IAAI,IAAA,CAAK,MAAA,CAAO,OAAA,CAAQ,KAAA,CAAM,IAAA;YAAA;QAAA;QAIlC,QAAQ,oBAAA,CAAqB,IAAA;QAE7B,OAAO,IAAA;IAAA;IAGT,MAAM,GAAA,EAAK;QACT,MAAM,UAAU;YAAC;YAAO;YAAS;YAAa;YAAU;YAAO;YAAO;YAAe;YAAU;YAAkB;SAAA;QACjH,MAAM,UAAU;YACd,WAAW;YACX,QAAQ;YACR,aAAa;YACb,gBAAgB;QAAA;QAGlB,QAAQ,YAAA,CAAa,IAAA,EAAM,KAAK,SAAS;IAAA;IAAA,MAmBrC,IAAI,QAAA,EAAU,OAAA,EAAS;QAC3B,UAAU,MAAM,SAAA,CAAU,YAAY,CAAA;QAEtC,MAAM,UAAU,IAAA,CAAK,OAAA;QACrB,IAAI;QACJ,IAAI;QAEJ,IAAI,IAAA,CAAK,KAAA,EAAO;YACd,aAAa,eAAA,CAAA,GAAK,IAAA,CAAK,KAAA;QAAA;QAGzB,QAAQ,KAAA,GAAQ;YAAA,CACb,GAAG,GAAA,CAAA,EAAM;gBACR;gBACA,QAAQ,KAAA;aAAA;QAAA;QAIZ,IAAI,OAAO,QAAQ,KAAA,MAAW,QAAQ,KAAA,EAAO;YAC3C,eAAe,CAAA;YACf,YAAA,CAAa,IAAA,CAAK,UAAA,CAAA,GAAc,SAAS,GAAA,CAAI,IAAA,CAAK,SAAA;YAElD,IAAI,QAAQ,KAAA,EAAO;gBACjB,OAAO,MAAA,CAAO,cAAc,QAAQ,KAAA;YAAA;YAItC,IAAI,QAAQ,OAAA,IAAW,QAAQ,OAAA,CAAQ,KAAA,EAAO;gBAC5C,eAAe;oBAAA,CACZ,GAAG,GAAA,CAAA,EAAM;wBAAC;wBAAc,QAAQ,OAAA,CAAQ,KAAA;qBAAA;gBAAA;YAAA;YAI7C,QAAQ,OAAA,GAAU,QAAQ,OAAA,IAAW,EAAA;YACrC,QAAQ,OAAA,CAAQ,IAAA,CAAK;gBACnB,aAAa,IAAA,CAAK,aAAA;gBAClB,YAAY,QAAQ,mBAAA;gBACpB,UAAU;gBACV,UAAU,EAAE,GAAA,CAAI,QAAQ,OAAA,EAAS,YAAY;gBAC7C,OAAO;YAAA;QAAA;QAIX,IAAI,QAAQ,IAAA,CAAK,MAAA;QACjB,IAAI,OAAO,SAAA,CAAU,cAAA,CAAe,IAAA,CAAK,SAAS,UAAU;YAC1D,IAAI,CAAC,QAAQ,KAAA,EAAO;gBAClB,QAAQ,MAAM,QAAA;YAAA,OACT;gBACL,QAAQ,MAAM,KAAA,CAAM,QAAQ,KAAA;YAAA;QAAA;QAIhC,IAAI,OAAO,SAAA,CAAU,cAAA,CAAe,IAAA,CAAK,SAAS,WAAW;YAC3D,QAAQ,MAAM,MAAA,CAAO,QAAQ,MAAA,EAAQ,QAAQ,eAAA;QAAA;QAG/C,OAAO,MAAM,OAAA,CAAQ;IAAA;IAAA,MAajB,MAAM,QAAA,EAAU,OAAA,EAAS;QAC7B,MAAM,YAAY,IAAA,CAAK,MAAA,CAAO,SAAA;QAE9B,UAAU,MAAM,SAAA,CAAU;QAC1B,QAAQ,UAAA,GAAa;YACnB;gBAAC,UAAU,EAAA,CAAG,SAAS,UAAU,GAAA,CAAI;oBAAC,IAAA,CAAK,MAAA,CAAO,IAAA;oBAAM,IAAA,CAAK,cAAA;iBAAA,CAAgB,IAAA,CAAK;gBAAQ;aAAA;SAAA;QAE5F,QAAQ,mBAAA,GAAsB,EAAA;QAC9B,QAAQ,GAAA,GAAM;QACd,QAAQ,KAAA,GAAQ;QAEhB,MAAM,SAAS,MAAM,IAAA,CAAK,GAAA,CAAI,UAAU;QAExC,OAAO,SAAS,OAAO,KAAA,EAAO;IAAA;IAAA,MAY1B,IAAI,cAAA,EAAgB,SAAA,EAAW,OAAA,EAAS;QAC5C,IAAI,CAAC,MAAM,OAAA,CAAQ,YAAY;YAC7B,YAAY;gBAAC;aAAA;QAAA;QAGf,UAAU,cAAA,eAAA;YACR,KAAK;QAAA,GACF,UAFK;YAGR,OAAO;YACP,YAAY;gBAAC,IAAA,CAAK,SAAA;aAAA;YAClB,qBAAqB,EAAA;QAAA;QAGvB,MAAM,sBAAsB,UAAU,GAAA,CAAI,CAAA,aAAY;YACpD,IAAI,oBAAoB,IAAA,CAAK,MAAA,EAAQ;gBACnC,OAAO,SAAS,KAAA;YAAA;YAElB,OAAO;gBAAA,CACJ,IAAA,CAAK,SAAA,CAAA,EAAY;YAAA;QAAA;QAItB,QAAQ,KAAA,GAAQ;YAAA,CACb,GAAG,GAAA,CAAA,EAAM;gBACR;oBAAA,CAAG,GAAG,EAAA,CAAA,EAAK;gBAAA;gBACX,QAAQ,KAAA;aAAA;QAAA;QAIZ,MAAM,oBAAoB,MAAM,IAAA,CAAK,GAAA,CAAI,gBAAgB;QAEzD,OAAO,EAAE,cAAA,CAAe,qBAAqB,mBAC3C,CAAC,GAAG,IAAM,EAAE,OAAA,CAAQ,CAAA,CAAE,IAAA,CAAK,SAAA,CAAA,EAAY,CAAA,CAAE,IAAA,CAAK,SAAA,CAAA,GAAa,MAAA,KAAW;IAAA;IAAA,MAepE,IAAI,cAAA,EAAgB,oBAAA,EAAsB,OAAA,EAAS;QACvD,UAAU,WAAW,CAAA;QAErB,MAAM,YAAY,IAAA,CAAK,SAAA;QACvB,MAAM,YAAY,IAAA,CAAK,SAAA;QACvB,MAAM,aAAa,IAAA,CAAK,UAAA;QACxB,MAAM,oBAAoB,IAAA,CAAK,iBAAA;QAE/B,IAAI,yBAAyB,MAAM;YACjC,uBAAuB,EAAA;QAAA,OAClB;YACL,uBAAuB,IAAA,CAAK,eAAA,CAAgB;QAAA;QAE9C,MAAM,QAAQ,eAAA;YAAA,CACX,WAAA,EAAa,eAAe,GAAA,CAAI;QAAA,GAC9B,IAAA,CAAK,OAAA,CAAQ,KAAA;QAGlB,MAAM,qBAAqB,CAAA,gBAAe;YACxC,MAAM,uBAAuB,EAAA;YAC7B,MAAM,WAAW,EAAA;YACjB,MAAM,oBAAoB,QAAQ,OAAA,IAAW,CAAA;YAE7C,MAAM,sBAAsB,qBAAqB,MAAA,CAAO,CAAA,MACtD,CAAC,YAAY,IAAA,CAAK,CAAA,aAAc,UAAA,CAAW,kBAAA,KAAuB,IAAI,GAAA,CAAI;YAG5E,KAAA,MAAW,cAAc,YAAa;gBACpC,MAAM,SAAS,qBAAqB,IAAA,CAAK,CAAA,MAAO,UAAA,CAAW,kBAAA,KAAuB,IAAI,GAAA,CAAI;gBAE1F,IAAI,CAAC,QAAQ;oBACX,qBAAqB,IAAA,CAAK;gBAAA,OACrB;oBACL,IAAI,oBAAoB,MAAA,CAAO,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,IAAA,CAAA;oBAElD,IAAI,6BAA6B,IAAA,CAAK,OAAA,CAAQ,KAAA,EAAO;wBACnD,oBAAoB,CAAA;oBAAA;oBAGtB,MAAM,aAAa,eAAA,eAAA,CAAA,GAAK,oBAAsB;oBAE9C,IAAI,OAAO,IAAA,CAAK,YAAY,MAAA,EAAQ;wBAClC,SAAS,IAAA,CACP,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,MAAA,CAAO,YAAY,OAAO,MAAA,CAAO,SAAS;4BAC3D,OAAO;gCAAA,CACJ,WAAA,EAAa,eAAe,GAAA,CAAI;gCAAA,CAChC,kBAAA,EAAoB,OAAO,GAAA,CAAI;4BAAA;wBAAA;oBAAA;gBAAA;YAAA;YAS5C,IAAI,qBAAqB,MAAA,GAAS,GAAG;gBACnC,SAAS,IAAA,CACP,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,OAAA,CAAQ,cAAA,eAAA,CAAA,GACtB,UADsB;oBAEzB,OAAO,eAAA;wBAAA,CACJ,WAAA,EAAa,eAAe,GAAA,CAAI;wBAAA,CAChC,kBAAA,EAAoB,qBAAqB,GAAA,CAAI,CAAA,sBAAuB,mBAAA,CAAoB,kBAAA;oBAAA,GACtF,IAAA,CAAK,OAAA,CAAQ,KAAA;gBAAA;YAAA;YAMxB,IAAI,oBAAoB,MAAA,GAAS,GAAG;gBAClC,MAAM,OAAO,oBAAoB,GAAA,CAAI,CAAA,uBAAsB;oBACzD,OAAO,eAAA,cAAA,eAAA,eAAA,CAAA,GACF,oBACA,kBAAA,CAAmB,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,IAAA,CAAA,GAFpC;wBAAA,CAGJ,WAAA,EAAa,eAAe,GAAA,CAAI;wBAAA,CAChC,kBAAA,EAAoB,mBAAmB,GAAA,CAAI;oBAAA,IACzC,IAAA,CAAK,OAAA,CAAQ,KAAA;gBAAA;gBAIpB,SAAS,IAAA,CAAK,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,UAAA,CAAW,MAAM,eAAA;oBAAE,UAAU;gBAAA,GAAS;YAAA;YAGzE,OAAO,QAAQ,GAAA,CAAI;QAAA;QAGrB,IAAI;YACF,MAAM,cAAc,MAAM,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,OAAA,CAAQ,cAAA,eAAA,CAAA,GAAK,UAAL;gBAAc;gBAAO,KAAK;YAAA;YAC/E,OAAO,MAAM,mBAAmB;QAAA,EAAA,OACzB,OAAP;YACA,IAAI,iBAAiB,kBAAkB,OAAO,mBAAmB,EAAA;YACjE,MAAM;QAAA;IAAA;IAAA,MAgBJ,IAAI,cAAA,EAAgB,YAAA,EAAc,OAAA,EAAS;QAE/C,IAAI,CAAC,cAAc,OAAO,QAAQ,OAAA;QAElC,UAAU,eAAA,CAAA,GAAK;QAEf,MAAM,cAAc,IAAA;QACpB,MAAM,YAAY,YAAY,SAAA;QAC9B,MAAM,YAAY,YAAY,SAAA;QAC9B,MAAM,aAAa,YAAY,UAAA;QAC/B,MAAM,oBAAoB,YAAY,iBAAA;QACtC,MAAM,oBAAoB,QAAQ,OAAA,IAAW,CAAA;QAE7C,eAAe,YAAY,eAAA,CAAgB;QAE3C,MAAM,QAAQ,eAAA;YAAA,CACX,WAAA,EAAa,eAAe,GAAA,CAAI;YAAA,CAChC,kBAAA,EAAoB,aAAa,GAAA,CAAI,CAAA,cAAe,YAAY,GAAA,CAAI;QAAA,GAClE,YAAY,OAAA,CAAQ,KAAA;QAGzB,MAAM,qBAAqB,CAAA,gBAAe;YACxC,MAAM,WAAW,EAAA;YACjB,MAAM,sBAAsB,EAAA;YAC5B,MAAM,sBAAsB,EAAA;YAC5B,KAAA,MAAW,OAAO,aAAc;gBAC9B,MAAM,sBAAsB,eAAe,YAAY,IAAA,CAAK,CAAA,UAAW,OAAA,CAAQ,kBAAA,KAAuB,IAAI,GAAA,CAAI;gBAE9G,IAAI,CAAC,qBAAqB;oBACxB,oBAAoB,IAAA,CAAK;gBAAA,OACpB;oBACL,MAAM,oBAAoB,GAAA,CAAI,YAAY,OAAA,CAAQ,KAAA,CAAM,IAAA,CAAA;oBACxD,MAAM,aAAa,eAAA,eAAA,CAAA,GAAK,oBAAsB;oBAE9C,IAAI,OAAO,IAAA,CAAK,YAAY,IAAA,CAAK,CAAA,YAAa,UAAA,CAAW,UAAA,KAAe,mBAAA,CAAoB,UAAA,GAAa;wBACvG,oBAAoB,IAAA,CAAK;oBAAA;gBAAA;YAAA;YAK/B,IAAI,oBAAoB,MAAA,GAAS,GAAG;gBAClC,MAAM,OAAO,oBAAoB,GAAA,CAAI,CAAA,uBAAsB;oBACzD,MAAM,oBAAoB,kBAAA,CAAmB,YAAY,OAAA,CAAQ,KAAA,CAAM,IAAA,CAAA;oBACvE,MAAM,aAAa,eAAA,eAAA,CAAA,GAAK,oBAAsB;oBAE9C,UAAA,CAAW,WAAA,GAAc,eAAe,GAAA,CAAI;oBAC5C,UAAA,CAAW,kBAAA,GAAqB,mBAAmB,GAAA,CAAI;oBAEvD,OAAO,MAAA,CAAO,YAAY,YAAY,OAAA,CAAQ,KAAA;oBAE9C,OAAO;gBAAA;gBAGT,SAAS,IAAA,CAAK,YAAY,OAAA,CAAQ,KAAA,CAAM,UAAA,CAAW,MAAM,eAAA;oBAAE,UAAU;gBAAA,GAAS;YAAA;YAGhF,KAAA,MAAW,SAAS,oBAAqB;gBACvC,IAAI,oBAAoB,KAAA,CAAM,YAAY,OAAA,CAAQ,KAAA,CAAM,IAAA,CAAA;gBACxD,MAAM,aAAa,eAAA,eAAA,CAAA,GAAK,oBAAsB;gBAE9C,IAAI,6BAA6B,YAAY,OAAA,CAAQ,KAAA,EAAO;oBAC1D,oBAAoB,CAAA;gBAAA;gBAGtB,SAAS,IAAA,CAAK,YAAY,OAAA,CAAQ,KAAA,CAAM,MAAA,CAAO,YAAY,OAAO,MAAA,CAAO,SAAS;oBAAE,OAAO;wBAAA,CACxF,WAAA,EAAa,eAAe,GAAA,CAAI;wBAAA,CAChC,kBAAA,EAAoB,MAAM,GAAA,CAAI;oBAAA;gBAAA;YAAA;YAInC,OAAO,QAAQ,GAAA,CAAI;QAAA;QAGrB,IAAI;YACF,MAAM,cAAc,MAAM,YAAY,OAAA,CAAQ,KAAA,CAAM,OAAA,CAAQ,cAAA,eAAA,CAAA,GAAK,UAAL;gBAAc;gBAAO,KAAK;YAAA;YACtF,MAAM,CAAC,aAAA,GAAgB,MAAM,mBAAmB;YAChD,OAAO;QAAA,EAAA,OACA,OAAP;YACA,IAAI,iBAAiB,kBAAkB,OAAO;YAC9C,MAAM;QAAA;IAAA;IAaV,OAAO,cAAA,EAAgB,oBAAA,EAAsB,OAAA,EAAS;QACpD,MAAM,cAAc,IAAA;QAEpB,UAAU,WAAW,CAAA;QAErB,uBAAuB,YAAY,eAAA,CAAgB;QAEnD,MAAM,QAAQ;YAAA,CACX,YAAY,UAAA,CAAA,EAAa,eAAe,GAAA,CAAI,YAAY,SAAA;YAAA,CACxD,YAAY,iBAAA,CAAA,EAAoB,qBAAqB,GAAA,CAAI,CAAA,cAAe,YAAY,GAAA,CAAI,YAAY,SAAA;QAAA;QAGvG,OAAO,YAAY,OAAA,CAAQ,KAAA,CAAM,OAAA,CAAQ,cAAA,eAAA,CAAA,GAAK,UAAL;YAAc;QAAA;IAAA;IAAA,MAanD,OAAO,cAAA,EAAgB,MAAA,EAAQ,OAAA,EAAS;QAC5C,MAAM,cAAc,IAAA;QAEpB,UAAU,WAAW,CAAA;QACrB,SAAS,UAAU,CAAA;QAEnB,IAAI,MAAM,OAAA,CAAQ,UAAU;YAC1B,UAAU;gBACR,QAAQ;YAAA;QAAA;QAIZ,IAAI,YAAY,KAAA,EAAO;YACrB,OAAO,MAAA,CAAO,QAAQ,YAAY,KAAA;YAClC,IAAI,QAAQ,MAAA,EAAQ;gBAClB,QAAQ,MAAA,GAAS,QAAQ,MAAA,CAAO,MAAA,CAAO,OAAO,IAAA,CAAK,YAAY,KAAA;YAAA;QAAA;QAKnE,MAAM,sBAAsB,MAAM,YAAY,MAAA,CAAO,MAAA,CAAO,QAAQ;QAEpE,MAAM,cAAA,CAAe,YAAY,SAAA,CAAU,GAAA,CAAA,CAAK,qBAAqB,EAAE,IAAA,CAAK,SAAS;YAAC;SAAA;QACtF,OAAO;IAAA;IAGT,uBAAuB,KAAA,EAAO;QAC5B,IAAI,OAAO,UAAU,UAAU;YAC7B,OAAO,IAAA,CAAK,EAAA,KAAO;QAAA;QAGrB,IAAI,SAAS,MAAM,MAAA,EAAQ;YACzB,OAAO,IAAA,CAAK,EAAA,KAAO,MAAM,MAAA;QAAA;QAG3B,OAAO,CAAC,IAAA,CAAK,SAAA;IAAA;AAAA;AAIjB,OAAO,OAAA,GAAU;AACjB,OAAO,OAAA,CAAQ,aAAA,GAAgB;AAC/B,OAAO,OAAA,CAAQ,OAAA,GAAU","ignoreList":[0]}},
    {"offset": {"line": 7219, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7224, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/instance-validator.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Utils = require('./utils');\nconst sequelizeError = require('./errors');\nconst DataTypes = require('./data-types');\nconst BelongsTo = require('./associations/belongs-to');\nconst validator = require('./utils/validator-extras').validator;\nconst { promisify } = require('util');\n\n/**\n * Instance Validator.\n *\n * @param {Instance} modelInstance The model instance.\n * @param {object} options A dictionary with options.\n *\n * @private\n */\nclass InstanceValidator {\n  constructor(modelInstance, options) {\n    options = {\n      // assign defined and default options\n      hooks: true,\n      ...options\n    };\n\n    if (options.fields && !options.skip) {\n      options.skip = _.difference(Object.keys(modelInstance.constructor.rawAttributes), options.fields);\n    } else {\n      options.skip = options.skip || [];\n    }\n\n    this.options = options;\n\n    this.modelInstance = modelInstance;\n\n    /**\n     * Exposes a reference to validator.js. This allows you to add custom validations using `validator.extend`\n     *\n     * @name validator\n     * @private\n     */\n    this.validator = validator;\n\n    /**\n     *  All errors will be stored here from the validations.\n     *\n     * @type {Array} Will contain keys that correspond to attributes which will\n     *   be Arrays of Errors.\n     * @private\n     */\n    this.errors = [];\n\n    /**\n     * @type {boolean} Indicates if validations are in progress\n     * @private\n     */\n    this.inProgress = false;\n  }\n\n  /**\n   * The main entry point for the Validation module, invoke to start the dance.\n   *\n   * @returns {Promise}\n   * @private\n   */\n  async _validate() {\n    if (this.inProgress) throw new Error('Validations already in progress.');\n\n    this.inProgress = true;\n\n    await Promise.all([\n      this._perAttributeValidators(),\n      this._customValidators()\n    ]);\n\n    if (this.errors.length) {\n      throw new sequelizeError.ValidationError(null, this.errors);\n    }\n  }\n\n  /**\n   * Invoke the Validation sequence and run validation hooks if defined\n   *   - Before Validation Model Hooks\n   *   - Validation\n   *   - On validation success: After Validation Model Hooks\n   *   - On validation failure: Validation Failed Model Hooks\n   *\n   * @returns {Promise}\n   * @private\n   */\n  async validate() {\n    return await (this.options.hooks ? this._validateAndRunHooks() : this._validate());\n  }\n\n  /**\n   * Invoke the Validation sequence and run hooks\n   *   - Before Validation Model Hooks\n   *   - Validation\n   *   - On validation success: After Validation Model Hooks\n   *   - On validation failure: Validation Failed Model Hooks\n   *\n   * @returns {Promise}\n   * @private\n   */\n  async _validateAndRunHooks() {\n    const runHooks = this.modelInstance.constructor.runHooks.bind(this.modelInstance.constructor);\n    await runHooks('beforeValidate', this.modelInstance, this.options);\n\n    try {\n      await this._validate();\n    } catch (error) {\n      const newError = await runHooks('validationFailed', this.modelInstance, this.options, error);\n      throw newError || error;\n    }\n\n    await runHooks('afterValidate', this.modelInstance, this.options);\n    return this.modelInstance;\n  }\n\n  /**\n   * Will run all the validators defined per attribute (built-in validators and custom validators)\n   *\n   * @returns {Promise<Array>}\n   * @private\n   */\n  async _perAttributeValidators() {\n    // promisify all attribute invocations\n    const validators = [];\n\n    _.forIn(this.modelInstance.rawAttributes, (rawAttribute, field) => {\n      if (this.options.skip.includes(field)) {\n        return;\n      }\n\n      const value = this.modelInstance.dataValues[field];\n\n      if (value instanceof Utils.SequelizeMethod) {\n        return;\n      }\n\n      if (!rawAttribute._autoGenerated && !rawAttribute.autoIncrement) {\n        // perform validations based on schema\n        this._validateSchema(rawAttribute, field, value);\n      }\n\n      if (Object.prototype.hasOwnProperty.call(this.modelInstance.validators, field)) {\n        validators.push(this._singleAttrValidate(value, field, rawAttribute.allowNull));\n      }\n    });\n\n    return await Promise.all(validators);\n  }\n\n  /**\n   * Will run all the custom validators defined in the model's options.\n   *\n   * @returns {Promise<Array>}\n   * @private\n   */\n  async _customValidators() {\n    const validators = [];\n    _.each(this.modelInstance.constructor.options.validate, (validator, validatorType) => {\n      if (this.options.skip.includes(validatorType)) {\n        return;\n      }\n\n      const valprom = this._invokeCustomValidator(validator, validatorType)\n        // errors are handled in settling, stub this\n        .catch(() => {});\n\n      validators.push(valprom);\n    });\n\n    return await Promise.all(validators);\n  }\n\n  /**\n   * Validate a single attribute with all the defined built-in validators and custom validators.\n   *\n   * @private\n   *\n   * @param {*} value Anything.\n   * @param {string} field The field name.\n   * @param {boolean} allowNull Whether or not the schema allows null values\n   *\n   * @returns {Promise} A promise, will always resolve, auto populates error on this.error local object.\n   */\n  async _singleAttrValidate(value, field, allowNull) {\n    // If value is null and allowNull is false, no validators should run (see #9143)\n    if ((value === null || value === undefined) && !allowNull) {\n      // The schema validator (_validateSchema) has already generated the validation error. Nothing to do here.\n      return;\n    }\n\n    // Promisify each validator\n    const validators = [];\n    _.forIn(this.modelInstance.validators[field], (test, validatorType) => {\n\n      if (['isUrl', 'isURL', 'isEmail'].includes(validatorType)) {\n        // Preserve backwards compat. Validator.js now expects the second param to isURL and isEmail to be an object\n        if (typeof test === 'object' && test !== null && test.msg) {\n          test = {\n            msg: test.msg\n          };\n        } else if (test === true) {\n          test = {};\n        }\n      }\n\n      // Custom validators should always run, except if value is null and allowNull is false (see #9143)\n      if (typeof test === 'function') {\n        validators.push(this._invokeCustomValidator(test, validatorType, true, value, field));\n        return;\n      }\n\n      // If value is null, built-in validators should not run (only custom validators have to run) (see #9134).\n      if (value === null || value === undefined) {\n        return;\n      }\n\n      const validatorPromise = this._invokeBuiltinValidator(value, test, validatorType, field);\n      // errors are handled in settling, stub this\n      validatorPromise.catch(() => {});\n      validators.push(validatorPromise);\n    });\n\n    return Promise\n      .all(validators.map(validator => validator.catch(rejection => {\n        const isBuiltIn = !!rejection.validatorName;\n        this._pushError(isBuiltIn, field, rejection, value, rejection.validatorName, rejection.validatorArgs);\n      })));\n  }\n\n  /**\n   * Prepare and invoke a custom validator.\n   *\n   * @private\n   *\n   * @param {Function} validator The custom validator.\n   * @param {string} validatorType the custom validator type (name).\n   * @param {boolean} optAttrDefined Set to true if custom validator was defined from the attribute\n   * @param {*} optValue value for attribute\n   * @param {string} optField field for attribute\n   *\n   * @returns {Promise} A promise.\n   */\n  async _invokeCustomValidator(validator, validatorType, optAttrDefined, optValue, optField) {\n    let isAsync = false;\n\n    const validatorArity = validator.length;\n    // check if validator is async and requires a callback\n    let asyncArity = 1;\n    let errorKey = validatorType;\n    let invokeArgs;\n    if (optAttrDefined) {\n      asyncArity = 2;\n      invokeArgs = optValue;\n      errorKey = optField;\n    }\n    if (validatorArity === asyncArity) {\n      isAsync = true;\n    }\n\n    if (isAsync) {\n      try {\n        if (optAttrDefined) {\n          return await promisify(validator.bind(this.modelInstance, invokeArgs))();\n        }\n        return await promisify(validator.bind(this.modelInstance))();\n      } catch (e) {\n        return this._pushError(false, errorKey, e, optValue, validatorType);\n      }\n    }\n\n    try {\n      return await validator.call(this.modelInstance, invokeArgs);\n    } catch (e) {\n      return this._pushError(false, errorKey, e, optValue, validatorType);\n    }\n  }\n\n  /**\n   * Prepare and invoke a build-in validator.\n   *\n   * @private\n   *\n   * @param {*} value Anything.\n   * @param {*} test The test case.\n   * @param {string} validatorType One of known to Sequelize validators.\n   * @param {string} field The field that is being validated\n   *\n   * @returns {object} An object with specific keys to invoke the validator.\n   */\n  async _invokeBuiltinValidator(value, test, validatorType, field) {\n    // Cast value as string to pass new Validator.js string requirement\n    const valueString = String(value);\n    // check if Validator knows that kind of validation test\n    if (typeof validator[validatorType] !== 'function') {\n      throw new Error(`Invalid validator function: ${validatorType}`);\n    }\n\n    const validatorArgs = this._extractValidatorArgs(test, validatorType, field);\n\n    if (!validator[validatorType](valueString, ...validatorArgs)) {\n      throw Object.assign(new Error(test.msg || `Validation ${validatorType} on ${field} failed`), { validatorName: validatorType, validatorArgs });\n    }\n  }\n\n  /**\n   * Will extract arguments for the validator.\n   *\n   * @param {*} test The test case.\n   * @param {string} validatorType One of known to Sequelize validators.\n   * @param {string} field The field that is being validated.\n   *\n   * @private\n   */\n  _extractValidatorArgs(test, validatorType, field) {\n    let validatorArgs = test.args || test;\n    const isLocalizedValidator = typeof validatorArgs !== 'string' && ['isAlpha', 'isAlphanumeric', 'isMobilePhone'].includes(validatorType);\n\n    if (!Array.isArray(validatorArgs)) {\n      if (validatorType === 'isImmutable') {\n        validatorArgs = [validatorArgs, field, this.modelInstance];\n      } else if (isLocalizedValidator || validatorType === 'isIP') {\n        validatorArgs = [];\n      } else {\n        validatorArgs = [validatorArgs];\n      }\n    } else {\n      validatorArgs = validatorArgs.slice(0);\n    }\n    return validatorArgs;\n  }\n\n  /**\n   * Will validate a single field against its schema definition (isnull).\n   *\n   * @param {object} rawAttribute As defined in the Schema.\n   * @param {string} field The field name.\n   * @param {*} value anything.\n   *\n   * @private\n   */\n  _validateSchema(rawAttribute, field, value) {\n    if (rawAttribute.allowNull === false && (value === null || value === undefined)) {\n      const association = Object.values(this.modelInstance.constructor.associations).find(association => association instanceof BelongsTo && association.foreignKey === rawAttribute.fieldName);\n      if (!association || !this.modelInstance.get(association.associationAccessor)) {\n        const validators = this.modelInstance.validators[field];\n        const errMsg = _.get(validators, 'notNull.msg', `${this.modelInstance.constructor.name}.${field} cannot be null`);\n\n        this.errors.push(new sequelizeError.ValidationErrorItem(\n          errMsg,\n          'notNull Violation', // sequelizeError.ValidationErrorItem.Origins.CORE,\n          field,\n          value,\n          this.modelInstance,\n          'is_null'\n        ));\n      }\n    }\n\n    if (rawAttribute.type instanceof DataTypes.STRING || rawAttribute.type instanceof DataTypes.TEXT || rawAttribute.type instanceof DataTypes.CITEXT) {\n      if (Array.isArray(value) || _.isObject(value) && !(value instanceof Utils.SequelizeMethod) && !Buffer.isBuffer(value)) {\n        this.errors.push(new sequelizeError.ValidationErrorItem(\n          `${field} cannot be an array or an object`,\n          'string violation', // sequelizeError.ValidationErrorItem.Origins.CORE,\n          field,\n          value,\n          this.modelInstance,\n          'not_a_string'\n        ));\n      }\n    }\n  }\n\n  /**\n   * Signs all errors retaining the original.\n   *\n   * @param {boolean}       isBuiltin   - Determines if error is from builtin validator.\n   * @param {string}        errorKey    - name of invalid attribute.\n   * @param {Error|string}  rawError    - The original error.\n   * @param {string|number} value       - The data that triggered the error.\n   * @param {string}        fnName      - Name of the validator, if any\n   * @param {Array}         fnArgs      - Arguments for the validator [function], if any\n   *\n   * @private\n   */\n  _pushError(isBuiltin, errorKey, rawError, value, fnName, fnArgs) {\n    const message = rawError.message || rawError || 'Validation error';\n    const error = new sequelizeError.ValidationErrorItem(\n      message,\n      'Validation error', // sequelizeError.ValidationErrorItem.Origins.FUNCTION,\n      errorKey,\n      value,\n      this.modelInstance,\n      fnName,\n      isBuiltin ? fnName : undefined,\n      isBuiltin ? fnArgs : undefined\n    );\n\n    error[InstanceValidator.RAW_KEY_NAME] = rawError;\n\n    this.errors.push(error);\n  }\n}\n/**\n * The error key for arguments as passed by custom validators\n *\n * @type {string}\n * @private\n */\nInstanceValidator.RAW_KEY_NAME = 'original';\n\nmodule.exports = InstanceValidator;\nmodule.exports.InstanceValidator = InstanceValidator;\nmodule.exports.default = InstanceValidator;\n"],"names":[],"mappings":"AA4WqG;;;;;;;;;;;;;;;;;;;AA1WrG,MAAM,IAAI,QAAQ;AAClB,MAAM,QAAQ,QAAQ;AACtB,MAAM,iBAAiB,QAAQ;AAC/B,MAAM,YAAY,QAAQ;AAC1B,MAAM,YAAY,QAAQ;AAC1B,MAAM,YAAY,QAAQ,0GAA4B,SAAA;AACtD,MAAM,EAAE,SAAA,EAAA,GAAc,QAAQ;AAU9B,MAAA,kBAAwB;IACtB,YAAY,aAAA,EAAe,OAAA,CAAS;QAClC,UAAU,eAAA;YAER,OAAO;QAAA,GACJ;QAGL,IAAI,QAAQ,MAAA,IAAU,CAAC,QAAQ,IAAA,EAAM;YACnC,QAAQ,IAAA,GAAO,EAAE,UAAA,CAAW,OAAO,IAAA,CAAK,cAAc,WAAA,CAAY,aAAA,GAAgB,QAAQ,MAAA;QAAA,OACrF;YACL,QAAQ,IAAA,GAAO,QAAQ,IAAA,IAAQ,EAAA;QAAA;QAGjC,IAAA,CAAK,OAAA,GAAU;QAEf,IAAA,CAAK,aAAA,GAAgB;QAQrB,IAAA,CAAK,SAAA,GAAY;QASjB,IAAA,CAAK,MAAA,GAAS,EAAA;QAMd,IAAA,CAAK,UAAA,GAAa;IAAA;IAAA,MASd,YAAY;QAChB,IAAI,IAAA,CAAK,UAAA,EAAY,MAAM,IAAI,MAAM;QAErC,IAAA,CAAK,UAAA,GAAa;QAElB,MAAM,QAAQ,GAAA,CAAI;YAChB,IAAA,CAAK,uBAAA;YACL,IAAA,CAAK,iBAAA;SAAA;QAGP,IAAI,IAAA,CAAK,MAAA,CAAO,MAAA,EAAQ;YACtB,MAAM,IAAI,eAAe,eAAA,CAAgB,MAAM,IAAA,CAAK,MAAA;QAAA;IAAA;IAAA,MAclD,WAAW;QACf,OAAO,MAAO,CAAA,IAAA,CAAK,OAAA,CAAQ,KAAA,GAAQ,IAAA,CAAK,oBAAA,KAAyB,IAAA,CAAK,SAAA,EAAA;IAAA;IAAA,MAalE,uBAAuB;QAC3B,MAAM,WAAW,IAAA,CAAK,aAAA,CAAc,WAAA,CAAY,QAAA,CAAS,IAAA,CAAK,IAAA,CAAK,aAAA,CAAc,WAAA;QACjF,MAAM,SAAS,kBAAkB,IAAA,CAAK,aAAA,EAAe,IAAA,CAAK,OAAA;QAE1D,IAAI;YACF,MAAM,IAAA,CAAK,SAAA;QAAA,EAAA,OACJ,OAAP;YACA,MAAM,WAAW,MAAM,SAAS,oBAAoB,IAAA,CAAK,aAAA,EAAe,IAAA,CAAK,OAAA,EAAS;YACtF,MAAM,YAAY;QAAA;QAGpB,MAAM,SAAS,iBAAiB,IAAA,CAAK,aAAA,EAAe,IAAA,CAAK,OAAA;QACzD,OAAO,IAAA,CAAK,aAAA;IAAA;IAAA,MASR,0BAA0B;QAE9B,MAAM,aAAa,EAAA;QAEnB,EAAE,KAAA,CAAM,IAAA,CAAK,aAAA,CAAc,aAAA,EAAe,CAAC,cAAc,UAAU;YACjE,IAAI,IAAA,CAAK,OAAA,CAAQ,IAAA,CAAK,QAAA,CAAS,QAAQ;gBACrC;YAAA;YAGF,MAAM,QAAQ,IAAA,CAAK,aAAA,CAAc,UAAA,CAAW,MAAA;YAE5C,IAAI,iBAAiB,MAAM,eAAA,EAAiB;gBAC1C;YAAA;YAGF,IAAI,CAAC,aAAa,cAAA,IAAkB,CAAC,aAAa,aAAA,EAAe;gBAE/D,IAAA,CAAK,eAAA,CAAgB,cAAc,OAAO;YAAA;YAG5C,IAAI,OAAO,SAAA,CAAU,cAAA,CAAe,IAAA,CAAK,IAAA,CAAK,aAAA,CAAc,UAAA,EAAY,QAAQ;gBAC9E,WAAW,IAAA,CAAK,IAAA,CAAK,mBAAA,CAAoB,OAAO,OAAO,aAAa,SAAA;YAAA;QAAA;QAIxE,OAAO,MAAM,QAAQ,GAAA,CAAI;IAAA;IAAA,MASrB,oBAAoB;QACxB,MAAM,aAAa,EAAA;QACnB,EAAE,IAAA,CAAK,IAAA,CAAK,aAAA,CAAc,WAAA,CAAY,OAAA,CAAQ,QAAA,EAAU,CAAC,YAAW,kBAAkB;YACpF,IAAI,IAAA,CAAK,OAAA,CAAQ,IAAA,CAAK,QAAA,CAAS,gBAAgB;gBAC7C;YAAA;YAGF,MAAM,UAAU,IAAA,CAAK,sBAAA,CAAuB,YAAW,eAEpD,KAAA,CAAM,KAAM,CAAA;YAEf,WAAW,IAAA,CAAK;QAAA;QAGlB,OAAO,MAAM,QAAQ,GAAA,CAAI;IAAA;IAAA,MAcrB,oBAAoB,KAAA,EAAO,KAAA,EAAO,SAAA,EAAW;QAEjD,IAAK,CAAA,UAAU,QAAQ,UAAU,KAAA,CAAA,KAAc,CAAC,WAAW;YAEzD;QAAA;QAIF,MAAM,aAAa,EAAA;QACnB,EAAE,KAAA,CAAM,IAAA,CAAK,aAAA,CAAc,UAAA,CAAW,MAAA,EAAQ,CAAC,MAAM,kBAAkB;YAErE,IAAI;gBAAC;gBAAS;gBAAS;aAAA,CAAW,QAAA,CAAS,gBAAgB;gBAEzD,IAAI,OAAO,SAAS,YAAY,SAAS,QAAQ,KAAK,GAAA,EAAK;oBACzD,OAAO;wBACL,KAAK,KAAK,GAAA;oBAAA;gBAAA,OAAA,IAEH,SAAS,MAAM;oBACxB,OAAO,CAAA;gBAAA;YAAA;YAKX,IAAI,OAAO,SAAS,YAAY;gBAC9B,WAAW,IAAA,CAAK,IAAA,CAAK,sBAAA,CAAuB,MAAM,eAAe,MAAM,OAAO;gBAC9E;YAAA;YAIF,IAAI,UAAU,QAAQ,UAAU,KAAA,GAAW;gBACzC;YAAA;YAGF,MAAM,mBAAmB,IAAA,CAAK,uBAAA,CAAwB,OAAO,MAAM,eAAe;YAElF,iBAAiB,KAAA,CAAM,KAAM,CAAA;YAC7B,WAAW,IAAA,CAAK;QAAA;QAGlB,OAAO,QACJ,GAAA,CAAI,WAAW,GAAA,CAAI,CAAA,aAAa,WAAU,KAAA,CAAM,CAAA,cAAa;gBAC5D,MAAM,YAAY,CAAC,CAAC,UAAU,aAAA;gBAC9B,IAAA,CAAK,UAAA,CAAW,WAAW,OAAO,WAAW,OAAO,UAAU,aAAA,EAAe,UAAU,aAAA;YAAA;IAAA;IAAA,MAiBvF,uBAAuB,UAAA,EAAW,aAAA,EAAe,cAAA,EAAgB,QAAA,EAAU,QAAA,EAAU;QACzF,IAAI,UAAU;QAEd,MAAM,iBAAiB,WAAU,MAAA;QAEjC,IAAI,aAAa;QACjB,IAAI,WAAW;QACf,IAAI;QACJ,IAAI,gBAAgB;YAClB,aAAa;YACb,aAAa;YACb,WAAW;QAAA;QAEb,IAAI,mBAAmB,YAAY;YACjC,UAAU;QAAA;QAGZ,IAAI,SAAS;YACX,IAAI;gBACF,IAAI,gBAAgB;oBAClB,OAAO,MAAM,UAAU,WAAU,IAAA,CAAK,IAAA,CAAK,aAAA,EAAe;gBAAA;gBAE5D,OAAO,MAAM,UAAU,WAAU,IAAA,CAAK,IAAA,CAAK,aAAA;YAAA,EAAA,OACpC,GAAP;gBACA,OAAO,IAAA,CAAK,UAAA,CAAW,OAAO,UAAU,GAAG,UAAU;YAAA;QAAA;QAIzD,IAAI;YACF,OAAO,MAAM,WAAU,IAAA,CAAK,IAAA,CAAK,aAAA,EAAe;QAAA,EAAA,OACzC,GAAP;YACA,OAAO,IAAA,CAAK,UAAA,CAAW,OAAO,UAAU,GAAG,UAAU;QAAA;IAAA;IAAA,MAgBnD,wBAAwB,KAAA,EAAO,IAAA,EAAM,aAAA,EAAe,KAAA,EAAO;QAE/D,MAAM,cAAc,OAAO;QAE3B,IAAI,OAAO,SAAA,CAAU,cAAA,KAAmB,YAAY;YAClD,MAAM,IAAI,MAAM,CAAA,4BAAA,EAA+B,eAAA;QAAA;QAGjD,MAAM,gBAAgB,IAAA,CAAK,qBAAA,CAAsB,MAAM,eAAe;QAEtE,IAAI,CAAC,SAAA,CAAU,cAAA,CAAe,aAAa,GAAG,gBAAgB;YAC5D,MAAM,OAAO,MAAA,CAAO,IAAI,MAAM,KAAK,GAAA,IAAO,CAAA,WAAA,EAAc,cAAA,IAAA,EAAoB,MAAA,OAAA,CAAA,GAAiB;gBAAE,eAAe;gBAAe;YAAA;QAAA;IAAA;IAajI,sBAAsB,IAAA,EAAM,aAAA,EAAe,KAAA,EAAO;QAChD,IAAI,gBAAgB,KAAK,IAAA,IAAQ;QACjC,MAAM,uBAAuB,OAAO,kBAAkB,YAAY;YAAC;YAAW;YAAkB;SAAA,CAAiB,QAAA,CAAS;QAE1H,IAAI,CAAC,MAAM,OAAA,CAAQ,gBAAgB;YACjC,IAAI,kBAAkB,eAAe;gBACnC,gBAAgB;oBAAC;oBAAe;oBAAO,IAAA,CAAK,aAAA;iBAAA;YAAA,OAAA,IACnC,wBAAwB,kBAAkB,QAAQ;gBAC3D,gBAAgB,EAAA;YAAA,OACX;gBACL,gBAAgB;oBAAC;iBAAA;YAAA;QAAA,OAEd;YACL,gBAAgB,cAAc,KAAA,CAAM;QAAA;QAEtC,OAAO;IAAA;IAYT,gBAAgB,YAAA,EAAc,KAAA,EAAO,KAAA,EAAO;QAC1C,IAAI,aAAa,SAAA,KAAc,SAAU,CAAA,UAAU,QAAQ,UAAU,KAAA,CAAA,GAAY;YAC/E,MAAM,cAAc,OAAO,MAAA,CAAO,IAAA,CAAK,aAAA,CAAc,WAAA,CAAY,YAAA,EAAc,IAAA,CAAK,CAAA,eAAe,wBAAuB,aAAa,aAAY,UAAA,KAAe,aAAa,SAAA;YAC/K,IAAI,CAAC,eAAe,CAAC,IAAA,CAAK,aAAA,CAAc,GAAA,CAAI,YAAY,mBAAA,GAAsB;gBAC5E,MAAM,aAAa,IAAA,CAAK,aAAA,CAAc,UAAA,CAAW,MAAA;gBACjD,MAAM,SAAS,EAAE,GAAA,CAAI,YAAY,eAAe,GAAG,IAAA,CAAK,aAAA,CAAc,WAAA,CAAY,IAAA,CAAA,CAAA,EAAQ,MAAA,eAAA,CAAA;gBAE1F,IAAA,CAAK,MAAA,CAAO,IAAA,CAAK,IAAI,eAAe,mBAAA,CAClC,QACA,qBACA,OACA,OACA,IAAA,CAAK,aAAA,EACL;YAAA;QAAA;QAKN,IAAI,aAAa,IAAA,YAAgB,UAAU,MAAA,IAAU,aAAa,IAAA,YAAgB,UAAU,IAAA,IAAQ,aAAa,IAAA,YAAgB,UAAU,MAAA,EAAQ;YACjJ,IAAI,MAAM,OAAA,CAAQ,UAAU,EAAE,QAAA,CAAS,UAAU,CAAE,CAAA,iBAAiB,MAAM,eAAA,KAAoB,yKAAC,CAAO,QAAA,CAAS,QAAQ;gBACrH,IAAA,CAAK,MAAA,CAAO,IAAA,CAAK,IAAI,eAAe,mBAAA,CAClC,GAAG,MAAA,gCAAA,CAAA,EACH,oBACA,OACA,OACA,IAAA,CAAK,aAAA,EACL;YAAA;QAAA;IAAA;IAkBR,WAAW,SAAA,EAAW,QAAA,EAAU,QAAA,EAAU,KAAA,EAAO,MAAA,EAAQ,MAAA,EAAQ;QAC/D,MAAM,UAAU,SAAS,OAAA,IAAW,YAAY;QAChD,MAAM,QAAQ,IAAI,eAAe,mBAAA,CAC/B,SACA,oBACA,UACA,OACA,IAAA,CAAK,aAAA,EACL,QACA,YAAY,SAAS,KAAA,GACrB,YAAY,SAAS,KAAA;QAGvB,KAAA,CAAM,kBAAkB,YAAA,CAAA,GAAgB;QAExC,IAAA,CAAK,MAAA,CAAO,IAAA,CAAK;IAAA;AAAA;AASrB,kBAAkB,YAAA,GAAe;AAEjC,OAAO,OAAA,GAAU;AACjB,OAAO,OAAA,CAAQ,iBAAA,GAAoB;AACnC,OAAO,OAAA,CAAQ,OAAA,GAAU","ignoreList":[0]}},
    {"offset": {"line": 7452, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7457, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/query-types.js"],"sourcesContent":["'use strict';\n\n/**\n * An enum of query types used by `sequelize.query`\n *\n * @see {@link Sequelize#query}\n *\n * @property SELECT\n * @property INSERT\n * @property UPDATE\n * @property BULKUPDATE\n * @property BULKDELETE\n * @property DELETE\n * @property UPSERT\n * @property VERSION\n * @property SHOWTABLES\n * @property SHOWINDEXES\n * @property DESCRIBE\n * @property RAW\n * @property FOREIGNKEYS\n * @property SHOWCONSTRAINTS\n */\nconst QueryTypes = module.exports = { // eslint-disable-line\n  SELECT: 'SELECT',\n  INSERT: 'INSERT',\n  UPDATE: 'UPDATE',\n  BULKUPDATE: 'BULKUPDATE',\n  BULKDELETE: 'BULKDELETE',\n  DELETE: 'DELETE',\n  UPSERT: 'UPSERT',\n  VERSION: 'VERSION',\n  SHOWTABLES: 'SHOWTABLES',\n  SHOWINDEXES: 'SHOWINDEXES',\n  DESCRIBE: 'DESCRIBE',\n  RAW: 'RAW',\n  FOREIGNKEYS: 'FOREIGNKEYS',\n  SHOWCONSTRAINTS: 'SHOWCONSTRAINTS'\n};\n"],"names":[],"mappings":";AAsBA,MAAM,aAAa,OAAO,OAAA,GAAU;IAClC,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,YAAY;IACZ,YAAY;IACZ,QAAQ;IACR,QAAQ;IACR,SAAS;IACT,YAAY;IACZ,aAAa;IACb,UAAU;IACV,KAAK;IACL,aAAa;IACb,iBAAiB;AAAA","ignoreList":[0]}},
    {"offset": {"line": 7474, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7479, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/hooks.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst { logger } = require('./utils/logger');\nconst debug = logger.debugContext('hooks');\n\nconst hookTypes = {\n  beforeValidate: { params: 2 },\n  afterValidate: { params: 2 },\n  validationFailed: { params: 3 },\n  beforeCreate: { params: 2 },\n  afterCreate: { params: 2 },\n  beforeDestroy: { params: 2 },\n  afterDestroy: { params: 2 },\n  beforeRestore: { params: 2 },\n  afterRestore: { params: 2 },\n  beforeUpdate: { params: 2 },\n  afterUpdate: { params: 2 },\n  beforeSave: { params: 2, proxies: ['beforeUpdate', 'beforeCreate'] },\n  afterSave: { params: 2, proxies: ['afterUpdate', 'afterCreate'] },\n  beforeUpsert: { params: 2 },\n  afterUpsert: { params: 2 },\n  beforeBulkCreate: { params: 2 },\n  afterBulkCreate: { params: 2 },\n  beforeBulkDestroy: { params: 1 },\n  afterBulkDestroy: { params: 1 },\n  beforeBulkRestore: { params: 1 },\n  afterBulkRestore: { params: 1 },\n  beforeBulkUpdate: { params: 1 },\n  afterBulkUpdate: { params: 1 },\n  beforeFind: { params: 1 },\n  beforeFindAfterExpandIncludeAll: { params: 1 },\n  beforeFindAfterOptions: { params: 1 },\n  afterFind: { params: 2 },\n  beforeCount: { params: 1 },\n  beforeDefine: { params: 2, sync: true, noModel: true },\n  afterDefine: { params: 1, sync: true, noModel: true },\n  beforeInit: { params: 2, sync: true, noModel: true },\n  afterInit: { params: 1, sync: true, noModel: true },\n  beforeAssociate: { params: 2, sync: true },\n  afterAssociate: { params: 2, sync: true },\n  beforeConnect: { params: 1, noModel: true },\n  afterConnect: { params: 2, noModel: true },\n  beforeDisconnect: { params: 1, noModel: true },\n  afterDisconnect: { params: 1, noModel: true },\n  beforePoolAcquire: { params: 1, noModel: true },\n  afterPoolAcquire: { params: 2, noModel: true },\n  beforeSync: { params: 1 },\n  afterSync: { params: 1 },\n  beforeBulkSync: { params: 1 },\n  afterBulkSync: { params: 1 },\n  beforeQuery: { params: 2 },\n  afterQuery: { params: 2 }\n};\nexports.hooks = hookTypes;\n\n\n/**\n * get array of current hook and its proxies combined\n *\n * @param {string} hookType any hook type @see {@link hookTypes}\n *\n * @private\n */\nconst getProxiedHooks = hookType =>\n  hookTypes[hookType].proxies\n    ? hookTypes[hookType].proxies.concat(hookType)\n    : [hookType]\n;\n\nfunction getHooks(hooked, hookType) {\n  return (hooked.options.hooks || {})[hookType] || [];\n}\n\nconst Hooks = {\n  /**\n   * Process user supplied hooks definition\n   *\n   * @param {object} hooks hooks definition\n   *\n   * @private\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  _setupHooks(hooks) {\n    this.options.hooks = {};\n    _.map(hooks || {}, (hooksArray, hookName) => {\n      if (!Array.isArray(hooksArray)) hooksArray = [hooksArray];\n      hooksArray.forEach(hookFn => this.addHook(hookName, hookFn));\n    });\n  },\n\n  async runHooks(hooks, ...hookArgs) {\n    if (!hooks) throw new Error('runHooks requires at least 1 argument');\n\n    let hookType;\n\n    if (typeof hooks === 'string') {\n      hookType = hooks;\n      hooks = getHooks(this, hookType);\n\n      if (this.sequelize) {\n        hooks = hooks.concat(getHooks(this.sequelize, hookType));\n      }\n    }\n\n    if (!Array.isArray(hooks)) {\n      hooks = [hooks];\n    }\n\n    // synchronous hooks\n    if (hookTypes[hookType] && hookTypes[hookType].sync) {\n      for (let hook of hooks) {\n        if (typeof hook === 'object') {\n          hook = hook.fn;\n        }\n\n        debug(`running hook(sync) ${hookType}`);\n        hook.apply(this, hookArgs);\n      }\n      return;\n    }\n\n    // asynchronous hooks (default)\n    for (let hook of hooks) {\n      if (typeof hook === 'object') {\n        hook = hook.fn;\n      }\n\n      debug(`running hook ${hookType}`);\n      await hook.apply(this, hookArgs);\n    }\n  },\n\n  /**\n   * Add a hook to the model\n   *\n   * @param {string}          hookType hook name @see {@link hookTypes}\n   * @param {string|Function} [name] Provide a name for the hook function. It can be used to remove the hook later or to order hooks based on some sort of priority system in the future.\n   * @param {Function}        fn The hook function\n   *\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  addHook(hookType, name, fn) {\n    if (typeof name === 'function') {\n      fn = name;\n      name = null;\n    }\n\n    debug(`adding hook ${hookType}`);\n    // check for proxies, add them too\n    hookType = getProxiedHooks(hookType);\n\n    hookType.forEach(type => {\n      const hooks = getHooks(this, type);\n      hooks.push(name ? { name, fn } : fn);\n      this.options.hooks[type] = hooks;\n    });\n\n    return this;\n  },\n\n  /**\n   * Remove hook from the model\n   *\n   * @param {string} hookType @see {@link hookTypes}\n   * @param {string|Function} name name of hook or function reference which was attached\n   *\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  removeHook(hookType, name) {\n    const isReference = typeof name === 'function' ? true : false;\n\n    if (!this.hasHook(hookType)) {\n      return this;\n    }\n\n    debug(`removing hook ${hookType}`);\n\n    // check for proxies, add them too\n    hookType = getProxiedHooks(hookType);\n\n    for (const type of hookType) {\n      this.options.hooks[type] = this.options.hooks[type].filter(hook => {\n        if (isReference && typeof hook === 'function') {\n          return hook !== name; // check if same method\n        }\n        if (!isReference && typeof hook === 'object') {\n          return hook.name !== name;\n        }\n        return true;\n      });\n    }\n\n    return this;\n  },\n\n  /**\n   * Check whether the mode has any hooks of this type\n   *\n   * @param {string} hookType @see {@link hookTypes}\n   *\n   * @alias hasHooks\n   *\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  hasHook(hookType) {\n    return this.options.hooks[hookType] && !!this.options.hooks[hookType].length;\n  }\n};\nHooks.hasHooks = Hooks.hasHook;\n\n\nfunction applyTo(target, isModel = false) {\n  _.mixin(target, Hooks);\n\n  for (const hook of Object.keys(hookTypes)) {\n    if (isModel && hookTypes[hook].noModel) {\n      continue;\n    }\n    target[hook] = function(name, callback) {\n      return this.addHook(hook, name, callback);\n    };\n  }\n}\nexports.applyTo = applyTo;\n\n/**\n * A hook that is run before validation\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name beforeValidate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after validation\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name afterValidate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run when validation fails\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options, error. Error is the\n * SequelizeValidationError. If the callback throws an error, it will replace the original validation error.\n * @name validationFailed\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before creating a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after creating a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name afterCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before creating or updating a single instance, It proxies `beforeCreate` and `beforeUpdate`\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeSave\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before upserting\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeUpsert\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after upserting\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the result of upsert(), options\n * @name afterUpsert\n * @memberof Sequelize.Model\n */\n\n/**\n  * A hook that is run after creating or updating a single instance, It proxies `afterCreate` and `afterUpdate`\n *\n  * @param {string}   name\n  * @param {Function} fn   A callback function that is called with attributes, options\n  * @name afterSave\n  * @memberof Sequelize.Model\n  */\n\n/**\n * A hook that is run before destroying a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name beforeDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after destroying a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name afterDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before restoring a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name beforeRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after restoring a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name afterRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before updating a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name beforeUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after updating a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name afterUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before creating instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instances, options\n * @name beforeBulkCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after creating instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instances, options\n * @name afterBulkCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before destroying instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name beforeBulkDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after destroying instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name afterBulkDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before restoring instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name beforeBulkRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after restoring instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name afterBulkRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before updating instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeBulkUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after updating instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name afterBulkUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFind\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query, after any { include: {all: ...} } options are expanded\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFindAfterExpandIncludeAll\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query, after all option parsing is complete\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFindAfterOptions\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after a find (select) query\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance(s), options\n * @name afterFind\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a count query\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeCount\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a define call\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeDefine\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after a define call\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with factory\n * @name afterDefine\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before Sequelize() call\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with config, options\n * @name beforeInit\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after Sequelize() call\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with sequelize\n * @name afterInit\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before a connection is created\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with config passed to connection\n * @name beforeConnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after a connection is created\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the connection object and the config passed to connection\n * @name afterConnect\n * @memberof Sequelize\n */\n\n/**\n *  A hook that is run before a connection to the pool\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with config passed to connection\n * @name beforePoolAcquire\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after a connection to the pool\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the connection object and the config passed to connection\n * @name afterPoolAcquire\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before a connection is disconnected\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the connection object\n * @name beforeDisconnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after a connection is disconnected\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the connection object\n * @name afterDisconnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before Model.sync call\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options passed to Model.sync\n * @name beforeSync\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after Model.sync call\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options passed to Model.sync\n * @name afterSync\n * @memberof Sequelize\n */\n\n/**\n  * A hook that is run before sequelize.sync call\n *\n  * @param {string}   name\n  * @param {Function} fn   A callback function that is called with options passed to sequelize.sync\n  * @name beforeBulkSync\n  * @memberof Sequelize\n  */\n\n/**\n  * A hook that is run after sequelize.sync call\n *\n  * @param {string}   name\n  * @param {Function} fn   A callback function that is called with options passed to sequelize.sync\n  * @name afterBulkSync\n  * @memberof Sequelize\n  */\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 7751, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7756, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/associations/mixin.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst HasOne = require('./has-one');\nconst HasMany = require('./has-many');\nconst BelongsToMany = require('./belongs-to-many');\nconst BelongsTo = require('./belongs-to');\n\nfunction isModel(model, sequelize) {\n  return model\n    && model.prototype\n    && model.prototype instanceof sequelize.Sequelize.Model;\n}\n\nconst Mixin = {\n  hasMany(target, options = {}) {\n    if (!isModel(target, this.sequelize)) {\n      throw new Error(`${this.name}.hasMany called with something that's not a subclass of Sequelize.Model`);\n    }\n\n    const source = this;\n\n    // Since this is a mixin, we'll need a unique letiable name for hooks (since Model will override our hooks option)\n    options.hooks = options.hooks === undefined ? false : Boolean(options.hooks);\n    options.useHooks = options.hooks;\n\n    Object.assign(options, _.omit(source.options, ['hooks']));\n\n    if (options.useHooks) {\n      this.runHooks('beforeAssociate', { source, target, type: HasMany }, options);\n    }\n\n    // the id is in the foreign table or in a connecting table\n    const association = new HasMany(source, target, options);\n    source.associations[association.associationAccessor] = association;\n\n    association._injectAttributes();\n    association.mixin(source.prototype);\n\n    if (options.useHooks) {\n      this.runHooks('afterAssociate', { source, target, type: HasMany, association }, options);\n    }\n\n    return association;\n  },\n\n  belongsToMany(target, options = {}) {\n    if (!isModel(target, this.sequelize)) {\n      throw new Error(`${this.name}.belongsToMany called with something that's not a subclass of Sequelize.Model`);\n    }\n\n    const source = this;\n\n    // Since this is a mixin, we'll need a unique letiable name for hooks (since Model will override our hooks option)\n    options.hooks = options.hooks === undefined ? false : Boolean(options.hooks);\n    options.useHooks = options.hooks;\n    options.timestamps = options.timestamps === undefined ? this.sequelize.options.timestamps : options.timestamps;\n    Object.assign(options, _.omit(source.options, ['hooks', 'timestamps', 'scopes', 'defaultScope']));\n\n    if (options.useHooks) {\n      this.runHooks('beforeAssociate', { source, target, type: BelongsToMany }, options);\n    }\n    // the id is in the foreign table or in a connecting table\n    const association = new BelongsToMany(source, target, options);\n    source.associations[association.associationAccessor] = association;\n\n    association._injectAttributes();\n    association.mixin(source.prototype);\n\n    if (options.useHooks) {\n      this.runHooks('afterAssociate', { source, target, type: BelongsToMany, association }, options);\n    }\n\n    return association;\n  },\n\n  getAssociations(target) {\n    return Object.values(this.associations).filter(association => association.target.name === target.name);\n  },\n\n  getAssociationForAlias(target, alias) {\n    // Two associations cannot have the same alias, so we can use find instead of filter\n    return this.getAssociations(target).find(association => association.verifyAssociationAlias(alias)) || null;\n  }\n};\n\n// The logic for hasOne and belongsTo is exactly the same\nfunction singleLinked(Type) {\n  return function(target, options = {}) {\n    // eslint-disable-next-line no-invalid-this\n    const source = this;\n    if (!isModel(target, source.sequelize)) {\n      throw new Error(`${source.name}.${_.lowerFirst(Type.name)} called with something that's not a subclass of Sequelize.Model`);\n    }\n\n\n    // Since this is a mixin, we'll need a unique letiable name for hooks (since Model will override our hooks option)\n    options.hooks = options.hooks === undefined ? false : Boolean(options.hooks);\n    options.useHooks = options.hooks;\n\n    if (options.useHooks) {\n      source.runHooks('beforeAssociate', { source, target, type: Type }, options);\n    }\n    // the id is in the foreign table\n    const association = new Type(source, target, Object.assign(options, source.options));\n    source.associations[association.associationAccessor] = association;\n\n    association._injectAttributes();\n    association.mixin(source.prototype);\n\n    if (options.useHooks) {\n      source.runHooks('afterAssociate', { source, target, type: Type, association }, options);\n    }\n\n    return association;\n  };\n}\n\nMixin.hasOne = singleLinked(HasOne);\nMixin.belongsTo = singleLinked(BelongsTo);\n\nmodule.exports = Mixin;\nmodule.exports.Mixin = Mixin;\nmodule.exports.default = Mixin;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 7874, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7879, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/utils/deprecations.ts"],"sourcesContent":["import { deprecate } from 'util';\n\nconst noop = () => { /* noop */ };\n\nexport const noTrueLogging = deprecate(noop, 'The logging-option should be either a function or false. Default: console.log', 'SEQUELIZE0002');\nexport const noStringOperators = deprecate(noop, 'String based operators are deprecated. Please use Symbol based operators for better security, read more at https://sequelize.org/master/manual/querying.html#operators', 'SEQUELIZE0003');\nexport const noBoolOperatorAliases = deprecate(noop, 'A boolean value was passed to options.operatorsAliases. This is a no-op with v5 and should be removed.', 'SEQUELIZE0004');\nexport const noDoubleNestedGroup = deprecate(noop, 'Passing a double nested nested array to `group` is unsupported and will be removed in v6.', 'SEQUELIZE0005');\nexport const unsupportedEngine = deprecate(noop, 'This database engine version is not supported, please update your database server. More information https://github.com/sequelize/sequelize/blob/main/ENGINE.md', 'SEQUELIZE0006');\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,uBAAA,IAAA;IAAA,qBAAA,IAAA;IAAA,mBAAA,IAAA;IAAA,eAAA,IAAA;IAAA,mBAAA,IAAA;AAAA;AAAA,IAAA,cAA0B;AAE1B,MAAM,OAAO,KAAM,CAAA;AAEZ,MAAM,gBAAgB,CAAA,GAAA,YAAA,SAAA,EAAU,MAAM,iFAAiF;AACvH,MAAM,oBAAoB,CAAA,GAAA,YAAA,SAAA,EAAU,MAAM,0KAA0K;AACpN,MAAM,wBAAwB,CAAA,GAAA,YAAA,SAAA,EAAU,MAAM,0GAA0G;AACxJ,MAAM,sBAAsB,CAAA,GAAA,YAAA,SAAA,EAAU,MAAM,6FAA6F;AACzI,MAAM,oBAAoB,CAAA,GAAA,YAAA,SAAA,EAAU,MAAM,kKAAkK","ignoreList":[0]}},
    {"offset": {"line": 7927, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7932, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/model.js"],"sourcesContent":["'use strict';\n\nconst assert = require('assert');\nconst _ = require('lodash');\nconst Dottie = require('dottie');\n\nconst Utils = require('./utils');\nconst { logger } = require('./utils/logger');\nconst BelongsTo = require('./associations/belongs-to');\nconst BelongsToMany = require('./associations/belongs-to-many');\nconst InstanceValidator = require('./instance-validator');\nconst QueryTypes = require('./query-types');\nconst sequelizeErrors = require('./errors');\nconst Association = require('./associations/base');\nconst HasMany = require('./associations/has-many');\nconst DataTypes = require('./data-types');\nconst Hooks = require('./hooks');\nconst associationsMixin = require('./associations/mixin');\nconst Op = require('./operators');\nconst { noDoubleNestedGroup } = require('./utils/deprecations');\n\n\n// This list will quickly become dated, but failing to maintain this list just means\n// we won't throw a warning when we should. At least most common cases will forever be covered\n// so we stop throwing erroneous warnings when we shouldn't.\nconst validQueryKeywords = new Set(['where', 'attributes', 'paranoid', 'include', 'order', 'limit', 'offset',\n  'transaction', 'lock', 'raw', 'logging', 'benchmark', 'having', 'searchPath', 'rejectOnEmpty', 'plain',\n  'scope', 'group', 'through', 'defaults', 'distinct', 'primary', 'exception', 'type', 'hooks', 'force',\n  'name']);\n\n// List of attributes that should not be implicitly passed into subqueries/includes.\nconst nonCascadingOptions = ['include', 'attributes', 'originalAttributes', 'order', 'where', 'limit', 'offset', 'plain', 'group', 'having'];\n\n/**\n * A Model represents a table in the database. Instances of this class represent a database row.\n *\n * Model instances operate with the concept of a `dataValues` property, which stores the actual values represented by the instance.\n * By default, the values from dataValues can also be accessed directly from the Instance, that is:\n * ```js\n * instance.field\n * // is the same as\n * instance.get('field')\n * // is the same as\n * instance.getDataValue('field')\n * ```\n * However, if getters and/or setters are defined for `field` they will be invoked, instead of returning the value from `dataValues`.\n * Accessing properties directly or using `get` is preferred for regular use, `getDataValue` should only be used for custom getters.\n *\n * @see\n   * {@link Sequelize#define} for more information about getters and setters\n * @mixes Hooks\n */\nclass Model {\n  static get queryInterface() {\n    return this.sequelize.getQueryInterface();\n  }\n\n  static get queryGenerator() {\n    return this.queryInterface.queryGenerator;\n  }\n\n  /**\n   * A reference to the sequelize instance\n   *\n   * @see\n   * {@link Sequelize}\n   *\n   * @property sequelize\n   *\n   * @returns {Sequelize}\n   */\n  get sequelize() {\n    return this.constructor.sequelize;\n  }\n\n  /**\n   * Builds a new model instance.\n   *\n   * @param {object}  [values={}] an object of key value pairs\n   * @param {object}  [options] instance construction options\n   * @param {boolean} [options.raw=false] If set to true, values will ignore field and virtual setters.\n   * @param {boolean} [options.isNewRecord=true] Is this a new record\n   * @param {Array}   [options.include] an array of include options - Used to build prefetched/included model instances. See `set`\n   */\n  constructor(values = {}, options = {}) {\n    if (!this.constructor._overwrittenAttributesChecked) {\n      this.constructor._overwrittenAttributesChecked = true;\n\n      // setTimeout is hacky but necessary.\n      // Public Class Fields declared by descendants of this class\n      // will not be available until after their call to super, so after\n      // this constructor is done running.\n      setTimeout(() => {\n        const overwrittenAttributes = [];\n        for (const key of Object.keys(this.constructor._attributeManipulation)) {\n          if (Object.prototype.hasOwnProperty.call(this, key)) {\n            overwrittenAttributes.push(key);\n          }\n        }\n\n        if (overwrittenAttributes.length > 0) {\n          logger.warn(`Model ${JSON.stringify(this.constructor.name)} is declaring public class fields for attribute(s): ${overwrittenAttributes.map(attr => JSON.stringify(attr)).join(', ')}.` +\n            '\\nThese class fields are shadowing Sequelize\\'s attribute getters & setters.' +\n            '\\nSee https://sequelize.org/main/manual/model-basics.html#caveat-with-public-class-fields');\n        }\n      }, 0);\n    }\n\n    options = {\n      isNewRecord: true,\n      _schema: this.constructor._schema,\n      _schemaDelimiter: this.constructor._schemaDelimiter,\n      ...options\n    };\n\n    if (options.attributes) {\n      options.attributes = options.attributes.map(attribute => Array.isArray(attribute) ? attribute[1] : attribute);\n    }\n\n    if (!options.includeValidated) {\n      this.constructor._conformIncludes(options, this.constructor);\n      if (options.include) {\n        this.constructor._expandIncludeAll(options);\n        this.constructor._validateIncludedElements(options);\n      }\n    }\n\n    this.dataValues = {};\n    this._previousDataValues = {};\n    this.uniqno = 1;\n    this._changed = new Set();\n    this._options = options;\n\n    /**\n     * Returns true if this instance has not yet been persisted to the database\n     *\n     * @property isNewRecord\n     * @returns {boolean}\n     */\n    this.isNewRecord = options.isNewRecord;\n\n    this._initValues(values, options);\n  }\n\n  _initValues(values, options) {\n    let defaults;\n    let key;\n\n    values = { ...values };\n\n    if (options.isNewRecord) {\n      defaults = {};\n\n      if (this.constructor._hasDefaultValues) {\n        defaults = _.mapValues(this.constructor._defaultValues, valueFn => {\n          const value = valueFn();\n          return value && value instanceof Utils.SequelizeMethod ? value : _.cloneDeep(value);\n        });\n      }\n\n      // set id to null if not passed as value, a newly created dao has no id\n      // removing this breaks bulkCreate\n      // do after default values since it might have UUID as a default value\n      if (this.constructor.primaryKeyAttributes.length) {\n        this.constructor.primaryKeyAttributes.forEach(primaryKeyAttribute => {\n          if (!Object.prototype.hasOwnProperty.call(defaults, primaryKeyAttribute)) {\n            defaults[primaryKeyAttribute] = null;\n          }\n        });\n      }\n\n      if (this.constructor._timestampAttributes.createdAt && defaults[this.constructor._timestampAttributes.createdAt]) {\n        this.dataValues[this.constructor._timestampAttributes.createdAt] = Utils.toDefaultValue(defaults[this.constructor._timestampAttributes.createdAt], this.sequelize.options.dialect);\n        delete defaults[this.constructor._timestampAttributes.createdAt];\n      }\n\n      if (this.constructor._timestampAttributes.updatedAt && defaults[this.constructor._timestampAttributes.updatedAt]) {\n        this.dataValues[this.constructor._timestampAttributes.updatedAt] = Utils.toDefaultValue(defaults[this.constructor._timestampAttributes.updatedAt], this.sequelize.options.dialect);\n        delete defaults[this.constructor._timestampAttributes.updatedAt];\n      }\n\n      if (this.constructor._timestampAttributes.deletedAt && defaults[this.constructor._timestampAttributes.deletedAt]) {\n        this.dataValues[this.constructor._timestampAttributes.deletedAt] = Utils.toDefaultValue(defaults[this.constructor._timestampAttributes.deletedAt], this.sequelize.options.dialect);\n        delete defaults[this.constructor._timestampAttributes.deletedAt];\n      }\n\n      for (key in defaults) {\n        if (values[key] === undefined) {\n          this.set(key, Utils.toDefaultValue(defaults[key], this.sequelize.options.dialect), { raw: true });\n          delete values[key];\n        }\n      }\n    }\n\n    this.set(values, options);\n  }\n\n  // validateIncludedElements should have been called before this method\n  static _paranoidClause(model, options = {}) {\n    // Apply on each include\n    // This should be handled before handling where conditions because of logic with returns\n    // otherwise this code will never run on includes of a already conditionable where\n    if (options.include) {\n      for (const include of options.include) {\n        this._paranoidClause(include.model, include);\n      }\n    }\n\n    // apply paranoid when groupedLimit is used\n    if (_.get(options, 'groupedLimit.on.options.paranoid')) {\n      const throughModel = _.get(options, 'groupedLimit.on.through.model');\n      if (throughModel) {\n        options.groupedLimit.through = this._paranoidClause(throughModel, options.groupedLimit.through);\n      }\n    }\n\n    if (!model.options.timestamps || !model.options.paranoid || options.paranoid === false) {\n      // This model is not paranoid, nothing to do here;\n      return options;\n    }\n\n    const deletedAtCol = model._timestampAttributes.deletedAt;\n    const deletedAtAttribute = model.rawAttributes[deletedAtCol];\n    const deletedAtObject = {};\n\n    let deletedAtDefaultValue = Object.prototype.hasOwnProperty.call(deletedAtAttribute, 'defaultValue') ? deletedAtAttribute.defaultValue : null;\n\n    deletedAtDefaultValue = deletedAtDefaultValue || {\n      [Op.eq]: null\n    };\n\n    deletedAtObject[deletedAtAttribute.field || deletedAtCol] = deletedAtDefaultValue;\n\n    if (Utils.isWhereEmpty(options.where)) {\n      options.where = deletedAtObject;\n    } else {\n      options.where = { [Op.and]: [deletedAtObject, options.where] };\n    }\n\n    return options;\n  }\n\n  static _addDefaultAttributes() {\n    const tail = {};\n    let head = {};\n\n    // Add id if no primary key was manually added to definition\n    // Can't use this.primaryKeys here, since this function is called before PKs are identified\n    if (!_.some(this.rawAttributes, 'primaryKey')) {\n      if ('id' in this.rawAttributes) {\n        // Something is fishy here!\n        throw new Error(`A column called 'id' was added to the attributes of '${this.tableName}' but not marked with 'primaryKey: true'`);\n      }\n\n      head = {\n        id: {\n          type: new DataTypes.INTEGER(),\n          allowNull: false,\n          primaryKey: true,\n          autoIncrement: true,\n          _autoGenerated: true\n        }\n      };\n    }\n\n    if (this._timestampAttributes.createdAt) {\n      tail[this._timestampAttributes.createdAt] = {\n        type: DataTypes.DATE,\n        allowNull: false,\n        _autoGenerated: true\n      };\n    }\n\n    if (this._timestampAttributes.updatedAt) {\n      tail[this._timestampAttributes.updatedAt] = {\n        type: DataTypes.DATE,\n        allowNull: false,\n        _autoGenerated: true\n      };\n    }\n\n    if (this._timestampAttributes.deletedAt) {\n      tail[this._timestampAttributes.deletedAt] = {\n        type: DataTypes.DATE,\n        _autoGenerated: true\n      };\n    }\n\n    if (this._versionAttribute) {\n      tail[this._versionAttribute] = {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        defaultValue: 0,\n        _autoGenerated: true\n      };\n    }\n\n    const newRawAttributes = {\n      ...head,\n      ...this.rawAttributes\n    };\n    _.each(tail, (value, attr) => {\n      if (newRawAttributes[attr] === undefined) {\n        newRawAttributes[attr] = value;\n      }\n    });\n\n    this.rawAttributes = newRawAttributes;\n\n    if (!Object.keys(this.primaryKeys).length) {\n      this.primaryKeys.id = this.rawAttributes.id;\n    }\n  }\n\n  /**\n   * Returns the attributes of the model.\n   *\n   * @returns {object|any}\n  */\n  static getAttributes() {\n    return this.rawAttributes;\n  }\n\n  static _findAutoIncrementAttribute() {\n    this.autoIncrementAttribute = null;\n\n    for (const name in this.rawAttributes) {\n      if (Object.prototype.hasOwnProperty.call(this.rawAttributes, name)) {\n        const definition = this.rawAttributes[name];\n        if (definition && definition.autoIncrement) {\n          if (this.autoIncrementAttribute) {\n            throw new Error('Invalid Instance definition. Only one autoincrement field allowed.');\n          }\n          this.autoIncrementAttribute = name;\n        }\n      }\n    }\n  }\n\n  static _conformIncludes(options, self) {\n    if (!options.include) return;\n\n    // if include is not an array, wrap in an array\n    if (!Array.isArray(options.include)) {\n      options.include = [options.include];\n    } else if (!options.include.length) {\n      delete options.include;\n      return;\n    }\n\n    // convert all included elements to { model: Model } form\n    options.include = options.include.map(include => this._conformInclude(include, self));\n  }\n\n  static _transformStringAssociation(include, self) {\n    if (self && typeof include === 'string') {\n      if (!Object.prototype.hasOwnProperty.call(self.associations, include)) {\n        throw new Error(`Association with alias \"${include}\" does not exist on ${self.name}`);\n      }\n      return self.associations[include];\n    }\n    return include;\n  }\n\n  static _conformInclude(include, self) {\n    if (include) {\n      let model;\n\n      if (include._pseudo) return include;\n\n      include = this._transformStringAssociation(include, self);\n\n      if (include instanceof Association) {\n        if (self && include.target.name === self.name) {\n          model = include.source;\n        } else {\n          model = include.target;\n        }\n\n        return { model, association: include, as: include.as };\n      }\n\n      if (include.prototype && include.prototype instanceof Model) {\n        return { model: include };\n      }\n\n      if (_.isPlainObject(include)) {\n        if (include.association) {\n          include.association = this._transformStringAssociation(include.association, self);\n\n          if (self && include.association.target.name === self.name) {\n            model = include.association.source;\n          } else {\n            model = include.association.target;\n          }\n\n          if (!include.model) include.model = model;\n          if (!include.as) include.as = include.association.as;\n\n          this._conformIncludes(include, model);\n          return include;\n        }\n\n        if (include.model) {\n          this._conformIncludes(include, include.model);\n          return include;\n        }\n\n        if (include.all) {\n          this._conformIncludes(include);\n          return include;\n        }\n      }\n    }\n\n    throw new Error('Include unexpected. Element has to be either a Model, an Association or an object.');\n  }\n\n  static _expandIncludeAllElement(includes, include) {\n    // check 'all' attribute provided is valid\n    let all = include.all;\n    delete include.all;\n\n    if (all !== true) {\n      if (!Array.isArray(all)) {\n        all = [all];\n      }\n\n      const validTypes = {\n        BelongsTo: true,\n        HasOne: true,\n        HasMany: true,\n        One: ['BelongsTo', 'HasOne'],\n        Has: ['HasOne', 'HasMany'],\n        Many: ['HasMany']\n      };\n\n      for (let i = 0; i < all.length; i++) {\n        const type = all[i];\n        if (type === 'All') {\n          all = true;\n          break;\n        }\n\n        const types = validTypes[type];\n        if (!types) {\n          throw new sequelizeErrors.EagerLoadingError(`include all '${type}' is not valid - must be BelongsTo, HasOne, HasMany, One, Has, Many or All`);\n        }\n\n        if (types !== true) {\n          // replace type placeholder e.g. 'One' with its constituent types e.g. 'HasOne', 'BelongsTo'\n          all.splice(i, 1);\n          i--;\n          for (let j = 0; j < types.length; j++) {\n            if (!all.includes(types[j])) {\n              all.unshift(types[j]);\n              i++;\n            }\n          }\n        }\n      }\n    }\n\n    // add all associations of types specified to includes\n    const nested = include.nested;\n    if (nested) {\n      delete include.nested;\n\n      if (!include.include) {\n        include.include = [];\n      } else if (!Array.isArray(include.include)) {\n        include.include = [include.include];\n      }\n    }\n\n    const used = [];\n    (function addAllIncludes(parent, includes) {\n      _.forEach(parent.associations, association => {\n        if (all !== true && !all.includes(association.associationType)) {\n          return;\n        }\n\n        // check if model already included, and skip if so\n        const model = association.target;\n        const as = association.options.as;\n\n        const predicate = { model };\n        if (as) {\n          // We only add 'as' to the predicate if it actually exists\n          predicate.as = as;\n        }\n\n        if (_.some(includes, predicate)) {\n          return;\n        }\n\n        // skip if recursing over a model already nested\n        if (nested && used.includes(model)) {\n          return;\n        }\n        used.push(parent);\n\n        // include this model\n        const thisInclude = Utils.cloneDeep(include);\n        thisInclude.model = model;\n        if (as) {\n          thisInclude.as = as;\n        }\n        includes.push(thisInclude);\n\n        // run recursively if nested\n        if (nested) {\n          addAllIncludes(model, thisInclude.include);\n          if (thisInclude.include.length === 0) delete thisInclude.include;\n        }\n      });\n      used.pop();\n    })(this, includes);\n  }\n\n  static _validateIncludedElements(options, tableNames) {\n    if (!options.model) options.model = this;\n\n    tableNames = tableNames || {};\n    options.includeNames = [];\n    options.includeMap = {};\n\n    /* Legacy */\n    options.hasSingleAssociation = false;\n    options.hasMultiAssociation = false;\n\n    if (!options.parent) {\n      options.topModel = options.model;\n      options.topLimit = options.limit;\n    }\n\n    options.include = options.include.map(include => {\n      include = this._conformInclude(include);\n      include.parent = options;\n      include.topLimit = options.topLimit;\n\n      this._validateIncludedElement.call(options.model, include, tableNames, options);\n\n      if (include.duplicating === undefined) {\n        include.duplicating = include.association.isMultiAssociation;\n      }\n\n      include.hasDuplicating = include.hasDuplicating || include.duplicating;\n      include.hasRequired = include.hasRequired || include.required;\n\n      options.hasDuplicating = options.hasDuplicating || include.hasDuplicating;\n      options.hasRequired = options.hasRequired || include.required;\n\n      options.hasWhere = options.hasWhere || include.hasWhere || !!include.where;\n      return include;\n    });\n\n    for (const include of options.include) {\n      include.hasParentWhere = options.hasParentWhere || !!options.where;\n      include.hasParentRequired = options.hasParentRequired || !!options.required;\n\n      if (include.subQuery !== false && options.hasDuplicating && options.topLimit) {\n        if (include.duplicating) {\n          include.subQuery = include.subQuery || false;\n          include.subQueryFilter = include.hasRequired;\n        } else {\n          include.subQuery = include.hasRequired;\n          include.subQueryFilter = false;\n        }\n      } else {\n        include.subQuery = include.subQuery || false;\n        if (include.duplicating) {\n          include.subQueryFilter = include.subQuery;\n        } else {\n          include.subQueryFilter = false;\n          include.subQuery = include.subQuery || include.hasParentRequired && include.hasRequired && !include.separate;\n        }\n      }\n\n      options.includeMap[include.as] = include;\n      options.includeNames.push(include.as);\n\n      // Set top level options\n      if (options.topModel === options.model && options.subQuery === undefined && options.topLimit) {\n        if (include.subQuery) {\n          options.subQuery = include.subQuery;\n        } else if (include.hasDuplicating) {\n          options.subQuery = true;\n        }\n      }\n\n      /* Legacy */\n      options.hasIncludeWhere = options.hasIncludeWhere || include.hasIncludeWhere || !!include.where;\n      options.hasIncludeRequired = options.hasIncludeRequired || include.hasIncludeRequired || !!include.required;\n\n      if (include.association.isMultiAssociation || include.hasMultiAssociation) {\n        options.hasMultiAssociation = true;\n      }\n      if (include.association.isSingleAssociation || include.hasSingleAssociation) {\n        options.hasSingleAssociation = true;\n      }\n    }\n\n    if (options.topModel === options.model && options.subQuery === undefined) {\n      options.subQuery = false;\n    }\n    return options;\n  }\n\n  static _validateIncludedElement(include, tableNames, options) {\n    tableNames[include.model.getTableName()] = true;\n\n    if (include.attributes && !options.raw) {\n      include.model._expandAttributes(include);\n\n      include.originalAttributes = include.model._injectDependentVirtualAttributes(include.attributes);\n\n      include = Utils.mapFinderOptions(include, include.model);\n\n      if (include.attributes.length) {\n        _.each(include.model.primaryKeys, (attr, key) => {\n          // Include the primary key if it's not already included - take into account that the pk might be aliased (due to a .field prop)\n          if (!include.attributes.some(includeAttr => {\n            if (attr.field !== key) {\n              return Array.isArray(includeAttr) && includeAttr[0] === attr.field && includeAttr[1] === key;\n            }\n            return includeAttr === key;\n          })) {\n            include.attributes.unshift(key);\n          }\n        });\n      }\n    } else {\n      include = Utils.mapFinderOptions(include, include.model);\n    }\n\n    // pseudo include just needed the attribute logic, return\n    if (include._pseudo) {\n      if (!include.attributes) {\n        include.attributes = Object.keys(include.model.tableAttributes);\n      }\n      return Utils.mapFinderOptions(include, include.model);\n    }\n\n    // check if the current Model is actually associated with the passed Model - or it's a pseudo include\n    const association = include.association || this._getIncludedAssociation(include.model, include.as);\n\n    include.association = association;\n    include.as = association.as;\n\n    // If through, we create a pseudo child include, to ease our parsing later on\n    if (include.association.through && Object(include.association.through.model) === include.association.through.model) {\n      if (!include.include) include.include = [];\n      const through = include.association.through;\n\n      include.through = _.defaults(include.through || {}, {\n        model: through.model,\n        as: through.model.name,\n        association: {\n          isSingleAssociation: true\n        },\n        _pseudo: true,\n        parent: include\n      });\n\n\n      if (through.scope) {\n        include.through.where = include.through.where ? { [Op.and]: [include.through.where, through.scope] } : through.scope;\n      }\n\n      include.include.push(include.through);\n      tableNames[through.tableName] = true;\n    }\n\n    // include.model may be the main model, while the association target may be scoped - thus we need to look at association.target/source\n    let model;\n    if (include.model.scoped === true) {\n      // If the passed model is already scoped, keep that\n      model = include.model;\n    } else {\n      // Otherwise use the model that was originally passed to the association\n      model = include.association.target.name === include.model.name ? include.association.target : include.association.source;\n    }\n\n    model._injectScope(include);\n\n    // This check should happen after injecting the scope, since the scope may contain a .attributes\n    if (!include.attributes) {\n      include.attributes = Object.keys(include.model.tableAttributes);\n    }\n\n    include = Utils.mapFinderOptions(include, include.model);\n\n    if (include.required === undefined) {\n      include.required = !!include.where;\n    }\n\n    if (include.association.scope) {\n      include.where = include.where ? { [Op.and]: [include.where, include.association.scope] } : include.association.scope;\n    }\n\n    if (include.limit && include.separate === undefined) {\n      include.separate = true;\n    }\n\n    if (include.separate === true) {\n      if (!(include.association instanceof HasMany)) {\n        throw new Error('Only HasMany associations support include.separate');\n      }\n\n      include.duplicating = false;\n\n      if (\n        options.attributes\n        && options.attributes.length\n        && !_.flattenDepth(options.attributes, 2).includes(association.sourceKey)\n      ) {\n        options.attributes.push(association.sourceKey);\n      }\n\n      if (\n        include.attributes\n        && include.attributes.length\n        && !_.flattenDepth(include.attributes, 2).includes(association.foreignKey)\n      ) {\n        include.attributes.push(association.foreignKey);\n      }\n    }\n\n    // Validate child includes\n    if (Object.prototype.hasOwnProperty.call(include, 'include')) {\n      this._validateIncludedElements.call(include.model, include, tableNames);\n    }\n\n    return include;\n  }\n\n  static _getIncludedAssociation(targetModel, targetAlias) {\n    const associations = this.getAssociations(targetModel);\n    let association = null;\n    if (associations.length === 0) {\n      throw new sequelizeErrors.EagerLoadingError(`${targetModel.name} is not associated to ${this.name}!`);\n    }\n    if (associations.length === 1) {\n      association = this.getAssociationForAlias(targetModel, targetAlias);\n      if (association) {\n        return association;\n      }\n      if (targetAlias) {\n        const existingAliases = this.getAssociations(targetModel).map(association => association.as);\n        throw new sequelizeErrors.EagerLoadingError(`${targetModel.name} is associated to ${this.name} using an alias. ` +\n          `You've included an alias (${targetAlias}), but it does not match the alias(es) defined in your association (${existingAliases.join(', ')}).`);\n      }\n      throw new sequelizeErrors.EagerLoadingError(`${targetModel.name} is associated to ${this.name} using an alias. ` +\n        'You must use the \\'as\\' keyword to specify the alias within your include statement.');\n    }\n    association = this.getAssociationForAlias(targetModel, targetAlias);\n    if (!association) {\n      throw new sequelizeErrors.EagerLoadingError(`${targetModel.name} is associated to ${this.name} multiple times. ` +\n        'To identify the correct association, you must use the \\'as\\' keyword to specify the alias of the association you want to include.');\n    }\n    return association;\n  }\n\n\n  static _expandIncludeAll(options) {\n    const includes = options.include;\n    if (!includes) {\n      return;\n    }\n\n    for (let index = 0; index < includes.length; index++) {\n      const include = includes[index];\n\n      if (include.all) {\n        includes.splice(index, 1);\n        index--;\n\n        this._expandIncludeAllElement(includes, include);\n      }\n    }\n\n    includes.forEach(include => {\n      this._expandIncludeAll.call(include.model, include);\n    });\n  }\n\n  static _conformIndex(index) {\n    if (!index.fields) {\n      throw new Error('Missing \"fields\" property for index definition');\n    }\n\n    index = _.defaults(index, {\n      type: '',\n      parser: null\n    });\n\n    if (index.type && index.type.toLowerCase() === 'unique') {\n      index.unique = true;\n      delete index.type;\n    }\n\n    return index;\n  }\n\n\n  static _uniqIncludes(options) {\n    if (!options.include) return;\n\n    options.include = _(options.include)\n      .groupBy(include => `${include.model && include.model.name}-${include.as}`)\n      .map(includes => this._assignOptions(...includes))\n      .value();\n  }\n\n  static _baseMerge(...args) {\n    _.assignWith(...args);\n    this._conformIncludes(args[0], this);\n    this._uniqIncludes(args[0]);\n    return args[0];\n  }\n\n  static _mergeFunction(objValue, srcValue, key) {\n    if (Array.isArray(objValue) && Array.isArray(srcValue)) {\n      return _.union(objValue, srcValue);\n    }\n\n    if (['where', 'having'].includes(key)) {\n      if (this.options && this.options.whereMergeStrategy === 'and') {\n        return combineWheresWithAnd(objValue, srcValue);\n      }\n\n      if (srcValue instanceof Utils.SequelizeMethod) {\n        srcValue = { [Op.and]: srcValue };\n      }\n\n      if (_.isPlainObject(objValue) && _.isPlainObject(srcValue)) {\n        return Object.assign(objValue, srcValue);\n      }\n    } else if (key === 'attributes' && _.isPlainObject(objValue) && _.isPlainObject(srcValue)) {\n      return _.assignWith(objValue, srcValue, (objValue, srcValue) => {\n        if (Array.isArray(objValue) && Array.isArray(srcValue)) {\n          return _.union(objValue, srcValue);\n        }\n      });\n    }\n    // If we have a possible object/array to clone, we try it.\n    // Otherwise, we return the original value when it's not undefined,\n    // or the resulting object in that case.\n    if (srcValue) {\n      return Utils.cloneDeep(srcValue, true);\n    }\n    return srcValue === undefined ? objValue : srcValue;\n  }\n\n  static _assignOptions(...args) {\n    return this._baseMerge(...args, this._mergeFunction.bind(this));\n  }\n\n  static _defaultsOptions(target, opts) {\n    return this._baseMerge(target, opts, (srcValue, objValue, key) => {\n      return this._mergeFunction(objValue, srcValue, key);\n    });\n  }\n\n  /**\n   * Initialize a model, representing a table in the DB, with attributes and options.\n   *\n   * The table columns are defined by the hash that is given as the first argument.\n   * Each attribute of the hash represents a column.\n   *\n   * @example\n   * Project.init({\n   *   columnA: {\n   *     type: Sequelize.BOOLEAN,\n   *     validate: {\n   *       is: ['[a-z]','i'],        // will only allow letters\n   *       max: 23,                  // only allow values <= 23\n   *       isIn: {\n   *         args: [['en', 'zh']],\n   *         msg: \"Must be English or Chinese\"\n   *       }\n   *     },\n   *     field: 'column_a'\n   *     // Other attributes here\n   *   },\n   *   columnB: Sequelize.STRING,\n   *   columnC: 'MY VERY OWN COLUMN TYPE'\n   * }, {sequelize})\n   *\n   * sequelize.models.modelName // The model will now be available in models under the class name\n   *\n   * @see\n   * <a href=\"/master/manual/model-basics.html\">Model Basics</a> guide\n   *\n   * @see\n   * <a href=\"/master/manual/model-basics.html\">Hooks</a> guide\n   *\n   * @see\n   * <a href=\"/master/manual/validations-and-constraints.html\"/>Validations & Constraints</a> guide\n   *\n   * @param {object}                  attributes An object, where each attribute is a column of the table. Each column can be either a DataType, a string or a type-description object, with the properties described below:\n   * @param {string|DataTypes|object} attributes.column The description of a database column\n   * @param {string|DataTypes}        attributes.column.type A string or a data type\n   * @param {boolean}                 [attributes.column.allowNull=true] If false, the column will have a NOT NULL constraint, and a not null validation will be run before an instance is saved.\n   * @param {any}                     [attributes.column.defaultValue=null] A literal default value, a JavaScript function, or an SQL function (see `sequelize.fn`)\n   * @param {string|boolean}          [attributes.column.unique=false] If true, the column will get a unique constraint. If a string is provided, the column will be part of a composite unique index. If multiple columns have the same string, they will be part of the same unique index\n   * @param {boolean}                 [attributes.column.primaryKey=false] If true, this attribute will be marked as primary key\n   * @param {string}                  [attributes.column.field=null] If set, sequelize will map the attribute name to a different name in the database\n   * @param {boolean}                 [attributes.column.autoIncrement=false] If true, this column will be set to auto increment\n   * @param {boolean}                 [attributes.column.autoIncrementIdentity=false] If true, combined with autoIncrement=true, will use Postgres `GENERATED BY DEFAULT AS IDENTITY` instead of `SERIAL`. Postgres 10+ only.\n   * @param {string}                  [attributes.column.comment=null] Comment for this column\n   * @param {string|Model}            [attributes.column.references=null] An object with reference configurations\n   * @param {string|Model}            [attributes.column.references.model] If this column references another table, provide it here as a Model, or a string\n   * @param {string}                  [attributes.column.references.key='id'] The column of the foreign table that this column references\n   * @param {string}                  [attributes.column.onUpdate] What should happen when the referenced key is updated. One of CASCADE, RESTRICT, SET DEFAULT, SET NULL or NO ACTION\n   * @param {string}                  [attributes.column.onDelete] What should happen when the referenced key is deleted. One of CASCADE, RESTRICT, SET DEFAULT, SET NULL or NO ACTION\n   * @param {Function}                [attributes.column.get] Provide a custom getter for this column. Use `this.getDataValue(String)` to manipulate the underlying values.\n   * @param {Function}                [attributes.column.set] Provide a custom setter for this column. Use `this.setDataValue(String, Value)` to manipulate the underlying values.\n   * @param {object}                  [attributes.column.validate] An object of validations to execute for this column every time the model is saved. Can be either the name of a validation provided by validator.js, a validation function provided by extending validator.js (see the `DAOValidator` property for more details), or a custom validation function. Custom validation functions are called with the value of the field and the instance itself as the `this` binding, and can possibly take a second callback argument, to signal that they are asynchronous. If the validator is sync, it should throw in the case of a failed validation; if it is async, the callback should be called with the error text.\n   * @param {object}                  options These options are merged with the default define options provided to the Sequelize constructor\n   * @param {object}                  options.sequelize Define the sequelize instance to attach to the new Model. Throw error if none is provided.\n   * @param {string}                  [options.modelName] Set name of the model. By default its same as Class name.\n   * @param {object}                  [options.defaultScope={}] Define the default search scope to use for this model. Scopes have the same form as the options passed to find / findAll\n   * @param {object}                  [options.scopes] More scopes, defined in the same way as defaultScope above. See `Model.scope` for more information about how scopes are defined, and what you can do with them\n   * @param {boolean}                 [options.omitNull] Don't persist null values. This means that all columns with null values will not be saved\n   * @param {boolean}                 [options.timestamps=true] Adds createdAt and updatedAt timestamps to the model.\n   * @param {boolean}                 [options.paranoid=false] Calling `destroy` will not delete the model, but instead set a `deletedAt` timestamp if this is true. Needs `timestamps=true` to work\n   * @param {boolean}                 [options.underscored=false] Add underscored field to all attributes, this covers user defined attributes, timestamps and foreign keys. Will not affect attributes with explicitly set `field` option\n   * @param {boolean}                 [options.freezeTableName=false] If freezeTableName is true, sequelize will not try to alter the model name to get the table name. Otherwise, the model name will be pluralized\n   * @param {object}                  [options.name] An object with two attributes, `singular` and `plural`, which are used when this model is associated to others.\n   * @param {string}                  [options.name.singular=Utils.singularize(modelName)] Singular name for model\n   * @param {string}                  [options.name.plural=Utils.pluralize(modelName)] Plural name for model\n   * @param {Array<object>}           [options.indexes] indexes definitions\n   * @param {string}                  [options.indexes[].name] The name of the index. Defaults to model name + _ + fields concatenated\n   * @param {string}                  [options.indexes[].type] Index type. Only used by mysql. One of `UNIQUE`, `FULLTEXT` and `SPATIAL`\n   * @param {string}                  [options.indexes[].using] The method to create the index by (`USING` statement in SQL). BTREE and HASH are supported by mysql and postgres, and postgres additionally supports GIST and GIN.\n   * @param {string}                  [options.indexes[].operator] Specify index operator.\n   * @param {boolean}                 [options.indexes[].unique=false] Should the index by unique? Can also be triggered by setting type to `UNIQUE`\n   * @param {boolean}                 [options.indexes[].concurrently=false] PostgresSQL will build the index without taking any write locks. Postgres only\n   * @param {Array<string|object>}    [options.indexes[].fields] An array of the fields to index. Each field can either be a string containing the name of the field, a sequelize object (e.g `sequelize.fn`), or an object with the following attributes: `attribute` (field name), `length` (create a prefix index of length chars), `order` (the direction the column should be sorted in), `collate` (the collation (sort order) for the column)\n   * @param {string|boolean}          [options.createdAt] Override the name of the createdAt attribute if a string is provided, or disable it if false. Timestamps must be true. Underscored field will be set with underscored setting.\n   * @param {string|boolean}          [options.updatedAt] Override the name of the updatedAt attribute if a string is provided, or disable it if false. Timestamps must be true. Underscored field will be set with underscored setting.\n   * @param {string|boolean}          [options.deletedAt] Override the name of the deletedAt attribute if a string is provided, or disable it if false. Timestamps must be true. Underscored field will be set with underscored setting.\n   * @param {string}                  [options.tableName] Defaults to pluralized model name, unless freezeTableName is true, in which case it uses model name verbatim\n   * @param {string}                  [options.schema='public'] schema\n   * @param {string}                  [options.engine] Specify engine for model's table\n   * @param {string}                  [options.charset] Specify charset for model's table\n   * @param {string}                  [options.comment] Specify comment for model's table\n   * @param {string}                  [options.collate] Specify collation for model's table\n   * @param {string}                  [options.initialAutoIncrement] Set the initial AUTO_INCREMENT value for the table in MySQL.\n   * @param {object}                  [options.hooks] An object of hook function that are called before and after certain lifecycle events. The possible hooks are: beforeValidate, afterValidate, validationFailed, beforeBulkCreate, beforeBulkDestroy, beforeBulkUpdate, beforeCreate, beforeDestroy, beforeUpdate, afterCreate, beforeSave, afterDestroy, afterUpdate, afterBulkCreate, afterSave, afterBulkDestroy and afterBulkUpdate. See Hooks for more information about hook functions and their signatures. Each property can either be a function, or an array of functions.\n   * @param {object}                  [options.validate] An object of model wide validations. Validations have access to all model values via `this`. If the validator function takes an argument, it is assumed to be async, and is called with a callback that accepts an optional error.\n   * @param {'and'|'overwrite'}       [options.whereMergeStrategy] Specify the scopes merging strategy (default 'overwrite'). 'and' strategy will merge `where` properties of scopes together by adding `Op.and` at the top-most level. 'overwrite' strategy will overwrite similar attributes using the lastly defined one.\n   *\n   * @returns {Model}\n   */\n  static init(attributes, options = {}) {\n    if (!options.sequelize) {\n      throw new Error('No Sequelize instance passed');\n    }\n\n    this.sequelize = options.sequelize;\n\n    const globalOptions = this.sequelize.options;\n\n    options = Utils.merge(_.cloneDeep(globalOptions.define), options);\n\n    if (!options.modelName) {\n      options.modelName = this.name;\n    }\n\n    options = Utils.merge({\n      name: {\n        plural: Utils.pluralize(options.modelName),\n        singular: Utils.singularize(options.modelName)\n      },\n      indexes: [],\n      omitNull: globalOptions.omitNull,\n      schema: globalOptions.schema\n    }, options);\n\n    this.sequelize.runHooks('beforeDefine', attributes, options);\n\n    if (options.modelName !== this.name) {\n      Object.defineProperty(this, 'name', { value: options.modelName });\n    }\n    delete options.modelName;\n\n    this.options = {\n      timestamps: true,\n      validate: {},\n      freezeTableName: false,\n      underscored: false,\n      paranoid: false,\n      rejectOnEmpty: false,\n      whereCollection: null,\n      schema: null,\n      schemaDelimiter: '',\n      defaultScope: {},\n      scopes: {},\n      indexes: [],\n      whereMergeStrategy: 'overwrite',\n      ...options\n    };\n\n    // if you call \"define\" multiple times for the same modelName, do not clutter the factory\n    if (this.sequelize.isDefined(this.name)) {\n      this.sequelize.modelManager.removeModel(this.sequelize.modelManager.getModel(this.name));\n    }\n\n    this.associations = {};\n    this._setupHooks(options.hooks);\n\n    this.underscored = this.options.underscored;\n\n    if (!this.options.tableName) {\n      this.tableName = this.options.freezeTableName ? this.name : Utils.underscoredIf(Utils.pluralize(this.name), this.underscored);\n    } else {\n      this.tableName = this.options.tableName;\n    }\n\n    this._schema = this.options.schema;\n    this._schemaDelimiter = this.options.schemaDelimiter;\n\n    // error check options\n    _.each(options.validate, (validator, validatorType) => {\n      if (Object.prototype.hasOwnProperty.call(attributes, validatorType)) {\n        throw new Error(`A model validator function must not have the same name as a field. Model: ${this.name}, field/validation name: ${validatorType}`);\n      }\n\n      if (typeof validator !== 'function') {\n        throw new Error(`Members of the validate option must be functions. Model: ${this.name}, error with validate member ${validatorType}`);\n      }\n    });\n\n    if (!_.includes(['and', 'overwrite'], this.options && this.options.whereMergeStrategy)) {\n      throw new Error(`Invalid value ${this.options && this.options.whereMergeStrategy} for whereMergeStrategy. Allowed values are 'and' and 'overwrite'.`);\n    }\n\n\n    this.rawAttributes = _.mapValues(attributes, (attribute, name) => {\n      attribute = this.sequelize.normalizeAttribute(attribute);\n\n      if (attribute.type === undefined) {\n        throw new Error(`Unrecognized datatype for attribute \"${this.name}.${name}\"`);\n      }\n\n      if (attribute.allowNull !== false && _.get(attribute, 'validate.notNull')) {\n        throw new Error(`Invalid definition for \"${this.name}.${name}\", \"notNull\" validator is only allowed with \"allowNull:false\"`);\n      }\n\n      if (_.get(attribute, 'references.model.prototype') instanceof Model) {\n        attribute.references.model = attribute.references.model.getTableName();\n      }\n\n      return attribute;\n    });\n\n    const tableName = this.getTableName();\n    this._indexes = this.options.indexes\n      .map(index => Utils.nameIndex(this._conformIndex(index), tableName));\n\n    this.primaryKeys = {};\n    this._readOnlyAttributes = new Set();\n    this._timestampAttributes = {};\n\n    // setup names of timestamp attributes\n    if (this.options.timestamps) {\n      for (const key of ['createdAt', 'updatedAt', 'deletedAt']) {\n        if (!['undefined', 'string', 'boolean'].includes(typeof this.options[key])) {\n          throw new Error(`Value for \"${key}\" option must be a string or a boolean, got ${typeof this.options[key]}`);\n        }\n        if (this.options[key] === '') {\n          throw new Error(`Value for \"${key}\" option cannot be an empty string`);\n        }\n      }\n\n      if (this.options.createdAt !== false) {\n        this._timestampAttributes.createdAt =\n          typeof this.options.createdAt === 'string' ? this.options.createdAt : 'createdAt';\n        this._readOnlyAttributes.add(this._timestampAttributes.createdAt);\n      }\n      if (this.options.updatedAt !== false) {\n        this._timestampAttributes.updatedAt =\n          typeof this.options.updatedAt === 'string' ? this.options.updatedAt : 'updatedAt';\n        this._readOnlyAttributes.add(this._timestampAttributes.updatedAt);\n      }\n      if (this.options.paranoid && this.options.deletedAt !== false) {\n        this._timestampAttributes.deletedAt =\n          typeof this.options.deletedAt === 'string' ? this.options.deletedAt : 'deletedAt';\n        this._readOnlyAttributes.add(this._timestampAttributes.deletedAt);\n      }\n    }\n\n    // setup name for version attribute\n    if (this.options.version) {\n      this._versionAttribute = typeof this.options.version === 'string' ? this.options.version : 'version';\n      this._readOnlyAttributes.add(this._versionAttribute);\n    }\n\n    this._hasReadOnlyAttributes = this._readOnlyAttributes.size > 0;\n\n    // Add head and tail default attributes (id, timestamps)\n    this._addDefaultAttributes();\n    this.refreshAttributes();\n    this._findAutoIncrementAttribute();\n\n    this._scope = this.options.defaultScope;\n    this._scopeNames = ['defaultScope'];\n\n    this.sequelize.modelManager.addModel(this);\n    this.sequelize.runHooks('afterDefine', this);\n\n    return this;\n  }\n\n  static refreshAttributes() {\n    const attributeManipulation = {};\n\n    this.prototype._customGetters = {};\n    this.prototype._customSetters = {};\n\n    ['get', 'set'].forEach(type => {\n      const opt = `${type}terMethods`;\n      const funcs = { ...this.options[opt] };\n      const _custom = type === 'get' ? this.prototype._customGetters : this.prototype._customSetters;\n\n      _.each(funcs, (method, attribute) => {\n        _custom[attribute] = method;\n\n        if (type === 'get') {\n          funcs[attribute] = function() {\n            return this.get(attribute);\n          };\n        }\n        if (type === 'set') {\n          funcs[attribute] = function(value) {\n            return this.set(attribute, value);\n          };\n        }\n      });\n\n      _.each(this.rawAttributes, (options, attribute) => {\n        if (Object.prototype.hasOwnProperty.call(options, type)) {\n          _custom[attribute] = options[type];\n        }\n\n        if (type === 'get') {\n          funcs[attribute] = function() {\n            return this.get(attribute);\n          };\n        }\n        if (type === 'set') {\n          funcs[attribute] = function(value) {\n            return this.set(attribute, value);\n          };\n        }\n      });\n\n      _.each(funcs, (fct, name) => {\n        if (!attributeManipulation[name]) {\n          attributeManipulation[name] = {\n            configurable: true\n          };\n        }\n        attributeManipulation[name][type] = fct;\n      });\n    });\n\n    this._dataTypeChanges = {};\n    this._dataTypeSanitizers = {};\n\n    this._hasBooleanAttributes = false;\n    this._hasDateAttributes = false;\n    this._jsonAttributes = new Set();\n    this._virtualAttributes = new Set();\n    this._defaultValues = {};\n    this.prototype.validators = {};\n\n    this.fieldRawAttributesMap = {};\n\n    this.primaryKeys = {};\n    this.uniqueKeys = {};\n\n    _.each(this.rawAttributes, (definition, name) => {\n      definition.type = this.sequelize.normalizeDataType(definition.type);\n\n      definition.Model = this;\n      definition.fieldName = name;\n      definition._modelAttribute = true;\n\n      if (definition.field === undefined) {\n        definition.field = Utils.underscoredIf(name, this.underscored);\n      }\n\n      if (definition.primaryKey === true) {\n        this.primaryKeys[name] = definition;\n      }\n\n      this.fieldRawAttributesMap[definition.field] = definition;\n\n      if (definition.type._sanitize) {\n        this._dataTypeSanitizers[name] = definition.type._sanitize;\n      }\n\n      if (definition.type._isChanged) {\n        this._dataTypeChanges[name] = definition.type._isChanged;\n      }\n\n      if (definition.type instanceof DataTypes.BOOLEAN) {\n        this._hasBooleanAttributes = true;\n      } else if (definition.type instanceof DataTypes.DATE || definition.type instanceof DataTypes.DATEONLY) {\n        this._hasDateAttributes = true;\n      } else if (definition.type instanceof DataTypes.JSON) {\n        this._jsonAttributes.add(name);\n      } else if (definition.type instanceof DataTypes.VIRTUAL) {\n        this._virtualAttributes.add(name);\n      }\n\n      if (Object.prototype.hasOwnProperty.call(definition, 'defaultValue')) {\n        this._defaultValues[name] = () => Utils.toDefaultValue(definition.defaultValue, this.sequelize.options.dialect);\n      }\n\n      if (Object.prototype.hasOwnProperty.call(definition, 'unique') && definition.unique) {\n        let idxName;\n        if (\n          typeof definition.unique === 'object' &&\n          Object.prototype.hasOwnProperty.call(definition.unique, 'name')\n        ) {\n          idxName = definition.unique.name;\n        } else if (typeof definition.unique === 'string') {\n          idxName = definition.unique;\n        } else {\n          idxName = `${this.tableName}_${name}_unique`;\n        }\n\n        const idx = this.uniqueKeys[idxName] || { fields: [] };\n\n        idx.fields.push(definition.field);\n        idx.msg = idx.msg || definition.unique.msg || null;\n        idx.name = idxName || false;\n        idx.column = name;\n        idx.customIndex = definition.unique !== true;\n\n        this.uniqueKeys[idxName] = idx;\n      }\n\n      if (Object.prototype.hasOwnProperty.call(definition, 'validate')) {\n        this.prototype.validators[name] = definition.validate;\n      }\n\n      if (definition.index === true && definition.type instanceof DataTypes.JSONB) {\n        this._indexes.push(\n          Utils.nameIndex(\n            this._conformIndex({\n              fields: [definition.field || name],\n              using: 'gin'\n            }),\n            this.getTableName()\n          )\n        );\n\n        delete definition.index;\n      }\n    });\n\n    // Create a map of field to attribute names\n    this.fieldAttributeMap = _.reduce(this.fieldRawAttributesMap, (map, value, key) => {\n      if (key !== value.fieldName) {\n        map[key] = value.fieldName;\n      }\n      return map;\n    }, {});\n\n    this._hasJsonAttributes = !!this._jsonAttributes.size;\n\n    this._hasVirtualAttributes = !!this._virtualAttributes.size;\n\n    this._hasDefaultValues = !_.isEmpty(this._defaultValues);\n\n    this.tableAttributes = _.omitBy(this.rawAttributes, (_a, key) => this._virtualAttributes.has(key));\n\n    this.prototype._hasCustomGetters = Object.keys(this.prototype._customGetters).length;\n    this.prototype._hasCustomSetters = Object.keys(this.prototype._customSetters).length;\n\n    for (const key of Object.keys(attributeManipulation)) {\n      if (Object.prototype.hasOwnProperty.call(Model.prototype, key)) {\n        this.sequelize.log(`Not overriding built-in method from model attribute: ${key}`);\n        continue;\n      }\n      Object.defineProperty(this.prototype, key, attributeManipulation[key]);\n    }\n\n    this.prototype.rawAttributes = this.rawAttributes;\n    this.prototype._isAttribute = key => Object.prototype.hasOwnProperty.call(this.prototype.rawAttributes, key);\n\n    // Primary key convenience constiables\n    this.primaryKeyAttributes = Object.keys(this.primaryKeys);\n    this.primaryKeyAttribute = this.primaryKeyAttributes[0];\n    if (this.primaryKeyAttribute) {\n      this.primaryKeyField = this.rawAttributes[this.primaryKeyAttribute].field || this.primaryKeyAttribute;\n    }\n\n    this._hasPrimaryKeys = this.primaryKeyAttributes.length > 0;\n    this._isPrimaryKey = key => this.primaryKeyAttributes.includes(key);\n\n    this._attributeManipulation = attributeManipulation;\n  }\n\n  /**\n   * Remove attribute from model definition\n   *\n   * @param {string} attribute name of attribute to remove\n   */\n  static removeAttribute(attribute) {\n    delete this.rawAttributes[attribute];\n    this.refreshAttributes();\n  }\n\n  /**\n   * Sync this Model to the DB, that is create the table.\n   *\n   * @param {object} [options] sync options\n   *\n   * @see\n   * {@link Sequelize#sync} for options\n   *\n   * @returns {Promise<Model>}\n   */\n  static async sync(options) {\n    options = { ...this.options, ...options };\n    options.hooks = options.hooks === undefined ? true : !!options.hooks;\n\n    const attributes = this.tableAttributes;\n    const rawAttributes = this.fieldRawAttributesMap;\n\n    if (options.hooks) {\n      await this.runHooks('beforeSync', options);\n    }\n\n    const tableName = this.getTableName(options);\n\n    let tableExists;\n    if (options.force) {\n      await this.drop(options);\n      tableExists = false;\n    } else {\n      tableExists = await this.queryInterface.tableExists(tableName, options);\n    }\n\n    if (!tableExists) {\n      await this.queryInterface.createTable(tableName, attributes, options, this);\n    } else {\n      // enums are always updated, even if alter is not set. createTable calls it too.\n      await this.queryInterface.ensureEnums(tableName, attributes, options, this);\n    }\n\n    if (tableExists && options.alter) {\n      const tableInfos = await Promise.all([\n        this.queryInterface.describeTable(tableName, options),\n        this.queryInterface.getForeignKeyReferencesForTable(tableName, options)\n      ]);\n\n      const columns = tableInfos[0];\n      // Use for alter foreign keys\n      const foreignKeyReferences = tableInfos[1];\n      const removedConstraints = {};\n\n      for (const columnName in attributes) {\n        if (!Object.prototype.hasOwnProperty.call(attributes, columnName)) continue;\n        if (!columns[columnName] && !columns[attributes[columnName].field]) {\n          await this.queryInterface.addColumn(tableName, attributes[columnName].field || columnName, attributes[columnName], options);\n        }\n      }\n\n      if (options.alter === true || typeof options.alter === 'object' && options.alter.drop !== false) {\n        for (const columnName in columns) {\n          if (!Object.prototype.hasOwnProperty.call(columns, columnName)) continue;\n          const currentAttribute = rawAttributes[columnName];\n          if (!currentAttribute) {\n            await this.queryInterface.removeColumn(tableName, columnName, options);\n            continue;\n          }\n          if (currentAttribute.primaryKey) continue;\n          // Check foreign keys. If it's a foreign key, it should remove constraint first.\n          const references = currentAttribute.references;\n          if (currentAttribute.references) {\n            const database = this.sequelize.config.database;\n            const schema = this.sequelize.config.schema;\n            // Find existed foreign keys\n            for (const foreignKeyReference of foreignKeyReferences) {\n              const constraintName = foreignKeyReference.constraintName;\n              if (!!constraintName\n                && foreignKeyReference.tableCatalog === database\n                && (schema ? foreignKeyReference.tableSchema === schema : true)\n                && foreignKeyReference.referencedTableName === references.model\n                && foreignKeyReference.referencedColumnName === references.key\n                && (schema ? foreignKeyReference.referencedTableSchema === schema : true)\n                && !removedConstraints[constraintName]) {\n                // Remove constraint on foreign keys.\n                await this.queryInterface.removeConstraint(tableName, constraintName, options);\n                removedConstraints[constraintName] = true;\n              }\n            }\n          }\n\n          await this.queryInterface.changeColumn(tableName, columnName, currentAttribute, options);\n        }\n      }\n    }\n\n    const existingIndexes = await this.queryInterface.showIndex(tableName, options);\n    const missingIndexes = this._indexes.filter(item1 =>\n      !existingIndexes.some(item2 => item1.name === item2.name)\n    ).sort((index1, index2) => {\n      if (this.sequelize.options.dialect === 'postgres') {\n      // move concurrent indexes to the bottom to avoid weird deadlocks\n        if (index1.concurrently === true) return 1;\n        if (index2.concurrently === true) return -1;\n      }\n\n      return 0;\n    });\n\n    for (const index of missingIndexes) {\n      await this.queryInterface.addIndex(tableName, { ...options, ...index });\n    }\n\n    if (options.hooks) {\n      await this.runHooks('afterSync', options);\n    }\n\n    return this;\n  }\n\n  /**\n   * Drop the table represented by this Model\n   *\n   * @param {object}   [options] drop options\n   * @param {boolean}  [options.cascade=false]   Also drop all objects depending on this table, such as views. Only works in postgres\n   * @param {Function} [options.logging=false]   A function that gets executed while running the query to log the sql.\n   * @param {boolean}  [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).\n   *\n   * @returns {Promise}\n   */\n  static async drop(options) {\n    return await this.queryInterface.dropTable(this.getTableName(options), options);\n  }\n\n  static async dropSchema(schema) {\n    return await this.queryInterface.dropSchema(schema);\n  }\n\n  /**\n   * Apply a schema to this model. For postgres, this will actually place the schema in front of the table name - `\"schema\".\"tableName\"`,\n   * while the schema will be prepended to the table name for mysql and sqlite - `'schema.tablename'`.\n   *\n   * This method is intended for use cases where the same model is needed in multiple schemas. In such a use case it is important\n   * to call `model.schema(schema, [options]).sync()` for each model to ensure the models are created in the correct schema.\n   *\n   * If a single default schema per model is needed, set the `options.schema='schema'` parameter during the `define()` call\n   * for the model.\n   *\n   * @param {string}   schema The name of the schema\n   * @param {object}   [options] schema options\n   * @param {string}   [options.schemaDelimiter='.'] The character(s) that separates the schema name from the table name\n   * @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.\n   * @param {boolean}  [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).\n   *\n   * @see\n   * {@link Sequelize#define} for more information about setting a default schema.\n   *\n   * @returns {Model}\n   */\n  static schema(schema, options) {\n\n    const clone = class extends this {};\n    Object.defineProperty(clone, 'name', { value: this.name });\n\n    clone._schema = schema;\n\n    if (options) {\n      if (typeof options === 'string') {\n        clone._schemaDelimiter = options;\n      } else if (options.schemaDelimiter) {\n        clone._schemaDelimiter = options.schemaDelimiter;\n      }\n    }\n\n    return clone;\n  }\n\n  /**\n   * Get the table name of the model, taking schema into account. The method will return The name as a string if the model has no schema,\n   * or an object with `tableName`, `schema` and `delimiter` properties.\n   *\n   * @returns {string|object}\n   */\n  static getTableName() {\n    return this.queryGenerator.addSchema(this);\n  }\n\n  /**\n   * Get un-scoped model\n   *\n   * @returns {Model}\n   */\n  static unscoped() {\n    return this.scope();\n  }\n\n  /**\n   * Add a new scope to the model. This is especially useful for adding scopes with includes, when the model you want to include is not available at the time this model is defined.\n   *\n   * By default this will throw an error if a scope with that name already exists. Pass `override: true` in the options object to silence this error.\n   *\n   * @param {string}          name The name of the scope. Use `defaultScope` to override the default scope\n   * @param {object|Function} scope scope or options\n   * @param {object}          [options] scope options\n   * @param {boolean}         [options.override=false] override old scope if already defined\n   */\n  static addScope(name, scope, options) {\n    options = { override: false, ...options };\n\n    if ((name === 'defaultScope' && Object.keys(this.options.defaultScope).length > 0 || name in this.options.scopes) && options.override === false) {\n      throw new Error(`The scope ${name} already exists. Pass { override: true } as options to silence this error`);\n    }\n\n    if (name === 'defaultScope') {\n      this.options.defaultScope = this._scope = scope;\n    } else {\n      this.options.scopes[name] = scope;\n    }\n  }\n\n  /**\n   * Apply a scope created in `define` to the model.\n   *\n   * @example <caption>how to create scopes</caption>\n   * const Model = sequelize.define('model', attributes, {\n   *   defaultScope: {\n   *     where: {\n   *       username: 'dan'\n   *     },\n   *     limit: 12\n   *   },\n   *   scopes: {\n   *     isALie: {\n   *       where: {\n   *         stuff: 'cake'\n   *       }\n   *     },\n   *     complexFunction: function(email, accessLevel) {\n   *       return {\n   *         where: {\n   *           email: {\n   *             [Op.like]: email\n   *           },\n   *           access_level {\n   *             [Op.gte]: accessLevel\n   *           }\n   *         }\n   *       }\n   *     }\n   *   }\n   * })\n   *\n   * # As you have defined a default scope, every time you do Model.find, the default scope is appended to your query. Here's a couple of examples:\n   *\n   * Model.findAll() // WHERE username = 'dan'\n   * Model.findAll({ where: { age: { [Op.gt]: 12 } } }) // WHERE age > 12 AND username = 'dan'\n   *\n   * @example <caption>To invoke scope functions you can do</caption>\n   * Model.scope({ method: ['complexFunction', 'dan@sequelize.com', 42]}).findAll()\n   * // WHERE email like 'dan@sequelize.com%' AND access_level >= 42\n   *\n   * @param {?Array|object|string} [option] The scope(s) to apply. Scopes can either be passed as consecutive arguments, or as an array of arguments. To apply simple scopes and scope functions with no arguments, pass them as strings. For scope function, pass an object, with a `method` property. The value can either be a string, if the method does not take any arguments, or an array, where the first element is the name of the method, and consecutive elements are arguments to that method. Pass null to remove all scopes, including the default.\n   *\n   * @returns {Model} A reference to the model, with the scope(s) applied. Calling scope again on the returned model will clear the previous scope.\n   */\n  static scope(option) {\n    const self = class extends this {};\n    let scope;\n    let scopeName;\n\n    Object.defineProperty(self, 'name', { value: this.name });\n\n    self._scope = {};\n    self._scopeNames = [];\n    self.scoped = true;\n\n    if (!option) {\n      return self;\n    }\n\n    const options = _.flatten(arguments);\n\n    for (const option of options) {\n      scope = null;\n      scopeName = null;\n\n      if (_.isPlainObject(option)) {\n        if (option.method) {\n          if (Array.isArray(option.method) && !!self.options.scopes[option.method[0]]) {\n            scopeName = option.method[0];\n            scope = self.options.scopes[scopeName].apply(self, option.method.slice(1));\n          }\n          else if (self.options.scopes[option.method]) {\n            scopeName = option.method;\n            scope = self.options.scopes[scopeName].apply(self);\n          }\n        } else {\n          scope = option;\n        }\n      } else if (option === 'defaultScope' && _.isPlainObject(self.options.defaultScope)) {\n        scope = self.options.defaultScope;\n      } else {\n        scopeName = option;\n        scope = self.options.scopes[scopeName];\n        if (typeof scope === 'function') {\n          scope = scope();\n        }\n      }\n\n      if (scope) {\n        this._conformIncludes(scope, this);\n        // clone scope so it doesn't get modified\n        this._assignOptions(self._scope, Utils.cloneDeep(scope));\n        self._scopeNames.push(scopeName ? scopeName : 'defaultScope');\n      } else {\n        throw new sequelizeErrors.SequelizeScopeError(`Invalid scope ${scopeName} called.`);\n      }\n    }\n\n    return self;\n  }\n\n  /**\n   * Search for multiple instances.\n   *\n   * @example <caption>Simple search using AND and =</caption>\n   * Model.findAll({\n   *   where: {\n   *     attr1: 42,\n   *     attr2: 'cake'\n   *   }\n   * })\n   *\n   * # WHERE attr1 = 42 AND attr2 = 'cake'\n   *\n   * @example <caption>Using greater than, less than etc.</caption>\n   * const {gt, lte, ne, in: opIn} = Sequelize.Op;\n   *\n   * Model.findAll({\n   *   where: {\n   *     attr1: {\n   *       [gt]: 50\n   *     },\n   *     attr2: {\n   *       [lte]: 45\n   *     },\n   *     attr3: {\n   *       [opIn]: [1,2,3]\n   *     },\n   *     attr4: {\n   *       [ne]: 5\n   *     }\n   *   }\n   * })\n   *\n   * # WHERE attr1 > 50 AND attr2 <= 45 AND attr3 IN (1,2,3) AND attr4 != 5\n   *\n   * @example <caption>Queries using OR</caption>\n   * const {or, and, gt, lt} = Sequelize.Op;\n   *\n   * Model.findAll({\n   *   where: {\n   *     name: 'a project',\n   *     [or]: [\n   *       {id: [1, 2, 3]},\n   *       {\n   *         [and]: [\n   *           {id: {[gt]: 10}},\n   *           {id: {[lt]: 100}}\n   *         ]\n   *       }\n   *     ]\n   *   }\n   * });\n   *\n   * # WHERE `Model`.`name` = 'a project' AND (`Model`.`id` IN (1, 2, 3) OR (`Model`.`id` > 10 AND `Model`.`id` < 100));\n   *\n   * @see\n   * {@link Operators} for possible operators\n   * __Alias__: _all_\n   *\n   * The promise is resolved with an array of Model instances if the query succeeds._\n   *\n   * @param  {object}                                                    [options] A hash of options to describe the scope of the search\n   * @param  {object}                                                    [options.where] A hash of attributes to describe your search. See above for examples.\n   * @param  {Array<string>|object}                                      [options.attributes] A list of the attributes that you want to select, or an object with `include` and `exclude` keys. To rename an attribute, you can pass an array, with two elements - the first is the name of the attribute in the DB (or some kind of expression such as `Sequelize.literal`, `Sequelize.fn` and so on), and the second is the name you want the attribute to have in the returned instance\n   * @param  {Array<string>}                                             [options.attributes.include] Select all the attributes of the model, plus some additional ones. Useful for aggregations, e.g. `{ attributes: { include: [[sequelize.fn('COUNT', sequelize.col('id')), 'total']] }`\n   * @param  {Array<string>}                                             [options.attributes.exclude] Select all the attributes of the model, except some few. Useful for security purposes e.g. `{ attributes: { exclude: ['password'] } }`\n   * @param  {boolean}                                                   [options.paranoid=true] If true, only non-deleted records will be returned. If false, both deleted and non-deleted records will be returned. Only applies if `options.paranoid` is true for the model.\n   * @param  {Array<object|Model|string>}                                [options.include] A list of associations to eagerly load using a left join. Supported is either `{ include: [ Model1, Model2, ...]}` or `{ include: [{ model: Model1, as: 'Alias' }]}` or `{ include: ['Alias']}`. If your association are set up with an `as` (eg. `X.hasMany(Y, { as: 'Z' }`, you need to specify Z in the as attribute when eager loading Y).\n   * @param  {Model}                                                     [options.include[].model] The model you want to eagerly load\n   * @param  {string}                                                    [options.include[].as] The alias of the relation, in case the model you want to eagerly load is aliased. For `hasOne` / `belongsTo`, this should be the singular name, and for `hasMany`, it should be the plural\n   * @param  {Association}                                               [options.include[].association] The association you want to eagerly load. (This can be used instead of providing a model/as pair)\n   * @param  {object}                                                    [options.include[].where] Where clauses to apply to the child models. Note that this converts the eager load to an inner join, unless you explicitly set `required: false`\n   * @param  {boolean}                                                   [options.include[].or=false] Whether to bind the ON and WHERE clause together by OR instead of AND.\n   * @param  {object}                                                    [options.include[].on] Supply your own ON condition for the join.\n   * @param  {Array<string>}                                             [options.include[].attributes] A list of attributes to select from the child model\n   * @param  {boolean}                                                   [options.include[].required] If true, converts to an inner join, which means that the parent model will only be loaded if it has any matching children. True if `include.where` is set, false otherwise.\n   * @param  {boolean}                                                   [options.include[].right] If true, converts to a right join if dialect support it. Ignored if `include.required` is true.\n   * @param  {boolean}                                                   [options.include[].separate] If true, runs a separate query to fetch the associated instances, only supported for hasMany associations\n   * @param  {number}                                                    [options.include[].limit] Limit the joined rows, only supported with include.separate=true\n   * @param  {string}                                                    [options.include[].through.as] The alias for the join model, in case you want to give it a different name than the default one.\n   * @param  {boolean}                                                   [options.include[].through.paranoid] If true, only non-deleted records will be returned from the join table. If false, both deleted and non-deleted records will be returned. Only applies if through model is paranoid.\n   * @param  {object}                                                    [options.include[].through.where] Filter on the join model for belongsToMany relations\n   * @param  {Array}                                                     [options.include[].through.attributes] A list of attributes to select from the join model for belongsToMany relations\n   * @param  {Array<object|Model|string>}                                [options.include[].include] Load further nested related models\n   * @param  {boolean}                                                   [options.include[].duplicating] Mark the include as duplicating, will prevent a subquery from being used.\n   * @param  {Array|Sequelize.fn|Sequelize.col|Sequelize.literal}        [options.order] Specifies an ordering. Using an array, you can provide several columns / functions to order by. Each element can be further wrapped in a two-element array. The first element is the column / function to order by, the second is the direction. For example: `order: [['name', 'DESC']]`. In this way the column will be escaped, but the direction will not.\n   * @param  {number}                                                    [options.limit] Limit for result\n   * @param  {number}                                                    [options.offset] Offset for result\n   * @param  {Transaction}                                               [options.transaction] Transaction to run query under\n   * @param  {string|object}                                             [options.lock] Lock the selected rows. Possible options are transaction.LOCK.UPDATE and transaction.LOCK.SHARE. Postgres also supports transaction.LOCK.KEY_SHARE, transaction.LOCK.NO_KEY_UPDATE and specific model locks with joins.\n   * @param  {boolean}                                                   [options.skipLocked] Skip locked rows. Only supported in Postgres.\n   * @param  {boolean}                                                   [options.raw] Return raw result. See sequelize.query for more information.\n   * @param  {Function}                                                  [options.logging=false] A function that gets executed while running the query to log the sql.\n   * @param  {boolean}                                                   [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).\n   * @param  {object}                                                    [options.having] Having options\n   * @param  {string}                                                    [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)\n   * @param  {boolean|Error}                                             [options.rejectOnEmpty=false] Throws an error when no records found\n   * @param  {boolean}                                                   [options.dotNotation] Allows including tables having the same attribute/column names - which have a dot in them.\n   * @param  {boolean}                                                   [options.nest=false] If true, transforms objects with `.` separated property names into nested objects.\n   *\n   * @see\n   * {@link Sequelize#query}\n   *\n   * @returns {Promise<Array<Model>>}\n   */\n  static async findAll(options) {\n    if (options !== undefined && !_.isPlainObject(options)) {\n      throw new sequelizeErrors.QueryError('The argument passed to findAll must be an options object, use findByPk if you wish to pass a single primary key value');\n    }\n\n    if (options !== undefined && options.attributes) {\n      if (!Array.isArray(options.attributes) && !_.isPlainObject(options.attributes)) {\n        throw new sequelizeErrors.QueryError('The attributes option must be an array of column names or an object');\n      }\n    }\n\n    this.warnOnInvalidOptions(options, Object.keys(this.rawAttributes));\n\n    const tableNames = {};\n\n    tableNames[this.getTableName(options)] = true;\n    options = Utils.cloneDeep(options);\n\n    // Add CLS transaction\n    if (options.transaction === undefined && this.sequelize.constructor._cls) {\n      const t = this.sequelize.constructor._cls.get('transaction');\n      if (t) {\n        options.transaction = t;\n      }\n    }\n\n    _.defaults(options, { hooks: true });\n\n    // set rejectOnEmpty option, defaults to model options\n    options.rejectOnEmpty = Object.prototype.hasOwnProperty.call(options, 'rejectOnEmpty')\n      ? options.rejectOnEmpty\n      : this.options.rejectOnEmpty;\n\n    this._injectScope(options);\n\n    if (options.hooks) {\n      await this.runHooks('beforeFind', options);\n    }\n    this._conformIncludes(options, this);\n    this._expandAttributes(options);\n    this._expandIncludeAll(options);\n\n    if (options.hooks) {\n      await this.runHooks('beforeFindAfterExpandIncludeAll', options);\n    }\n    options.originalAttributes = this._injectDependentVirtualAttributes(options.attributes);\n\n    if (options.include) {\n      options.hasJoin = true;\n\n      this._validateIncludedElements(options, tableNames);\n\n      // If we're not raw, we have to make sure we include the primary key for de-duplication\n      if (\n        options.attributes\n        && !options.raw\n        && this.primaryKeyAttribute\n        && !options.attributes.includes(this.primaryKeyAttribute)\n        && (!options.group || !options.hasSingleAssociation || options.hasMultiAssociation)\n      ) {\n        options.attributes = [this.primaryKeyAttribute].concat(options.attributes);\n      }\n    }\n\n    if (!options.attributes) {\n      options.attributes = Object.keys(this.rawAttributes);\n      options.originalAttributes = this._injectDependentVirtualAttributes(options.attributes);\n    }\n\n    // whereCollection is used for non-primary key updates\n    this.options.whereCollection = options.where || null;\n\n    Utils.mapFinderOptions(options, this);\n\n    options = this._paranoidClause(this, options);\n\n    if (options.hooks) {\n      await this.runHooks('beforeFindAfterOptions', options);\n    }\n    const selectOptions = { ...options, tableNames: Object.keys(tableNames) };\n    const results = await this.queryInterface.select(this, this.getTableName(selectOptions), selectOptions);\n    if (options.hooks) {\n      await this.runHooks('afterFind', results, options);\n    }\n\n    //rejectOnEmpty mode\n    if (_.isEmpty(results) && options.rejectOnEmpty) {\n      if (typeof options.rejectOnEmpty === 'function') {\n        throw new options.rejectOnEmpty();\n      }\n      if (typeof options.rejectOnEmpty === 'object') {\n        throw options.rejectOnEmpty;\n      }\n      throw new sequelizeErrors.EmptyResultError();\n    }\n\n    return await Model._findSeparate(results, options);\n  }\n\n  static warnOnInvalidOptions(options, validColumnNames) {\n    if (!_.isPlainObject(options)) {\n      return;\n    }\n\n    const unrecognizedOptions = Object.keys(options).filter(k => !validQueryKeywords.has(k));\n    const unexpectedModelAttributes = _.intersection(unrecognizedOptions, validColumnNames);\n    if (!options.where && unexpectedModelAttributes.length > 0) {\n      logger.warn(`Model attributes (${unexpectedModelAttributes.join(', ')}) passed into finder method options of model ${this.name}, but the options.where object is empty. Did you forget to use options.where?`);\n    }\n  }\n\n  static _injectDependentVirtualAttributes(attributes) {\n    if (!this._hasVirtualAttributes) return attributes;\n    if (!attributes || !Array.isArray(attributes)) return attributes;\n\n    for (const attribute of attributes) {\n      if (\n        this._virtualAttributes.has(attribute)\n        && this.rawAttributes[attribute].type.fields\n      ) {\n        attributes = attributes.concat(this.rawAttributes[attribute].type.fields);\n      }\n    }\n\n    attributes = _.uniq(attributes);\n\n    return attributes;\n  }\n\n  static async _findSeparate(results, options) {\n    if (!options.include || options.raw || !results) return results;\n\n    const original = results;\n    if (options.plain) results = [results];\n\n    if (!results.length) return original;\n\n    await Promise.all(options.include.map(async include => {\n      if (!include.separate) {\n        return await Model._findSeparate(\n          results.reduce((memo, result) => {\n            let associations = result.get(include.association.as);\n\n            // Might be an empty belongsTo relation\n            if (!associations) return memo;\n\n            // Force array so we can concat no matter if it's 1:1 or :M\n            if (!Array.isArray(associations)) associations = [associations];\n\n            for (let i = 0, len = associations.length; i !== len; ++i) {\n              memo.push(associations[i]);\n            }\n            return memo;\n          }, []),\n          {\n\n            ..._.omit(options, 'include', 'attributes', 'order', 'where', 'limit', 'offset', 'plain', 'scope'),\n            include: include.include || []\n          }\n        );\n      }\n\n      const map = await include.association.get(results, {\n\n        ..._.omit(options, nonCascadingOptions),\n        ..._.omit(include, ['parent', 'association', 'as', 'originalAttributes'])\n      });\n\n      for (const result of results) {\n        result.set(\n          include.association.as,\n          map[result.get(include.association.sourceKey)],\n          { raw: true }\n        );\n      }\n    }));\n\n    return original;\n  }\n\n  /**\n   * Search for a single instance by its primary key._\n   *\n   * @param  {number|bigint|string|Buffer}      param The value of the desired instance's primary key.\n   * @param  {object}                           [options] find options\n   * @param  {Transaction}                      [options.transaction] Transaction to run query under\n   * @param  {string}                           [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)\n   *\n   * @see\n   * {@link Model.findAll}           for a full explanation of options, Note that options.where is not supported.\n   *\n   * @returns {Promise<Model>}\n   */\n  static async findByPk(param, options) {\n    // return Promise resolved with null if no arguments are passed\n    if ([null, undefined].includes(param)) {\n      return null;\n    }\n\n    options = Utils.cloneDeep(options) || {};\n\n    if (typeof param === 'number' || typeof param === 'bigint' || typeof param === 'string' || Buffer.isBuffer(param)) {\n      options.where = {\n        [this.primaryKeyAttribute]: param\n      };\n    } else {\n      throw new Error(`Argument passed to findByPk is invalid: ${param}`);\n    }\n\n    // Bypass a possible overloaded findOne\n    // note: in v6, we don't bypass overload https://github.com/sequelize/sequelize/issues/14003\n    return await this.findOne(options);\n  }\n\n  /**\n   * Search for a single instance. Returns the first instance found, or null if none can be found.\n   *\n   * @param  {object}       [options] A hash of options to describe the scope of the search\n   * @param  {Transaction}  [options.transaction] Transaction to run query under\n   * @param  {string}       [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)\n   *\n   * @see\n   * {@link Model.findAll} for an explanation of options\n   *\n   * @returns {Promise<Model|null>}\n   */\n  static async findOne(options) {\n    if (options !== undefined && !_.isPlainObject(options)) {\n      throw new Error('The argument passed to findOne must be an options object, use findByPk if you wish to pass a single primary key value');\n    }\n    options = Utils.cloneDeep(options);\n\n    // Add CLS transaction\n    if (options.transaction === undefined && this.sequelize.constructor._cls) {\n      const t = this.sequelize.constructor._cls.get('transaction');\n      if (t) {\n        options.transaction = t;\n      }\n    }\n\n    if (options.limit === undefined) {\n      const uniqueSingleColumns = _.chain(this.uniqueKeys).values().filter(c => c.fields.length === 1).map('column').value();\n\n      // Don't add limit if querying directly on the pk or a unique column\n      if (!options.where || !_.some(options.where, (value, key) =>\n        (key === this.primaryKeyAttribute || uniqueSingleColumns.includes(key)) &&\n          (Utils.isPrimitive(value) || Buffer.isBuffer(value))\n      )) {\n        options.limit = 1;\n      }\n    }\n\n    // Bypass a possible overloaded findAll.\n    // note: in v6, we don't bypass overload https://github.com/sequelize/sequelize/issues/14003\n    return await this.findAll(_.defaults(options, {\n      plain: true\n    }));\n  }\n\n  /**\n   * Run an aggregation method on the specified field\n   *\n   * @param {string}          attribute The attribute to aggregate over. Can be a field name or *\n   * @param {string}          aggregateFunction The function to use for aggregation, e.g. sum, max etc.\n   * @param {object}          [options] Query options. See sequelize.query for full options\n   * @param {object}          [options.where] A hash of search attributes.\n   * @param {Function}        [options.logging=false] A function that gets executed while running the query to log the sql.\n   * @param {boolean}         [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).\n   * @param {DataTypes|string} [options.dataType] The type of the result. If `field` is a field in this Model, the default will be the type of that field, otherwise defaults to float.\n   * @param {boolean}         [options.distinct] Applies DISTINCT to the field being aggregated over\n   * @param {Transaction}     [options.transaction] Transaction to run query under\n   * @param {boolean}         [options.plain] When `true`, the first returned value of `aggregateFunction` is cast to `dataType` and returned. If additional attributes are specified, along with `group` clauses, set `plain` to `false` to return all values of all returned rows.  Defaults to `true`\n   *\n   * @returns {Promise<DataTypes|object>} Returns the aggregate result cast to `options.dataType`, unless `options.plain` is false, in which case the complete data result is returned.\n   */\n  static async aggregate(attribute, aggregateFunction, options) {\n    options = Utils.cloneDeep(options);\n\n    // We need to preserve attributes here as the `injectScope` call would inject non aggregate columns.\n    const prevAttributes = options.attributes;\n    this._injectScope(options);\n    options.attributes = prevAttributes;\n    this._conformIncludes(options, this);\n\n    if (options.include) {\n      this._expandIncludeAll(options);\n      this._validateIncludedElements(options);\n    }\n\n    const attrOptions = this.rawAttributes[attribute];\n    const field = attrOptions && attrOptions.field || attribute;\n    let aggregateColumn = this.sequelize.col(field);\n\n    if (options.distinct) {\n      aggregateColumn = this.sequelize.fn('DISTINCT', aggregateColumn);\n    }\n\n    let { group } = options;\n    if (Array.isArray(group) && Array.isArray(group[0])) {\n      noDoubleNestedGroup();\n      group = _.flatten(group);\n    }\n    options.attributes = _.unionBy(\n      options.attributes,\n      group,\n      [[this.sequelize.fn(aggregateFunction, aggregateColumn), aggregateFunction]],\n      a => Array.isArray(a) ? a[1] : a\n    );\n\n    if (!options.dataType) {\n      if (attrOptions) {\n        options.dataType = attrOptions.type;\n      } else {\n        // Use FLOAT as fallback\n        options.dataType = new DataTypes.FLOAT();\n      }\n    } else {\n      options.dataType = this.sequelize.normalizeDataType(options.dataType);\n    }\n\n    Utils.mapOptionFieldNames(options, this);\n    options = this._paranoidClause(this, options);\n\n    const value = await this.queryInterface.rawSelect(this.getTableName(options), options, aggregateFunction, this);\n    return value;\n  }\n\n  /**\n   * Count the number of records matching the provided where clause.\n   *\n   * If you provide an `include` option, the number of matching associations will be counted instead.\n   *\n   * @param {object}        [options] options\n   * @param {object}        [options.where] A hash of search attributes.\n   * @param {object}        [options.include] Include options. See `find` for details\n   * @param {boolean}       [options.paranoid=true] Set `true` to count only non-deleted records. Can be used on models with `paranoid` enabled\n   * @param {boolean}       [options.distinct] Apply COUNT(DISTINCT(col)) on primary key or on options.col.\n   * @param {string}        [options.col] Column on which COUNT() should be applied\n   * @param {Array}         [options.attributes] Used in conjunction with `group`\n   * @param {Array}         [options.group] For creating complex counts. Will return multiple rows as needed.\n   * @param {Transaction}   [options.transaction] Transaction to run query under\n   * @param {Function}      [options.logging=false] A function that gets executed while running the query to log the sql.\n   * @param {boolean}       [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).\n   * @param {string}        [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)\n   *\n   * @returns {Promise<number>}\n   */\n  static async count(options) {\n    options = Utils.cloneDeep(options);\n    options = _.defaults(options, { hooks: true });\n\n    // Add CLS transaction\n    if (options.transaction === undefined && this.sequelize.constructor._cls) {\n      const t = this.sequelize.constructor._cls.get('transaction');\n      if (t) {\n        options.transaction = t;\n      }\n    }\n\n    options.raw = true;\n    if (options.hooks) {\n      await this.runHooks('beforeCount', options);\n    }\n    let col = options.col || '*';\n    if (options.include) {\n      col = `${this.name}.${options.col || this.primaryKeyField}`;\n    }\n    if (options.distinct && col === '*') {\n      col = this.primaryKeyField;\n    }\n    options.plain = !options.group;\n    options.dataType = new DataTypes.INTEGER();\n    options.includeIgnoreAttributes = false;\n\n    // No limit, offset or order for the options max be given to count()\n    // Set them to null to prevent scopes setting those values\n    options.limit = null;\n    options.offset = null;\n    options.order = null;\n\n    const result = await this.aggregate(col, 'count', options);\n\n    // When grouping is used, some dialects such as PG are returning the count as string\n    // --> Manually convert it to number\n    if (Array.isArray(result)) {\n      return result.map(item => ({\n        ...item,\n        count: Number(item.count)\n      }));\n    }\n\n    return result;\n  }\n\n  /**\n   * Find all the rows matching your query, within a specified offset / limit, and get the total number of rows matching your query. This is very useful for paging\n   *\n   * @example\n   * const result = await Model.findAndCountAll({\n   *   where: ...,\n   *   limit: 12,\n   *   offset: 12\n   * });\n   *\n   * # In the above example, `result.rows` will contain rows 13 through 24, while `result.count` will return the total number of rows that matched your query.\n   *\n   * # When you add includes, only those which are required (either because they have a where clause, or because `required` is explicitly set to true on the include) will be added to the count part.\n   *\n   * # Suppose you want to find all users who have a profile attached:\n   *\n   * User.findAndCountAll({\n   *   include: [\n   *      { model: Profile, required: true}\n   *   ],\n   *   limit: 3\n   * });\n   *\n   * # Because the include for `Profile` has `required` set it will result in an inner join, and only the users who have a profile will be counted. If we remove `required` from the include, both users with and without profiles will be counted\n   *\n   * @param {object} [options] See findAll options\n   *\n   * @see\n   * {@link Model.findAll} for a specification of find and query options\n   * @see\n   * {@link Model.count} for a specification of count options\n   *\n   * @returns {Promise<{count: number | number[], rows: Model[]}>}\n   */\n  static async findAndCountAll(options) {\n    if (options !== undefined && !_.isPlainObject(options)) {\n      throw new Error('The argument passed to findAndCountAll must be an options object, use findByPk if you wish to pass a single primary key value');\n    }\n\n    const countOptions = Utils.cloneDeep(options);\n\n    if (countOptions.attributes) {\n      countOptions.attributes = undefined;\n    }\n\n    const [count, rows] = await Promise.all([\n      this.count(countOptions),\n      this.findAll(options)\n    ]);\n\n    return {\n      count,\n      rows: count === 0 ? [] : rows\n    };\n  }\n\n  /**\n   * Find the maximum value of field\n   *\n   * @param {string} field attribute / field name\n   * @param {object} [options] See aggregate\n   *\n   * @see\n   * {@link Model.aggregate} for options\n   *\n   * @returns {Promise<*>}\n   */\n  static async max(field, options) {\n    return await this.aggregate(field, 'max', options);\n  }\n\n  /**\n   * Find the minimum value of field\n   *\n   * @param {string} field attribute / field name\n   * @param {object} [options] See aggregate\n   *\n   * @see\n   * {@link Model.aggregate} for options\n   *\n   * @returns {Promise<*>}\n   */\n  static async min(field, options) {\n    return await this.aggregate(field, 'min', options);\n  }\n\n  /**\n   * Find the sum of field\n   *\n   * @param {string} field attribute / field name\n   * @param {object} [options] See aggregate\n   *\n   * @see\n   * {@link Model.aggregate} for options\n   *\n   * @returns {Promise<number>}\n   */\n  static async sum(field, options) {\n    return await this.aggregate(field, 'sum', options);\n  }\n\n  /**\n   * Builds a new model instance.\n   *\n   * @param {object|Array} values An object of key value pairs or an array of such. If an array, the function will return an array of instances.\n   * @param {object}  [options] Instance build options\n   * @param {boolean} [options.raw=false] If set to true, values will ignore field and virtual setters.\n   * @param {boolean} [options.isNewRecord=true] Is this new record\n   * @param {Array}   [options.include] an array of include options - Used to build prefetched/included model instances. See `set`\n   *\n   * @returns {Model|Array<Model>}\n   */\n  static build(values, options) {\n    if (Array.isArray(values)) {\n      return this.bulkBuild(values, options);\n    }\n\n    return new this(values, options);\n  }\n\n  static bulkBuild(valueSets, options) {\n    options = { isNewRecord: true, ...options };\n\n    if (!options.includeValidated) {\n      this._conformIncludes(options, this);\n      if (options.include) {\n        this._expandIncludeAll(options);\n        this._validateIncludedElements(options);\n      }\n    }\n\n    if (options.attributes) {\n      options.attributes = options.attributes.map(attribute => Array.isArray(attribute) ? attribute[1] : attribute);\n    }\n\n    return valueSets.map(values => this.build(values, options));\n  }\n\n  /**\n   * Builds a new model instance and calls save on it.\n   *\n   * @see\n   * {@link Model.build}\n   * @see\n   * {@link Model.save}\n   *\n   * @param  {object}         values                       Hash of data values to create new record with\n   * @param  {object}         [options]                    Build and query options\n   * @param  {boolean}        [options.raw=false]          If set to true, values will ignore field and virtual setters.\n   * @param  {boolean}        [options.isNewRecord=true]   Is this new record\n   * @param  {Array}          [options.include]            An array of include options - Used to build prefetched/included model instances. See `set`\n   * @param  {string[]}       [options.fields]             An optional array of strings, representing database columns. If fields is provided, only those columns will be validated and saved.\n   * @param  {boolean}        [options.silent=false]       If true, the updatedAt timestamp will not be updated.\n   * @param  {boolean}        [options.validate=true]      If false, validations won't be run.\n   * @param  {boolean}        [options.hooks=true]         Run before and after create / update + validate hooks\n   * @param  {Function}       [options.logging=false]      A function that gets executed while running the query to log the sql.\n   * @param  {boolean}        [options.benchmark=false]    Pass query execution time in milliseconds as second argument to logging function (options.logging).\n   * @param  {Transaction}    [options.transaction]        Transaction to run query under\n   * @param  {string}         [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)\n   * @param  {boolean|Array}  [options.returning=true]     Appends RETURNING <model columns> to get back all defined values; if an array of column names, append RETURNING <columns> to get back specific columns (Postgres only)\n   *\n   * @returns {Promise<Model>}\n   *\n   */\n  static async create(values, options) {\n    options = Utils.cloneDeep(options || {});\n\n    return await this.build(values, {\n      isNewRecord: true,\n      attributes: options.fields,\n      include: options.include,\n      raw: options.raw,\n      silent: options.silent\n    }).save(options);\n  }\n\n  /**\n   * Find a row that matches the query, or build (but don't save) the row if none is found.\n   * The successful result of the promise will be (instance, built)\n   *\n   * @param {object}   options find options\n   * @param {object}   options.where A hash of search attributes. If `where` is a plain object it will be appended with defaults to build a new instance.\n   * @param {object}   [options.defaults] Default values to use if building a new instance\n   * @param {object}   [options.transaction] Transaction to run query under\n   *\n   * @returns {Promise<Model,boolean>}\n   */\n  static async findOrBuild(options) {\n    if (!options || !options.where || arguments.length > 1) {\n      throw new Error(\n        'Missing where attribute in the options parameter passed to findOrBuild. ' +\n        'Please note that the API has changed, and is now options only (an object with where, defaults keys, transaction etc.)'\n      );\n    }\n\n    let values;\n\n    let instance = await this.findOne(options);\n    if (instance === null) {\n      values = { ...options.defaults };\n      if (_.isPlainObject(options.where)) {\n        values = Utils.defaults(values, options.where);\n      }\n\n      instance = this.build(values, options);\n\n      return [instance, true];\n    }\n\n    return [instance, false];\n  }\n\n  /**\n   * Find a row that matches the query, or build and save the row if none is found\n   * The successful result of the promise will be (instance, created)\n   *\n   * If no transaction is passed in the `options` object, a new transaction will be created internally, to prevent the race condition where a matching row is created by another connection after the find but before the insert call.\n   * However, it is not always possible to handle this case in SQLite, specifically if one transaction inserts and another tries to select before the first one has committed. In this case, an instance of sequelize. TimeoutError will be thrown instead.\n   * If a transaction is created, a savepoint will be created instead, and any unique constraint violation will be handled internally.\n   *\n   * @see\n   * {@link Model.findAll} for a full specification of find and options\n   *\n   * @param {object}      options find and create options\n   * @param {object}      options.where where A hash of search attributes. If `where` is a plain object it will be appended with defaults to build a new instance.\n   * @param {object}      [options.defaults] Default values to use if creating a new instance\n   * @param {Transaction} [options.transaction] Transaction to run query under\n   *\n   * @returns {Promise<Model,boolean>}\n   */\n  static async findOrCreate(options) {\n    if (!options || !options.where || arguments.length > 1) {\n      throw new Error(\n        'Missing where attribute in the options parameter passed to findOrCreate. ' +\n        'Please note that the API has changed, and is now options only (an object with where, defaults keys, transaction etc.)'\n      );\n    }\n\n    options = { ...options };\n\n    if (options.defaults) {\n      const defaults = Object.keys(options.defaults);\n      const unknownDefaults = defaults.filter(name => !this.rawAttributes[name]);\n\n      if (unknownDefaults.length) {\n        logger.warn(`Unknown attributes (${unknownDefaults}) passed to defaults option of findOrCreate`);\n      }\n    }\n\n    if (options.transaction === undefined && this.sequelize.constructor._cls) {\n      const t = this.sequelize.constructor._cls.get('transaction');\n      if (t) {\n        options.transaction = t;\n      }\n    }\n\n    const internalTransaction = !options.transaction;\n    let values;\n    let transaction;\n\n    try {\n      const t = await this.sequelize.transaction(options);\n      transaction = t;\n      options.transaction = t;\n\n      const found = await this.findOne(Utils.defaults({ transaction }, options));\n      if (found !== null) {\n        return [found, false];\n      }\n\n      values = { ...options.defaults };\n      if (_.isPlainObject(options.where)) {\n        values = Utils.defaults(values, options.where);\n      }\n\n      options.exception = true;\n      options.returning = true;\n\n      try {\n        const created = await this.create(values, options);\n        if (created.get(this.primaryKeyAttribute, { raw: true }) === null) {\n          // If the query returned an empty result for the primary key, we know that this was actually a unique constraint violation\n          throw new sequelizeErrors.UniqueConstraintError();\n        }\n\n        return [created, true];\n      } catch (err) {\n        if (!(err instanceof sequelizeErrors.UniqueConstraintError)) throw err;\n        const flattenedWhere = Utils.flattenObjectDeep(options.where);\n        const flattenedWhereKeys = Object.keys(flattenedWhere).map(name => _.last(name.split('.')));\n        const whereFields = flattenedWhereKeys.map(name => _.get(this.rawAttributes, `${name}.field`, name));\n        const defaultFields = options.defaults && Object.keys(options.defaults)\n          .filter(name => this.rawAttributes[name])\n          .map(name => this.rawAttributes[name].field || name);\n\n        const errFieldKeys = Object.keys(err.fields);\n        const errFieldsWhereIntersects = Utils.intersects(errFieldKeys, whereFields);\n        if (defaultFields && !errFieldsWhereIntersects && Utils.intersects(errFieldKeys, defaultFields)) {\n          throw err;\n        }\n\n        if (errFieldsWhereIntersects) {\n          _.each(err.fields, (value, key) => {\n            const name = this.fieldRawAttributesMap[key].fieldName;\n            if (value.toString() !== options.where[name].toString()) {\n              throw new Error(`${this.name}#findOrCreate: value used for ${name} was not equal for both the find and the create calls, '${options.where[name]}' vs '${value}'`);\n            }\n          });\n        }\n\n        // Someone must have created a matching instance inside the same transaction since we last did a find. Let's find it!\n        const otherCreated = await this.findOne(Utils.defaults({\n          transaction: internalTransaction ? null : transaction\n        }, options));\n\n        // Sanity check, ideally we caught this at the defaultFeilds/err.fields check\n        // But if we didn't and instance is null, we will throw\n        if (otherCreated === null) throw err;\n\n        return [otherCreated, false];\n      }\n    } finally {\n      if (internalTransaction && transaction) {\n        await transaction.commit();\n      }\n    }\n  }\n\n  /**\n   * A more performant findOrCreate that may not work under a transaction (working in postgres)\n   * Will execute a find call, if empty then attempt to create, if unique constraint then attempt to find again\n   *\n   * @see\n   * {@link Model.findAll} for a full specification of find and options\n   *\n   * @param {object} options find options\n   * @param {object} options.where A hash of search attributes. If `where` is a plain object it will be appended with defaults to build a new instance.\n   * @param {object} [options.defaults] Default values to use if creating a new instance\n   *\n   * @returns {Promise<Model,boolean>}\n   */\n  static async findCreateFind(options) {\n    if (!options || !options.where) {\n      throw new Error(\n        'Missing where attribute in the options parameter passed to findCreateFind.'\n      );\n    }\n\n    let values = { ...options.defaults };\n    if (_.isPlainObject(options.where)) {\n      values = Utils.defaults(values, options.where);\n    }\n\n\n    const found = await this.findOne(options);\n    if (found) return [found, false];\n\n    try {\n      const createOptions = { ...options };\n\n      // To avoid breaking a postgres transaction, run the create with `ignoreDuplicates`.\n      if (this.sequelize.options.dialect === 'postgres' && options.transaction) {\n        createOptions.ignoreDuplicates = true;\n      }\n\n      const created = await this.create(values, createOptions);\n      return [created, true];\n    } catch (err) {\n      if (!(err instanceof sequelizeErrors.UniqueConstraintError || err instanceof sequelizeErrors.EmptyResultError)) {\n        throw err;\n      }\n\n      const foundAgain = await this.findOne(options);\n      return [foundAgain, false];\n    }\n  }\n\n  /**\n   * Insert or update a single row. An update will be executed if a row which matches the supplied values on either the primary key or a unique key is found. Note that the unique index must be defined in your sequelize model and not just in the table. Otherwise you may experience a unique constraint violation, because sequelize fails to identify the row that should be updated.\n   *\n   * **Implementation details:**\n   *\n   * * MySQL - Implemented with ON DUPLICATE KEY UPDATE`\n   * * PostgreSQL - Implemented with ON CONFLICT DO UPDATE. If update data contains PK field, then PK is selected as the default conflict key. Otherwise first unique constraint/index will be selected, which can satisfy conflict key requirements.\n   * * SQLite - Implemented with ON CONFLICT DO UPDATE\n   * * MSSQL - Implemented as a single query using `MERGE` and `WHEN (NOT) MATCHED THEN`\n   *\n   * **Note** that Postgres/SQLite returns null for created, no matter if the row was created or updated\n   *\n   * @param  {object}        values                                        hash of values to upsert\n   * @param  {object}        [options]                                     upsert options\n   * @param  {boolean}       [options.validate=true]                       Run validations before the row is inserted\n   * @param  {Array}         [options.fields=Object.keys(this.attributes)] The fields to update if the record already exists. Defaults to all changed fields.  If none of the specified fields are present on the provided `values` object, an insert will still be attempted, but duplicate key conflicts will be ignored.\n   * @param  {boolean}       [options.hooks=true]                          Run before / after upsert hooks?\n   * @param  {boolean}       [options.returning=true]                      If true, fetches back auto generated values\n   * @param  {Transaction}   [options.transaction]                         Transaction to run query under\n   * @param  {Function}      [options.logging=false]                       A function that gets executed while running the query to log the sql.\n   * @param  {boolean}       [options.benchmark=false]                     Pass query execution time in milliseconds as second argument to logging function (options.logging).\n   * @param  {string}        [options.searchPath=DEFAULT]                  An optional parameter to specify the schema search_path (Postgres only)\n   * @param  {Array<string>} [options.conflictFields]                      Optional override for the conflict fields in the ON CONFLICT part of the query. Only supported in Postgres >= 9.5 and SQLite >= 3.24.0\n   *\n   * @returns {Promise<Array<Model, boolean | null>>} returns an array with two elements, the first being the new record and the second being `true` if it was just created or `false` if it already existed (except on Postgres and SQLite, which can't detect this and will always return `null` instead of a boolean).\n   */\n  static async upsert(values, options) {\n    options = {\n      hooks: true,\n      returning: true,\n      validate: true,\n      ...Utils.cloneDeep(options)\n    };\n\n    // Add CLS transaction\n    if (options.transaction === undefined && this.sequelize.constructor._cls) {\n      const t = this.sequelize.constructor._cls.get('transaction');\n      if (t) {\n        options.transaction = t;\n      }\n    }\n\n    const createdAtAttr = this._timestampAttributes.createdAt;\n    const updatedAtAttr = this._timestampAttributes.updatedAt;\n    const hasPrimary = this.primaryKeyField in values || this.primaryKeyAttribute in values;\n    const instance = this.build(values);\n\n    options.model = this;\n    options.instance = instance;\n\n    const changed = Array.from(instance._changed);\n    if (!options.fields) {\n      options.fields = changed;\n    }\n\n    if (options.validate) {\n      await instance.validate(options);\n    }\n    // Map field names\n    const updatedDataValues = _.pick(instance.dataValues, changed);\n    const insertValues = Utils.mapValueFieldNames(instance.dataValues, Object.keys(instance.rawAttributes), this);\n    const updateValues = Utils.mapValueFieldNames(updatedDataValues, options.fields, this);\n    const now = Utils.now(this.sequelize.options.dialect);\n\n    // Attach createdAt\n    if (createdAtAttr && !insertValues[createdAtAttr]) {\n      const field = this.rawAttributes[createdAtAttr].field || createdAtAttr;\n      insertValues[field] = this._getDefaultTimestamp(createdAtAttr) || now;\n    }\n    if (updatedAtAttr && !insertValues[updatedAtAttr]) {\n      const field = this.rawAttributes[updatedAtAttr].field || updatedAtAttr;\n      insertValues[field] = updateValues[field] = this._getDefaultTimestamp(updatedAtAttr) || now;\n    }\n\n    // Db2 does not allow NULL values for unique columns.\n    // Add dummy values if not provided by test case or user.\n    if (this.sequelize.options.dialect === 'db2') {\n      this.uniqno = this.sequelize.dialect.queryGenerator.addUniqueFields(\n        insertValues, this.rawAttributes, this.uniqno);\n    }\n\n    // Build adds a null value for the primary key, if none was given by the user.\n    // We need to remove that because of some Postgres technicalities.\n    if (!hasPrimary && this.primaryKeyAttribute && !this.rawAttributes[this.primaryKeyAttribute].defaultValue) {\n      delete insertValues[this.primaryKeyField];\n      delete updateValues[this.primaryKeyField];\n    }\n\n    if (options.hooks) {\n      await this.runHooks('beforeUpsert', values, options);\n    }\n    const result = await this.queryInterface.upsert(this.getTableName(options), insertValues, updateValues, instance.where(), options);\n\n    const [record] = result;\n    record.isNewRecord = false;\n\n    if (options.hooks) {\n      await this.runHooks('afterUpsert', result, options);\n      return result;\n    }\n    return result;\n  }\n\n  /**\n   * Create and insert multiple instances in bulk.\n   *\n   * The success handler is passed an array of instances, but please notice that these may not completely represent the state of the rows in the DB. This is because MySQL\n   * and SQLite do not make it easy to obtain back automatically generated IDs and other default values in a way that can be mapped to multiple records.\n   * To obtain Instances for the newly created values, you will need to query for them again.\n   *\n   * If validation fails, the promise is rejected with an array-like AggregateError\n   *\n   * @param  {Array}          records                          List of objects (key/value pairs) to create instances from\n   * @param  {object}         [options]                        Bulk create options\n   * @param  {Array}          [options.fields]                 Fields to insert (defaults to all fields)\n   * @param  {boolean}        [options.validate=false]         Should each row be subject to validation before it is inserted. The whole insert will fail if one row fails validation\n   * @param  {boolean}        [options.hooks=true]             Run before / after bulk create hooks?\n   * @param  {boolean}        [options.individualHooks=false]  Run before / after create hooks for each individual Instance? BulkCreate hooks will still be run if options.hooks is true.\n   * @param  {boolean}        [options.ignoreDuplicates=false] Ignore duplicate values for primary keys? (not supported by MSSQL or Postgres < 9.5)\n   * @param  {Array}          [options.updateOnDuplicate]      Fields to update if row key already exists (on duplicate key update)? (only supported by MySQL, MariaDB, SQLite >= 3.24.0 & Postgres >= 9.5).\n   * @param  {Array}          [options.conflictAttributes]     Optional override for the conflict fields in the ON CONFLICT part of the query. Only supported in Postgres >= 9.5 and SQLite >= 3.24.0\n   * @param  {Transaction}    [options.transaction]            Transaction to run query under\n   * @param  {Function}       [options.logging=false]          A function that gets executed while running the query to log the sql.\n   * @param  {boolean}        [options.benchmark=false]        Pass query execution time in milliseconds as second argument to logging function (options.logging).\n   * @param  {boolean|Array}  [options.returning=false]        If true, append RETURNING <model columns> to get back all defined values; if an array of column names, append RETURNING <columns> to get back specific columns (Postgres only)\n   * @param  {string}         [options.searchPath=DEFAULT]     An optional parameter to specify the schema search_path (Postgres only)\n   *\n   * @returns {Promise<Array<Model>>}\n   */\n  static async bulkCreate(records, options = {}) {\n    if (!records.length) {\n      return [];\n    }\n\n    const dialect = this.sequelize.options.dialect;\n    const now = Utils.now(this.sequelize.options.dialect);\n    options = Utils.cloneDeep(options);\n\n    // Add CLS transaction\n    if (options.transaction === undefined && this.sequelize.constructor._cls) {\n      const t = this.sequelize.constructor._cls.get('transaction');\n      if (t) {\n        options.transaction = t;\n      }\n    }\n\n    options.model = this;\n\n    if (!options.includeValidated) {\n      this._conformIncludes(options, this);\n      if (options.include) {\n        this._expandIncludeAll(options);\n        this._validateIncludedElements(options);\n      }\n    }\n\n    const instances = records.map(values => this.build(values, { isNewRecord: true, include: options.include }));\n\n    const recursiveBulkCreate = async (instances, options) => {\n      options = {\n        validate: false,\n        hooks: true,\n        individualHooks: false,\n        ignoreDuplicates: false,\n        ...options\n      };\n\n      if (options.returning === undefined) {\n        if (options.association) {\n          options.returning = false;\n        } else {\n          options.returning = true;\n        }\n      }\n      if (options.ignoreDuplicates && !this.sequelize.dialect.supports.inserts.ignoreDuplicates &&\n          !this.sequelize.dialect.supports.inserts.onConflictDoNothing) {\n        throw new Error(`${dialect} does not support the ignoreDuplicates option.`);\n      }\n      if (options.updateOnDuplicate && (dialect !== 'mysql' && dialect !== 'mariadb' && dialect !== 'sqlite' && dialect !== 'postgres')) {\n        throw new Error(`${dialect} does not support the updateOnDuplicate option.`);\n      }\n\n      const model = options.model;\n\n      options.fields = options.fields || Object.keys(model.rawAttributes);\n      const createdAtAttr = model._timestampAttributes.createdAt;\n      const updatedAtAttr = model._timestampAttributes.updatedAt;\n\n      if (options.updateOnDuplicate !== undefined) {\n        if (Array.isArray(options.updateOnDuplicate) && options.updateOnDuplicate.length) {\n          options.updateOnDuplicate = _.intersection(\n            _.without(Object.keys(model.tableAttributes), createdAtAttr),\n            options.updateOnDuplicate\n          );\n        } else {\n          throw new Error('updateOnDuplicate option only supports non-empty array.');\n        }\n      }\n\n      // Run before hook\n      if (options.hooks) {\n        await model.runHooks('beforeBulkCreate', instances, options);\n      }\n      // Validate\n      if (options.validate) {\n        const errors = [];\n        const validateOptions = { ...options };\n        validateOptions.hooks = options.individualHooks;\n\n        await Promise.all(instances.map(async instance => {\n          try {\n            await instance.validate(validateOptions);\n          } catch (err) {\n            errors.push(new sequelizeErrors.BulkRecordError(err, instance));\n          }\n        }));\n\n        delete options.skip;\n        if (errors.length) {\n          throw new sequelizeErrors.AggregateError(errors);\n        }\n      }\n      if (options.individualHooks) {\n        await Promise.all(instances.map(async instance => {\n          const individualOptions = {\n            ...options,\n            validate: false,\n            hooks: true\n          };\n          delete individualOptions.fields;\n          delete individualOptions.individualHooks;\n          delete individualOptions.ignoreDuplicates;\n\n          await instance.save(individualOptions);\n        }));\n      } else {\n        if (options.include && options.include.length) {\n          await Promise.all(options.include.filter(include => include.association instanceof BelongsTo).map(async include => {\n            const associationInstances = [];\n            const associationInstanceIndexToInstanceMap = [];\n\n            for (const instance of instances) {\n              const associationInstance = instance.get(include.as);\n              if (associationInstance) {\n                associationInstances.push(associationInstance);\n                associationInstanceIndexToInstanceMap.push(instance);\n              }\n            }\n\n            if (!associationInstances.length) {\n              return;\n            }\n\n            const includeOptions = _(Utils.cloneDeep(include))\n              .omit(['association'])\n              .defaults({\n                transaction: options.transaction,\n                logging: options.logging\n              }).value();\n\n            const createdAssociationInstances = await recursiveBulkCreate(associationInstances, includeOptions);\n            for (const idx in createdAssociationInstances) {\n              const associationInstance = createdAssociationInstances[idx];\n              const instance = associationInstanceIndexToInstanceMap[idx];\n\n              await include.association.set(instance, associationInstance, { save: false, logging: options.logging });\n            }\n          }));\n        }\n\n        // Create all in one query\n        // Recreate records from instances to represent any changes made in hooks or validation\n        records = instances.map(instance => {\n          const values = instance.dataValues;\n\n          // set createdAt/updatedAt attributes\n          if (createdAtAttr && !values[createdAtAttr]) {\n            values[createdAtAttr] = now;\n            if (!options.fields.includes(createdAtAttr)) {\n              options.fields.push(createdAtAttr);\n            }\n          }\n          if (updatedAtAttr && !values[updatedAtAttr]) {\n            values[updatedAtAttr] = now;\n            if (!options.fields.includes(updatedAtAttr)) {\n              options.fields.push(updatedAtAttr);\n            }\n          }\n\n          const out = Utils.mapValueFieldNames(values, options.fields, model);\n          for (const key of model._virtualAttributes) {\n            delete out[key];\n          }\n          return out;\n        });\n\n        // Map attributes to fields for serial identification\n        const fieldMappedAttributes = {};\n        for (const attr in model.tableAttributes) {\n          fieldMappedAttributes[model.rawAttributes[attr].field || attr] = model.rawAttributes[attr];\n        }\n\n        // Map updateOnDuplicate attributes to fields\n        if (options.updateOnDuplicate) {\n          options.updateOnDuplicate = options.updateOnDuplicate.map(attr => model.rawAttributes[attr].field || attr);\n\n          if (options.conflictAttributes) {\n            options.upsertKeys = options.conflictAttributes.map(\n              attrName => model.rawAttributes[attrName].field || attrName\n            );\n          } else {\n            const upsertKeys = [];\n\n            for (const i of model._indexes) {\n              if (i.unique && !i.where) { // Don't infer partial indexes\n                upsertKeys.push(...i.fields);\n              }\n            }\n\n            const firstUniqueKey = Object.values(model.uniqueKeys).find(c => c.fields.length > 0);\n\n            if (firstUniqueKey && firstUniqueKey.fields) {\n              upsertKeys.push(...firstUniqueKey.fields);\n            }\n\n            options.upsertKeys = upsertKeys.length > 0\n              ? upsertKeys\n              : Object.values(model.primaryKeys).map(x => x.field);\n          }\n        }\n\n        // Map returning attributes to fields\n        if (options.returning && Array.isArray(options.returning)) {\n          options.returning = options.returning.map(attr => _.get(model.rawAttributes[attr], 'field', attr));\n        }\n\n        const results = await model.queryInterface.bulkInsert(model.getTableName(options), records, options, fieldMappedAttributes);\n        if (Array.isArray(results)) {\n          results.forEach((result, i) => {\n            const instance = instances[i];\n\n            for (const key in result) {\n              if (!instance || key === model.primaryKeyAttribute &&\n                instance.get(model.primaryKeyAttribute) &&\n                ['mysql', 'mariadb', 'sqlite'].includes(dialect)) {\n                // The query.js for these DBs is blind, it autoincrements the\n                // primarykey value, even if it was set manually. Also, it can\n                // return more results than instances, bug?.\n                continue;\n              }\n              if (Object.prototype.hasOwnProperty.call(result, key)) {\n                const record = result[key];\n\n                const attr = _.find(model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n                instance.dataValues[attr && attr.fieldName || key] = record;\n              }\n            }\n          });\n        }\n      }\n\n      if (options.include && options.include.length) {\n        await Promise.all(options.include.filter(include => !(include.association instanceof BelongsTo ||\n          include.parent && include.parent.association instanceof BelongsToMany)).map(async include => {\n          const associationInstances = [];\n          const associationInstanceIndexToInstanceMap = [];\n\n          for (const instance of instances) {\n            let associated = instance.get(include.as);\n            if (!Array.isArray(associated)) associated = [associated];\n\n            for (const associationInstance of associated) {\n              if (associationInstance) {\n                if (!(include.association instanceof BelongsToMany)) {\n                  associationInstance.set(include.association.foreignKey, instance.get(include.association.sourceKey || instance.constructor.primaryKeyAttribute, { raw: true }), { raw: true });\n                  Object.assign(associationInstance, include.association.scope);\n                }\n                associationInstances.push(associationInstance);\n                associationInstanceIndexToInstanceMap.push(instance);\n              }\n            }\n          }\n\n          if (!associationInstances.length) {\n            return;\n          }\n\n          const includeOptions = _(Utils.cloneDeep(include))\n            .omit(['association'])\n            .defaults({\n              transaction: options.transaction,\n              logging: options.logging\n            }).value();\n\n          const createdAssociationInstances = await recursiveBulkCreate(associationInstances, includeOptions);\n          if (include.association instanceof BelongsToMany) {\n            const valueSets = [];\n\n            for (const idx in createdAssociationInstances) {\n              const associationInstance = createdAssociationInstances[idx];\n              const instance = associationInstanceIndexToInstanceMap[idx];\n\n              const values = {\n                [include.association.foreignKey]: instance.get(instance.constructor.primaryKeyAttribute, { raw: true }),\n                [include.association.otherKey]: associationInstance.get(associationInstance.constructor.primaryKeyAttribute, { raw: true }),\n                // Include values defined in the association\n                ...include.association.through.scope\n              };\n              if (associationInstance[include.association.through.model.name]) {\n                for (const attr of Object.keys(include.association.through.model.rawAttributes)) {\n                  if (include.association.through.model.rawAttributes[attr]._autoGenerated ||\n                    attr === include.association.foreignKey ||\n                    attr === include.association.otherKey ||\n                    typeof associationInstance[include.association.through.model.name][attr] === 'undefined') {\n                    continue;\n                  }\n                  values[attr] = associationInstance[include.association.through.model.name][attr];\n                }\n              }\n\n              valueSets.push(values);\n            }\n\n            const throughOptions = _(Utils.cloneDeep(include))\n              .omit(['association', 'attributes'])\n              .defaults({\n                transaction: options.transaction,\n                logging: options.logging\n              }).value();\n            throughOptions.model = include.association.throughModel;\n            const throughInstances = include.association.throughModel.bulkBuild(valueSets, throughOptions);\n\n            await recursiveBulkCreate(throughInstances, throughOptions);\n          }\n        }));\n      }\n\n      // map fields back to attributes\n      instances.forEach(instance => {\n        for (const attr in model.rawAttributes) {\n          if (model.rawAttributes[attr].field &&\n              instance.dataValues[model.rawAttributes[attr].field] !== undefined &&\n              model.rawAttributes[attr].field !== attr\n          ) {\n            instance.dataValues[attr] = instance.dataValues[model.rawAttributes[attr].field];\n            delete instance.dataValues[model.rawAttributes[attr].field];\n          }\n          instance._previousDataValues[attr] = instance.dataValues[attr];\n          instance.changed(attr, false);\n        }\n        instance.isNewRecord = false;\n      });\n\n      // Run after hook\n      if (options.hooks) {\n        await model.runHooks('afterBulkCreate', instances, options);\n      }\n\n      return instances;\n    };\n\n    return await recursiveBulkCreate(instances, options);\n  }\n\n  /**\n   * Truncate all instances of the model. This is a convenient method for Model.destroy({ truncate: true }).\n   *\n   * @param {object}           [options] The options passed to Model.destroy in addition to truncate\n   * @param {boolean|Function} [options.cascade = false] Truncates all tables that have foreign-key references to the named table, or to any tables added to the group due to CASCADE.\n   * @param {boolean}          [options.restartIdentity=false] Automatically restart sequences owned by columns of the truncated table.\n   * @param {Transaction}      [options.transaction] Transaction to run query under\n   * @param {boolean|Function} [options.logging] A function that logs sql queries, or false for no logging\n   * @param {boolean}          [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).\n   * @param {string}           [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)\n   *\n   * @returns {Promise}\n   *\n   * @see\n   * {@link Model.destroy} for more information\n   */\n  static async truncate(options) {\n    options = Utils.cloneDeep(options) || {};\n    options.truncate = true;\n    return await this.destroy(options);\n  }\n\n  /**\n   * Delete multiple instances, or set their deletedAt timestamp to the current time if `paranoid` is enabled.\n   *\n   * @param  {object}       options                         destroy options\n   * @param  {object}       [options.where]                 Filter the destroy\n   * @param  {boolean}      [options.hooks=true]            Run before / after bulk destroy hooks?\n   * @param  {boolean}      [options.individualHooks=false] If set to true, destroy will SELECT all records matching the where parameter and will execute before / after destroy hooks on each row\n   * @param  {number}       [options.limit]                 How many rows to delete\n   * @param  {boolean}      [options.force=false]           Delete instead of setting deletedAt to current timestamp (only applicable if `paranoid` is enabled)\n   * @param  {boolean}      [options.truncate=false]        If set to true, dialects that support it will use TRUNCATE instead of DELETE FROM. If a table is truncated the where and limit options are ignored\n   * @param  {boolean}      [options.cascade=false]         Only used in conjunction with TRUNCATE. Truncates  all tables that have foreign-key references to the named table, or to any tables added to the group due to CASCADE.\n   * @param  {boolean}      [options.restartIdentity=false] Only used in conjunction with TRUNCATE. Automatically restart sequences owned by columns of the truncated table.\n   * @param  {Transaction}  [options.transaction] Transaction to run query under\n   * @param  {Function}     [options.logging=false]         A function that gets executed while running the query to log the sql.\n   * @param  {boolean}      [options.benchmark=false]       Pass query execution time in milliseconds as second argument to logging function (options.logging).\n   *\n   * @returns {Promise<number>} The number of destroyed rows\n   */\n  static async destroy(options) {\n    options = Utils.cloneDeep(options);\n\n    // Add CLS transaction\n    if (options.transaction === undefined && this.sequelize.constructor._cls) {\n      const t = this.sequelize.constructor._cls.get('transaction');\n      if (t) {\n        options.transaction = t;\n      }\n    }\n\n    this._injectScope(options);\n\n    if (!options || !(options.where || options.truncate)) {\n      throw new Error('Missing where or truncate attribute in the options parameter of model.destroy.');\n    }\n\n    if (!options.truncate && !_.isPlainObject(options.where) && !Array.isArray(options.where) && !(options.where instanceof Utils.SequelizeMethod)) {\n      throw new Error('Expected plain object, array or sequelize method in the options.where parameter of model.destroy.');\n    }\n\n    options = _.defaults(options, {\n      hooks: true,\n      individualHooks: false,\n      force: false,\n      cascade: false,\n      restartIdentity: false\n    });\n\n    options.type = QueryTypes.BULKDELETE;\n\n    Utils.mapOptionFieldNames(options, this);\n    options.model = this;\n\n\n    // Run before hook\n    if (options.hooks) {\n      await this.runHooks('beforeBulkDestroy', options);\n    }\n    let instances;\n    // Get daos and run beforeDestroy hook on each record individually\n    if (options.individualHooks) {\n      instances = await this.findAll({ where: options.where, transaction: options.transaction, logging: options.logging, benchmark: options.benchmark });\n\n      await Promise.all(instances.map(instance => this.runHooks('beforeDestroy', instance, options)));\n    }\n    let result;\n    // Run delete query (or update if paranoid)\n    if (this._timestampAttributes.deletedAt && !options.force) {\n      // Set query type appropriately when running soft delete\n      options.type = QueryTypes.BULKUPDATE;\n\n      const attrValueHash = {};\n      const deletedAtAttribute = this.rawAttributes[this._timestampAttributes.deletedAt];\n      const field = this.rawAttributes[this._timestampAttributes.deletedAt].field;\n      const where = {\n        [field]: Object.prototype.hasOwnProperty.call(deletedAtAttribute, 'defaultValue') ? deletedAtAttribute.defaultValue : null\n      };\n\n\n      attrValueHash[field] = Utils.now(this.sequelize.options.dialect);\n      result = await this.queryInterface.bulkUpdate(this.getTableName(options), attrValueHash, Object.assign(where, options.where), options, this.rawAttributes);\n    } else {\n      result = await this.queryInterface.bulkDelete(this.getTableName(options), options.where, options, this);\n    }\n    // Run afterDestroy hook on each record individually\n    if (options.individualHooks) {\n      await Promise.all(\n        instances.map(instance => this.runHooks('afterDestroy', instance, options))\n      );\n    }\n    // Run after hook\n    if (options.hooks) {\n      await this.runHooks('afterBulkDestroy', options);\n    }\n    return result;\n  }\n\n  /**\n   * Restore multiple instances if `paranoid` is enabled.\n   *\n   * @param  {object}       options                         restore options\n   * @param  {object}       [options.where]                 Filter the restore\n   * @param  {boolean}      [options.hooks=true]            Run before / after bulk restore hooks?\n   * @param  {boolean}      [options.individualHooks=false] If set to true, restore will find all records within the where parameter and will execute before / after bulkRestore hooks on each row\n   * @param  {number}       [options.limit]                 How many rows to undelete (only for mysql)\n   * @param  {Function}     [options.logging=false]         A function that gets executed while running the query to log the sql.\n   * @param  {boolean}      [options.benchmark=false]       Pass query execution time in milliseconds as second argument to logging function (options.logging).\n   * @param  {Transaction}  [options.transaction]           Transaction to run query under\n   *\n   * @returns {Promise}\n   */\n  static async restore(options) {\n    if (!this._timestampAttributes.deletedAt) throw new Error('Model is not paranoid');\n\n    options = {\n      hooks: true,\n      individualHooks: false,\n      ...options\n    };\n\n    // Add CLS transaction\n    if (options.transaction === undefined && this.sequelize.constructor._cls) {\n      const t = this.sequelize.constructor._cls.get('transaction');\n      if (t) {\n        options.transaction = t;\n      }\n    }\n\n    options.type = QueryTypes.RAW;\n    options.model = this;\n\n    Utils.mapOptionFieldNames(options, this);\n\n    // Run before hook\n    if (options.hooks) {\n      await this.runHooks('beforeBulkRestore', options);\n    }\n\n    let instances;\n    // Get daos and run beforeRestore hook on each record individually\n    if (options.individualHooks) {\n      instances = await this.findAll({ where: options.where, transaction: options.transaction, logging: options.logging, benchmark: options.benchmark, paranoid: false });\n\n      await Promise.all(instances.map(instance => this.runHooks('beforeRestore', instance, options)));\n    }\n    // Run undelete query\n    const attrValueHash = {};\n    const deletedAtCol = this._timestampAttributes.deletedAt;\n    const deletedAtAttribute = this.rawAttributes[deletedAtCol];\n    const deletedAtDefaultValue = Object.prototype.hasOwnProperty.call(deletedAtAttribute, 'defaultValue') ? deletedAtAttribute.defaultValue : null;\n\n    attrValueHash[deletedAtAttribute.field || deletedAtCol] = deletedAtDefaultValue;\n    options.omitNull = false;\n    const result = await this.queryInterface.bulkUpdate(this.getTableName(options), attrValueHash, options.where, options, this.rawAttributes);\n    // Run afterDestroy hook on each record individually\n    if (options.individualHooks) {\n      await Promise.all(\n        instances.map(instance => this.runHooks('afterRestore', instance, options))\n      );\n    }\n    // Run after hook\n    if (options.hooks) {\n      await this.runHooks('afterBulkRestore', options);\n    }\n    return result;\n  }\n\n  /**\n   * Update multiple instances that match the where options.\n   *\n   * @param  {object}         values                          hash of values to update\n   * @param  {object}         options                         update options\n   * @param  {object}         options.where                   Options to describe the scope of the search.\n   * @param  {boolean}        [options.paranoid=true]         If true, only non-deleted records will be updated. If false, both deleted and non-deleted records will be updated. Only applies if `options.paranoid` is true for the model.\n   * @param  {Array}          [options.fields]                Fields to update (defaults to all fields)\n   * @param  {boolean}        [options.validate=true]         Should each row be subject to validation before it is inserted. The whole insert will fail if one row fails validation\n   * @param  {boolean}        [options.hooks=true]            Run before / after bulk update hooks?\n   * @param  {boolean}        [options.sideEffects=true]      Whether or not to update the side effects of any virtual setters.\n   * @param  {boolean}        [options.individualHooks=false] Run before / after update hooks?. If true, this will execute a SELECT followed by individual UPDATEs. A select is needed, because the row data needs to be passed to the hooks\n   * @param  {boolean|Array}  [options.returning=false]       If true, append RETURNING <model columns> to get back all defined values; if an array of column names, append RETURNING <columns> to get back specific columns (Postgres only)\n   * @param  {number}         [options.limit]                 How many rows to update (only for mysql and mariadb, implemented as TOP(n) for MSSQL; for sqlite it is supported only when rowid is present)\n   * @param  {Function}       [options.logging=false]         A function that gets executed while running the query to log the sql.\n   * @param  {boolean}        [options.benchmark=false]       Pass query execution time in milliseconds as second argument to logging function (options.logging).\n   * @param  {Transaction}    [options.transaction]           Transaction to run query under\n   * @param  {boolean}        [options.silent=false]          If true, the updatedAt timestamp will not be updated.\n   *\n   * @returns {Promise<Array<number,number>>}  The promise returns an array with one or two elements. The first element is always the number\n   * of affected rows, while the second element is the actual affected rows (only supported in postgres with `options.returning` true).\n   *\n   */\n  static async update(values, options) {\n    options = Utils.cloneDeep(options);\n\n    // Add CLS transaction\n    if (options.transaction === undefined && this.sequelize.constructor._cls) {\n      const t = this.sequelize.constructor._cls.get('transaction');\n      if (t) {\n        options.transaction = t;\n      }\n    }\n\n    this._injectScope(options);\n    this._optionsMustContainWhere(options);\n\n    options = this._paranoidClause(this, _.defaults(options, {\n      validate: true,\n      hooks: true,\n      individualHooks: false,\n      returning: false,\n      force: false,\n      sideEffects: true\n    }));\n\n    options.type = QueryTypes.BULKUPDATE;\n\n    // Clone values so it doesn't get modified for caller scope and ignore undefined values\n    values = _.omitBy(values, value => value === undefined);\n\n    // Remove values that are not in the options.fields\n    if (options.fields && options.fields instanceof Array) {\n      for (const key of Object.keys(values)) {\n        if (!options.fields.includes(key)) {\n          delete values[key];\n        }\n      }\n    } else {\n      const updatedAtAttr = this._timestampAttributes.updatedAt;\n      options.fields = _.intersection(Object.keys(values), Object.keys(this.tableAttributes));\n      if (updatedAtAttr && !options.fields.includes(updatedAtAttr)) {\n        options.fields.push(updatedAtAttr);\n      }\n    }\n\n    if (this._timestampAttributes.updatedAt && !options.silent) {\n      values[this._timestampAttributes.updatedAt] = this._getDefaultTimestamp(this._timestampAttributes.updatedAt) || Utils.now(this.sequelize.options.dialect);\n    }\n\n    options.model = this;\n\n    let valuesUse;\n    // Validate\n    if (options.validate) {\n      const build = this.build(values);\n      build.set(this._timestampAttributes.updatedAt, values[this._timestampAttributes.updatedAt], { raw: true });\n\n      if (options.sideEffects) {\n        Object.assign(values, _.pick(build.get(), build.changed()));\n        options.fields = _.union(options.fields, Object.keys(values));\n      }\n\n      // We want to skip validations for all other fields\n      options.skip = _.difference(Object.keys(this.rawAttributes), Object.keys(values));\n      const attributes = await build.validate(options);\n      options.skip = undefined;\n      if (attributes && attributes.dataValues) {\n        values = _.pick(attributes.dataValues, Object.keys(values));\n      }\n    }\n    // Run before hook\n    if (options.hooks) {\n      options.attributes = values;\n      await this.runHooks('beforeBulkUpdate', options);\n      values = options.attributes;\n      delete options.attributes;\n    }\n\n    valuesUse = values;\n\n    // Get instances and run beforeUpdate hook on each record individually\n    let instances;\n    let updateDoneRowByRow = false;\n    if (options.individualHooks) {\n      instances = await this.findAll({\n        where: options.where,\n        transaction: options.transaction,\n        logging: options.logging,\n        benchmark: options.benchmark,\n        paranoid: options.paranoid\n      });\n\n      if (instances.length) {\n        // Run beforeUpdate hooks on each record and check whether beforeUpdate hook changes values uniformly\n        // i.e. whether they change values for each record in the same way\n        let changedValues;\n        let different = false;\n\n        instances = await Promise.all(instances.map(async instance => {\n          // Record updates in instances dataValues\n          Object.assign(instance.dataValues, values);\n          // Set the changed fields on the instance\n          _.forIn(valuesUse, (newValue, attr) => {\n            if (newValue !== instance._previousDataValues[attr]) {\n              instance.setDataValue(attr, newValue);\n            }\n          });\n\n          // Run beforeUpdate hook\n          await this.runHooks('beforeUpdate', instance, options);\n          if (!different) {\n            const thisChangedValues = {};\n            _.forIn(instance.dataValues, (newValue, attr) => {\n              if (newValue !== instance._previousDataValues[attr]) {\n                thisChangedValues[attr] = newValue;\n              }\n            });\n\n            if (!changedValues) {\n              changedValues = thisChangedValues;\n            } else {\n              different = !_.isEqual(changedValues, thisChangedValues);\n            }\n          }\n\n          return instance;\n        }));\n\n        if (!different) {\n          const keys = Object.keys(changedValues);\n          // Hooks do not change values or change them uniformly\n          if (keys.length) {\n            // Hooks change values - record changes in valuesUse so they are executed\n            valuesUse = changedValues;\n            options.fields = _.union(options.fields, keys);\n          }\n        } else {\n          instances = await Promise.all(instances.map(async instance => {\n            const individualOptions = {\n              ...options,\n              hooks: false,\n              validate: false\n            };\n            delete individualOptions.individualHooks;\n\n            return instance.save(individualOptions);\n          }));\n          updateDoneRowByRow = true;\n        }\n      }\n    }\n    let result;\n    if (updateDoneRowByRow) {\n      result = [instances.length, instances];\n    } else if (_.isEmpty(valuesUse)\n       || Object.keys(valuesUse).length === 1 && valuesUse[this._timestampAttributes.updatedAt]) {\n      // only updatedAt is being passed, then skip update\n      result = [0];\n    } else {\n      valuesUse = Utils.mapValueFieldNames(valuesUse, options.fields, this);\n      options = Utils.mapOptionFieldNames(options, this);\n      options.hasTrigger = this.options ? this.options.hasTrigger : false;\n\n      const affectedRows = await this.queryInterface.bulkUpdate(this.getTableName(options), valuesUse, options.where, options, this.tableAttributes);\n      if (options.returning) {\n        result = [affectedRows.length, affectedRows];\n        instances = affectedRows;\n      } else {\n        result = [affectedRows];\n      }\n    }\n\n    if (options.individualHooks) {\n      await Promise.all(instances.map(instance => this.runHooks('afterUpdate', instance, options)));\n      result[1] = instances;\n    }\n    // Run after hook\n    if (options.hooks) {\n      options.attributes = values;\n      await this.runHooks('afterBulkUpdate', options);\n      delete options.attributes;\n    }\n    return result;\n  }\n\n  /**\n   * Run a describe query on the table.\n   *\n   * @param {string} [schema] schema name to search table in\n   * @param {object} [options] query options\n   *\n   * @returns {Promise} hash of attributes and their types\n   */\n  static async describe(schema, options) {\n    return await this.queryInterface.describeTable(this.tableName, { schema: schema || this._schema || undefined, ...options });\n  }\n\n  static _getDefaultTimestamp(attr) {\n    if (!!this.rawAttributes[attr] && !!this.rawAttributes[attr].defaultValue) {\n      return Utils.toDefaultValue(this.rawAttributes[attr].defaultValue, this.sequelize.options.dialect);\n    }\n    return undefined;\n  }\n\n  static _expandAttributes(options) {\n    if (!_.isPlainObject(options.attributes)) {\n      return;\n    }\n    let attributes = Object.keys(this.rawAttributes);\n\n    if (options.attributes.exclude) {\n      attributes = attributes.filter(elem => !options.attributes.exclude.includes(elem));\n    }\n\n    if (options.attributes.include) {\n      attributes = attributes.concat(options.attributes.include);\n    }\n\n    options.attributes = attributes;\n  }\n\n  // Inject _scope into options.\n  static _injectScope(options) {\n    const scope = Utils.cloneDeep(this._scope);\n    this._defaultsOptions(options, scope);\n  }\n\n  static [Symbol.for('nodejs.util.inspect.custom')]() {\n    return this.name;\n  }\n\n  static hasAlias(alias) {\n    return Object.prototype.hasOwnProperty.call(this.associations, alias);\n  }\n\n  /**\n   * Increment the value of one or more columns. This is done in the database, which means it does not use the values currently stored on the Instance. The increment is done using a\n   * ``` SET column = column + X WHERE foo = 'bar' ``` query. To get the correct value after an increment into the Instance you should do a reload.\n   *\n   * @example <caption>increment number by 1</caption>\n   * Model.increment('number', { where: { foo: 'bar' });\n   *\n   * @example <caption>increment number and count by 2</caption>\n   * Model.increment(['number', 'count'], { by: 2, where: { foo: 'bar' } });\n   *\n   * @example <caption>increment answer by 42, and decrement tries by 1</caption>\n   * // `by` is ignored, as each column has its own value\n   * Model.increment({ answer: 42, tries: -1}, { by: 2, where: { foo: 'bar' } });\n   *\n   * @see\n   * {@link Model#reload}\n   *\n   * @param  {string|Array|object}  fields                       If a string is provided, that column is incremented by the value of `by` given in options. If an array is provided, the same is true for each column. If and object is provided, each column is incremented by the value given.\n   * @param  {object}               options                      increment options\n   * @param  {object}               options.where                conditions hash\n   * @param  {number}               [options.by=1]               The number to increment by\n   * @param  {boolean}              [options.silent=false]       If true, the updatedAt timestamp will not be updated.\n   * @param  {Function}             [options.logging=false]      A function that gets executed while running the query to log the sql.\n   * @param  {Transaction}          [options.transaction]        Transaction to run query under\n   * @param  {string}               [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)\n   *\n   * @returns {Promise<Model[],?number>} returns an array of affected rows and affected count with `options.returning` true, whenever supported by dialect\n   */\n  static async increment(fields, options) {\n    options = options || {};\n    if (typeof fields === 'string') fields = [fields];\n    if (Array.isArray(fields)) {\n      fields = fields.map(f => {\n        if (this.rawAttributes[f] && this.rawAttributes[f].field && this.rawAttributes[f].field !== f) {\n          return this.rawAttributes[f].field;\n        }\n        return f;\n      });\n    } else if (fields && typeof fields === 'object') {\n      fields = Object.keys(fields).reduce((rawFields, f) => {\n        if (this.rawAttributes[f] && this.rawAttributes[f].field && this.rawAttributes[f].field !== f) {\n          rawFields[this.rawAttributes[f].field] = fields[f];\n        } else {\n          rawFields[f] = fields[f];\n        }\n        return rawFields;\n      }, {});\n    }\n\n    this._injectScope(options);\n    this._optionsMustContainWhere(options);\n\n    options = Utils.defaults({}, options, {\n      by: 1,\n      where: {},\n      increment: true\n    });\n    const isSubtraction = !options.increment;\n\n    Utils.mapOptionFieldNames(options, this);\n\n    const where = { ...options.where };\n\n    // A plain object whose keys are the fields to be incremented and whose values are\n    // the amounts to be incremented by.\n    let incrementAmountsByField = {};\n    if (Array.isArray(fields)) {\n      incrementAmountsByField = {};\n      for (const field of fields) {\n        incrementAmountsByField[field] = options.by;\n      }\n    } else {\n      // If the `fields` argument is not an array, then we assume it already has the\n      // form necessary to be placed directly in the `incrementAmountsByField` variable.\n      incrementAmountsByField = fields;\n    }\n\n    // If optimistic locking is enabled, we can take advantage that this is an\n    // increment/decrement operation and send it here as well. We put `-1` for\n    // decrementing because it will be subtracted, getting `-(-1)` which is `+1`\n    if (this._versionAttribute) {\n      incrementAmountsByField[this._versionAttribute] = isSubtraction ? -1 : 1;\n    }\n\n    const extraAttributesToBeUpdated = {};\n\n    const updatedAtAttr = this._timestampAttributes.updatedAt;\n    if (!options.silent && updatedAtAttr && !incrementAmountsByField[updatedAtAttr]) {\n      const attrName = this.rawAttributes[updatedAtAttr].field || updatedAtAttr;\n      extraAttributesToBeUpdated[attrName] = this._getDefaultTimestamp(updatedAtAttr) || Utils.now(this.sequelize.options.dialect);\n    }\n\n    const tableName = this.getTableName(options);\n    let affectedRows;\n    if (isSubtraction) {\n      affectedRows = await this.queryInterface.decrement(\n        this, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options\n      );\n    } else {\n      affectedRows = await this.queryInterface.increment(\n        this, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options\n      );\n    }\n\n    if (options.returning) {\n      return [affectedRows, affectedRows.length];\n    }\n\n    return [affectedRows];\n  }\n\n  /**\n   * Decrement the value of one or more columns. This is done in the database, which means it does not use the values currently stored on the Instance. The decrement is done using a\n   * ```sql SET column = column - X WHERE foo = 'bar'``` query. To get the correct value after a decrement into the Instance you should do a reload.\n   *\n   * @example <caption>decrement number by 1</caption>\n   * Model.decrement('number', { where: { foo: 'bar' });\n   *\n   * @example <caption>decrement number and count by 2</caption>\n   * Model.decrement(['number', 'count'], { by: 2, where: { foo: 'bar' } });\n   *\n   * @example <caption>decrement answer by 42, and decrement tries by -1</caption>\n   * // `by` is ignored, since each column has its own value\n   * Model.decrement({ answer: 42, tries: -1}, { by: 2, where: { foo: 'bar' } });\n   *\n   * @param {string|Array|object} fields If a string is provided, that column is incremented by the value of `by` given in options. If an array is provided, the same is true for each column. If and object is provided, each column is incremented by the value given.\n   * @param {object} options decrement options, similar to increment\n   *\n   * @see\n   * {@link Model.increment}\n   * @see\n   * {@link Model#reload}\n   * @since 4.36.0\n   *\n   * @returns {Promise<Model[],?number>} returns an array of affected rows and affected count with `options.returning` true, whenever supported by dialect\n   */\n  static async decrement(fields, options) {\n    return this.increment(fields, {\n      by: 1,\n      ...options,\n      increment: false\n    });\n  }\n\n  static _optionsMustContainWhere(options) {\n    assert(options && options.where, 'Missing where attribute in the options parameter');\n    assert(_.isPlainObject(options.where) || Array.isArray(options.where) || options.where instanceof Utils.SequelizeMethod,\n      'Expected plain object, array or sequelize method in the options.where parameter');\n  }\n\n  /**\n   * Get an object representing the query for this instance, use with `options.where`\n   *\n   * @param {boolean} [checkVersion=false] include version attribute in where hash\n   *\n   * @returns {object}\n   */\n  where(checkVersion) {\n    const where = this.constructor.primaryKeyAttributes.reduce((result, attribute) => {\n      result[attribute] = this.get(attribute, { raw: true });\n      return result;\n    }, {});\n\n    if (_.size(where) === 0) {\n      return this.constructor.options.whereCollection;\n    }\n    const versionAttr = this.constructor._versionAttribute;\n    if (checkVersion && versionAttr) {\n      where[versionAttr] = this.get(versionAttr, { raw: true });\n    }\n    return Utils.mapWhereFieldNames(where, this.constructor);\n  }\n\n  toString() {\n    return `[object SequelizeInstance:${this.constructor.name}]`;\n  }\n\n  /**\n   * Get the value of the underlying data value\n   *\n   * @param {string} key key to look in instance data store\n   *\n   * @returns {any}\n   */\n  getDataValue(key) {\n    return this.dataValues[key];\n  }\n\n  /**\n   * Update the underlying data value\n   *\n   * @param {string} key key to set in instance data store\n   * @param {any} value new value for given key\n   *\n   */\n  setDataValue(key, value) {\n    const originalValue = this._previousDataValues[key];\n\n    if (!_.isEqual(value, originalValue)) {\n      this.changed(key, true);\n    }\n\n    this.dataValues[key] = value;\n  }\n\n  /**\n   * If no key is given, returns all values of the instance, also invoking virtual getters.\n   *\n   * If key is given and a field or virtual getter is present for the key it will call that getter - else it will return the value for key.\n   *\n   * @param {string}  [key] key to get value of\n   * @param {object}  [options] get options\n   * @param {boolean} [options.plain=false] If set to true, included instances will be returned as plain objects\n   * @param {boolean} [options.raw=false] If set to true, field and virtual setters will be ignored\n   *\n   * @returns {object|any}\n   */\n  get(key, options) {\n    if (options === undefined && typeof key === 'object') {\n      options = key;\n      key = undefined;\n    }\n\n    options = options || {};\n\n    if (key) {\n      if (Object.prototype.hasOwnProperty.call(this._customGetters, key) && !options.raw) {\n        return this._customGetters[key].call(this, key, options);\n      }\n\n      if (options.plain && this._options.include && this._options.includeNames.includes(key)) {\n        if (Array.isArray(this.dataValues[key])) {\n          return this.dataValues[key].map(instance => instance.get(options));\n        }\n        if (this.dataValues[key] instanceof Model) {\n          return this.dataValues[key].get(options);\n        }\n        return this.dataValues[key];\n      }\n\n      return this.dataValues[key];\n    }\n\n    if (\n      this._hasCustomGetters\n      || options.plain && this._options.include\n      || options.clone\n    ) {\n      const values = {};\n      let _key;\n\n      if (this._hasCustomGetters) {\n        for (_key in this._customGetters) {\n          if (\n            this._options.attributes\n            && !this._options.attributes.includes(_key)\n          ) {\n            continue;\n          }\n\n          if (Object.prototype.hasOwnProperty.call(this._customGetters, _key)) {\n            values[_key] = this.get(_key, options);\n          }\n        }\n      }\n\n      for (_key in this.dataValues) {\n        if (\n          !Object.prototype.hasOwnProperty.call(values, _key)\n          && Object.prototype.hasOwnProperty.call(this.dataValues, _key)\n        ) {\n          values[_key] = this.get(_key, options);\n        }\n      }\n\n      return values;\n    }\n\n    return this.dataValues;\n  }\n\n  /**\n   * Set is used to update values on the instance (the sequelize representation of the instance that is, remember that nothing will be persisted before you actually call `save`).\n   * In its most basic form `set` will update a value stored in the underlying `dataValues` object. However, if a custom setter function is defined for the key, that function\n   * will be called instead. To bypass the setter, you can pass `raw: true` in the options object.\n   *\n   * If set is called with an object, it will loop over the object, and call set recursively for each key, value pair. If you set raw to true, the underlying dataValues will either be\n   * set directly to the object passed, or used to extend dataValues, if dataValues already contain values.\n   *\n   * When set is called, the previous value of the field is stored and sets a changed flag(see `changed`).\n   *\n   * Set can also be used to build instances for associations, if you have values for those.\n   * When using set with associations you need to make sure the property key matches the alias of the association\n   * while also making sure that the proper include options have been set (from .build() or .findOne())\n   *\n   * If called with a dot.separated key on a JSON/JSONB attribute it will set the value nested and flag the entire object as changed.\n   *\n   * @see\n   * {@link Model.findAll} for more information about includes\n   *\n   * @param {string|object} key key to set, it can be string or object. When string it will set that key, for object it will loop over all object properties nd set them.\n   * @param {any} value value to set\n   * @param {object} [options] set options\n   * @param {boolean} [options.raw=false] If set to true, field and virtual setters will be ignored\n   * @param {boolean} [options.reset=false] Clear all previously set data values\n   *\n   * @returns {Model}\n   */\n  set(key, value, options) {\n    let values;\n    let originalValue;\n\n    if (typeof key === 'object' && key !== null) {\n      values = key;\n      options = value || {};\n\n      if (options.reset) {\n        this.dataValues = {};\n        for (const key in values) {\n          this.changed(key, false);\n        }\n      }\n\n      // If raw, and we're not dealing with includes or special attributes, just set it straight on the dataValues object\n      if (options.raw && !(this._options && this._options.include) && !(options && options.attributes) && !this.constructor._hasDateAttributes && !this.constructor._hasBooleanAttributes) {\n        if (Object.keys(this.dataValues).length) {\n          Object.assign(this.dataValues, values);\n        } else {\n          this.dataValues = values;\n        }\n        // If raw, .changed() shouldn't be true\n        this._previousDataValues = { ...this.dataValues };\n      } else {\n        // Loop and call set\n        if (options.attributes) {\n          const setKeys = data => {\n            for (const k of data) {\n              if (values[k] === undefined) {\n                continue;\n              }\n              this.set(k, values[k], options);\n            }\n          };\n          setKeys(options.attributes);\n          if (this.constructor._hasVirtualAttributes) {\n            setKeys(this.constructor._virtualAttributes);\n          }\n          if (this._options.includeNames) {\n            setKeys(this._options.includeNames);\n          }\n        } else {\n          for (const key in values) {\n            this.set(key, values[key], options);\n          }\n        }\n\n        if (options.raw) {\n          // If raw, .changed() shouldn't be true\n          this._previousDataValues = { ...this.dataValues };\n        }\n      }\n      return this;\n    }\n    if (!options)\n      options = {};\n    if (!options.raw) {\n      originalValue = this.dataValues[key];\n    }\n\n    // If not raw, and there's a custom setter\n    if (!options.raw && this._customSetters[key]) {\n      this._customSetters[key].call(this, value, key);\n      // custom setter should have changed value, get that changed value\n      // TODO: v5 make setters return new value instead of changing internal store\n      const newValue = this.dataValues[key];\n      if (!_.isEqual(newValue, originalValue)) {\n        this._previousDataValues[key] = originalValue;\n        this.changed(key, true);\n      }\n    } else {\n      // Check if we have included models, and if this key matches the include model names/aliases\n      if (this._options && this._options.include && this._options.includeNames.includes(key)) {\n        // Pass it on to the include handler\n        this._setInclude(key, value, options);\n        return this;\n      }\n      // Bunch of stuff we won't do when it's raw\n      if (!options.raw) {\n        // If attribute is not in model definition, return\n        if (!this._isAttribute(key)) {\n          if (key.includes('.') && this.constructor._jsonAttributes.has(key.split('.')[0])) {\n            const previousNestedValue = Dottie.get(this.dataValues, key);\n            if (!_.isEqual(previousNestedValue, value)) {\n              Dottie.set(this.dataValues, key, value);\n              this.changed(key.split('.')[0], true);\n            }\n          }\n          return this;\n        }\n\n        // If attempting to set primary key and primary key is already defined, return\n        if (this.constructor._hasPrimaryKeys && originalValue && this.constructor._isPrimaryKey(key)) {\n          return this;\n        }\n\n        // If attempting to set read only attributes, return\n        if (!this.isNewRecord && this.constructor._hasReadOnlyAttributes && this.constructor._readOnlyAttributes.has(key)) {\n          return this;\n        }\n      }\n\n      // If there's a data type sanitizer\n      if (\n        !(value instanceof Utils.SequelizeMethod)\n        && Object.prototype.hasOwnProperty.call(this.constructor._dataTypeSanitizers, key)\n      ) {\n        value = this.constructor._dataTypeSanitizers[key].call(this, value, options);\n      }\n\n      // Set when the value has changed and not raw\n      if (\n        !options.raw &&\n        (\n          // True when sequelize method\n          value instanceof Utils.SequelizeMethod ||\n          // Check for data type type comparators\n          !(value instanceof Utils.SequelizeMethod) && this.constructor._dataTypeChanges[key] && this.constructor._dataTypeChanges[key].call(this, value, originalValue, options) || // Check default\n          !this.constructor._dataTypeChanges[key] && !_.isEqual(value, originalValue)\n        )\n      ) {\n        this._previousDataValues[key] = originalValue;\n        this.changed(key, true);\n      }\n\n      // set data value\n      this.dataValues[key] = value;\n    }\n    return this;\n  }\n\n  setAttributes(updates) {\n    return this.set(updates);\n  }\n\n  /**\n   * If changed is called with a string it will return a boolean indicating whether the value of that key in `dataValues` is different from the value in `_previousDataValues`.\n   *\n   * If changed is called without an argument, it will return an array of keys that have changed.\n   *\n   * If changed is called without an argument and no keys have changed, it will return `false`.\n   *\n   * Please note that this function will return `false` when a property from a nested (for example JSON) property\n   * was edited manually, you must call `changed('key', true)` manually in these cases.\n   * Writing an entirely new object (eg. deep cloned) will be detected.\n   *\n   * @example\n   * ```\n   * const mdl = await MyModel.findOne();\n   * mdl.myJsonField.a = 1;\n   * console.log(mdl.changed()) => false\n   * mdl.save(); // this will not save anything\n   * mdl.changed('myJsonField', true);\n   * console.log(mdl.changed()) => ['myJsonField']\n   * mdl.save(); // will save\n   * ```\n   *\n   * @param {string} [key] key to check or change status of\n   * @param {any} [value] value to set\n   *\n   * @returns {boolean|Array}\n   */\n  changed(key, value) {\n    if (key === undefined) {\n      if (this._changed.size > 0) {\n        return Array.from(this._changed);\n      }\n      return false;\n    }\n    if (value === true) {\n      this._changed.add(key);\n      return this;\n    }\n    if (value === false) {\n      this._changed.delete(key);\n      return this;\n    }\n    return this._changed.has(key);\n  }\n\n  /**\n   * Returns the previous value for key from `_previousDataValues`.\n   *\n   * If called without a key, returns the previous values for all values which have changed\n   *\n   * @param {string} [key] key to get previous value of\n   *\n   * @returns {any|Array<any>}\n   */\n  previous(key) {\n    if (key) {\n      return this._previousDataValues[key];\n    }\n\n    return _.pickBy(this._previousDataValues, (value, key) => this.changed(key));\n  }\n\n  _setInclude(key, value, options) {\n    if (!Array.isArray(value)) value = [value];\n    if (value[0] instanceof Model) {\n      value = value.map(instance => instance.dataValues);\n    }\n\n    const include = this._options.includeMap[key];\n    const association = include.association;\n    const accessor = key;\n    const primaryKeyAttribute = include.model.primaryKeyAttribute;\n    const childOptions = {\n      isNewRecord: this.isNewRecord,\n      include: include.include,\n      includeNames: include.includeNames,\n      includeMap: include.includeMap,\n      includeValidated: true,\n      raw: options.raw,\n      attributes: include.originalAttributes\n    };\n    let isEmpty;\n\n    if (include.originalAttributes === undefined || include.originalAttributes.length) {\n      if (association.isSingleAssociation) {\n        if (Array.isArray(value)) {\n          value = value[0];\n        }\n        isEmpty = value && value[primaryKeyAttribute] === null || value === null;\n        this[accessor] = this.dataValues[accessor] = isEmpty ? null : include.model.build(value, childOptions);\n      } else {\n        isEmpty = value[0] && value[0][primaryKeyAttribute] === null;\n        this[accessor] = this.dataValues[accessor] = isEmpty ? [] : include.model.bulkBuild(value, childOptions);\n      }\n    }\n  }\n\n  /**\n   * Validates this instance, and if the validation passes, persists it to the database.\n   *\n   * Returns a Promise that resolves to the saved instance (or rejects with a `Sequelize.ValidationError`, which will have a property for each of the fields for which the validation failed, with the error message for that field).\n   *\n   * This method is optimized to perform an UPDATE only into the fields that changed. If nothing has changed, no SQL query will be performed.\n   *\n   * This method is not aware of eager loaded associations. In other words, if some other model instance (child) was eager loaded with this instance (parent), and you change something in the child, calling `save()` will simply ignore the change that happened on the child.\n   *\n   * @param {object}      [options] save options\n   * @param {string[]}    [options.fields] An optional array of strings, representing database columns. If fields is provided, only those columns will be validated and saved.\n   * @param {boolean}     [options.silent=false] If true, the updatedAt timestamp will not be updated.\n   * @param {boolean}     [options.validate=true] If false, validations won't be run.\n   * @param {boolean}     [options.hooks=true] Run before and after create / update + validate hooks\n   * @param {Function}    [options.logging=false] A function that gets executed while running the query to log the sql.\n   * @param {Transaction} [options.transaction] Transaction to run query under\n   * @param {string}      [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)\n   * @param {boolean}     [options.returning] Append RETURNING * to get back auto generated values (Postgres only)\n   *\n   * @returns {Promise<Model>}\n   */\n  async save(options) {\n    if (arguments.length > 1) {\n      throw new Error('The second argument was removed in favor of the options object.');\n    }\n\n    options = Utils.cloneDeep(options);\n\n    // Add CLS transaction\n    if (options.transaction === undefined && this.sequelize.constructor._cls) {\n      const t = this.sequelize.constructor._cls.get('transaction');\n      if (t) {\n        options.transaction = t;\n      }\n    }\n\n    options = _.defaults(options, {\n      hooks: true,\n      validate: true\n    });\n\n    if (!options.fields) {\n      if (this.isNewRecord) {\n        options.fields = Object.keys(this.constructor.rawAttributes);\n      } else {\n        options.fields = _.intersection(this.changed(), Object.keys(this.constructor.rawAttributes));\n      }\n\n      options.defaultFields = options.fields;\n    }\n\n    if (options.returning === undefined) {\n      if (options.association) {\n        options.returning = false;\n      } else if (this.isNewRecord) {\n        options.returning = true;\n      }\n    }\n\n    const primaryKeyName = this.constructor.primaryKeyAttribute;\n    const primaryKeyAttribute = primaryKeyName && this.constructor.rawAttributes[primaryKeyName];\n    const createdAtAttr = this.constructor._timestampAttributes.createdAt;\n    const versionAttr = this.constructor._versionAttribute;\n    const hook = this.isNewRecord ? 'Create' : 'Update';\n    const wasNewRecord = this.isNewRecord;\n    const now = Utils.now(this.sequelize.options.dialect);\n    let updatedAtAttr = this.constructor._timestampAttributes.updatedAt;\n\n    if (updatedAtAttr && options.fields.length > 0 && !options.fields.includes(updatedAtAttr)) {\n      options.fields.push(updatedAtAttr);\n    }\n    if (versionAttr && options.fields.length > 0 && !options.fields.includes(versionAttr)) {\n      options.fields.push(versionAttr);\n    }\n\n    if (options.silent === true && !(this.isNewRecord && this.get(updatedAtAttr, { raw: true }))) {\n      // UpdateAtAttr might have been added as a result of Object.keys(Model.rawAttributes). In that case we have to remove it again\n      _.remove(options.fields, val => val === updatedAtAttr);\n      updatedAtAttr = false;\n    }\n\n    if (this.isNewRecord === true) {\n      if (createdAtAttr && !options.fields.includes(createdAtAttr)) {\n        options.fields.push(createdAtAttr);\n      }\n\n      if (primaryKeyAttribute && primaryKeyAttribute.defaultValue && !options.fields.includes(primaryKeyName)) {\n        options.fields.unshift(primaryKeyName);\n      }\n    }\n\n    if (this.isNewRecord === false) {\n      if (primaryKeyName && this.get(primaryKeyName, { raw: true }) === undefined) {\n        throw new Error('You attempted to save an instance with no primary key, this is not allowed since it would result in a global update');\n      }\n    }\n\n    if (updatedAtAttr && !options.silent && options.fields.includes(updatedAtAttr)) {\n      this.dataValues[updatedAtAttr] = this.constructor._getDefaultTimestamp(updatedAtAttr) || now;\n    }\n\n    if (this.isNewRecord && createdAtAttr && !this.dataValues[createdAtAttr]) {\n      this.dataValues[createdAtAttr] = this.constructor._getDefaultTimestamp(createdAtAttr) || now;\n    }\n    // Db2 does not allow NULL values for unique columns.\n    // Add dummy values if not provided by test case or user.\n    if (this.sequelize.options.dialect === 'db2' && this.isNewRecord) {\n      this.uniqno = this.sequelize.dialect.queryGenerator.addUniqueFields(\n        this.dataValues, this.constructor.rawAttributes, this.uniqno);\n    }\n    // Validate\n    if (options.validate) {\n      await this.validate(options);\n    }\n    // Run before hook\n    if (options.hooks) {\n      const beforeHookValues = _.pick(this.dataValues, options.fields);\n      let ignoreChanged = _.difference(this.changed(), options.fields); // In case of update where it's only supposed to update the passed values and the hook values\n      let hookChanged;\n      let afterHookValues;\n\n      if (updatedAtAttr && options.fields.includes(updatedAtAttr)) {\n        ignoreChanged = _.without(ignoreChanged, updatedAtAttr);\n      }\n\n      await this.constructor.runHooks(`before${hook}`, this, options);\n      if (options.defaultFields && !this.isNewRecord) {\n        afterHookValues = _.pick(this.dataValues, _.difference(this.changed(), ignoreChanged));\n\n        hookChanged = [];\n        for (const key of Object.keys(afterHookValues)) {\n          if (afterHookValues[key] !== beforeHookValues[key]) {\n            hookChanged.push(key);\n          }\n        }\n\n        options.fields = _.uniq(options.fields.concat(hookChanged));\n      }\n\n      if (hookChanged) {\n        if (options.validate) {\n          // Validate again\n\n          options.skip = _.difference(Object.keys(this.constructor.rawAttributes), hookChanged);\n          await this.validate(options);\n          delete options.skip;\n        }\n      }\n    }\n    if (options.fields.length && this.isNewRecord && this._options.include && this._options.include.length) {\n      await Promise.all(this._options.include.filter(include => include.association instanceof BelongsTo).map(async include => {\n        const instance = this.get(include.as);\n        if (!instance) return;\n\n        const includeOptions = _(Utils.cloneDeep(include))\n          .omit(['association'])\n          .defaults({\n            transaction: options.transaction,\n            logging: options.logging,\n            parentRecord: this\n          }).value();\n\n        await instance.save(includeOptions);\n\n        await this[include.association.accessors.set](instance, { save: false, logging: options.logging });\n      }));\n    }\n    const realFields = options.fields.filter(field => !this.constructor._virtualAttributes.has(field));\n    if (!realFields.length) return this;\n    if (!this.changed() && !this.isNewRecord) return this;\n\n    const versionFieldName = _.get(this.constructor.rawAttributes[versionAttr], 'field') || versionAttr;\n    const values = Utils.mapValueFieldNames(this.dataValues, options.fields, this.constructor);\n    let query = null;\n    let args = [];\n    let where;\n\n    if (this.isNewRecord) {\n      query = 'insert';\n      args = [this, this.constructor.getTableName(options), values, options];\n    } else {\n      where = this.where(true);\n      if (versionAttr) {\n        values[versionFieldName] = parseInt(values[versionFieldName], 10) + 1;\n      }\n      query = 'update';\n      args = [this, this.constructor.getTableName(options), values, where, options];\n    }\n\n    const [result, rowsUpdated] = await this.constructor.queryInterface[query](...args);\n    if (versionAttr) {\n      // Check to see that a row was updated, otherwise it's an optimistic locking error.\n      if (rowsUpdated < 1) {\n        throw new sequelizeErrors.OptimisticLockError({\n          modelName: this.constructor.name,\n          values,\n          where\n        });\n      } else {\n        result.dataValues[versionAttr] = values[versionFieldName];\n      }\n    }\n\n    // Transfer database generated values (defaults, autoincrement, etc)\n    for (const attr of Object.keys(this.constructor.rawAttributes)) {\n      if (this.constructor.rawAttributes[attr].field &&\n          values[this.constructor.rawAttributes[attr].field] !== undefined &&\n          this.constructor.rawAttributes[attr].field !== attr\n      ) {\n        values[attr] = values[this.constructor.rawAttributes[attr].field];\n        delete values[this.constructor.rawAttributes[attr].field];\n      }\n    }\n    Object.assign(values, result.dataValues);\n\n    Object.assign(result.dataValues, values);\n    if (wasNewRecord && this._options.include && this._options.include.length) {\n      await Promise.all(\n        this._options.include.filter(include => !(include.association instanceof BelongsTo ||\n          include.parent && include.parent.association instanceof BelongsToMany)).map(async include => {\n          let instances = this.get(include.as);\n\n          if (!instances) return;\n          if (!Array.isArray(instances)) instances = [instances];\n\n          const includeOptions = _(Utils.cloneDeep(include))\n            .omit(['association'])\n            .defaults({\n              transaction: options.transaction,\n              logging: options.logging,\n              parentRecord: this\n            }).value();\n\n          // Instances will be updated in place so we can safely treat HasOne like a HasMany\n          await Promise.all(instances.map(async instance => {\n            if (include.association instanceof BelongsToMany) {\n              await instance.save(includeOptions);\n              const values0 = {\n                [include.association.foreignKey]: this.get(this.constructor.primaryKeyAttribute, { raw: true }),\n                [include.association.otherKey]: instance.get(instance.constructor.primaryKeyAttribute, { raw: true }),\n                // Include values defined in the association\n                ...include.association.through.scope\n              };\n\n              if (instance[include.association.through.model.name]) {\n                for (const attr of Object.keys(include.association.through.model.rawAttributes)) {\n                  if (include.association.through.model.rawAttributes[attr]._autoGenerated ||\n                    attr === include.association.foreignKey ||\n                    attr === include.association.otherKey ||\n                    typeof instance[include.association.through.model.name][attr] === 'undefined') {\n                    continue;\n                  }\n                  values0[attr] = instance[include.association.through.model.name][attr];\n                }\n              }\n\n              await include.association.throughModel.create(values0, includeOptions);\n            } else {\n              instance.set(include.association.foreignKey, this.get(include.association.sourceKey || this.constructor.primaryKeyAttribute, { raw: true }), { raw: true });\n              Object.assign(instance, include.association.scope);\n              await instance.save(includeOptions);\n            }\n          }));\n        })\n      );\n    }\n    // Run after hook\n    if (options.hooks) {\n      await this.constructor.runHooks(`after${hook}`, result, options);\n    }\n    for (const field of options.fields) {\n      result._previousDataValues[field] = result.dataValues[field];\n      this.changed(field, false);\n    }\n    this.isNewRecord = false;\n\n    return result;\n  }\n\n  /**\n   * Refresh the current instance in-place, i.e. update the object with current data from the DB and return the same object.\n   * This is different from doing a `find(Instance.id)`, because that would create and return a new instance. With this method,\n   * all references to the Instance are updated with the new data and no new objects are created.\n   *\n   * @see\n   * {@link Model.findAll}\n   *\n   * @param {object} [options] Options that are passed on to `Model.find`\n   * @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.\n   *\n   * @returns {Promise<Model>}\n   */\n  async reload(options) {\n    options = Utils.defaults({\n      where: this.where()\n    }, options, {\n      include: this._options.include || undefined\n    });\n\n    const reloaded = await this.constructor.findOne(options);\n    if (!reloaded) {\n      throw new sequelizeErrors.InstanceError(\n        'Instance could not be reloaded because it does not exist anymore (find call returned null)'\n      );\n    }\n    // update the internal options of the instance\n    this._options = reloaded._options;\n    // re-set instance values\n    this.set(reloaded.dataValues, {\n      raw: true,\n      reset: true && !options.attributes\n    });\n\n    return this;\n  }\n\n  /**\n  * Validate the attributes of this instance according to validation rules set in the model definition.\n  *\n  * The promise fulfills if and only if validation successful; otherwise it rejects an Error instance containing { field name : [error msgs] } entries.\n  *\n  * @param {object} [options] Options that are passed to the validator\n  * @param {Array} [options.skip] An array of strings. All properties that are in this array will not be validated\n  * @param {Array} [options.fields] An array of strings. Only the properties that are in this array will be validated\n  * @param {boolean} [options.hooks=true] Run before and after validate hooks\n  *\n  * @returns {Promise}\n  */\n  async validate(options) {\n    return new InstanceValidator(this, options).validate();\n  }\n\n  /**\n   * This is the same as calling `set` and then calling `save` but it only saves the\n   * exact values passed to it, making it more atomic and safer.\n   *\n   * @see\n   * {@link Model#set}\n   * @see\n   * {@link Model#save}\n   *\n   * @param {object} values See `set`\n   * @param {object} options See `save`\n   *\n   * @returns {Promise<Model>}\n   */\n  async update(values, options) {\n    // Clone values so it doesn't get modified for caller scope and ignore undefined values\n    values = _.omitBy(values, value => value === undefined);\n\n    const changedBefore = this.changed() || [];\n\n    options = options || {};\n    if (Array.isArray(options)) options = { fields: options };\n\n    options = Utils.cloneDeep(options);\n\n    // Add CLS transaction\n    if (options.transaction === undefined && this.sequelize.constructor._cls) {\n      const t = this.sequelize.constructor._cls.get('transaction');\n      if (t) {\n        options.transaction = t;\n      }\n    }\n\n    const setOptions = Utils.cloneDeep(options);\n    setOptions.attributes = options.fields;\n    this.set(values, setOptions);\n\n    // Now we need to figure out which fields were actually affected by the setter.\n    const sideEffects = _.without(this.changed(), ...changedBefore);\n    const fields = _.union(Object.keys(values), sideEffects);\n\n    if (!options.fields) {\n      options.fields = _.intersection(fields, this.changed());\n      options.defaultFields = options.fields;\n    }\n\n    return await this.save(options);\n  }\n\n  /**\n   * Destroy the row corresponding to this instance. Depending on your setting for paranoid, the row will either be completely deleted, or have its deletedAt timestamp set to the current time.\n   *\n   * @param {object}      [options={}] destroy options\n   * @param {boolean}     [options.force=false] If set to true, paranoid models will actually be deleted\n   * @param {Function}    [options.logging=false] A function that gets executed while running the query to log the sql.\n   * @param {Transaction} [options.transaction] Transaction to run query under\n   * @param {string}      [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)\n   *\n   * @returns {Promise}\n   */\n  async destroy(options) {\n    options = {\n      hooks: true,\n      force: false,\n      ...options\n    };\n\n    // Add CLS transaction\n    if (options.transaction === undefined && this.sequelize.constructor._cls) {\n      const t = this.sequelize.constructor._cls.get('transaction');\n      if (t) {\n        options.transaction = t;\n      }\n    }\n\n    // Run before hook\n    if (options.hooks) {\n      await this.constructor.runHooks('beforeDestroy', this, options);\n    }\n    const where = this.where(true);\n\n    let result;\n    if (this.constructor._timestampAttributes.deletedAt && options.force === false) {\n      const attributeName = this.constructor._timestampAttributes.deletedAt;\n      const attribute = this.constructor.rawAttributes[attributeName];\n      const defaultValue = Object.prototype.hasOwnProperty.call(attribute, 'defaultValue')\n        ? attribute.defaultValue\n        : null;\n      const currentValue = this.getDataValue(attributeName);\n      const undefinedOrNull = currentValue == null && defaultValue == null;\n      if (undefinedOrNull || _.isEqual(currentValue, defaultValue)) {\n        // only update timestamp if it wasn't already set\n        this.setDataValue(attributeName, new Date());\n      }\n\n      result = await this.save({ ...options, hooks: false });\n    } else {\n      result = await this.constructor.queryInterface.delete(this, this.constructor.getTableName(options), where, { type: QueryTypes.DELETE, limit: null, ...options });\n    }\n    // Run after hook\n    if (options.hooks) {\n      await this.constructor.runHooks('afterDestroy', this, options);\n    }\n    return result;\n  }\n\n  /**\n   * Helper method to determine if a instance is \"soft deleted\".  This is\n   * particularly useful if the implementer renamed the `deletedAt` attribute\n   * to something different.  This method requires `paranoid` to be enabled.\n   *\n   * @returns {boolean}\n   */\n  isSoftDeleted() {\n    if (!this.constructor._timestampAttributes.deletedAt) {\n      throw new Error('Model is not paranoid');\n    }\n\n    const deletedAtAttribute = this.constructor.rawAttributes[this.constructor._timestampAttributes.deletedAt];\n    const defaultValue = Object.prototype.hasOwnProperty.call(deletedAtAttribute, 'defaultValue') ? deletedAtAttribute.defaultValue : null;\n    const deletedAt = this.get(this.constructor._timestampAttributes.deletedAt) || null;\n    const isSet = deletedAt !== defaultValue;\n\n    return isSet;\n  }\n\n  /**\n   * Restore the row corresponding to this instance. Only available for paranoid models.\n   *\n   * @param {object}      [options={}] restore options\n   * @param {Function}    [options.logging=false] A function that gets executed while running the query to log the sql.\n   * @param {Transaction} [options.transaction] Transaction to run query under\n   *\n   * @returns {Promise}\n   */\n  async restore(options) {\n    if (!this.constructor._timestampAttributes.deletedAt) throw new Error('Model is not paranoid');\n\n    options = {\n      hooks: true,\n      force: false,\n      ...options\n    };\n\n    // Add CLS transaction\n    if (options.transaction === undefined && this.sequelize.constructor._cls) {\n      const t = this.sequelize.constructor._cls.get('transaction');\n      if (t) {\n        options.transaction = t;\n      }\n    }\n\n    // Run before hook\n    if (options.hooks) {\n      await this.constructor.runHooks('beforeRestore', this, options);\n    }\n    const deletedAtCol = this.constructor._timestampAttributes.deletedAt;\n    const deletedAtAttribute = this.constructor.rawAttributes[deletedAtCol];\n    const deletedAtDefaultValue = Object.prototype.hasOwnProperty.call(deletedAtAttribute, 'defaultValue') ? deletedAtAttribute.defaultValue : null;\n\n    this.setDataValue(deletedAtCol, deletedAtDefaultValue);\n    const result = await this.save({ ...options, hooks: false, omitNull: false });\n    // Run after hook\n    if (options.hooks) {\n      await this.constructor.runHooks('afterRestore', this, options);\n      return result;\n    }\n    return result;\n  }\n\n  /**\n   * Increment the value of one or more columns. This is done in the database, which means it does not use the values currently stored on the Instance. The increment is done using a\n   * ```sql\n   * SET column = column + X\n   * ```\n   * query. The updated instance will be returned by default in Postgres. However, in other dialects, you will need to do a reload to get the new values.\n   *\n   * @example\n   * instance.increment('number') // increment number by 1\n   *\n   * instance.increment(['number', 'count'], { by: 2 }) // increment number and count by 2\n   *\n   * // increment answer by 42, and tries by 1.\n   * // `by` is ignored, since each column has its own value\n   * instance.increment({ answer: 42, tries: 1}, { by: 2 })\n   *\n   * @see\n   * {@link Model#reload}\n   *\n   * @param {string|Array|object} fields If a string is provided, that column is incremented by the value of `by` given in options. If an array is provided, the same is true for each column. If and object is provided, each column is incremented by the value given.\n   * @param {object} [options] options\n   * @param {number} [options.by=1] The number to increment by\n   * @param {boolean} [options.silent=false] If true, the updatedAt timestamp will not be updated.\n   * @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.\n   * @param {Transaction} [options.transaction] Transaction to run query under\n   * @param {string} [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)\n   * @param {boolean} [options.returning=true] Append RETURNING * to get back auto generated values (Postgres only)\n   *\n   * @returns {Promise<Model>}\n   * @since 4.0.0\n   */\n  async increment(fields, options) {\n    const identifier = this.where();\n\n    options = Utils.cloneDeep(options);\n    options.where = { ...options.where, ...identifier };\n    options.instance = this;\n\n    await this.constructor.increment(fields, options);\n\n    return this;\n  }\n\n  /**\n   * Decrement the value of one or more columns. This is done in the database, which means it does not use the values currently stored on the Instance. The decrement is done using a\n   * ```sql\n   * SET column = column - X\n   * ```\n   * query. The updated instance will be returned by default in Postgres. However, in other dialects, you will need to do a reload to get the new values.\n   *\n   * @example\n   * instance.decrement('number') // decrement number by 1\n   *\n   * instance.decrement(['number', 'count'], { by: 2 }) // decrement number and count by 2\n   *\n   * // decrement answer by 42, and tries by 1.\n   * // `by` is ignored, since each column has its own value\n   * instance.decrement({ answer: 42, tries: 1}, { by: 2 })\n   *\n   * @see\n   * {@link Model#reload}\n   * @param {string|Array|object} fields If a string is provided, that column is decremented by the value of `by` given in options. If an array is provided, the same is true for each column. If and object is provided, each column is decremented by the value given\n   * @param {object}      [options] decrement options\n   * @param {number}      [options.by=1] The number to decrement by\n   * @param {boolean}     [options.silent=false] If true, the updatedAt timestamp will not be updated.\n   * @param {Function}    [options.logging=false] A function that gets executed while running the query to log the sql.\n   * @param {Transaction} [options.transaction] Transaction to run query under\n   * @param {string}      [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)\n   * @param {boolean}     [options.returning=true] Append RETURNING * to get back auto generated values (Postgres only)\n   *\n   * @returns {Promise}\n   */\n  async decrement(fields, options) {\n    return this.increment(fields, {\n      by: 1,\n      ...options,\n      increment: false\n    });\n  }\n\n  /**\n   * Check whether this and `other` Instance refer to the same row\n   *\n   * @param {Model} other Other instance to compare against\n   *\n   * @returns {boolean}\n   */\n  equals(other) {\n    if (!other || !other.constructor) {\n      return false;\n    }\n\n    if (!(other instanceof this.constructor)) {\n      return false;\n    }\n\n    return this.constructor.primaryKeyAttributes.every(attribute => this.get(attribute, { raw: true }) === other.get(attribute, { raw: true }));\n  }\n\n  /**\n   * Check if this is equal to one of `others` by calling equals\n   *\n   * @param {Array<Model>} others An array of instances to check against\n   *\n   * @returns {boolean}\n   */\n  equalsOneOf(others) {\n    return others.some(other => this.equals(other));\n  }\n\n  setValidators(attribute, validators) {\n    this.validators[attribute] = validators;\n  }\n\n  /**\n   * Convert the instance to a JSON representation.\n   * Proxies to calling `get` with no keys.\n   * This means get all values gotten from the DB, and apply all custom getters.\n   *\n   * @see\n   * {@link Model#get}\n   *\n   * @returns {object}\n   */\n  toJSON() {\n    return _.cloneDeep(\n      this.get({\n        plain: true\n      })\n    );\n  }\n\n  /**\n   * Creates a 1:m association between this (the source) and the provided target.\n   * The foreign key is added on the target.\n   *\n   * @param {Model}               target Target model\n   * @param {object}              [options] hasMany association options\n   * @param {boolean}             [options.hooks=false] Set to true to run before-/afterDestroy hooks when an associated model is deleted because of a cascade. For example if `User.hasOne(Profile, {onDelete: 'cascade', hooks:true})`, the before-/afterDestroy hooks for profile will be called when a user is deleted. Otherwise the profile will be deleted without invoking any hooks\n   * @param {string|object}       [options.as] The alias of this model. If you provide a string, it should be plural, and will be singularized using node.inflection. If you want to control the singular version yourself, provide an object with `plural` and `singular` keys. See also the `name` option passed to `sequelize.define`. If you create multiple associations between the same tables, you should provide an alias to be able to distinguish between them. If you provide an alias when creating the association, you should provide the same alias when eager loading and when getting associated models. Defaults to the pluralized name of target\n   * @param {string|object}       [options.foreignKey] The name of the foreign key in the target table or an object representing the type definition for the foreign column (see `Sequelize.define` for syntax). When using an object, you can add a `name` property to set the name of the column. Defaults to the name of source + primary key of source\n   * @param {string}              [options.sourceKey] The name of the field to use as the key for the association in the source table. Defaults to the primary key of the source table\n   * @param {object}              [options.scope] A key/value set that will be used for association create and find defaults on the target. (sqlite not supported for N:M)\n   * @param {string}              [options.onDelete='SET&nbsp;NULL|CASCADE'] SET NULL if foreignKey allows nulls, CASCADE if otherwise\n   * @param {string}              [options.onUpdate='CASCADE'] Set `ON UPDATE`\n   * @param {boolean}             [options.constraints=true] Should on update and on delete constraints be enabled on the foreign key.\n   *\n   * @returns {HasMany}\n   *\n   * @example\n   * User.hasMany(Profile) // This will add userId to the profile table\n   */\n  static hasMany(target, options) {} // eslint-disable-line\n\n  /**\n   * Create an N:M association with a join table. Defining `through` is required.\n   *\n   * @param {Model}               target Target model\n   * @param {object}              options belongsToMany association options\n   * @param {boolean}             [options.hooks=false] Set to true to run before-/afterDestroy hooks when an associated model is deleted because of a cascade. For example if `User.hasOne(Profile, {onDelete: 'cascade', hooks:true})`, the before-/afterDestroy hooks for profile will be called when a user is deleted. Otherwise the profile will be deleted without invoking any hooks\n   * @param {Model|string|object} options.through The name of the table that is used to join source and target in n:m associations. Can also be a sequelize model if you want to define the junction table yourself and add extra attributes to it.\n   * @param {Model}               [options.through.model] The model used to join both sides of the N:M association.\n   * @param {object}              [options.through.scope] A key/value set that will be used for association create and find defaults on the through model. (Remember to add the attributes to the through model)\n   * @param {boolean}             [options.through.unique=true] If true a unique key will be generated from the foreign keys used (might want to turn this off and create specific unique keys when using scopes)\n   * @param {boolean}             [options.through.paranoid=false] If true the generated join table will be paranoid\n   * @param {string|object}       [options.as] The alias of this association. If you provide a string, it should be plural, and will be singularized using node.inflection. If you want to control the singular version yourself, provide an object with `plural` and `singular` keys. See also the `name` option passed to `sequelize.define`. If you create multiple associations between the same tables, you should provide an alias to be able to distinguish between them. If you provide an alias when creating the association, you should provide the same alias when eager loading and when getting associated models. Defaults to the pluralized name of target\n   * @param {string|object}       [options.foreignKey] The name of the foreign key in the join table (representing the source model) or an object representing the type definition for the foreign column (see `Sequelize.define` for syntax). When using an object, you can add a `name` property to set the name of the column. Defaults to the name of source + primary key of source\n   * @param {string|object}       [options.otherKey] The name of the foreign key in the join table (representing the target model) or an object representing the type definition for the other column (see `Sequelize.define` for syntax). When using an object, you can add a `name` property to set the name of the column. Defaults to the name of target + primary key of target\n   * @param {object}              [options.scope] A key/value set that will be used for association create and find defaults on the target. (sqlite not supported for N:M)\n   * @param {boolean}             [options.timestamps=sequelize.options.timestamps] Should the join model have timestamps\n   * @param {string}              [options.onDelete='SET&nbsp;NULL|CASCADE'] Cascade if this is a n:m, and set null if it is a 1:m\n   * @param {string}              [options.onUpdate='CASCADE'] Sets `ON UPDATE`\n   * @param {boolean}             [options.constraints=true] Should on update and on delete constraints be enabled on the foreign key.\n   *\n   * @returns {BelongsToMany}\n   *\n   * @example\n   * // Automagically generated join model\n   * User.belongsToMany(Project, { through: 'UserProjects' })\n   * Project.belongsToMany(User, { through: 'UserProjects' })\n   *\n   * // Join model with additional attributes\n   * const UserProjects = sequelize.define('UserProjects', {\n   *   started: Sequelize.BOOLEAN\n   * })\n   * User.belongsToMany(Project, { through: UserProjects })\n   * Project.belongsToMany(User, { through: UserProjects })\n   */\n  static belongsToMany(target, options) {} // eslint-disable-line\n\n  /**\n   * Creates an association between this (the source) and the provided target. The foreign key is added on the target.\n   *\n   * @param {Model}           target Target model\n   * @param {object}          [options] hasOne association options\n   * @param {boolean}         [options.hooks=false] Set to true to run before-/afterDestroy hooks when an associated model is deleted because of a cascade. For example if `User.hasOne(Profile, {onDelete: 'cascade', hooks:true})`, the before-/afterDestroy hooks for profile will be called when a user is deleted. Otherwise the profile will be deleted without invoking any hooks\n   * @param {string}          [options.as] The alias of this model, in singular form. See also the `name` option passed to `sequelize.define`. If you create multiple associations between the same tables, you should provide an alias to be able to distinguish between them. If you provide an alias when creating the association, you should provide the same alias when eager loading and when getting associated models. Defaults to the singularized name of target\n   * @param {string|object}   [options.foreignKey] The name of the foreign key attribute in the target model or an object representing the type definition for the foreign column (see `Sequelize.define` for syntax). When using an object, you can add a `name` property to set the name of the column. Defaults to the name of source + primary key of source\n   * @param {string}          [options.sourceKey] The name of the attribute to use as the key for the association in the source table. Defaults to the primary key of the source table\n   * @param {string}          [options.onDelete='SET&nbsp;NULL|CASCADE'] SET NULL if foreignKey allows nulls, CASCADE if otherwise\n   * @param {string}          [options.onUpdate='CASCADE'] Sets 'ON UPDATE'\n   * @param {boolean}         [options.constraints=true] Should on update and on delete constraints be enabled on the foreign key.\n   * @param {string}          [options.uniqueKey] The custom name for unique constraint.\n   *\n   * @returns {HasOne}\n   *\n   * @example\n   * User.hasOne(Profile) // This will add userId to the profile table\n   */\n  static hasOne(target, options) {} // eslint-disable-line\n\n  /**\n   * Creates an association between this (the source) and the provided target. The foreign key is added on the source.\n   *\n   * @param {Model}           target The target model\n   * @param {object}          [options] belongsTo association options\n   * @param {boolean}         [options.hooks=false] Set to true to run before-/afterDestroy hooks when an associated model is deleted because of a cascade. For example if `User.hasOne(Profile, {onDelete: 'cascade', hooks:true})`, the before-/afterDestroy hooks for profile will be called when a user is deleted. Otherwise the profile will be deleted without invoking any hooks\n   * @param {string}          [options.as] The alias of this model, in singular form. See also the `name` option passed to `sequelize.define`. If you create multiple associations between the same tables, you should provide an alias to be able to distinguish between them. If you provide an alias when creating the association, you should provide the same alias when eager loading and when getting associated models. Defaults to the singularized name of target\n   * @param {string|object}   [options.foreignKey] The name of the foreign key attribute in the source table or an object representing the type definition for the foreign column (see `Sequelize.define` for syntax). When using an object, you can add a `name` property to set the name of the column. Defaults to the name of target + primary key of target\n   * @param {string}          [options.targetKey] The name of the attribute to use as the key for the association in the target table. Defaults to the primary key of the target table\n   * @param {string}          [options.onDelete='SET&nbsp;NULL|NO&nbsp;ACTION'] SET NULL if foreignKey allows nulls, NO ACTION if otherwise\n   * @param {string}          [options.onUpdate='CASCADE'] Sets 'ON UPDATE'\n   * @param {boolean}         [options.constraints=true] Should on update and on delete constraints be enabled on the foreign key.\n   *\n   * @returns {BelongsTo}\n   *\n   * @example\n   * Profile.belongsTo(User) // This will add userId to the profile table\n   */\n  static belongsTo(target, options) {} // eslint-disable-line\n}\n\n/**\n * Unpacks an object that only contains a single Op.and key to the value of Op.and\n *\n * Internal method used by {@link combineWheresWithAnd}\n *\n * @param {WhereOptions} where The object to unpack\n * @example `{ [Op.and]: [a, b] }` becomes `[a, b]`\n * @example `{ [Op.and]: { key: val } }` becomes `{ key: val }`\n * @example `{ [Op.or]: [a, b] }` remains as `{ [Op.or]: [a, b] }`\n * @example `{ [Op.and]: [a, b], key: c }` remains as `{ [Op.and]: [a, b], key: c }`\n * @private\n */\nfunction unpackAnd(where) {\n  if (!_.isObject(where)) {\n    return where;\n  }\n\n  const keys = Utils.getComplexKeys(where);\n\n  // object is empty, remove it.\n  if (keys.length === 0) {\n    return;\n  }\n\n  // we have more than just Op.and, keep as-is\n  if (keys.length !== 1 || keys[0] !== Op.and) {\n    return where;\n  }\n\n  const andParts = where[Op.and];\n\n  return andParts;\n}\n\nfunction combineWheresWithAnd(whereA, whereB) {\n  const unpackedA = unpackAnd(whereA);\n\n  if (unpackedA === undefined) {\n    return whereB;\n  }\n\n  const unpackedB = unpackAnd(whereB);\n\n  if (unpackedB === undefined) {\n    return whereA;\n  }\n\n  return {\n    [Op.and]: _.flatten([unpackedA, unpackedB])\n  };\n}\n\nObject.assign(Model, associationsMixin);\nHooks.applyTo(Model, true);\n\nmodule.exports = Model;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 10893, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10898, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/deferrable.js"],"sourcesContent":["'use strict';\n\nconst { classToInvokable } = require('./utils');\n\nclass ABSTRACT {\n  static toString(...args) {\n    return new this().toString(...args);\n  }\n\n  toString(...args) {\n    return this.toSql(...args);\n  }\n\n  toSql() {\n    throw new Error('toSql implementation missing');\n  }\n}\n\nclass INITIALLY_DEFERRED extends ABSTRACT {\n  toSql() {\n    return 'DEFERRABLE INITIALLY DEFERRED';\n  }\n}\n\nclass INITIALLY_IMMEDIATE extends ABSTRACT {\n  toSql() {\n    return 'DEFERRABLE INITIALLY IMMEDIATE';\n  }\n}\n\nclass NOT extends ABSTRACT {\n  toSql() {\n    return 'NOT DEFERRABLE';\n  }\n}\n\nclass SET_DEFERRED extends ABSTRACT {\n  constructor(constraints) {\n    super();\n    this.constraints = constraints;\n  }\n\n  toSql(queryGenerator) {\n    return queryGenerator.setDeferredQuery(this.constraints);\n  }\n}\n\nclass SET_IMMEDIATE extends ABSTRACT {\n  constructor(constraints) {\n    super();\n    this.constraints = constraints;\n  }\n\n  toSql(queryGenerator) {\n    return queryGenerator.setImmediateQuery(this.constraints);\n  }\n}\n\n/**\n * A collection of properties related to deferrable constraints. It can be used to\n * make foreign key constraints deferrable and to set the constraints within a\n * transaction. This is only supported in PostgreSQL.\n *\n * The foreign keys can be configured like this. It will create a foreign key\n * that will check the constraints immediately when the data was inserted.\n *\n * ```js\n * sequelize.define('Model', {\n *   foreign_id: {\n *     type: Sequelize.INTEGER,\n *     references: {\n *       model: OtherModel,\n *       key: 'id',\n *       deferrable: Sequelize.Deferrable.INITIALLY_IMMEDIATE\n *     }\n *   }\n * });\n * ```\n *\n * The constraints can be configured in a transaction like this. It will\n * trigger a query once the transaction has been started and set the constraints\n * to be checked at the very end of the transaction.\n *\n * ```js\n * sequelize.transaction({\n *   deferrable: Sequelize.Deferrable.SET_DEFERRED\n * });\n * ```\n *\n * @property INITIALLY_DEFERRED    Use when declaring a constraint. Allow and enable by default this constraint's checks to be deferred at the end of transactions.\n * @property INITIALLY_IMMEDIATE   Use when declaring a constraint. Allow the constraint's checks to be deferred at the end of transactions.\n * @property NOT                   Use when declaring a constraint. Set the constraint to not deferred. This is the default in PostgreSQL and makes it impossible to dynamically defer the constraints within a transaction.\n * @property SET_DEFERRED          Use when declaring a transaction. Defer the deferrable checks involved in this transaction at commit.\n * @property SET_IMMEDIATE         Use when declaring a transaction. Execute the deferrable checks involved in this transaction immediately.\n */\n\nconst Deferrable = {\n  INITIALLY_DEFERRED: classToInvokable(INITIALLY_DEFERRED),\n  INITIALLY_IMMEDIATE: classToInvokable(INITIALLY_IMMEDIATE),\n  NOT: classToInvokable(NOT),\n  SET_DEFERRED: classToInvokable(SET_DEFERRED),\n  SET_IMMEDIATE: classToInvokable(SET_IMMEDIATE)\n};\n\nmodule.exports = Deferrable;\n"],"names":[],"mappings":";AAEA,MAAM,EAAE,gBAAA,EAAA,GAAqB,QAAQ;AAErC,MAAA,SAAe;IAAA,OACN,SAAA,GAAY,IAAA,EAAM;QACvB,OAAO,IAAI,IAAA,GAAO,QAAA,CAAS,GAAG;IAAA;IAGhC,SAAA,GAAY,IAAA,EAAM;QAChB,OAAO,IAAA,CAAK,KAAA,CAAM,GAAG;IAAA;IAGvB,QAAQ;QACN,MAAM,IAAI,MAAM;IAAA;AAAA;AAIpB,MAAA,2BAAiC,SAAS;IACxC,QAAQ;QACN,OAAO;IAAA;AAAA;AAIX,MAAA,4BAAkC,SAAS;IACzC,QAAQ;QACN,OAAO;IAAA;AAAA;AAIX,MAAA,YAAkB,SAAS;IACzB,QAAQ;QACN,OAAO;IAAA;AAAA;AAIX,MAAA,qBAA2B,SAAS;IAClC,YAAY,WAAA,CAAa;QACvB,KAAA;QACA,IAAA,CAAK,WAAA,GAAc;IAAA;IAGrB,MAAM,cAAA,EAAgB;QACpB,OAAO,eAAe,gBAAA,CAAiB,IAAA,CAAK,WAAA;IAAA;AAAA;AAIhD,MAAA,sBAA4B,SAAS;IACnC,YAAY,WAAA,CAAa;QACvB,KAAA;QACA,IAAA,CAAK,WAAA,GAAc;IAAA;IAGrB,MAAM,cAAA,EAAgB;QACpB,OAAO,eAAe,iBAAA,CAAkB,IAAA,CAAK,WAAA;IAAA;AAAA;AA0CjD,MAAM,aAAa;IACjB,oBAAoB,iBAAiB;IACrC,qBAAqB,iBAAiB;IACtC,KAAK,iBAAiB;IACtB,cAAc,iBAAiB;IAC/B,eAAe,iBAAiB;AAAA;AAGlC,OAAO,OAAA,GAAU","ignoreList":[0]}},
    {"offset": {"line": 10952, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10957, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/model-manager.js"],"sourcesContent":["'use strict';\n\nconst Toposort = require('toposort-class');\nconst _ = require('lodash');\n\nclass ModelManager {\n  constructor(sequelize) {\n    this.models = [];\n    this.sequelize = sequelize;\n  }\n\n  addModel(model) {\n    this.models.push(model);\n    this.sequelize.models[model.name] = model;\n\n    return model;\n  }\n\n  removeModel(modelToRemove) {\n    this.models = this.models.filter(model => model.name !== modelToRemove.name);\n\n    delete this.sequelize.models[modelToRemove.name];\n  }\n\n  getModel(against, options) {\n    options = _.defaults(options || {}, {\n      attribute: 'name'\n    });\n\n    return this.models.find(model => model[options.attribute] === against);\n  }\n\n  findModel(callback) {\n    return this.models.find(callback);\n  }\n\n  get all() {\n    return this.models;\n  }\n\n  /**\n   * Returns an array that lists every model, sorted in order\n   * of foreign key references: The first model is a model that is depended upon,\n   * the last model is a model that is not depended upon.\n   *\n   * If there is a cyclic dependency, this returns null.\n   */\n  getModelsTopoSortedByForeignKey() {\n    const models = new Map();\n    const sorter = new Toposort();\n\n    for (const model of this.models) {\n      let deps = [];\n      let tableName = model.getTableName();\n\n      if (_.isObject(tableName)) {\n        tableName = `${tableName.schema}.${tableName.tableName}`;\n      }\n\n      models.set(tableName, model);\n\n      for (const attrName in model.rawAttributes) {\n        if (Object.prototype.hasOwnProperty.call(model.rawAttributes, attrName)) {\n          const attribute = model.rawAttributes[attrName];\n\n          if (attribute.references) {\n            let dep = attribute.references.model;\n\n            if (_.isObject(dep)) {\n              dep = `${dep.schema}.${dep.tableName}`;\n            }\n\n            deps.push(dep);\n          }\n        }\n      }\n\n      deps = deps.filter(dep => tableName !== dep);\n\n      sorter.add(tableName, deps);\n    }\n\n    let sorted;\n    try {\n      sorted = sorter.sort();\n    } catch (e) {\n      if (!e.message.startsWith('Cyclic dependency found.')) {\n        throw e;\n      }\n\n      return null;\n    }\n\n    return sorted\n      .map(modelName => {\n        return models.get(modelName);\n      })\n      .filter(Boolean);\n  }\n\n  /**\n   * Iterate over Models in an order suitable for e.g. creating tables.\n   * Will take foreign key constraints into account so that dependencies are visited before dependents.\n   *\n   * @param {Function} iterator method to execute on each model\n   * @param {object} options\n   * @private\n   *\n   * @deprecated\n   */\n  forEachModel(iterator, options) {\n    const sortedModels = this.getModelsTopoSortedByForeignKey();\n    if (sortedModels == null) {\n      throw new Error('Cyclic dependency found.');\n    }\n\n    options = _.defaults(options || {}, {\n      reverse: true\n    });\n\n    if (options.reverse) {\n      sortedModels.reverse();\n    }\n\n    for (const model of sortedModels) {\n      iterator(model);\n    }\n  }\n}\n\nmodule.exports = ModelManager;\nmodule.exports.ModelManager = ModelManager;\nmodule.exports.default = ModelManager;\n"],"names":[],"mappings":";AAEA,MAAM,WAAW,QAAQ;AACzB,MAAM,IAAI,QAAQ;AAElB,MAAA,aAAmB;IACjB,YAAY,SAAA,CAAW;QACrB,IAAA,CAAK,MAAA,GAAS,EAAA;QACd,IAAA,CAAK,SAAA,GAAY;IAAA;IAGnB,SAAS,KAAA,EAAO;QACd,IAAA,CAAK,MAAA,CAAO,IAAA,CAAK;QACjB,IAAA,CAAK,SAAA,CAAU,MAAA,CAAO,MAAM,IAAA,CAAA,GAAQ;QAEpC,OAAO;IAAA;IAGT,YAAY,aAAA,EAAe;QACzB,IAAA,CAAK,MAAA,GAAS,IAAA,CAAK,MAAA,CAAO,MAAA,CAAO,CAAA,QAAS,MAAM,IAAA,KAAS,cAAc,IAAA;QAEvE,OAAO,IAAA,CAAK,SAAA,CAAU,MAAA,CAAO,cAAc,IAAA,CAAA;IAAA;IAG7C,SAAS,OAAA,EAAS,OAAA,EAAS;QACzB,UAAU,EAAE,QAAA,CAAS,WAAW,CAAA,GAAI;YAClC,WAAW;QAAA;QAGb,OAAO,IAAA,CAAK,MAAA,CAAO,IAAA,CAAK,CAAA,QAAS,KAAA,CAAM,QAAQ,SAAA,CAAA,KAAe;IAAA;IAGhE,UAAU,QAAA,EAAU;QAClB,OAAO,IAAA,CAAK,MAAA,CAAO,IAAA,CAAK;IAAA;IAAA,IAGtB,MAAM;QACR,OAAO,IAAA,CAAK,MAAA;IAAA;IAUd,kCAAkC;QAChC,MAAM,SAAS,aAAA,GAAA,IAAI;QACnB,MAAM,SAAS,IAAI;QAEnB,KAAA,MAAW,SAAS,IAAA,CAAK,MAAA,CAAQ;YAC/B,IAAI,OAAO,EAAA;YACX,IAAI,YAAY,MAAM,YAAA;YAEtB,IAAI,EAAE,QAAA,CAAS,YAAY;gBACzB,YAAY,GAAG,UAAU,MAAA,CAAA,CAAA,EAAU,UAAU,SAAA,EAAA;YAAA;YAG/C,OAAO,GAAA,CAAI,WAAW;YAEtB,IAAA,MAAW,YAAY,MAAM,aAAA,CAAe;gBAC1C,IAAI,OAAO,SAAA,CAAU,cAAA,CAAe,IAAA,CAAK,MAAM,aAAA,EAAe,WAAW;oBACvE,MAAM,YAAY,MAAM,aAAA,CAAc,SAAA;oBAEtC,IAAI,UAAU,UAAA,EAAY;wBACxB,IAAI,MAAM,UAAU,UAAA,CAAW,KAAA;wBAE/B,IAAI,EAAE,QAAA,CAAS,MAAM;4BACnB,MAAM,GAAG,IAAI,MAAA,CAAA,CAAA,EAAU,IAAI,SAAA,EAAA;wBAAA;wBAG7B,KAAK,IAAA,CAAK;oBAAA;gBAAA;YAAA;YAKhB,OAAO,KAAK,MAAA,CAAO,CAAA,MAAO,cAAc;YAExC,OAAO,GAAA,CAAI,WAAW;QAAA;QAGxB,IAAI;QACJ,IAAI;YACF,SAAS,OAAO,IAAA;QAAA,EAAA,OACT,GAAP;YACA,IAAI,CAAC,EAAE,OAAA,CAAQ,UAAA,CAAW,6BAA6B;gBACrD,MAAM;YAAA;YAGR,OAAO;QAAA;QAGT,OAAO,OACJ,GAAA,CAAI,CAAA,cAAa;YAChB,OAAO,OAAO,GAAA,CAAI;QAAA,GAEnB,MAAA,CAAO;IAAA;IAaZ,aAAa,QAAA,EAAU,OAAA,EAAS;QAC9B,MAAM,eAAe,IAAA,CAAK,+BAAA;QAC1B,IAAI,gBAAgB,MAAM;YACxB,MAAM,IAAI,MAAM;QAAA;QAGlB,UAAU,EAAE,QAAA,CAAS,WAAW,CAAA,GAAI;YAClC,SAAS;QAAA;QAGX,IAAI,QAAQ,OAAA,EAAS;YACnB,aAAa,OAAA;QAAA;QAGf,KAAA,MAAW,SAAS,aAAc;YAChC,SAAS;QAAA;IAAA;AAAA;AAKf,OAAO,OAAA,GAAU;AACjB,OAAO,OAAA,CAAQ,YAAA,GAAe;AAC9B,OAAO,OAAA,CAAQ,OAAA,GAAU","ignoreList":[0]}},
    {"offset": {"line": 11043, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 11048, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/transaction.js"],"sourcesContent":["'use strict';\n\n/**\n * The transaction object is used to identify a running transaction.\n * It is created by calling `Sequelize.transaction()`.\n * To run a query under a transaction, you should pass the transaction in the options object.\n *\n * @class Transaction\n * @see {@link Sequelize.transaction}\n */\nclass Transaction {\n  /**\n   * Creates a new transaction instance\n   *\n   * @param {Sequelize} sequelize A configured sequelize Instance\n   * @param {object} options An object with options\n   * @param {string} [options.type] Sets the type of the transaction. Sqlite only\n   * @param {string} [options.isolationLevel] Sets the isolation level of the transaction.\n   * @param {string} [options.deferrable] Sets the constraints to be deferred or immediately checked. PostgreSQL only\n   * @param {boolean} [options.readOnly] Whether this transaction will only be used to read data. Used to determine whether sequelize is allowed to use a read replication server.\n   */\n  constructor(sequelize, options) {\n    this.sequelize = sequelize;\n    this.savepoints = [];\n    this._afterCommitHooks = [];\n\n    // get dialect specific transaction options\n    const generateTransactionId = this.sequelize.dialect.queryGenerator.generateTransactionId;\n\n    this.options = {\n      type: sequelize.options.transactionType,\n      isolationLevel: sequelize.options.isolationLevel,\n      readOnly: false,\n      ...options\n    };\n\n    this.parent = this.options.transaction;\n\n    if (this.parent) {\n      this.id = this.parent.id;\n      this.parent.savepoints.push(this);\n      this.name = `${this.id}-sp-${this.parent.savepoints.length}`;\n    } else {\n      this.id = this.name = generateTransactionId();\n    }\n\n    delete this.options.transaction;\n  }\n\n  /**\n   * Commit the transaction\n   *\n   * @returns {Promise}\n   */\n  async commit() {\n    if (this.finished) {\n      throw new Error(`Transaction cannot be committed because it has been finished with state: ${this.finished}`);\n    }\n\n    try {\n      await this.sequelize.getQueryInterface().commitTransaction(this, this.options);\n      this.cleanup();\n    } catch (e) {\n      console.warn(`Committing transaction ${this.id} failed with error ${JSON.stringify(e.message)}. We are killing its connection as it is now in an undetermined state.`);\n      await this.forceCleanup();\n\n      throw e;\n    } finally {\n      this.finished = 'commit';\n      for (const hook of this._afterCommitHooks) {\n        await hook.apply(this, [this]);\n      }\n    }\n  }\n\n  /**\n   * Rollback (abort) the transaction\n   *\n   * @returns {Promise}\n   */\n  async rollback() {\n    if (this.finished) {\n      throw new Error(`Transaction cannot be rolled back because it has been finished with state: ${this.finished}`);\n    }\n\n    if (!this.connection) {\n      throw new Error('Transaction cannot be rolled back because it never started');\n    }\n\n    try {\n      await this\n        .sequelize\n        .getQueryInterface()\n        .rollbackTransaction(this, this.options);\n\n      this.cleanup();\n    } catch (e) {\n      console.warn(`Rolling back transaction ${this.id} failed with error ${JSON.stringify(e.message)}. We are killing its connection as it is now in an undetermined state.`);\n      await this.forceCleanup();\n\n      throw e;\n    }\n  }\n\n  /**\n   * Called to acquire a connection to use and set the correct options on the connection.\n   * We should ensure all of the environment that's set up is cleaned up in `cleanup()` below.\n   *\n   * @param {boolean} useCLS Defaults to true: Use CLS (Continuation Local Storage) with Sequelize. With CLS, all queries within the transaction callback will automatically receive the transaction object.\n   * @returns {Promise}\n   */\n  async prepareEnvironment(useCLS = true) {\n    let connectionPromise;\n\n    if (this.parent) {\n      connectionPromise = Promise.resolve(this.parent.connection);\n    } else {\n      const acquireOptions = { uuid: this.id };\n      if (this.options.readOnly) {\n        acquireOptions.type = 'SELECT';\n      }\n      connectionPromise = this.sequelize.connectionManager.getConnection(acquireOptions);\n    }\n\n    let result;\n    const connection = await connectionPromise;\n    this.connection = connection;\n    this.connection.uuid = this.id;\n\n    try {\n      await this.begin();\n      result = await this.setDeferrable();\n    } catch (setupErr) {\n      try {\n        result = await this.rollback();\n      } finally {\n        throw setupErr; // eslint-disable-line no-unsafe-finally\n      }\n    }\n\n    // TODO (@ephys) [>=7.0.0]: move this inside of sequelize.transaction, remove parameter.\n    if (useCLS && this.sequelize.constructor._cls) {\n      this.sequelize.constructor._cls.set('transaction', this);\n    }\n\n    return result;\n  }\n\n  async setDeferrable() {\n    if (this.options.deferrable) {\n      return await this\n        .sequelize\n        .getQueryInterface()\n        .deferConstraints(this, this.options);\n    }\n  }\n\n  async begin() {\n    const queryInterface = this.sequelize.getQueryInterface();\n\n    if ( this.sequelize.dialect.supports.settingIsolationLevelDuringTransaction ) {\n      await queryInterface.startTransaction(this, this.options);\n      return queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options);\n    }\n\n    await queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options);\n\n    return queryInterface.startTransaction(this, this.options);\n  }\n\n  cleanup() {\n    // Don't release the connection if there's a parent transaction or\n    // if we've already cleaned up\n    if (this.parent || this.connection.uuid === undefined) {\n      return;\n    }\n\n    this._clearCls();\n    this.sequelize.connectionManager.releaseConnection(this.connection);\n    this.connection.uuid = undefined;\n  }\n\n  /**\n   * Kills the connection this transaction uses.\n   * Used as a last resort, for instance because COMMIT or ROLLBACK resulted in an error\n   * and the transaction is left in a broken state,\n   * and releasing the connection to the pool would be dangerous.\n   */\n  async forceCleanup() {\n    // Don't release the connection if there's a parent transaction or\n    // if we've already cleaned up\n    if (this.parent || this.connection.uuid === undefined) {\n      return;\n    }\n\n    this._clearCls();\n    await this.sequelize.connectionManager.destroyConnection(this.connection);\n    this.connection.uuid = undefined;\n  }\n\n  _clearCls() {\n    const cls = this.sequelize.constructor._cls;\n\n    if (cls) {\n      if (cls.get('transaction') === this) {\n        cls.set('transaction', null);\n      }\n    }\n  }\n\n  /**\n   * A hook that is run after a transaction is committed\n   *\n   * @param {Function} fn   A callback function that is called with the committed transaction\n   * @name afterCommit\n   * @memberof Sequelize.Transaction\n   */\n  afterCommit(fn) {\n    if (!fn || typeof fn !== 'function') {\n      throw new Error('\"fn\" must be a function');\n    }\n    this._afterCommitHooks.push(fn);\n  }\n\n  /**\n   * Types can be set per-transaction by passing `options.type` to `sequelize.transaction`.\n   * Default to `DEFERRED` but you can override the default type by passing `options.transactionType` in `new Sequelize`.\n   * Sqlite only.\n   *\n   * Pass in the desired level as the first argument:\n   *\n   * @example\n   * try {\n   *   await sequelize.transaction({ type: Sequelize.Transaction.TYPES.EXCLUSIVE }, transaction => {\n   *      // your transactions\n   *   });\n   *   // transaction has been committed. Do something after the commit if required.\n   * } catch(err) {\n   *   // do something with the err.\n   * }\n   *\n   * @property DEFERRED\n   * @property IMMEDIATE\n   * @property EXCLUSIVE\n   */\n  static get TYPES() {\n    return {\n      DEFERRED: 'DEFERRED',\n      IMMEDIATE: 'IMMEDIATE',\n      EXCLUSIVE: 'EXCLUSIVE'\n    };\n  }\n\n  /**\n   * Isolation levels can be set per-transaction by passing `options.isolationLevel` to `sequelize.transaction`.\n   * Sequelize uses the default isolation level of the database, you can override this by passing `options.isolationLevel` in Sequelize constructor options.\n   *\n   * Pass in the desired level as the first argument:\n   *\n   * @example\n   * try {\n   *   const result = await sequelize.transaction({isolationLevel: Sequelize.Transaction.ISOLATION_LEVELS.SERIALIZABLE}, transaction => {\n   *     // your transactions\n   *   });\n   *   // transaction has been committed. Do something after the commit if required.\n   * } catch(err) {\n   *   // do something with the err.\n   * }\n   *\n   * @property READ_UNCOMMITTED\n   * @property READ_COMMITTED\n   * @property REPEATABLE_READ\n   * @property SERIALIZABLE\n   */\n  static get ISOLATION_LEVELS() {\n    return {\n      READ_UNCOMMITTED: 'READ UNCOMMITTED',\n      READ_COMMITTED: 'READ COMMITTED',\n      REPEATABLE_READ: 'REPEATABLE READ',\n      SERIALIZABLE: 'SERIALIZABLE'\n    };\n  }\n\n\n  /**\n   * Possible options for row locking. Used in conjunction with `find` calls:\n   *\n   * @example\n   * // t1 is a transaction\n   * Model.findAll({\n   *   where: ...,\n   *   transaction: t1,\n   *   lock: t1.LOCK...\n   * });\n   *\n   * @example <caption>Postgres also supports specific locks while eager loading by using OF:</caption>\n   * UserModel.findAll({\n   *   where: ...,\n   *   include: [TaskModel, ...],\n   *   transaction: t1,\n   *   lock: {\n   *     level: t1.LOCK...,\n   *     of: UserModel\n   *   }\n   * });\n   *\n   * # UserModel will be locked but TaskModel won't!\n   *\n   * @example <caption>You can also skip locked rows:</caption>\n   * // t1 is a transaction\n   * Model.findAll({\n   *   where: ...,\n   *   transaction: t1,\n   *   lock: true,\n   *   skipLocked: true\n   * });\n   * # The query will now return any rows that aren't locked by another transaction\n   *\n   * @returns {object}\n   * @property UPDATE\n   * @property SHARE\n   * @property KEY_SHARE Postgres 9.3+ only\n   * @property NO_KEY_UPDATE Postgres 9.3+ only\n   */\n  static get LOCK() {\n    return {\n      UPDATE: 'UPDATE',\n      SHARE: 'SHARE',\n      KEY_SHARE: 'KEY SHARE',\n      NO_KEY_UPDATE: 'NO KEY UPDATE'\n    };\n  }\n\n  /**\n   * Please see {@link Transaction.LOCK}\n   */\n  get LOCK() {\n    return Transaction.LOCK;\n  }\n}\n\nmodule.exports = Transaction;\nmodule.exports.Transaction = Transaction;\nmodule.exports.default = Transaction;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 11229, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 11234, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/table-hints.js"],"sourcesContent":["'use strict';\n\n/**\n * An enum of table hints to be used in mssql for querying with table hints\n *\n * @property NOLOCK\n * @property READUNCOMMITTED\n * @property UPDLOCK\n * @property REPEATABLEREAD\n * @property SERIALIZABLE\n * @property READCOMMITTED\n * @property TABLOCK\n * @property TABLOCKX\n * @property PAGLOCK\n * @property ROWLOCK\n * @property NOWAIT\n * @property READPAST\n * @property XLOCK\n * @property SNAPSHOT\n * @property NOEXPAND\n */\nconst TableHints = module.exports = { // eslint-disable-line\n  NOLOCK: 'NOLOCK',\n  READUNCOMMITTED: 'READUNCOMMITTED',\n  UPDLOCK: 'UPDLOCK',\n  REPEATABLEREAD: 'REPEATABLEREAD',\n  SERIALIZABLE: 'SERIALIZABLE',\n  READCOMMITTED: 'READCOMMITTED',\n  TABLOCK: 'TABLOCK',\n  TABLOCKX: 'TABLOCKX',\n  PAGLOCK: 'PAGLOCK',\n  ROWLOCK: 'ROWLOCK',\n  NOWAIT: 'NOWAIT',\n  READPAST: 'READPAST',\n  XLOCK: 'XLOCK',\n  SNAPSHOT: 'SNAPSHOT',\n  NOEXPAND: 'NOEXPAND'\n};\n"],"names":[],"mappings":";AAqBA,MAAM,aAAa,OAAO,OAAA,GAAU;IAClC,QAAQ;IACR,iBAAiB;IACjB,SAAS;IACT,gBAAgB;IAChB,cAAc;IACd,eAAe;IACf,SAAS;IACT,UAAU;IACV,SAAS;IACT,SAAS;IACT,QAAQ;IACR,UAAU;IACV,OAAO;IACP,UAAU;IACV,UAAU;AAAA","ignoreList":[0]}},
    {"offset": {"line": 11252, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 11257, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/index-hints.js"],"sourcesContent":["'use strict';\n\n/**\n * An enum of index hints to be used in mysql for querying with index hints\n *\n * @property USE\n * @property FORCE\n * @property IGNORE\n */\nconst IndexHints = module.exports = { // eslint-disable-line\n  USE: 'USE',\n  FORCE: 'FORCE',\n  IGNORE: 'IGNORE'\n};\n"],"names":[],"mappings":";AASA,MAAM,aAAa,OAAO,OAAA,GAAU;IAClC,KAAK;IACL,OAAO;IACP,QAAQ;AAAA","ignoreList":[0]}},
    {"offset": {"line": 11263, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 11268, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/associations/index.js"],"sourcesContent":["'use strict';\n\nconst Association = require('./base');\n\nAssociation.BelongsTo = require('./belongs-to');\nAssociation.HasOne = require('./has-one');\nAssociation.HasMany = require('./has-many');\nAssociation.BelongsToMany = require('./belongs-to-many');\n\nmodule.exports = Association;\nmodule.exports.default = Association;\nmodule.exports.Association = Association;\n"],"names":[],"mappings":";AAEA,MAAM,cAAc,QAAQ;AAE5B,YAAY,SAAA,GAAY,QAAQ;AAChC,YAAY,MAAA,GAAS,QAAQ;AAC7B,YAAY,OAAA,GAAU,QAAQ;AAC9B,YAAY,aAAA,GAAgB,QAAQ;AAEpC,OAAO,OAAA,GAAU;AACjB,OAAO,OAAA,CAAQ,OAAA,GAAU;AACzB,OAAO,OAAA,CAAQ,WAAA,GAAc","ignoreList":[0]}},
    {"offset": {"line": 11277, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 11282, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/abstract/query-interface.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\n\nconst Utils = require('../../utils');\nconst DataTypes = require('../../data-types');\nconst Transaction = require('../../transaction');\nconst QueryTypes = require('../../query-types');\n\n/**\n * The interface that Sequelize uses to talk to all databases\n */\nclass QueryInterface {\n  constructor(sequelize, queryGenerator) {\n    this.sequelize = sequelize;\n    this.queryGenerator = queryGenerator;\n  }\n\n  /**\n   * Create a database\n   *\n   * @param {string} database  Database name to create\n   * @param {object} [options] Query options\n   * @param {string} [options.charset] Database default character set, MYSQL only\n   * @param {string} [options.collate] Database default collation\n   * @param {string} [options.encoding] Database default character set, PostgreSQL only\n   * @param {string} [options.ctype] Database character classification, PostgreSQL only\n   * @param {string} [options.template] The name of the template from which to create the new database, PostgreSQL only\n   *\n   * @returns {Promise}\n   */\n  async createDatabase(database, options) {\n    options = options || {};\n    const sql = this.queryGenerator.createDatabaseQuery(database, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Drop a database\n   *\n   * @param {string} database  Database name to drop\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async dropDatabase(database, options) {\n    options = options || {};\n    const sql = this.queryGenerator.dropDatabaseQuery(database);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Create a schema\n   *\n   * @param {string} schema    Schema name to create\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async createSchema(schema, options) {\n    options = options || {};\n    const sql = this.queryGenerator.createSchema(schema);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Drop a schema\n   *\n   * @param {string} schema    Schema name to drop\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async dropSchema(schema, options) {\n    options = options || {};\n    const sql = this.queryGenerator.dropSchema(schema);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Drop all schemas\n   *\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async dropAllSchemas(options) {\n    options = options || {};\n\n    if (!this.queryGenerator._dialect.supports.schemas) {\n      return this.sequelize.drop(options);\n    }\n    const schemas = await this.showAllSchemas(options);\n    return Promise.all(schemas.map(schemaName => this.dropSchema(schemaName, options)));\n  }\n\n  /**\n   * Show all schemas\n   *\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise<Array>}\n   */\n  async showAllSchemas(options) {\n    options = {\n      ...options,\n      raw: true,\n      type: this.sequelize.QueryTypes.SELECT\n    };\n\n    const showSchemasSql = this.queryGenerator.showSchemasQuery(options);\n\n    const schemaNames = await this.sequelize.query(showSchemasSql, options);\n\n    return _.flatten(schemaNames.map(value => value.schema_name ? value.schema_name : value));\n  }\n\n  /**\n   * Return database version\n   *\n   * @param {object}    [options]      Query options\n   * @param {QueryType} [options.type] Query type\n   *\n   * @returns {Promise}\n   * @private\n   */\n  async databaseVersion(options) {\n    return await this.sequelize.query(\n      this.queryGenerator.versionQuery(),\n      { ...options, type: QueryTypes.VERSION }\n    );\n  }\n\n  /**\n   * Create a table with given set of attributes\n   *\n   * ```js\n   * queryInterface.createTable(\n   *   'nameOfTheNewTable',\n   *   {\n   *     id: {\n   *       type: Sequelize.INTEGER,\n   *       primaryKey: true,\n   *       autoIncrement: true\n   *     },\n   *     createdAt: {\n   *       type: Sequelize.DATE\n   *     },\n   *     updatedAt: {\n   *       type: Sequelize.DATE\n   *     },\n   *     attr1: Sequelize.STRING,\n   *     attr2: Sequelize.INTEGER,\n   *     attr3: {\n   *       type: Sequelize.BOOLEAN,\n   *       defaultValue: false,\n   *       allowNull: false\n   *     },\n   *     //foreign key usage\n   *     attr4: {\n   *       type: Sequelize.INTEGER,\n   *       references: {\n   *         model: 'another_table_name',\n   *         key: 'id'\n   *       },\n   *       onUpdate: 'cascade',\n   *       onDelete: 'cascade'\n   *     }\n   *   },\n   *   {\n   *     engine: 'MYISAM',    // default: 'InnoDB'\n   *     charset: 'latin1',   // default: null\n   *     schema: 'public',    // default: public, PostgreSQL only.\n   *     comment: 'my table', // comment for table\n   *     collate: 'latin1_danish_ci' // collation, MYSQL only\n   *   }\n   * )\n   * ```\n   *\n   * @param {string} tableName  Name of table to create\n   * @param {object} attributes Object representing a list of table attributes to create\n   * @param {object} [options] create table and query options\n   * @param {Model}  [model] model class\n   *\n   * @returns {Promise}\n   */\n  async createTable(tableName, attributes, options, model) {\n    let sql = '';\n\n    options = { ...options };\n\n    if (options && options.uniqueKeys) {\n      _.forOwn(options.uniqueKeys, uniqueKey => {\n        if (uniqueKey.customIndex === undefined) {\n          uniqueKey.customIndex = true;\n        }\n      });\n    }\n\n    if (model) {\n      options.uniqueKeys = options.uniqueKeys || model.uniqueKeys;\n    }\n\n    attributes = _.mapValues(\n      attributes,\n      attribute => this.sequelize.normalizeAttribute(attribute)\n    );\n\n    // Postgres requires special SQL commands for ENUM/ENUM[]\n    await this.ensureEnums(tableName, attributes, options, model);\n\n    if (\n      !tableName.schema &&\n      (options.schema || !!model && model._schema)\n    ) {\n      tableName = this.queryGenerator.addSchema({\n        tableName,\n        _schema: !!model && model._schema || options.schema\n      });\n    }\n\n    attributes = this.queryGenerator.attributesToSQL(attributes, {\n      table: tableName,\n      context: 'createTable',\n      withoutForeignKeyConstraints: options.withoutForeignKeyConstraints\n    });\n    sql = this.queryGenerator.createTableQuery(tableName, attributes, options);\n\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Returns a promise that will resolve to true if the table exists in the database, false otherwise.\n   *\n   * @param {TableName} tableName - The name of the table\n   * @param {QueryOptions} options - Query options\n   * @returns {Promise<boolean>}\n   */\n  async tableExists(tableName, options) {\n    const sql = this.queryGenerator.tableExistsQuery(tableName);\n\n    const out = await this.sequelize.query(sql, {\n      ...options,\n      type: QueryTypes.SHOWTABLES\n    });\n\n    return out.length === 1;\n  }\n\n  /**\n   * Drop a table from database\n   *\n   * @param {string} tableName Table name to drop\n   * @param {object} options   Query options\n   *\n   * @returns {Promise}\n   */\n  async dropTable(tableName, options) {\n    // if we're forcing we should be cascading unless explicitly stated otherwise\n    options = { ...options };\n    options.cascade = options.cascade || options.force || false;\n\n    const sql = this.queryGenerator.dropTableQuery(tableName, options);\n\n    await this.sequelize.query(sql, options);\n  }\n\n  async _dropAllTables(tableNames, skip, options) {\n    for (const tableName of tableNames) {\n      // if tableName is not in the Array of tables names then don't drop it\n      if (!skip.includes(tableName.tableName || tableName)) {\n        await this.dropTable(tableName, { ...options, cascade: true } );\n      }\n    }\n  }\n\n  /**\n   * Drop all tables from database\n   *\n   * @param {object} [options] query options\n   * @param {Array}  [options.skip] List of table to skip\n   *\n   * @returns {Promise}\n   */\n  async dropAllTables(options) {\n    options = options || {};\n    const skip = options.skip || [];\n\n    const tableNames = await this.showAllTables(options);\n    const foreignKeys = await this.getForeignKeysForTables(tableNames, options);\n\n    for (const tableName of tableNames) {\n      let normalizedTableName = tableName;\n      if (_.isObject(tableName)) {\n        normalizedTableName = `${tableName.schema}.${tableName.tableName}`;\n      }\n\n      for (const foreignKey of foreignKeys[normalizedTableName]) {\n        await this.sequelize.query(this.queryGenerator.dropForeignKeyQuery(tableName, foreignKey));\n      }\n    }\n    await this._dropAllTables(tableNames, skip, options);\n  }\n\n  /**\n   * Rename a table\n   *\n   * @param {string} before    Current name of table\n   * @param {string} after     New name from table\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async renameTable(before, after, options) {\n    options = options || {};\n    const sql = this.queryGenerator.renameTableQuery(before, after);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Get all tables in current database\n   *\n   * @param {object}    [options] Query options\n   * @param {boolean}   [options.raw=true] Run query in raw mode\n   * @param {QueryType} [options.type=QueryType.SHOWTABLE] query type\n   *\n   * @returns {Promise<Array>}\n   * @private\n   */\n  async showAllTables(options) {\n    options = {\n      ...options,\n      raw: true,\n      type: QueryTypes.SHOWTABLES\n    };\n\n    const showTablesSql = this.queryGenerator.showTablesQuery(this.sequelize.config.database);\n    const tableNames = await this.sequelize.query(showTablesSql, options);\n    return _.flatten(tableNames);\n  }\n\n  /**\n   * Describe a table structure\n   *\n   * This method returns an array of hashes containing information about all attributes in the table.\n   *\n   * ```js\n   * {\n   *    name: {\n   *      type:         'VARCHAR(255)', // this will be 'CHARACTER VARYING' for pg!\n   *      allowNull:    true,\n   *      defaultValue: null\n   *    },\n   *    isBetaMember: {\n   *      type:         'TINYINT(1)', // this will be 'BOOLEAN' for pg!\n   *      allowNull:    false,\n   *      defaultValue: false\n   *    }\n   * }\n   * ```\n   *\n   * @param {string} tableName table name\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise<object>}\n   */\n  async describeTable(tableName, options) {\n    let schema = null;\n    let schemaDelimiter = null;\n\n    if (typeof options === 'string') {\n      schema = options;\n    } else if (typeof options === 'object' && options !== null) {\n      schema = options.schema || null;\n      schemaDelimiter = options.schemaDelimiter || null;\n    }\n\n    if (typeof tableName === 'object' && tableName !== null) {\n      schema = tableName.schema;\n      tableName = tableName.tableName;\n    }\n\n    const sql = this.queryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);\n    options = { ...options, type: QueryTypes.DESCRIBE };\n\n    try {\n      const data = await this.sequelize.query(sql, options);\n      /*\n       * If no data is returned from the query, then the table name may be wrong.\n       * Query generators that use information_schema for retrieving table info will just return an empty result set,\n       * it will not throw an error like built-ins do (e.g. DESCRIBE on MySql).\n       */\n      if (_.isEmpty(data)) {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      return data;\n    } catch (e) {\n      if (e.original && e.original.code === 'ER_NO_SUCH_TABLE') {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      throw e;\n    }\n  }\n\n  /**\n   * Add a new column to a table\n   *\n   * ```js\n   * queryInterface.addColumn('tableA', 'columnC', Sequelize.STRING, {\n   *    after: 'columnB' // after option is only supported by MySQL\n   * });\n   * ```\n   *\n   * @param {string} table     Table to add column to\n   * @param {string} key       Column name\n   * @param {object} attribute Attribute definition\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async addColumn(table, key, attribute, options) {\n    if (!table || !key || !attribute) {\n      throw new Error('addColumn takes at least 3 arguments (table, attribute name, attribute definition)');\n    }\n\n    options = options || {};\n    attribute = this.sequelize.normalizeAttribute(attribute);\n    return await this.sequelize.query(this.queryGenerator.addColumnQuery(table, key, attribute), options);\n  }\n\n  /**\n   * Remove a column from a table\n   *\n   * @param {string} tableName      Table to remove column from\n   * @param {string} attributeName  Column name to remove\n   * @param {object} [options]      Query options\n   */\n  async removeColumn(tableName, attributeName, options) {\n    return this.sequelize.query(this.queryGenerator.removeColumnQuery(tableName, attributeName), options);\n  }\n\n  normalizeAttribute(dataTypeOrOptions) {\n    let attribute;\n    if (Object.values(DataTypes).includes(dataTypeOrOptions)) {\n      attribute = { type: dataTypeOrOptions, allowNull: true };\n    } else {\n      attribute = dataTypeOrOptions;\n    }\n\n    return this.sequelize.normalizeAttribute(attribute);\n  }\n\n  /**\n   * Split a list of identifiers by \".\" and quote each part\n   *\n   * @param {string} identifier\n   * @param {boolean} force\n   *\n   * @returns {string}\n   */\n  quoteIdentifier(identifier, force) {\n    return this.queryGenerator.quoteIdentifier(identifier, force);\n  }\n\n  /**\n   * Split a list of identifiers by \".\" and quote each part.\n   *\n   * @param {string} identifiers \n   * \n   * @returns {string}\n   */\n  quoteIdentifiers(identifiers) {\n    return this.queryGenerator.quoteIdentifiers(identifiers);\n  }\n\n  /**\n   * Change a column definition\n   *\n   * @param {string} tableName          Table name to change from\n   * @param {string} attributeName      Column name\n   * @param {object} dataTypeOrOptions  Attribute definition for new column\n   * @param {object} [options]          Query options\n   */\n  async changeColumn(tableName, attributeName, dataTypeOrOptions, options) {\n    options = options || {};\n\n    const query = this.queryGenerator.attributesToSQL({\n      [attributeName]: this.normalizeAttribute(dataTypeOrOptions)\n    }, {\n      context: 'changeColumn',\n      table: tableName\n    });\n    const sql = this.queryGenerator.changeColumnQuery(tableName, query);\n\n    return this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Rejects if the table doesn't have the specified column, otherwise returns the column description.\n   *\n   * @param {string} tableName\n   * @param {string} columnName\n   * @param {object} options\n   * @private\n   */\n  async assertTableHasColumn(tableName, columnName, options) {\n    const description = await this.describeTable(tableName, options);\n    if (description[columnName]) {\n      return description;\n    }\n    throw new Error(`Table ${tableName} doesn't have the column ${columnName}`);\n  }\n\n  /**\n   * Rename a column\n   *\n   * @param {string} tableName        Table name whose column to rename\n   * @param {string} attrNameBefore   Current column name\n   * @param {string} attrNameAfter    New column name\n   * @param {object} [options]        Query option\n   *\n   * @returns {Promise}\n   */\n  async renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\n    options = options || {};\n    const data = (await this.assertTableHasColumn(tableName, attrNameBefore, options))[attrNameBefore];\n\n    const _options = {};\n\n    _options[attrNameAfter] = {\n      attribute: attrNameAfter,\n      type: data.type,\n      allowNull: data.allowNull,\n      defaultValue: data.defaultValue\n    };\n\n    // fix: a not-null column cannot have null as default value\n    if (data.defaultValue === null && !data.allowNull) {\n      delete _options[attrNameAfter].defaultValue;\n    }\n\n    const sql = this.queryGenerator.renameColumnQuery(\n      tableName,\n      attrNameBefore,\n      this.queryGenerator.attributesToSQL(_options)\n    );\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Add an index to a column\n   *\n   * @param {string|object}  tableName Table name to add index on, can be a object with schema\n   * @param {Array}   [attributes]     Use options.fields instead, List of attributes to add index on\n   * @param {object}  options          indexes options\n   * @param {Array}   options.fields   List of attributes to add index on\n   * @param {boolean} [options.concurrently] Pass CONCURRENT so other operations run while the index is created\n   * @param {boolean} [options.unique] Create a unique index\n   * @param {string}  [options.using]  Useful for GIN indexes\n   * @param {string}  [options.operator] Index operator\n   * @param {string}  [options.type]   Type of index, available options are UNIQUE|FULLTEXT|SPATIAL\n   * @param {string}  [options.name]   Name of the index. Default is <table>_<attr1>_<attr2>\n   * @param {object}  [options.where]  Where condition on index, for partial indexes\n   * @param {string}  [rawTablename]   table name, this is just for backward compatibiity\n   *\n   * @returns {Promise}\n   */\n  async addIndex(tableName, attributes, options, rawTablename) {\n    // Support for passing tableName, attributes, options or tableName, options (with a fields param which is the attributes)\n    if (!Array.isArray(attributes)) {\n      rawTablename = options;\n      options = attributes;\n      attributes = options.fields;\n    }\n\n    if (!rawTablename) {\n      // Map for backwards compat\n      rawTablename = tableName;\n    }\n\n    options = Utils.cloneDeep(options);\n    options.fields = attributes;\n    const sql = this.queryGenerator.addIndexQuery(tableName, options, rawTablename);\n    return await this.sequelize.query(sql, { ...options, supportsSearchPath: false });\n  }\n\n  /**\n   * Show indexes on a table\n   *\n   * @param {string} tableName table name\n   * @param {object} [options]   Query options\n   *\n   * @returns {Promise<Array>}\n   * @private\n   */\n  async showIndex(tableName, options) {\n    const sql = this.queryGenerator.showIndexesQuery(tableName, options);\n    return await this.sequelize.query(sql, { ...options, type: QueryTypes.SHOWINDEXES });\n  }\n\n\n  /**\n   * Returns all foreign key constraints of requested tables\n   *\n   * @param {string[]} tableNames table names\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async getForeignKeysForTables(tableNames, options) {\n    if (tableNames.length === 0) {\n      return {};\n    }\n\n    options = { ...options, type: QueryTypes.FOREIGNKEYS };\n\n    const results = await Promise.all(tableNames.map(tableName =>\n      this.sequelize.query(this.queryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.database), options)));\n\n    const result = {};\n\n    tableNames.forEach((tableName, i) => {\n      if (_.isObject(tableName)) {\n        tableName = `${tableName.schema}.${tableName.tableName}`;\n      }\n\n      result[tableName] = Array.isArray(results[i])\n        ? results[i].map(r => r.constraint_name)\n        : [results[i] && results[i].constraint_name];\n\n      result[tableName] = result[tableName].filter(_.identity);\n    });\n\n    return result;\n  }\n\n  /**\n   * Get foreign key references details for the table\n   *\n   * Those details contains constraintSchema, constraintName, constraintCatalog\n   * tableCatalog, tableSchema, tableName, columnName,\n   * referencedTableCatalog, referencedTableCatalog, referencedTableSchema, referencedTableName, referencedColumnName.\n   * Remind: constraint informations won't return if it's sqlite.\n   *\n   * @param {string} tableName table name\n   * @param {object} [options]  Query options\n   */\n  async getForeignKeyReferencesForTable(tableName, options) {\n    const queryOptions = {\n      ...options,\n      type: QueryTypes.FOREIGNKEYS\n    };\n    const query = this.queryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.database);\n    return this.sequelize.query(query, queryOptions);\n  }\n\n  /**\n   * Remove an already existing index from a table\n   *\n   * @param {string} tableName                    Table name to drop index from\n   * @param {string|string[]} indexNameOrAttributes  Index name or list of attributes that in the index\n   * @param {object} [options]                    Query options\n   * @param {boolean} [options.concurrently]      Pass CONCURRENTLY so other operations run while the index is created\n   *\n   * @returns {Promise}\n   */\n  async removeIndex(tableName, indexNameOrAttributes, options) {\n    options = options || {};\n    const sql = this.queryGenerator.removeIndexQuery(tableName, indexNameOrAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Add a constraint to a table\n   *\n   * Available constraints:\n   * - UNIQUE\n   * - DEFAULT (MSSQL only)\n   * - CHECK (MySQL - Ignored by the database engine )\n   * - FOREIGN KEY\n   * - PRIMARY KEY\n   *\n   * @example <caption>UNIQUE</caption>\n   * queryInterface.addConstraint('Users', {\n   *   fields: ['email'],\n   *   type: 'unique',\n   *   name: 'custom_unique_constraint_name'\n   * });\n   *\n   * @example <caption>CHECK</caption>\n   * queryInterface.addConstraint('Users', {\n   *   fields: ['roles'],\n   *   type: 'check',\n   *   where: {\n   *      roles: ['user', 'admin', 'moderator', 'guest']\n   *   }\n   * });\n   *\n   * @example <caption>Default - MSSQL only</caption>\n   * queryInterface.addConstraint('Users', {\n   *    fields: ['roles'],\n   *    type: 'default',\n   *    defaultValue: 'guest'\n   * });\n   *\n   * @example <caption>Primary Key</caption>\n   * queryInterface.addConstraint('Users', {\n   *    fields: ['username'],\n   *    type: 'primary key',\n   *    name: 'custom_primary_constraint_name'\n   * });\n   *\n   * @example <caption>Foreign Key</caption>\n   * queryInterface.addConstraint('Posts', {\n   *   fields: ['username'],\n   *   type: 'foreign key',\n   *   name: 'custom_fkey_constraint_name',\n   *   references: { //Required field\n   *     table: 'target_table_name',\n   *     field: 'target_column_name'\n   *   },\n   *   onDelete: 'cascade',\n   *   onUpdate: 'cascade'\n   * });\n   *\n   * @example <caption>Composite Foreign Key</caption>\n   * queryInterface.addConstraint('TableName', {\n   *   fields: ['source_column_name', 'other_source_column_name'],\n   *   type: 'foreign key',\n   *   name: 'custom_fkey_constraint_name',\n   *   references: { //Required field\n   *     table: 'target_table_name',\n   *     fields: ['target_column_name', 'other_target_column_name']\n   *   },\n   *   onDelete: 'cascade',\n   *   onUpdate: 'cascade'\n   * });\n   *\n   * @param {string} tableName                   Table name where you want to add a constraint\n   * @param {object} options                     An object to define the constraint name, type etc\n   * @param {string} options.type                Type of constraint. One of the values in available constraints(case insensitive)\n   * @param {Array}  options.fields              Array of column names to apply the constraint over\n   * @param {string} [options.name]              Name of the constraint. If not specified, sequelize automatically creates a named constraint based on constraint type, table & column names\n   * @param {string} [options.defaultValue]      The value for the default constraint\n   * @param {object} [options.where]             Where clause/expression for the CHECK constraint\n   * @param {object} [options.references]        Object specifying target table, column name to create foreign key constraint\n   * @param {string} [options.references.table]  Target table name\n   * @param {string} [options.references.field]  Target column name\n   * @param {string} [options.references.fields] Target column names for a composite primary key. Must match the order of fields in options.fields.\n   * @param {string} [options.deferrable]        Sets the constraint to be deferred or immediately checked. See Sequelize.Deferrable. PostgreSQL Only\n   *\n   * @returns {Promise}\n   */\n  async addConstraint(tableName, options) {\n    if (!options.fields) {\n      throw new Error('Fields must be specified through options.fields');\n    }\n\n    if (!options.type) {\n      throw new Error('Constraint type must be specified through options.type');\n    }\n\n    options = Utils.cloneDeep(options);\n\n    const sql = this.queryGenerator.addConstraintQuery(tableName, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  async showConstraint(tableName, constraintName, options) {\n    const sql = this.queryGenerator.showConstraintsQuery(tableName, constraintName);\n    return await this.sequelize.query(sql, { ...options, type: QueryTypes.SHOWCONSTRAINTS });\n  }\n\n  /**\n   * Remove a constraint from a table\n   *\n   * @param {string} tableName       Table name to drop constraint from\n   * @param {string} constraintName  Constraint name\n   * @param {object} options         Query options\n   */\n  async removeConstraint(tableName, constraintName, options) {\n    return this.sequelize.query(this.queryGenerator.removeConstraintQuery(tableName, constraintName), options);\n  }\n\n  async insert(instance, tableName, values, options) {\n    options = Utils.cloneDeep(options);\n    options.hasTrigger = instance && instance.constructor.options.hasTrigger;\n    const sql = this.queryGenerator.insertQuery(tableName, values, instance && instance.constructor.rawAttributes, options);\n\n    options.type = QueryTypes.INSERT;\n    options.instance = instance;\n\n    const results = await this.sequelize.query(sql, options);\n    if (instance) results[0].isNewRecord = false;\n\n    return results;\n  }\n\n  /**\n   * Upsert\n   *\n   * @param {string} tableName    table to upsert on\n   * @param {object} insertValues values to be inserted, mapped to field name\n   * @param {object} updateValues values to be updated, mapped to field name\n   * @param {object} where        where conditions, which can be used for UPDATE part when INSERT fails\n   * @param {object} options      query options\n   *\n   * @returns {Promise<boolean,?number>} Resolves an array with <created, primaryKey>\n   */\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = { ...options };\n\n    const model = options.model;\n\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n    options.upsertKeys = options.conflictFields || [];\n\n    if (options.upsertKeys.length === 0) {\n      const primaryKeys = Object.values(model.primaryKeys).map(item => item.field);\n      const uniqueKeys = Object.values(model.uniqueKeys).filter(c => c.fields.length > 0).map(c => c.fields);\n      const indexKeys = Object.values(model._indexes).filter(c => c.unique && c.fields.length > 0).map(c => c.fields);\n      // For fields in updateValues, try to find a constraint or unique index\n      // that includes given field. Only first matching upsert key is used.\n      for (const field of options.updateOnDuplicate) {\n        const uniqueKey = uniqueKeys.find(fields => fields.includes(field));\n        if (uniqueKey) {\n          options.upsertKeys = uniqueKey;\n          break;\n        }\n\n        const indexKey = indexKeys.find(fields => fields.includes(field));\n        if (indexKey) {\n          options.upsertKeys = indexKey;\n          break;\n        }\n      }\n\n      // Always use PK, if no constraint available OR update data contains PK\n      if (\n        options.upsertKeys.length === 0\n        || _.intersection(options.updateOnDuplicate, primaryKeys).length\n      ) {\n        options.upsertKeys = primaryKeys;\n      }\n\n      options.upsertKeys = _.uniq(options.upsertKeys);\n    }\n\n    const sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Insert multiple records into a table\n   *\n   * @example\n   * queryInterface.bulkInsert('roles', [{\n   *    label: 'user',\n   *    createdAt: new Date(),\n   *    updatedAt: new Date()\n   *  }, {\n   *    label: 'admin',\n   *    createdAt: new Date(),\n   *    updatedAt: new Date()\n   *  }]);\n   *\n   * @param {string} tableName   Table name to insert record to\n   * @param {Array}  records     List of records to insert\n   * @param {object} options     Various options, please see Model.bulkCreate options\n   * @param {object} attributes  Various attributes mapped by field name\n   *\n   * @returns {Promise}\n   */\n  async bulkInsert(tableName, records, options, attributes) {\n    options = { ...options };\n    options.type = QueryTypes.INSERT;\n\n    const results = await this.sequelize.query(\n      this.queryGenerator.bulkInsertQuery(tableName, records, options, attributes),\n      options\n    );\n\n    return results[0];\n  }\n\n  async update(instance, tableName, values, identifier, options) {\n    options = { ...options };\n    options.hasTrigger = instance && instance.constructor.options.hasTrigger;\n\n    const sql = this.queryGenerator.updateQuery(tableName, values, identifier, options, instance.constructor.rawAttributes);\n\n    options.type = QueryTypes.UPDATE;\n\n    options.instance = instance;\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Update multiple records of a table\n   *\n   * @example\n   * queryInterface.bulkUpdate('roles', {\n   *     label: 'admin',\n   *   }, {\n   *     userType: 3,\n   *   },\n   * );\n   *\n   * @param {string} tableName     Table name to update\n   * @param {object} values        Values to be inserted, mapped to field name\n   * @param {object} identifier    A hash with conditions OR an ID as integer OR a string with conditions\n   * @param {object} [options]     Various options, please see Model.bulkCreate options\n   * @param {object} [attributes]  Attributes on return objects if supported by SQL dialect\n   *\n   * @returns {Promise}\n   */\n  async bulkUpdate(tableName, values, identifier, options, attributes) {\n    options = Utils.cloneDeep(options);\n    if (typeof identifier === 'object') identifier = Utils.cloneDeep(identifier);\n\n    const sql = this.queryGenerator.updateQuery(tableName, values, identifier, options, attributes);\n    const table = _.isObject(tableName) ? tableName : { tableName };\n    const model = options.model ? options.model : _.find(this.sequelize.modelManager.models, { tableName: table.tableName });\n\n    options.type = QueryTypes.BULKUPDATE;\n    options.model = model;\n    return await this.sequelize.query(sql, options);\n  }\n\n  async delete(instance, tableName, identifier, options) {\n    const cascades = [];\n    const sql = this.queryGenerator.deleteQuery(tableName, identifier, {}, instance.constructor);\n\n    options = { ...options };\n\n    // Check for a restrict field\n    if (!!instance.constructor && !!instance.constructor.associations) {\n      const keys = Object.keys(instance.constructor.associations);\n      const length = keys.length;\n      let association;\n\n      for (let i = 0; i < length; i++) {\n        association = instance.constructor.associations[keys[i]];\n        if (association.options && association.options.onDelete &&\n          association.options.onDelete.toLowerCase() === 'cascade' &&\n          association.options.useHooks === true) {\n          cascades.push(association.accessors.get);\n        }\n      }\n    }\n\n    for (const cascade of cascades) {\n      let instances = await instance[cascade](options);\n      // Check for hasOne relationship with non-existing associate (\"has zero\")\n      if (!instances) continue;\n      if (!Array.isArray(instances)) instances = [instances];\n      for (const _instance of instances) await _instance.destroy(options);\n    }\n    options.instance = instance;\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Delete multiple records from a table\n   *\n   * @param {string}  tableName            table name from where to delete records\n   * @param {object}  where                where conditions to find records to delete\n   * @param {object}  [options]            options\n   * @param {boolean} [options.truncate]   Use truncate table command\n   * @param {boolean} [options.cascade=false]         Only used in conjunction with TRUNCATE. Truncates  all tables that have foreign-key references to the named table, or to any tables added to the group due to CASCADE.\n   * @param {boolean} [options.restartIdentity=false] Only used in conjunction with TRUNCATE. Automatically restart sequences owned by columns of the truncated table.\n   * @param {Model}   [model]              Model\n   *\n   * @returns {Promise}\n   */\n  async bulkDelete(tableName, where, options, model) {\n    options = Utils.cloneDeep(options);\n    options = _.defaults(options, { limit: null });\n\n    if (options.truncate === true) {\n      return this.sequelize.query(\n        this.queryGenerator.truncateTableQuery(tableName, options),\n        options\n      );\n    }\n\n    if (typeof identifier === 'object') where = Utils.cloneDeep(where);\n\n    return await this.sequelize.query(\n      this.queryGenerator.deleteQuery(tableName, where, options, model),\n      options\n    );\n  }\n\n  async select(model, tableName, optionsArg) {\n    const options = { ...optionsArg, type: QueryTypes.SELECT, model };\n\n    return await this.sequelize.query(\n      this.queryGenerator.selectQuery(tableName, options, model),\n      options\n    );\n  }\n\n  async increment(model, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options) {\n    options = Utils.cloneDeep(options);\n\n    const sql = this.queryGenerator.arithmeticQuery('+', tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options);\n\n    options.type = QueryTypes.UPDATE;\n    options.model = model;\n\n    return await this.sequelize.query(sql, options);\n  }\n\n  async decrement(model, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options) {\n    options = Utils.cloneDeep(options);\n\n    const sql = this.queryGenerator.arithmeticQuery('-', tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options);\n\n    options.type = QueryTypes.UPDATE;\n    options.model = model;\n\n    return await this.sequelize.query(sql, options);\n  }\n\n  async rawSelect(tableName, options, attributeSelector, Model) {\n    options = Utils.cloneDeep(options);\n    options = _.defaults(options, {\n      raw: true,\n      plain: true,\n      type: QueryTypes.SELECT\n    });\n\n    const sql = this.queryGenerator.selectQuery(tableName, options, Model);\n\n    if (attributeSelector === undefined) {\n      throw new Error('Please pass an attribute selector!');\n    }\n\n    const data = await this.sequelize.query(sql, options);\n    if (!options.plain) {\n      return data;\n    }\n\n    const result = data ? data[attributeSelector] : null;\n\n    if (!options || !options.dataType) {\n      return result;\n    }\n\n    const dataType = options.dataType;\n\n    if (dataType instanceof DataTypes.DECIMAL || dataType instanceof DataTypes.FLOAT) {\n      if (result !== null) {\n        return parseFloat(result);\n      }\n    }\n    if (dataType instanceof DataTypes.INTEGER || dataType instanceof DataTypes.BIGINT) {\n      if (result !== null) {\n        return parseInt(result, 10);\n      }\n    }\n    if (dataType instanceof DataTypes.DATE) {\n      if (result !== null && !(result instanceof Date)) {\n        return new Date(result);\n      }\n    }\n    return result;\n  }\n\n  async createTrigger(\n    tableName,\n    triggerName,\n    timingType,\n    fireOnArray,\n    functionName,\n    functionParams,\n    optionsArray,\n    options\n  ) {\n    const sql = this.queryGenerator.createTrigger(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray);\n    options = options || {};\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  async dropTrigger(tableName, triggerName, options) {\n    const sql = this.queryGenerator.dropTrigger(tableName, triggerName);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  async renameTrigger(tableName, oldTriggerName, newTriggerName, options) {\n    const sql = this.queryGenerator.renameTrigger(tableName, oldTriggerName, newTriggerName);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  /**\n   * Create an SQL function\n   *\n   * @example\n   * queryInterface.createFunction(\n   *   'someFunction',\n   *   [\n   *     {type: 'integer', name: 'param', direction: 'IN'}\n   *   ],\n   *   'integer',\n   *   'plpgsql',\n   *   'RETURN param + 1;',\n   *   [\n   *     'IMMUTABLE',\n   *     'LEAKPROOF'\n   *   ],\n   *   {\n   *    variables:\n   *      [\n   *        {type: 'integer', name: 'myVar', default: 100}\n   *      ],\n   *      force: true\n   *   };\n   * );\n   *\n   * @param {string}  functionName  Name of SQL function to create\n   * @param {Array}   params        List of parameters declared for SQL function\n   * @param {string}  returnType    SQL type of function returned value\n   * @param {string}  language      The name of the language that the function is implemented in\n   * @param {string}  body          Source code of function\n   * @param {Array}   optionsArray  Extra-options for creation\n   * @param {object}  [options]     query options\n   * @param {boolean} options.force If force is true, any existing functions with the same parameters will be replaced. For postgres, this means using `CREATE OR REPLACE FUNCTION` instead of `CREATE FUNCTION`. Default is false\n   * @param {Array<object>}   options.variables List of declared variables. Each variable should be an object with string fields `type` and `name`, and optionally having a `default` field as well.\n   *\n   * @returns {Promise}\n   */\n  async createFunction(functionName, params, returnType, language, body, optionsArray, options) {\n    const sql = this.queryGenerator.createFunction(functionName, params, returnType, language, body, optionsArray, options);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  /**\n   * Drop an SQL function\n   *\n   * @example\n   * queryInterface.dropFunction(\n   *   'someFunction',\n   *   [\n   *     {type: 'varchar', name: 'param1', direction: 'IN'},\n   *     {type: 'integer', name: 'param2', direction: 'INOUT'}\n   *   ]\n   * );\n   *\n   * @param {string} functionName Name of SQL function to drop\n   * @param {Array}  params       List of parameters declared for SQL function\n   * @param {object} [options]    query options\n   *\n   * @returns {Promise}\n   */\n  async dropFunction(functionName, params, options) {\n    const sql = this.queryGenerator.dropFunction(functionName, params);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  /**\n   * Rename an SQL function\n   *\n   * @example\n   * queryInterface.renameFunction(\n   *   'fooFunction',\n   *   [\n   *     {type: 'varchar', name: 'param1', direction: 'IN'},\n   *     {type: 'integer', name: 'param2', direction: 'INOUT'}\n   *   ],\n   *   'barFunction'\n   * );\n   *\n   * @param {string} oldFunctionName  Current name of function\n   * @param {Array}  params           List of parameters declared for SQL function\n   * @param {string} newFunctionName  New name of function\n   * @param {object} [options]        query options\n   *\n   * @returns {Promise}\n   */\n  async renameFunction(oldFunctionName, params, newFunctionName, options) {\n    const sql = this.queryGenerator.renameFunction(oldFunctionName, params, newFunctionName);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  // Helper methods useful for querying\n\n  /**\n   * @private\n   */\n  ensureEnums() {\n    // noop by default\n  }\n\n  async setIsolationLevel(transaction, value, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to set isolation level for a transaction without transaction object!');\n    }\n\n    if (transaction.parent || !value) {\n      // Not possible to set a separate isolation level for savepoints\n      return;\n    }\n\n    options = { ...options, transaction: transaction.parent || transaction };\n\n    const sql = this.queryGenerator.setIsolationLevelQuery(value, {\n      parent: transaction.parent\n    });\n\n    if (!sql) return;\n\n    return await this.sequelize.query(sql, options);\n  }\n\n  async startTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to start a transaction without transaction object!');\n    }\n\n    options = { ...options, transaction: transaction.parent || transaction };\n    options.transaction.name = transaction.parent ? transaction.name : undefined;\n    const sql = this.queryGenerator.startTransactionQuery(transaction);\n\n    return await this.sequelize.query(sql, options);\n  }\n\n  async deferConstraints(transaction, options) {\n    options = { ...options, transaction: transaction.parent || transaction };\n\n    const sql = this.queryGenerator.deferConstraintsQuery(options);\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  async commitTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to commit a transaction without transaction object!');\n    }\n    if (transaction.parent) {\n      // Savepoints cannot be committed\n      return;\n    }\n\n    options = {\n      ...options,\n      transaction: transaction.parent || transaction,\n      supportsSearchPath: false,\n      completesTransaction: true\n    };\n\n    const sql = this.queryGenerator.commitTransactionQuery(transaction);\n    const promise = this.sequelize.query(sql, options);\n\n    transaction.finished = 'commit';\n\n    return await promise;\n  }\n\n  async rollbackTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to rollback a transaction without transaction object!');\n    }\n\n    options = {\n      ...options,\n      transaction: transaction.parent || transaction,\n      supportsSearchPath: false,\n      completesTransaction: true\n    };\n    options.transaction.name = transaction.parent ? transaction.name : undefined;\n    const sql = this.queryGenerator.rollbackTransactionQuery(transaction);\n    const promise = this.sequelize.query(sql, options);\n\n    transaction.finished = 'rollback';\n\n    return await promise;\n  }\n}\n\nexports.QueryInterface = QueryInterface;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 11879, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 11884, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/sqlite/sqlite-utils.ts"],"sourcesContent":["import type { Sequelize } from '../../sequelize.js';\nimport type { QueryOptions } from '../abstract/query-interface.js';\n\nexport async function withSqliteForeignKeysOff<T>(sequelize: Sequelize, options: QueryOptions, cb: () => Promise<T>): Promise<T> {\n  try {\n    await sequelize.query('PRAGMA foreign_keys = OFF', options);\n\n    return await cb();\n  } finally {\n    await sequelize.query('PRAGMA foreign_keys = ON', options);\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,0BAAA,IAAA;AAAA;AAGA,eAAA,yBAAkD,SAAA,EAAsB,OAAA,EAAuB,EAAA,EAAkC;IAC/H,IAAI;QACF,MAAM,UAAU,KAAA,CAAM,6BAA6B;QAEnD,OAAO,MAAM;IAAA,SACb;QACA,MAAM,UAAU,KAAA,CAAM,4BAA4B;IAAA;AAAA","ignoreList":[0]}},
    {"offset": {"line": 11906, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 11911, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/utils/sql.ts"],"sourcesContent":["import isPlainObject from 'lodash/isPlainObject';\nimport type { AbstractDialect } from '../dialects/abstract/index.js';\nimport { escape as escapeSqlValue } from '../sql-string';\n\ntype BindOrReplacements = { [key: string]: unknown } | unknown[];\n\n/**\n * Inlines replacements in places where they would be valid SQL values.\n *\n * @param sqlString The SQL that contains the replacements\n * @param dialect The dialect of the SQL\n * @param replacements if provided, this method will replace ':named' replacements & positional replacements (?)\n *\n * @returns The SQL with replacements rewritten in their dialect-specific syntax.\n */\nexport function injectReplacements(\n  sqlString: string,\n  dialect: AbstractDialect,\n  replacements: BindOrReplacements\n): string {\n  if (replacements == null) {\n    return sqlString;\n  }\n\n  if (!Array.isArray(replacements) && !isPlainObject(replacements)) {\n    throw new TypeError(`\"replacements\" must be an array or a plain object, but received ${JSON.stringify(replacements)} instead.`);\n  }\n\n  const isNamedReplacements = isPlainObject(replacements);\n  const isPositionalReplacements = Array.isArray(replacements);\n  let lastConsumedPositionalReplacementIndex = -1;\n\n  let output = '';\n\n  let currentDollarStringTagName = null;\n  let isString = false;\n  let isColumn = false;\n  let previousSliceEnd = 0;\n  let isSingleLineComment = false;\n  let isCommentBlock = false;\n  let stringIsBackslashEscapable = false;\n\n  for (let i = 0; i < sqlString.length; i++) {\n    const char = sqlString[i];\n\n    if (isColumn) {\n      if (char === dialect.TICK_CHAR_RIGHT) {\n        isColumn = false;\n      }\n\n      continue;\n    }\n\n    if (isString) {\n      if (\n        char === '\\'' &&\n        (!stringIsBackslashEscapable || !isBackslashEscaped(sqlString, i - 1))\n      ) {\n        isString = false;\n        stringIsBackslashEscapable = false;\n      }\n\n      continue;\n    }\n\n    if (currentDollarStringTagName !== null) {\n      if (char !== '$') {\n        continue;\n      }\n\n      const remainingString = sqlString.slice(i, sqlString.length);\n\n      const dollarStringStartMatch = remainingString.match(/^\\$(?<name>[a-z_][0-9a-z_]*)?(\\$)/i);\n      const tagName = dollarStringStartMatch?.groups?.name || '';\n      if (currentDollarStringTagName === tagName) {\n        currentDollarStringTagName = null;\n      }\n\n      continue;\n    }\n\n    if (isSingleLineComment) {\n      if (char === '\\n') {\n        isSingleLineComment = false;\n      }\n\n      continue;\n    }\n\n    if (isCommentBlock) {\n      if (char === '*' && sqlString[i + 1] === '/') {\n        isCommentBlock = false;\n      }\n\n      continue;\n    }\n\n    if (char === dialect.TICK_CHAR_LEFT) {\n      isColumn = true;\n      continue;\n    }\n\n    if (char === '\\'') {\n      isString = true;\n\n      // The following query is supported in almost all dialects,\n      //  SELECT E'test';\n      // but postgres interprets it as an E-prefixed string, while other dialects interpret it as\n      //  SELECT E 'test';\n      // which selects the type E and aliases it to 'test'.\n\n      stringIsBackslashEscapable =\n        // all ''-style strings in this dialect can be backslash escaped\n        dialect.canBackslashEscape() ||\n        // checking if this is a postgres-style E-prefixed string, which also supports backslash escaping\n        dialect.supports.escapeStringConstants &&\n          // is this a E-prefixed string, such as `E'abc'`, `e'abc'` ?\n          (sqlString[i - 1] === 'E' || sqlString[i - 1] === 'e') &&\n          // reject things such as `AE'abc'` (the prefix must be exactly E)\n          canPrecedeNewToken(sqlString[i - 2]);\n\n      continue;\n    }\n\n    if (char === '-' && sqlString.slice(i, i + 3) === '-- ') {\n      isSingleLineComment = true;\n      continue;\n    }\n\n    if (char === '/' && sqlString.slice(i, i + 2) === '/*') {\n      isCommentBlock = true;\n      continue;\n    }\n\n    // either the start of a $bind parameter, or the start of a $tag$string$tag$\n    if (char === '$') {\n      const previousChar = sqlString[i - 1];\n\n      // we are part of an identifier\n      if (/[0-9a-z_]/i.test(previousChar)) {\n        continue;\n      }\n\n      const remainingString = sqlString.slice(i, sqlString.length);\n\n      const dollarStringStartMatch = remainingString.match(/^\\$(?<name>[a-z_][0-9a-z_]*)?(\\$)/i);\n      if (dollarStringStartMatch) {\n        currentDollarStringTagName = dollarStringStartMatch.groups?.name ?? '';\n        i += dollarStringStartMatch[0].length - 1;\n\n        continue;\n      }\n\n      continue;\n    }\n\n    if (isNamedReplacements && char === ':') {\n      const previousChar = sqlString[i - 1];\n      // we want to be conservative with what we consider to be a replacement to avoid risk of conflict with potential operators\n      // users need to add a space before the bind parameter (except after '(', ',', and '=', '[' (for arrays))\n      if (!canPrecedeNewToken(previousChar) && previousChar !== '[') {\n        continue;\n      }\n\n      const remainingString = sqlString.slice(i, sqlString.length);\n\n      const match = remainingString.match(/^:(?<name>[a-z_][0-9a-z_]*)(?:\\)|,|$|\\s|::|;|])/i);\n      const replacementName = match?.groups?.name;\n      if (!replacementName) {\n        continue;\n      }\n\n      // @ts-expect-error -- isPlainObject does not tell typescript that replacements is a plain object, not an array\n      const replacementValue = replacements[replacementName];\n      if (!Object.prototype.hasOwnProperty.call(replacements, replacementName) || replacementValue === undefined) {\n        throw new Error(`Named replacement \":${replacementName}\" has no entry in the replacement map.`);\n      }\n\n      const escapedReplacement = escapeSqlValue(replacementValue, undefined, dialect.name, true);\n\n      // add everything before the bind parameter name\n      output += sqlString.slice(previousSliceEnd, i);\n      // continue after the bind parameter name\n      previousSliceEnd = i + replacementName.length + 1;\n\n      output += escapedReplacement;\n\n      continue;\n    }\n\n    if (isPositionalReplacements && char === '?') {\n      const previousChar = sqlString[i - 1];\n\n      // we want to be conservative with what we consider to be a replacement to avoid risk of conflict with potential operators\n      // users need to add a space before the bind parameter (except after '(', ',', and '=', '[' (for arrays))\n      // -> [ is temporarily added to allow 'ARRAY[:name]' to be replaced\n      // https://github.com/sequelize/sequelize/issues/14410 will make this obsolete.\n      if (!canPrecedeNewToken(previousChar) && previousChar !== '[') {\n        continue;\n      }\n\n      // don't parse ?| and ?& operators as replacements\n      const nextChar = sqlString[i + 1];\n      if (nextChar === '|' || nextChar === '&') {\n        continue;\n      }\n\n      const replacementIndex = ++lastConsumedPositionalReplacementIndex;\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore -- ts < 4.4 loses the information that 'replacements' is an array when using 'isPositionalReplacements' instead of 'Array.isArray'\n      //  but performance matters here.\n      const replacementValue = replacements[lastConsumedPositionalReplacementIndex];\n\n      if (replacementValue === undefined) {\n        throw new Error(`Positional replacement (?) ${replacementIndex} has no entry in the replacement map (replacements[${replacementIndex}] is undefined).`);\n      }\n\n      const escapedReplacement = escapeSqlValue(replacementValue as any, undefined, dialect.name, true);\n\n      // add everything before the bind parameter name\n      output += sqlString.slice(previousSliceEnd, i);\n      // continue after the bind parameter name\n      previousSliceEnd = i + 1;\n\n      output += escapedReplacement;\n    }\n  }\n\n  if (isString) {\n    throw new Error(\n      `The following SQL query includes an unterminated string literal:\\n${sqlString}`\n    );\n  }\n\n  output += sqlString.slice(previousSliceEnd, sqlString.length);\n\n  return output;\n}\n\nfunction canPrecedeNewToken(char: string | undefined): boolean {\n  return char === undefined || /[\\s(>,=]/.test(char);\n}\n\nfunction isBackslashEscaped(string: string, pos: number): boolean {\n  let escaped = false;\n  for (let i = pos; i >= 0; i--) {\n    const char = string[i];\n    if (char !== '\\\\') {\n      break;\n    }\n\n    escaped = !escaped;\n  }\n\n  return escaped;\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 12101, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12106, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/abstract/index.js"],"sourcesContent":["'use strict';\n\nclass AbstractDialect {\n  /**\n   * Whether this dialect can use \\ in strings to escape string delimiters.\n   *\n   * @returns {boolean}\n   */\n  canBackslashEscape() {\n    return false;\n  }\n}\n\nAbstractDialect.prototype.supports = {\n  'DEFAULT': true,\n  'DEFAULT VALUES': false,\n  'VALUES ()': false,\n  'LIMIT ON UPDATE': false,\n  'ON DUPLICATE KEY': true,\n  'ORDER NULLS': false,\n  'UNION': true,\n  'UNION ALL': true,\n  'RIGHT JOIN': true,\n\n  /* does the dialect support returning values for inserted/updated fields */\n  returnValues: false,\n\n  /* features specific to autoIncrement values */\n  autoIncrement: {\n    /* does the dialect require modification of insert queries when inserting auto increment fields */\n    identityInsert: false,\n\n    /* does the dialect support inserting default/null values for autoincrement fields */\n    defaultValue: true,\n\n    /* does the dialect support updating autoincrement fields */\n    update: true\n  },\n  /* Do we need to say DEFAULT for bulk insert */\n  bulkDefault: false,\n  schemas: false,\n  transactions: true,\n  settingIsolationLevelDuringTransaction: true,\n  transactionOptions: {\n    type: false\n  },\n  migrations: true,\n  upserts: true,\n  inserts: {\n    ignoreDuplicates: '', /* dialect specific words for INSERT IGNORE or DO NOTHING */\n    updateOnDuplicate: false, /* whether dialect supports ON DUPLICATE KEY UPDATE */\n    onConflictDoNothing: '', /* dialect specific words for ON CONFLICT DO NOTHING */\n    onConflictWhere: false, /* whether dialect supports ON CONFLICT WHERE */\n    conflictFields: false /* whether the dialect supports specifying conflict fields or not */\n  },\n  constraints: {\n    restrict: true,\n    addConstraint: true,\n    dropConstraint: true,\n    unique: true,\n    default: false,\n    check: true,\n    foreignKey: true,\n    primaryKey: true\n  },\n  index: {\n    collate: true,\n    length: false,\n    parser: false,\n    concurrently: false,\n    type: false,\n    using: true,\n    functionBased: false,\n    operator: false\n  },\n  groupedLimit: true,\n  indexViaAlter: false,\n  JSON: false,\n  /**\n   * This dialect supports marking a column's constraints as deferrable.\n   * e.g. 'DEFERRABLE' and 'INITIALLY DEFERRED'\n   */\n  deferrableConstraints: false,\n  escapeStringConstants: false\n};\n\nmodule.exports = AbstractDialect;\nmodule.exports.AbstractDialect = AbstractDialect;\nmodule.exports.default = AbstractDialect;\n"],"names":[],"mappings":";AAEA,MAAA,gBAAsB;IAMpB,qBAAqB;QACnB,OAAO;IAAA;AAAA;AAIX,gBAAgB,SAAA,CAAU,QAAA,GAAW;IACnC,WAAW;IACX,kBAAkB;IAClB,aAAa;IACb,mBAAmB;IACnB,oBAAoB;IACpB,eAAe;IACf,SAAS;IACT,aAAa;IACb,cAAc;IAGd,cAAc;IAGd,eAAe;QAEb,gBAAgB;QAGhB,cAAc;QAGd,QAAQ;IAAA;IAGV,aAAa;IACb,SAAS;IACT,cAAc;IACd,wCAAwC;IACxC,oBAAoB;QAClB,MAAM;IAAA;IAER,YAAY;IACZ,SAAS;IACT,SAAS;QACP,kBAAkB;QAClB,mBAAmB;QACnB,qBAAqB;QACrB,iBAAiB;QACjB,gBAAgB;IAAA;IAElB,aAAa;QACX,UAAU;QACV,eAAe;QACf,gBAAgB;QAChB,QAAQ;QACR,SAAS;QACT,OAAO;QACP,YAAY;QACZ,YAAY;IAAA;IAEd,OAAO;QACL,SAAS;QACT,QAAQ;QACR,QAAQ;QACR,cAAc;QACd,MAAM;QACN,OAAO;QACP,eAAe;QACf,UAAU;IAAA;IAEZ,cAAc;IACd,eAAe;IACf,MAAM;IAKN,uBAAuB;IACvB,uBAAuB;AAAA;AAGzB,OAAO,OAAA,GAAU;AACjB,OAAO,OAAA,CAAQ,eAAA,GAAkB;AACjC,OAAO,OAAA,CAAQ,OAAA,GAAU","ignoreList":[0]}},
    {"offset": {"line": 12173, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12178, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/abstract/connection-manager.js"],"sourcesContent":["'use strict';\n\nconst { Pool, TimeoutError } = require('sequelize-pool');\nconst _ = require('lodash');\nconst semver = require('semver');\nconst errors = require('../../errors');\nconst { logger } = require('../../utils/logger');\nconst deprecations = require('../../utils/deprecations');\nconst debug = logger.debugContext('pool');\n\n/**\n * Abstract Connection Manager\n *\n * Connection manager which handles pooling & replication.\n * Uses sequelize-pool for pooling\n *\n * @private\n */\nclass ConnectionManager {\n  constructor(dialect, sequelize) {\n    const config = _.cloneDeep(sequelize.config);\n\n    this.sequelize = sequelize;\n    this.config = config;\n    this.dialect = dialect;\n    this.versionPromise = null;\n    this.dialectName = this.sequelize.options.dialect;\n\n    if (config.pool === false) {\n      throw new Error('Support for pool:false was removed in v4.0');\n    }\n\n    config.pool = _.defaults(config.pool || {}, {\n      max: 5,\n      min: 0,\n      idle: 10000,\n      acquire: 60000,\n      evict: 1000,\n      validate: this._validate.bind(this)\n    });\n\n    this.initPools();\n  }\n\n  refreshTypeParser(dataTypes) {\n    _.each(dataTypes, dataType => {\n      if (Object.prototype.hasOwnProperty.call(dataType, 'parse')) {\n        if (dataType.types[this.dialectName]) {\n          this._refreshTypeParser(dataType);\n        } else {\n          throw new Error(`Parse function not supported for type ${dataType.key} in dialect ${this.dialectName}`);\n        }\n      }\n    });\n  }\n\n  /**\n   * Try to load dialect module from various configured options.\n   * Priority goes like dialectModulePath > dialectModule > require(default)\n   *\n   * @param {string} moduleName Name of dialect module to lookup\n   *\n   * @private\n   * @returns {object}\n   */\n  _loadDialectModule(moduleName) {\n    try {\n      if (this.sequelize.config.dialectModulePath) {\n        return require(this.sequelize.config.dialectModulePath);\n      }\n      if (this.sequelize.config.dialectModule) {\n        return this.sequelize.config.dialectModule;\n      }\n      return require(moduleName);\n\n    } catch (err) {\n      if (err.code === 'MODULE_NOT_FOUND') {\n        if (this.sequelize.config.dialectModulePath) {\n          throw new Error(`Unable to find dialect at ${this.sequelize.config.dialectModulePath}`);\n        }\n        throw new Error(`Please install ${moduleName} package manually`);\n      }\n\n      throw err;\n    }\n  }\n\n  /**\n   * Handler which executes on process exit or connection manager shutdown\n   *\n   * @private\n   * @returns {Promise}\n   */\n  async _onProcessExit() {\n    if (!this.pool) {\n      return;\n    }\n\n    await this.pool.drain();\n    debug('connection drain due to process exit');\n\n    return await this.pool.destroyAllNow();\n  }\n\n  /**\n   * Drain the pool and close it permanently\n   *\n   * @returns {Promise}\n   */\n  async close() {\n    // Mark close of pool\n    this.getConnection = async function getConnection() {\n      throw new Error('ConnectionManager.getConnection was called after the connection manager was closed!');\n    };\n\n    return await this._onProcessExit();\n  }\n\n  /**\n   * Initialize connection pool. By default pool autostart is set to false, so no connection will be\n   * be created unless `pool.acquire` is called.\n   */\n  initPools() {\n    const config = this.config;\n\n    if (!config.replication) {\n      this.pool = new Pool({\n        name: 'sequelize',\n        create: () => this._connect(config),\n        destroy: async connection => {\n          const result = await this._disconnect(connection);\n          debug('connection destroy');\n          return result;\n        },\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses\n      });\n\n      debug(`pool created with max/min: ${config.pool.max}/${config.pool.min}, no replication`);\n\n      return;\n    }\n\n    if (!Array.isArray(config.replication.read)) {\n      config.replication.read = [config.replication.read];\n    }\n\n    // Map main connection config\n    config.replication.write = _.defaults(config.replication.write, _.omit(config, 'replication'));\n\n    // Apply defaults to each read config\n    config.replication.read = config.replication.read.map(readConfig =>\n      _.defaults(readConfig, _.omit(this.config, 'replication'))\n    );\n\n    // custom pooling for replication (original author @janmeier)\n    let reads = 0;\n    this.pool = {\n      release: client => {\n        if (client.queryType === 'read') {\n          this.pool.read.release(client);\n        } else {\n          this.pool.write.release(client);\n        }\n      },\n      acquire: (queryType, useMaster) => {\n        useMaster = useMaster === undefined ? false : useMaster;\n        if (queryType === 'SELECT' && !useMaster) {\n          return this.pool.read.acquire();\n        }\n        return this.pool.write.acquire();\n      },\n      destroy: connection => {\n        this.pool[connection.queryType].destroy(connection);\n        debug('connection destroy');\n      },\n      destroyAllNow: async () => {\n        await Promise.all([\n          this.pool.read.destroyAllNow(),\n          this.pool.write.destroyAllNow()\n        ]);\n\n        debug('all connections destroyed');\n      },\n      drain: async () => Promise.all([\n        this.pool.write.drain(),\n        this.pool.read.drain()\n      ]),\n      read: new Pool({\n        name: 'sequelize:read',\n        create: async () => {\n          // round robin config\n          const nextRead = reads++ % config.replication.read.length;\n          const connection = await this._connect(config.replication.read[nextRead]);\n          connection.queryType = 'read';\n          return connection;\n        },\n        destroy: connection => this._disconnect(connection),\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses\n      }),\n      write: new Pool({\n        name: 'sequelize:write',\n        create: async () => {\n          const connection = await this._connect(config.replication.write);\n          connection.queryType = 'write';\n          return connection;\n        },\n        destroy: connection => this._disconnect(connection),\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses\n      })\n    };\n\n    debug(`pool created with max/min: ${config.pool.max}/${config.pool.min}, with replication`);\n  }\n\n  /**\n   * Get connection from pool. It sets database version if it's not already set.\n   * Call pool.acquire to get a connection\n   *\n   * @param {object}   [options]                 Pool options\n   * @param {string}   [options.type]            Set which replica to use. Available options are `read` and `write`\n   * @param {boolean}  [options.useMaster=false] Force master or write replica to get connection from\n   *\n   * @returns {Promise<Connection>}\n   */\n  async getConnection(options) {\n    options = options || {};\n\n    if (this.sequelize.options.databaseVersion === 0) {\n      if (!this.versionPromise) {\n        this.versionPromise = (async () => {\n          try {\n            const connection = await this._connect(this.config.replication.write || this.config);\n            const _options = {};\n\n            _options.transaction = { connection }; // Cheat .query to use our private connection\n            _options.logging = () => {};\n            _options.logging.__testLoggingFn = true;\n\n            //connection might have set databaseVersion value at initialization,\n            //avoiding a useless round trip\n            if (this.sequelize.options.databaseVersion === 0) {\n              const version = await this.sequelize.databaseVersion(_options);\n              const parsedVersion = _.get(semver.coerce(version), 'version') || version;\n              this.sequelize.options.databaseVersion = semver.valid(parsedVersion)\n                ? parsedVersion\n                : this.dialect.defaultVersion;\n            }\n\n            if (semver.lt(this.sequelize.options.databaseVersion, this.dialect.defaultVersion)) {\n              deprecations.unsupportedEngine();\n              debug(`Unsupported database engine version ${this.sequelize.options.databaseVersion}`);\n            }\n\n            this.versionPromise = null;\n            return await this._disconnect(connection);\n          } catch (err) {\n            this.versionPromise = null;\n            throw err;\n          }\n        })();\n      }\n      await this.versionPromise;\n    }\n\n    let result;\n\n    try {\n\n      await this.sequelize.runHooks('beforePoolAcquire', options);\n\n      result = await this.pool.acquire(options.type, options.useMaster);\n\n      await this.sequelize.runHooks('afterPoolAcquire', result, options);\n\n    } catch (error) {\n      if (error instanceof TimeoutError) throw new errors.ConnectionAcquireTimeoutError(error);\n      throw error;\n    }\n\n    debug('connection acquired');\n\n    return result;\n  }\n\n  /**\n   * Release a pooled connection so it can be utilized by other connection requests\n   *\n   * @param {Connection} connection\n   */\n  releaseConnection(connection) {\n    this.pool.release(connection);\n    debug('connection released');\n  }\n\n  /**\n   * Destroys a pooled connection and removes it from the pool.\n   *\n   * @param {Connection} connection\n   */\n  async destroyConnection(connection) {\n    await this.pool.destroy(connection);\n    debug(`connection ${connection.uuid} destroyed`);\n  }\n\n  /**\n   * Call dialect library to get connection\n   *\n   * @param {*} config Connection config\n   * @private\n   * @returns {Promise<Connection>}\n   */\n  async _connect(config) {\n    await this.sequelize.runHooks('beforeConnect', config);\n    const connection = await this.dialect.connectionManager.connect(config);\n    await this.sequelize.runHooks('afterConnect', connection, config);\n    return connection;\n  }\n\n  /**\n   * Call dialect library to disconnect a connection\n   *\n   * @param {Connection} connection\n   * @private\n   * @returns {Promise}\n   */\n  async _disconnect(connection) {\n    await this.sequelize.runHooks('beforeDisconnect', connection);\n    await this.dialect.connectionManager.disconnect(connection);\n    return this.sequelize.runHooks('afterDisconnect', connection);\n  }\n\n  /**\n   * Determine if a connection is still valid or not\n   *\n   * @param {Connection} connection\n   *\n   * @returns {boolean}\n   */\n  _validate(connection) {\n    if (!this.dialect.connectionManager.validate) {\n      return true;\n    }\n\n    return this.dialect.connectionManager.validate(connection);\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"],"names":[],"mappings":";AAEA,MAAM,EAAE,IAAA,EAAM,YAAA,EAAA,GAAiB,QAAQ;AACvC,MAAM,IAAI,QAAQ;AAClB,MAAM,SAAS,QAAQ;AACvB,MAAM,SAAS,QAAQ;AACvB,MAAM,EAAE,MAAA,EAAA,GAAW,QAAQ;AAC3B,MAAM,eAAe,QAAQ;AAC7B,MAAM,QAAQ,OAAO,YAAA,CAAa;AAUlC,MAAA,kBAAwB;IACtB,YAAY,OAAA,EAAS,SAAA,CAAW;QAC9B,MAAM,SAAS,EAAE,SAAA,CAAU,UAAU,MAAA;QAErC,IAAA,CAAK,SAAA,GAAY;QACjB,IAAA,CAAK,MAAA,GAAS;QACd,IAAA,CAAK,OAAA,GAAU;QACf,IAAA,CAAK,cAAA,GAAiB;QACtB,IAAA,CAAK,WAAA,GAAc,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ,OAAA;QAE1C,IAAI,OAAO,IAAA,KAAS,OAAO;YACzB,MAAM,IAAI,MAAM;QAAA;QAGlB,OAAO,IAAA,GAAO,EAAE,QAAA,CAAS,OAAO,IAAA,IAAQ,CAAA,GAAI;YAC1C,KAAK;YACL,KAAK;YACL,MAAM;YACN,SAAS;YACT,OAAO;YACP,UAAU,IAAA,CAAK,SAAA,CAAU,IAAA,CAAK,IAAA;QAAA;QAGhC,IAAA,CAAK,SAAA;IAAA;IAGP,kBAAkB,SAAA,EAAW;QAC3B,EAAE,IAAA,CAAK,WAAW,CAAA,aAAY;YAC5B,IAAI,OAAO,SAAA,CAAU,cAAA,CAAe,IAAA,CAAK,UAAU,UAAU;gBAC3D,IAAI,SAAS,KAAA,CAAM,IAAA,CAAK,WAAA,CAAA,EAAc;oBACpC,IAAA,CAAK,kBAAA,CAAmB;gBAAA,OACnB;oBACL,MAAM,IAAI,MAAM,CAAA,sCAAA,EAAyC,SAAS,GAAA,CAAA,YAAA,EAAkB,IAAA,CAAK,WAAA,EAAA;gBAAA;YAAA;QAAA;IAAA;IAejG,mBAAmB,UAAA,EAAY;QAC7B,IAAI;YACF,IAAI,IAAA,CAAK,SAAA,CAAU,MAAA,CAAO,iBAAA,EAAmB;gBAC3C,OAAO,QAAQ,KAAK,UAAU,OAAO;;;;;YAAA;YAEvC,IAAI,IAAA,CAAK,SAAA,CAAU,MAAA,CAAO,aAAA,EAAe;gBACvC,OAAO,IAAA,CAAK,SAAA,CAAU,MAAA,CAAO,aAAA;YAAA;YAE/B,OAAO,QAAQ;;;;;QAAA,EAAA,OAER,KAAP;YACA,IAAI,IAAI,IAAA,KAAS,oBAAoB;gBACnC,IAAI,IAAA,CAAK,SAAA,CAAU,MAAA,CAAO,iBAAA,EAAmB;oBAC3C,MAAM,IAAI,MAAM,CAAA,0BAAA,EAA6B,IAAA,CAAK,SAAA,CAAU,MAAA,CAAO,iBAAA,EAAA;gBAAA;gBAErE,MAAM,IAAI,MAAM,CAAA,eAAA,EAAkB,WAAA,iBAAA,CAAA;YAAA;YAGpC,MAAM;QAAA;IAAA;IAAA,MAUJ,iBAAiB;QACrB,IAAI,CAAC,IAAA,CAAK,IAAA,EAAM;YACd;QAAA;QAGF,MAAM,IAAA,CAAK,IAAA,CAAK,KAAA;QAChB,MAAM;QAEN,OAAO,MAAM,IAAA,CAAK,IAAA,CAAK,aAAA;IAAA;IAAA,MAQnB,QAAQ;QAEZ,IAAA,CAAK,aAAA,GAAgB,eAAA,gBAA+B;YAClD,MAAM,IAAI,MAAM;QAAA;QAGlB,OAAO,MAAM,IAAA,CAAK,cAAA;IAAA;IAOpB,YAAY;QACV,MAAM,SAAS,IAAA,CAAK,MAAA;QAEpB,IAAI,CAAC,OAAO,WAAA,EAAa;YACvB,IAAA,CAAK,IAAA,GAAO,IAAI,KAAK;gBACnB,MAAM;gBACN,QAAQ,IAAM,IAAA,CAAK,QAAA,CAAS;gBAC5B,SAAS,OAAM,eAAc;oBAC3B,MAAM,SAAS,MAAM,IAAA,CAAK,WAAA,CAAY;oBACtC,MAAM;oBACN,OAAO;gBAAA;gBAET,UAAU,OAAO,IAAA,CAAK,QAAA;gBACtB,KAAK,OAAO,IAAA,CAAK,GAAA;gBACjB,KAAK,OAAO,IAAA,CAAK,GAAA;gBACjB,sBAAsB,OAAO,IAAA,CAAK,OAAA;gBAClC,mBAAmB,OAAO,IAAA,CAAK,IAAA;gBAC/B,oBAAoB,OAAO,IAAA,CAAK,KAAA;gBAChC,SAAS,OAAO,IAAA,CAAK,OAAA;YAAA;YAGvB,MAAM,CAAA,2BAAA,EAA8B,OAAO,IAAA,CAAK,GAAA,CAAA,CAAA,EAAO,OAAO,IAAA,CAAK,GAAA,CAAA,gBAAA,CAAA;YAEnE;QAAA;QAGF,IAAI,CAAC,MAAM,OAAA,CAAQ,OAAO,WAAA,CAAY,IAAA,GAAO;YAC3C,OAAO,WAAA,CAAY,IAAA,GAAO;gBAAC,OAAO,WAAA,CAAY,IAAA;aAAA;QAAA;QAIhD,OAAO,WAAA,CAAY,KAAA,GAAQ,EAAE,QAAA,CAAS,OAAO,WAAA,CAAY,KAAA,EAAO,EAAE,IAAA,CAAK,QAAQ;QAG/E,OAAO,WAAA,CAAY,IAAA,GAAO,OAAO,WAAA,CAAY,IAAA,CAAK,GAAA,CAAI,CAAA,aACpD,EAAE,QAAA,CAAS,YAAY,EAAE,IAAA,CAAK,IAAA,CAAK,MAAA,EAAQ;QAI7C,IAAI,QAAQ;QACZ,IAAA,CAAK,IAAA,GAAO;YACV,SAAS,CAAA,WAAU;gBACjB,IAAI,OAAO,SAAA,KAAc,QAAQ;oBAC/B,IAAA,CAAK,IAAA,CAAK,IAAA,CAAK,OAAA,CAAQ;gBAAA,OAClB;oBACL,IAAA,CAAK,IAAA,CAAK,KAAA,CAAM,OAAA,CAAQ;gBAAA;YAAA;YAG5B,SAAS,CAAC,WAAW,cAAc;gBACjC,YAAY,cAAc,KAAA,IAAY,QAAQ;gBAC9C,IAAI,cAAc,YAAY,CAAC,WAAW;oBACxC,OAAO,IAAA,CAAK,IAAA,CAAK,IAAA,CAAK,OAAA;gBAAA;gBAExB,OAAO,IAAA,CAAK,IAAA,CAAK,KAAA,CAAM,OAAA;YAAA;YAEzB,SAAS,CAAA,eAAc;gBACrB,IAAA,CAAK,IAAA,CAAK,WAAW,SAAA,CAAA,CAAW,OAAA,CAAQ;gBACxC,MAAM;YAAA;YAER,eAAe,YAAY;gBACzB,MAAM,QAAQ,GAAA,CAAI;oBAChB,IAAA,CAAK,IAAA,CAAK,IAAA,CAAK,aAAA;oBACf,IAAA,CAAK,IAAA,CAAK,KAAA,CAAM,aAAA;iBAAA;gBAGlB,MAAM;YAAA;YAER,OAAO,UAAY,QAAQ,GAAA,CAAI;oBAC7B,IAAA,CAAK,IAAA,CAAK,KAAA,CAAM,KAAA;oBAChB,IAAA,CAAK,IAAA,CAAK,IAAA,CAAK,KAAA;iBAAA;YAEjB,MAAM,IAAI,KAAK;gBACb,MAAM;gBACN,QAAQ,YAAY;oBAElB,MAAM,WAAW,UAAU,OAAO,WAAA,CAAY,IAAA,CAAK,MAAA;oBACnD,MAAM,aAAa,MAAM,IAAA,CAAK,QAAA,CAAS,OAAO,WAAA,CAAY,IAAA,CAAK,SAAA;oBAC/D,WAAW,SAAA,GAAY;oBACvB,OAAO;gBAAA;gBAET,SAAS,CAAA,aAAc,IAAA,CAAK,WAAA,CAAY;gBACxC,UAAU,OAAO,IAAA,CAAK,QAAA;gBACtB,KAAK,OAAO,IAAA,CAAK,GAAA;gBACjB,KAAK,OAAO,IAAA,CAAK,GAAA;gBACjB,sBAAsB,OAAO,IAAA,CAAK,OAAA;gBAClC,mBAAmB,OAAO,IAAA,CAAK,IAAA;gBAC/B,oBAAoB,OAAO,IAAA,CAAK,KAAA;gBAChC,SAAS,OAAO,IAAA,CAAK,OAAA;YAAA;YAEvB,OAAO,IAAI,KAAK;gBACd,MAAM;gBACN,QAAQ,YAAY;oBAClB,MAAM,aAAa,MAAM,IAAA,CAAK,QAAA,CAAS,OAAO,WAAA,CAAY,KAAA;oBAC1D,WAAW,SAAA,GAAY;oBACvB,OAAO;gBAAA;gBAET,SAAS,CAAA,aAAc,IAAA,CAAK,WAAA,CAAY;gBACxC,UAAU,OAAO,IAAA,CAAK,QAAA;gBACtB,KAAK,OAAO,IAAA,CAAK,GAAA;gBACjB,KAAK,OAAO,IAAA,CAAK,GAAA;gBACjB,sBAAsB,OAAO,IAAA,CAAK,OAAA;gBAClC,mBAAmB,OAAO,IAAA,CAAK,IAAA;gBAC/B,oBAAoB,OAAO,IAAA,CAAK,KAAA;gBAChC,SAAS,OAAO,IAAA,CAAK,OAAA;YAAA;QAAA;QAIzB,MAAM,CAAA,2BAAA,EAA8B,OAAO,IAAA,CAAK,GAAA,CAAA,CAAA,EAAO,OAAO,IAAA,CAAK,GAAA,CAAA,kBAAA,CAAA;IAAA;IAAA,MAa/D,cAAc,OAAA,EAAS;QAC3B,UAAU,WAAW,CAAA;QAErB,IAAI,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ,eAAA,KAAoB,GAAG;YAChD,IAAI,CAAC,IAAA,CAAK,cAAA,EAAgB;gBACxB,IAAA,CAAK,cAAA,GAAkB,CAAA,YAAY;oBACjC,IAAI;wBACF,MAAM,aAAa,MAAM,IAAA,CAAK,QAAA,CAAS,IAAA,CAAK,MAAA,CAAO,WAAA,CAAY,KAAA,IAAS,IAAA,CAAK,MAAA;wBAC7E,MAAM,WAAW,CAAA;wBAEjB,SAAS,WAAA,GAAc;4BAAE;wBAAA;wBACzB,SAAS,OAAA,GAAU,KAAM,CAAA;wBACzB,SAAS,OAAA,CAAQ,eAAA,GAAkB;wBAInC,IAAI,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ,eAAA,KAAoB,GAAG;4BAChD,MAAM,UAAU,MAAM,IAAA,CAAK,SAAA,CAAU,eAAA,CAAgB;4BACrD,MAAM,gBAAgB,EAAE,GAAA,CAAI,OAAO,MAAA,CAAO,UAAU,cAAc;4BAClE,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ,eAAA,GAAkB,OAAO,KAAA,CAAM,iBAClD,gBACA,IAAA,CAAK,OAAA,CAAQ,cAAA;wBAAA;wBAGnB,IAAI,OAAO,EAAA,CAAG,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ,eAAA,EAAiB,IAAA,CAAK,OAAA,CAAQ,cAAA,GAAiB;4BAClF,aAAa,iBAAA;4BACb,MAAM,CAAA,oCAAA,EAAuC,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ,eAAA,EAAA;wBAAA;wBAGtE,IAAA,CAAK,cAAA,GAAiB;wBACtB,OAAO,MAAM,IAAA,CAAK,WAAA,CAAY;oBAAA,EAAA,OACvB,KAAP;wBACA,IAAA,CAAK,cAAA,GAAiB;wBACtB,MAAM;oBAAA;gBAAA,CAAA;YAAA;YAIZ,MAAM,IAAA,CAAK,cAAA;QAAA;QAGb,IAAI;QAEJ,IAAI;YAEF,MAAM,IAAA,CAAK,SAAA,CAAU,QAAA,CAAS,qBAAqB;YAEnD,SAAS,MAAM,IAAA,CAAK,IAAA,CAAK,OAAA,CAAQ,QAAQ,IAAA,EAAM,QAAQ,SAAA;YAEvD,MAAM,IAAA,CAAK,SAAA,CAAU,QAAA,CAAS,oBAAoB,QAAQ;QAAA,EAAA,OAEnD,OAAP;YACA,IAAI,iBAAiB,cAAc,MAAM,IAAI,OAAO,6BAAA,CAA8B;YAClF,MAAM;QAAA;QAGR,MAAM;QAEN,OAAO;IAAA;IAQT,kBAAkB,UAAA,EAAY;QAC5B,IAAA,CAAK,IAAA,CAAK,OAAA,CAAQ;QAClB,MAAM;IAAA;IAAA,MAQF,kBAAkB,UAAA,EAAY;QAClC,MAAM,IAAA,CAAK,IAAA,CAAK,OAAA,CAAQ;QACxB,MAAM,CAAA,WAAA,EAAc,WAAW,IAAA,CAAA,UAAA,CAAA;IAAA;IAAA,MAU3B,SAAS,MAAA,EAAQ;QACrB,MAAM,IAAA,CAAK,SAAA,CAAU,QAAA,CAAS,iBAAiB;QAC/C,MAAM,aAAa,MAAM,IAAA,CAAK,OAAA,CAAQ,iBAAA,CAAkB,OAAA,CAAQ;QAChE,MAAM,IAAA,CAAK,SAAA,CAAU,QAAA,CAAS,gBAAgB,YAAY;QAC1D,OAAO;IAAA;IAAA,MAUH,YAAY,UAAA,EAAY;QAC5B,MAAM,IAAA,CAAK,SAAA,CAAU,QAAA,CAAS,oBAAoB;QAClD,MAAM,IAAA,CAAK,OAAA,CAAQ,iBAAA,CAAkB,UAAA,CAAW;QAChD,OAAO,IAAA,CAAK,SAAA,CAAU,QAAA,CAAS,mBAAmB;IAAA;IAUpD,UAAU,UAAA,EAAY;QACpB,IAAI,CAAC,IAAA,CAAK,OAAA,CAAQ,iBAAA,CAAkB,QAAA,EAAU;YAC5C,OAAO;QAAA;QAGT,OAAO,IAAA,CAAK,OAAA,CAAQ,iBAAA,CAAkB,QAAA,CAAS;IAAA;AAAA;AAInD,OAAO,OAAA,GAAU;AACjB,OAAO,OAAA,CAAQ,iBAAA,GAAoB;AACnC,OAAO,OAAA,CAAQ,OAAA,GAAU","ignoreList":[0]}},
    {"offset": {"line": 12428, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12433, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/parserStore.js"],"sourcesContent":["'use strict';\n\nconst stores = new Map();\n\nmodule.exports = dialect => {\n  if (!stores.has(dialect)) {\n    stores.set(dialect, new Map());\n  }\n\n  return {\n    clear() {\n      stores.get(dialect).clear();\n    },\n    refresh(dataType) {\n      for (const type of dataType.types[dialect]) {\n        stores.get(dialect).set(type, dataType.parse);\n      }\n    },\n    get(type) {\n      return stores.get(dialect).get(type);\n    }\n  };\n};\n"],"names":[],"mappings":";AAEA,MAAM,SAAS,aAAA,GAAA,IAAI;AAEnB,OAAO,OAAA,GAAU,CAAA,YAAW;IAC1B,IAAI,CAAC,OAAO,GAAA,CAAI,UAAU;QACxB,OAAO,GAAA,CAAI,SAAS,aAAA,GAAA,IAAI;IAAA;IAG1B,OAAO;QACL,QAAQ;YACN,OAAO,GAAA,CAAI,SAAS,KAAA;QAAA;QAEtB,SAAQ,QAAA,EAAU;YAChB,KAAA,MAAW,QAAQ,SAAS,KAAA,CAAM,QAAA,CAAU;gBAC1C,OAAO,GAAA,CAAI,SAAS,GAAA,CAAI,MAAM,SAAS,KAAA;YAAA;QAAA;QAG3C,KAAI,IAAA,EAAM;YACR,OAAO,OAAO,GAAA,CAAI,SAAS,GAAA,CAAI;QAAA;IAAA;AAAA","ignoreList":[0]}},
    {"offset": {"line": 12453, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12458, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/mariadb/connection-manager.js"],"sourcesContent":["'use strict';\n\nconst semver = require('semver');\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst SequelizeErrors = require('../../errors');\nconst { logger } = require('../../utils/logger');\nconst DataTypes = require('../../data-types').mariadb;\nconst momentTz = require('moment-timezone');\nconst debug = logger.debugContext('connection:mariadb');\nconst parserStore = require('../parserStore')('mariadb');\n\n/**\n * MariaDB Connection Manager\n *\n * Get connections, validate and disconnect them.\n * AbstractConnectionManager pooling use it to handle MariaDB specific connections\n * Use https://github.com/MariaDB/mariadb-connector-nodejs to connect with MariaDB server\n *\n * @private\n */\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 3306;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule('mariadb');\n    this.refreshTypeParser(DataTypes);\n  }\n\n  static _typecast(field, next) {\n    if (parserStore.get(field.type)) {\n      return parserStore.get(field.type)(field, this.sequelize.options, next);\n    }\n    return next();\n  }\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  /**\n   * Connect with MariaDB database based on config, Handle any errors in connection\n   * Set the pool handlers on connection.error\n   * Also set proper timezone once connection is connected.\n   *\n   * @param {object} config\n   * @returns {Promise<Connection>}\n   * @private\n   */\n  async connect(config) {\n    // Named timezone is not supported in mariadb, convert to offset\n    let tzOffset = this.sequelize.options.timezone;\n    tzOffset = /\\//.test(tzOffset) ? momentTz.tz(tzOffset).format('Z')\n      : tzOffset;\n\n    const connectionConfig = {\n      host: config.host,\n      port: config.port,\n      user: config.username,\n      password: config.password,\n      database: config.database,\n      timezone: tzOffset,\n      typeCast: ConnectionManager._typecast.bind(this),\n      bigNumberStrings: false,\n      supportBigNumbers: true,\n      foundRows: false,\n      ...config.dialectOptions\n    };\n\n    if (!this.sequelize.config.keepDefaultTimezone) {\n      // set timezone for this connection\n      if (connectionConfig.initSql) {\n        if (!Array.isArray(\n          connectionConfig.initSql)) {\n          connectionConfig.initSql = [connectionConfig.initSql];\n        }\n        connectionConfig.initSql.push(`SET time_zone = '${tzOffset}'`);\n      } else {\n        connectionConfig.initSql = `SET time_zone = '${tzOffset}'`;\n      }\n    }\n\n    try {\n      const connection = await this.lib.createConnection(connectionConfig);\n      this.sequelize.options.databaseVersion = semver.coerce(connection.serverVersion()).version;\n\n      debug('connection acquired');\n      connection.on('error', error => {\n        switch (error.code) {\n          case 'ESOCKET':\n          case 'ECONNRESET':\n          case 'EPIPE':\n          case 'PROTOCOL_CONNECTION_LOST':\n            this.pool.destroy(connection);\n        }\n      });\n      return connection;\n    } catch (err) {\n      switch (err.code) {\n        case 'ECONNREFUSED':\n          throw new SequelizeErrors.ConnectionRefusedError(err);\n        case 'ER_ACCESS_DENIED_ERROR':\n        case 'ER_ACCESS_DENIED_NO_PASSWORD_ERROR':\n          throw new SequelizeErrors.AccessDeniedError(err);\n        case 'ENOTFOUND':\n          throw new SequelizeErrors.HostNotFoundError(err);\n        case 'EHOSTUNREACH':\n        case 'ENETUNREACH':\n        case 'EADDRNOTAVAIL':\n          throw new SequelizeErrors.HostNotReachableError(err);\n        case 'EINVAL':\n          throw new SequelizeErrors.InvalidConnectionError(err);\n        default:\n          throw new SequelizeErrors.ConnectionError(err);\n      }\n    }\n  }\n\n  async disconnect(connection) {\n    // Don't disconnect connections with CLOSED state\n    if (!connection.isValid()) {\n      debug('connection tried to disconnect but was already at CLOSED state');\n      return;\n    }\n    return await connection.end();\n  }\n\n  validate(connection) {\n    return connection && connection.isValid();\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 12578, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12583, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/abstract/query.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst SqlString = require('../../sql-string');\nconst QueryTypes = require('../../query-types');\nconst Dot = require('dottie');\nconst deprecations = require('../../utils/deprecations');\nconst uuid = require('uuid').v4;\nconst { safeStringifyJson } = require('../../utils.js');\n\nclass AbstractQuery {\n\n  constructor(connection, sequelize, options) {\n    this.uuid = uuid();\n    this.connection = connection;\n    this.instance = options.instance;\n    this.model = options.model;\n    this.sequelize = sequelize;\n    this.options = {\n      plain: false,\n      raw: false,\n      // eslint-disable-next-line no-console\n      logging: console.log,\n      ...options\n    };\n    this.checkLoggingOption();\n\n    if (options.rawErrors) {\n      // The default implementation in AbstractQuery just returns the same\n      // error object. By overidding this.formatError, this saves every dialect\n      // having to check for options.rawErrors in their own formatError\n      // implementations.\n      this.formatError = AbstractQuery.prototype.formatError;\n    }\n  }\n\n  /**\n   * rewrite query with parameters\n   *\n   * Examples:\n   *\n   *   query.formatBindParameters('select $1 as foo', ['fooval']);\n   *\n   *   query.formatBindParameters('select $foo as foo', { foo: 'fooval' });\n   *\n   * Options\n   *   skipUnescape: bool, skip unescaping $$\n   *   skipValueReplace: bool, do not replace (but do unescape $$). Check correct syntax and if all values are available\n   *\n   * @param {string} sql\n   * @param {object|Array} values\n   * @param {string} dialect\n   * @param {Function} [replacementFunc]\n   * @param {object} [options]\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect, replacementFunc, options) {\n    if (!values) {\n      return [sql, []];\n    }\n\n    options = options || {};\n    if (typeof replacementFunc !== 'function') {\n      options = replacementFunc || {};\n      replacementFunc = undefined;\n    }\n\n    if (!replacementFunc) {\n      if (options.skipValueReplace) {\n        replacementFunc = (match, key, values) => {\n          if (values[key] !== undefined) {\n            return match;\n          }\n          return undefined;\n        };\n      } else {\n        replacementFunc = (match, key, values, timeZone, dialect) => {\n          if (values[key] !== undefined) {\n            return SqlString.escape(values[key], timeZone, dialect);\n          }\n          return undefined;\n        };\n      }\n    } else if (options.skipValueReplace) {\n      const origReplacementFunc = replacementFunc;\n      replacementFunc = (match, key, values, timeZone, dialect, options) => {\n        if (origReplacementFunc(match, key, values, timeZone, dialect, options) !== undefined) {\n          return match;\n        }\n        return undefined;\n      };\n    }\n\n    const timeZone = null;\n    const list = Array.isArray(values);\n    sql = sql.replace(/\\B\\$(\\$|\\w+)/g, (match, key) => {\n      if ('$' === key) {\n        return options.skipUnescape ? match : key;\n      }\n\n      let replVal;\n      if (list) {\n        if (key.match(/^[1-9]\\d*$/)) {\n          key = key - 1;\n          replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n        }\n      } else if (!key.match(/^\\d*$/)) {\n        replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n      }\n      if (replVal === undefined) {\n        throw new Error(`Named bind parameter \"${match}\" has no value in the given object.`);\n      }\n      return replVal;\n    });\n    return [sql, []];\n  }\n\n  /**\n   * Formats a raw database error from the database library into a common Sequelize exception.\n   *\n   * @param {Error} error The exception object.\n   * @param {object} errStack The stack trace that started the database query.\n   * @returns {BaseError} the new formatted error object.\n   */\n  formatError(error, errStack) {\n    // Default implementation, no formatting.\n    // Each dialect overrides this method to parse errors from their respective the database engines.\n    error.stack = errStack;\n\n    return error;\n  }\n\n  /**\n   * Execute the passed sql query.\n   *\n   * Examples:\n   *\n   *     query.run('SELECT 1')\n   *\n   * @private\n   */\n  run() {\n    throw new Error('The run method wasn\\'t overwritten!');\n  }\n\n  /**\n   * Check the logging option of the instance and print deprecation warnings.\n   *\n   * @private\n   */\n  checkLoggingOption() {\n    if (this.options.logging === true) {\n      deprecations.noTrueLogging();\n      // eslint-disable-next-line no-console\n      this.options.logging = console.log;\n    }\n  }\n\n  /**\n   * Get the attributes of an insert query, which contains the just inserted id.\n   *\n   * @returns {string} The field name.\n   * @private\n   */\n  getInsertIdField() {\n    return 'insertId';\n  }\n\n  getUniqueConstraintErrorMessage(field) {\n    let message = field ? `${field} must be unique` : 'Must be unique';\n\n    if (field && this.model) {\n      for (const key of Object.keys(this.model.uniqueKeys)) {\n        if (this.model.uniqueKeys[key].fields.includes(field.replace(/\"/g, ''))) {\n          if (this.model.uniqueKeys[key].msg) {\n            message = this.model.uniqueKeys[key].msg;\n          }\n        }\n      }\n    }\n    return message;\n  }\n\n  isRawQuery() {\n    return this.options.type === QueryTypes.RAW;\n  }\n\n  isVersionQuery() {\n    return this.options.type === QueryTypes.VERSION;\n  }\n\n  isUpsertQuery() {\n    return this.options.type === QueryTypes.UPSERT;\n  }\n\n  isInsertQuery(results, metaData) {\n    let result = true;\n\n    if (this.options.type === QueryTypes.INSERT) {\n      return true;\n    }\n\n    // is insert query if sql contains insert into\n    result = result && this.sql.toLowerCase().startsWith('insert into');\n\n    // is insert query if no results are passed or if the result has the inserted id\n    result = result && (!results || Object.prototype.hasOwnProperty.call(results, this.getInsertIdField()));\n\n    // is insert query if no metadata are passed or if the metadata has the inserted id\n    result = result && (!metaData || Object.prototype.hasOwnProperty.call(metaData, this.getInsertIdField()));\n\n    return result;\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n\n      id = id || results && results[this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n\n  isShowTablesQuery() {\n    return this.options.type === QueryTypes.SHOWTABLES;\n  }\n\n  handleShowTablesQuery(results) {\n    return _.flatten(results.map(resultSet => Object.values(resultSet)));\n  }\n\n  isShowIndexesQuery() {\n    return this.options.type === QueryTypes.SHOWINDEXES;\n  }\n\n  isShowConstraintsQuery() {\n    return this.options.type === QueryTypes.SHOWCONSTRAINTS;\n  }\n\n  isDescribeQuery() {\n    return this.options.type === QueryTypes.DESCRIBE;\n  }\n\n  isSelectQuery() {\n    return this.options.type === QueryTypes.SELECT;\n  }\n\n  isBulkUpdateQuery() {\n    return this.options.type === QueryTypes.BULKUPDATE;\n  }\n\n  isBulkDeleteQuery() {\n    return this.options.type === QueryTypes.BULKDELETE;\n  }\n\n  isForeignKeysQuery() {\n    return this.options.type === QueryTypes.FOREIGNKEYS;\n  }\n\n  isUpdateQuery() {\n    return this.options.type === QueryTypes.UPDATE;\n  }\n\n  handleSelectQuery(results) {\n    let result = null;\n\n    // Map raw fields to names if a mapping is provided\n    if (this.options.fieldMap) {\n      const fieldMap = this.options.fieldMap;\n      results = results.map(result => _.reduce(fieldMap, (result, name, field) => {\n        if (result[field] !== undefined && name !== field) {\n          result[name] = result[field];\n          delete result[field];\n        }\n        return result;\n      }, result));\n    }\n\n    // Raw queries\n    if (this.options.raw) {\n      result = results.map(result => {\n        let o = {};\n\n        for (const key in result) {\n          if (Object.prototype.hasOwnProperty.call(result, key)) {\n            o[key] = result[key];\n          }\n        }\n\n        if (this.options.nest) {\n          o = Dot.transform(o);\n        }\n\n        return o;\n      });\n    // Queries with include\n    } else if (this.options.hasJoin === true) {\n      results = AbstractQuery._groupJoinData(results, {\n        model: this.model,\n        includeMap: this.options.includeMap,\n        includeNames: this.options.includeNames\n      }, {\n        checkExisting: this.options.hasMultiAssociation\n      });\n\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        include: this.options.include,\n        includeNames: this.options.includeNames,\n        includeMap: this.options.includeMap,\n        includeValidated: true,\n        attributes: this.options.originalAttributes || this.options.attributes,\n        raw: true\n      });\n    // Regular queries\n    } else {\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        raw: true,\n        attributes: this.options.originalAttributes || this.options.attributes\n      });\n    }\n\n    // return the first real model instance if options.plain is set (e.g. Model.find)\n    if (this.options.plain) {\n      result = result.length === 0 ? null : result[0];\n    }\n    return result;\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith('show');\n    result = result || this.sql.toLowerCase().startsWith('describe');\n\n    return result;\n  }\n\n  isCallQuery() {\n    return this.sql.toLowerCase().startsWith('call');\n  }\n\n  /**\n   * @param {string} sql\n   * @param {Function} debugContext\n   * @param {Array|object} parameters\n   * @protected\n   * @returns {Function} A function to call after the query was completed.\n   */\n  _logQuery(sql, debugContext, parameters) {\n    const { connection, options } = this;\n    const benchmark = this.sequelize.options.benchmark || options.benchmark;\n    const logQueryParameters = this.sequelize.options.logQueryParameters || options.logQueryParameters;\n    const startTime = Date.now();\n    let logParameter = '';\n\n    if (logQueryParameters && parameters) {\n      const delimiter = sql.endsWith(';') ? '' : ';';\n      let paramStr;\n      if (Array.isArray(parameters)) {\n        paramStr = parameters.map(p=>safeStringifyJson(p)).join(', ');\n      } else {\n        paramStr = safeStringifyJson(parameters);\n      }\n      logParameter = `${delimiter} ${paramStr}`;\n    }\n    const fmt = `(${connection.uuid || 'default'}): ${sql}${logParameter}`;\n    const msg = `Executing ${fmt}`;\n    debugContext(msg);\n    if (!benchmark) {\n      this.sequelize.log(`Executing ${fmt}`, options);\n    }\n    return () => {\n      const afterMsg = `Executed ${fmt}`;\n      debugContext(afterMsg);\n      if (benchmark) {\n        this.sequelize.log(afterMsg, Date.now() - startTime, options);\n      }\n    };\n  }\n\n  /**\n   * The function takes the result of the query execution and groups\n   * the associated data by the callee.\n   *\n   * Example:\n   *   groupJoinData([\n   *     {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 1 }\n   *     }, {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 2 }\n   *     }, {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 3 }\n   *     }\n   *   ])\n   *\n   * Result:\n   *   Something like this:\n   *\n   *   [\n   *     {\n   *       some: 'data',\n   *       id: 1,\n   *       association: [\n   *         { foo: 'bar', id: 1 },\n   *         { foo: 'bar', id: 2 },\n   *         { foo: 'bar', id: 3 }\n   *       ]\n   *     }\n   *   ]\n   *\n   * @param {Array} rows\n   * @param {object} includeOptions\n   * @param {object} options\n   * @private\n   */\n  static _groupJoinData(rows, includeOptions, options) {\n\n    /*\n     * Assumptions\n     * ID is not necessarily the first field\n     * All fields for a level is grouped in the same set (i.e. Panel.id, Task.id, Panel.title is not possible)\n     * Parent keys will be seen before any include/child keys\n     * Previous set won't necessarily be parent set (one parent could have two children, one child would then be previous set for the other)\n     */\n\n    /*\n     * Author (MH) comment: This code is an unreadable mess, but it's performant.\n     * groupJoinData is a performance critical function so we prioritize perf over readability.\n     */\n    if (!rows.length) {\n      return [];\n    }\n\n    // Generic looping\n    let i;\n    let length;\n    let $i;\n    let $length;\n    // Row specific looping\n    let rowsI;\n    let row;\n    const rowsLength = rows.length;\n    // Key specific looping\n    let keys;\n    let key;\n    let keyI;\n    let keyLength;\n    let prevKey;\n    let values;\n    let topValues;\n    let topExists;\n    const checkExisting = options.checkExisting;\n    // If we don't have to deduplicate we can pre-allocate the resulting array\n    let itemHash;\n    let parentHash;\n    let topHash;\n    const results = checkExisting ? [] : new Array(rowsLength);\n    const resultMap = {};\n    const includeMap = {};\n    // Result variables for the respective functions\n    let $keyPrefix;\n    let $keyPrefixString;\n    let $prevKeyPrefixString; // eslint-disable-line\n    let $prevKeyPrefix;\n    let $lastKeyPrefix;\n    let $current;\n    let $parent;\n    // Map each key to an include option\n    let previousPiece;\n    const buildIncludeMap = piece => {\n      if (Object.prototype.hasOwnProperty.call($current.includeMap, piece)) {\n        includeMap[key] = $current = $current.includeMap[piece];\n        if (previousPiece) {\n          previousPiece = `${previousPiece}.${piece}`;\n        } else {\n          previousPiece = piece;\n        }\n        includeMap[previousPiece] = $current;\n      }\n    };\n    // Calculate the string prefix of a key ('User.Results' for 'User.Results.id')\n    const keyPrefixStringMemo = {};\n    const keyPrefixString = (key, memo) => {\n      if (!Object.prototype.hasOwnProperty.call(memo, key)) {\n        memo[key] = key.substr(0, key.lastIndexOf('.'));\n      }\n      return memo[key];\n    };\n    // Removes the prefix from a key ('id' for 'User.Results.id')\n    const removeKeyPrefixMemo = {};\n    const removeKeyPrefix = key => {\n      if (!Object.prototype.hasOwnProperty.call(removeKeyPrefixMemo, key)) {\n        const index = key.lastIndexOf('.');\n        removeKeyPrefixMemo[key] = key.substr(index === -1 ? 0 : index + 1);\n      }\n      return removeKeyPrefixMemo[key];\n    };\n    // Calculates the array prefix of a key (['User', 'Results'] for 'User.Results.id')\n    const keyPrefixMemo = {};\n    const keyPrefix = key => {\n      // We use a double memo and keyPrefixString so that different keys with the same prefix will receive the same array instead of differnet arrays with equal values\n      if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, key)) {\n        const prefixString = keyPrefixString(key, keyPrefixStringMemo);\n        if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, prefixString)) {\n          keyPrefixMemo[prefixString] = prefixString ? prefixString.split('.') : [];\n        }\n        keyPrefixMemo[key] = keyPrefixMemo[prefixString];\n      }\n      return keyPrefixMemo[key];\n    };\n    // Calcuate the last item in the array prefix ('Results' for 'User.Results.id')\n    const lastKeyPrefixMemo = {};\n    const lastKeyPrefix = key => {\n      if (!Object.prototype.hasOwnProperty.call(lastKeyPrefixMemo, key)) {\n        const prefix = keyPrefix(key);\n        const length = prefix.length;\n\n        lastKeyPrefixMemo[key] = !length ? '' : prefix[length - 1];\n      }\n      return lastKeyPrefixMemo[key];\n    };\n    const getUniqueKeyAttributes = model => {\n      let uniqueKeyAttributes = _.chain(model.uniqueKeys);\n      uniqueKeyAttributes = uniqueKeyAttributes\n        .result(`${uniqueKeyAttributes.findKey()}.fields`)\n        .map(field => _.findKey(model.attributes, chr => chr.field === field))\n        .value();\n\n      return uniqueKeyAttributes;\n    };\n    const stringify = obj => obj instanceof Buffer ? obj.toString('hex') : obj;\n    let primaryKeyAttributes;\n    let uniqueKeyAttributes;\n    let prefix;\n\n    for (rowsI = 0; rowsI < rowsLength; rowsI++) {\n      row = rows[rowsI];\n\n      // Keys are the same for all rows, so only need to compute them on the first row\n      if (rowsI === 0) {\n        keys = _.sortBy(Object.keys(row), item => [item.split('.').length]);\n        keyLength = keys.length;\n      }\n\n      if (checkExisting) {\n        topExists = false;\n\n        // Compute top level hash key (this is usually just the primary key values)\n        $length = includeOptions.model.primaryKeyAttributes.length;\n        topHash = '';\n        if ($length === 1) {\n          topHash = stringify(row[includeOptions.model.primaryKeyAttributes[0]]);\n        }\n        else if ($length > 1) {\n          for ($i = 0; $i < $length; $i++) {\n            topHash += stringify(row[includeOptions.model.primaryKeyAttributes[$i]]);\n          }\n        }\n        else if (!_.isEmpty(includeOptions.model.uniqueKeys)) {\n          uniqueKeyAttributes = getUniqueKeyAttributes(includeOptions.model);\n          for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n            topHash += row[uniqueKeyAttributes[$i]];\n          }\n        }\n      }\n\n      topValues = values = {};\n      $prevKeyPrefix = undefined;\n      for (keyI = 0; keyI < keyLength; keyI++) {\n        key = keys[keyI];\n\n        // The string prefix isn't actualy needed\n        // We use it so keyPrefix for different keys will resolve to the same array if they have the same prefix\n        // TODO: Find a better way?\n        $keyPrefixString = keyPrefixString(key, keyPrefixStringMemo);\n        $keyPrefix = keyPrefix(key);\n\n        // On the first row we compute the includeMap\n        if (rowsI === 0 && !Object.prototype.hasOwnProperty.call(includeMap, key)) {\n          if (!$keyPrefix.length) {\n            includeMap[key] = includeMap[''] = includeOptions;\n          } else {\n            $current = includeOptions;\n            previousPiece = undefined;\n            $keyPrefix.forEach(buildIncludeMap);\n          }\n        }\n        // End of key set\n        if ($prevKeyPrefix !== undefined && $prevKeyPrefix !== $keyPrefix) {\n          if (checkExisting) {\n            // Compute hash key for this set instance\n            // TODO: Optimize\n            length = $prevKeyPrefix.length;\n            $parent = null;\n            parentHash = null;\n\n            if (length) {\n              for (i = 0; i < length; i++) {\n                prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n                primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n                $length = primaryKeyAttributes.length;\n                itemHash = prefix;\n                if ($length === 1) {\n                  itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n                }\n                else if ($length > 1) {\n                  for ($i = 0; $i < $length; $i++) {\n                    itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n                  }\n                }\n                else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n                  uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n                  for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                    itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n                  }\n                }\n                if (!parentHash) {\n                  parentHash = topHash;\n                }\n\n                itemHash = parentHash + itemHash;\n                $parent = prefix;\n                if (i < length - 1) {\n                  parentHash = itemHash;\n                }\n              }\n            } else {\n              itemHash = topHash;\n            }\n\n            if (itemHash === topHash) {\n              if (!resultMap[itemHash]) {\n                resultMap[itemHash] = values;\n              } else {\n                topExists = true;\n              }\n            } else if (!resultMap[itemHash]) {\n              $parent = resultMap[parentHash];\n              $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n              if (includeMap[prevKey].association.isSingleAssociation) {\n                if ($parent) {\n                  $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n                }\n              } else {\n                if (!$parent[$lastKeyPrefix]) {\n                  $parent[$lastKeyPrefix] = [];\n                }\n                $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n              }\n            }\n\n            // Reset values\n            values = {};\n          } else {\n            // If checkExisting is false it's because there's only 1:1 associations in this query\n            // However we still need to map onto the appropriate parent\n            // For 1:1 we map forward, initializing the value object on the parent to be filled in the next iterations of the loop\n            $current = topValues;\n            length = $keyPrefix.length;\n            if (length) {\n              for (i = 0; i < length; i++) {\n                if (i === length - 1) {\n                  values = $current[$keyPrefix[i]] = {};\n                }\n                $current = $current[$keyPrefix[i]] || {};\n              }\n            }\n          }\n        }\n\n        // End of iteration, set value and set prev values (for next iteration)\n        values[removeKeyPrefix(key)] = row[key];\n        prevKey = key;\n        $prevKeyPrefix = $keyPrefix;\n        $prevKeyPrefixString = $keyPrefixString;\n      }\n\n      if (checkExisting) {\n        length = $prevKeyPrefix.length;\n        $parent = null;\n        parentHash = null;\n\n        if (length) {\n          for (i = 0; i < length; i++) {\n            prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n            primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n            $length = primaryKeyAttributes.length;\n            itemHash = prefix;\n            if ($length === 1) {\n              itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n            }\n            else if ($length > 0) {\n              for ($i = 0; $i < $length; $i++) {\n                itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n              }\n            }\n            else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n              uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n              for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n              }\n            }\n            if (!parentHash) {\n              parentHash = topHash;\n            }\n\n            itemHash = parentHash + itemHash;\n            $parent = prefix;\n            if (i < length - 1) {\n              parentHash = itemHash;\n            }\n          }\n        } else {\n          itemHash = topHash;\n        }\n\n        if (itemHash === topHash) {\n          if (!resultMap[itemHash]) {\n            resultMap[itemHash] = values;\n          } else {\n            topExists = true;\n          }\n        } else if (!resultMap[itemHash]) {\n          $parent = resultMap[parentHash];\n          $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n          if (includeMap[prevKey].association.isSingleAssociation) {\n            if ($parent) {\n              $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n            }\n          } else {\n            if (!$parent[$lastKeyPrefix]) {\n              $parent[$lastKeyPrefix] = [];\n            }\n            $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n          }\n        }\n        if (!topExists) {\n          results.push(topValues);\n        }\n      } else {\n        results[rowsI] = topValues;\n      }\n    }\n\n    return results;\n  }\n}\n\nmodule.exports = AbstractQuery;\nmodule.exports.AbstractQuery = AbstractQuery;\nmodule.exports.default = AbstractQuery;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 13138, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13143, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/mariadb/query.js"],"sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst DataTypes = require('../../data-types');\nconst { logger } = require('../../utils/logger');\n\nconst ER_DUP_ENTRY = 1062;\nconst ER_DEADLOCK = 1213;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\n\nconst debug = logger.debugContext('sql:mariadb');\n\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, { showWarnings: false, ...options });\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n    const replacementFunc = (match, key, values_) => {\n      if (values_[key] !== undefined) {\n        bindParam.push(values_[key]);\n        return '?';\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : undefined];\n  }\n\n  async run(sql, parameters) {\n    this.sql = sql;\n    const { connection, options } = this;\n\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    if (parameters) {\n      debug('parameters(%j)', parameters);\n    }\n\n    let results;\n    const errForStack = new Error();\n\n    try {\n      results = await connection.query(this.sql, parameters);\n    } catch (error) {\n      if (options.transaction && error.errno === ER_DEADLOCK) {\n        // MariaDB automatically rolls-back transactions in the event of a deadlock.\n        // However, we still initiate a manual rollback to ensure the connection gets released - see #13102.\n        try {\n          await options.transaction.rollback();\n        } catch (error_) {\n          // Ignore errors - since MariaDB automatically rolled back, we're\n          // not that worried about this redundant rollback failing.\n        }\n\n        options.transaction.finished = 'rollback';\n      }\n\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error, errForStack.stack);\n    } finally {\n      complete();\n    }\n\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n    return this.formatResults(results);\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n      return data.affectedRows;\n    }\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        // handle bulkCreate AI primary key\n        if (\n          this.model\n          && this.model.autoIncrementAttribute\n          && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute\n          && this.model.rawAttributes[this.model.primaryKeyAttribute]\n        ) {\n          // ONLY TRUE IF @auto_increment_increment is set to 1 !!\n          // Doesn't work with GALERA => each node will reserve increment (x for first server, x+1 for next node...)\n          const startId = data[this.getInsertIdField()];\n          result = new Array(data.affectedRows);\n          const pkField = this.model.rawAttributes[this.model.primaryKeyAttribute].field;\n          for (let i = 0; i < data.affectedRows; i++) {\n            result[i] = { [pkField]: startId + i };\n          }\n          return [result, data.affectedRows];\n        }\n\n        return [data[this.getInsertIdField()], data.affectedRows];\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      this.handleJsonSelectQuery(data);\n\n      return this.handleSelectQuery(data);\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isRawQuery()) {\n      const meta = data.meta;\n      delete data.meta;\n      return [data, meta];\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isForeignKeysQuery() || this.isShowConstraintsQuery()) {\n      return data;\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        result[_result.Field] = {\n          type: _result.Type.toLowerCase().startsWith('enum') ? _result.Type.replace(/^enum/i,\n            'ENUM') : _result.Type.toUpperCase(),\n          allowNull: _result.Null === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === 'PRI',\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, 'Extra')\n            && _result.Extra.toLowerCase() === 'auto_increment',\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n      return result;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n\n    return result;\n  }\n\n  handleJsonSelectQuery(rows) {\n    if (!this.model || !this.model.fieldRawAttributesMap) {\n      return;\n    }\n    for (const _field of Object.keys(this.model.fieldRawAttributesMap)) {\n      const modelField = this.model.fieldRawAttributesMap[_field];\n      if (modelField.type instanceof DataTypes.JSON) {\n        // Value is returned as String, not JSON\n        rows = rows.map(row => {\n          // JSON fields for MariaDB server 10.5.2+ already results in JSON format, skip JSON.parse\n          // this is due to this https://jira.mariadb.org/browse/MDEV-17832 and how mysql2 connector interacts with MariaDB and JSON fields\n          if (row[modelField.fieldName] && typeof row[modelField.fieldName] === 'string' && !this.connection.info.hasMinVersion(10, 5, 2)) {\n            row[modelField.fieldName] = JSON.parse(row[modelField.fieldName]);\n          }\n          if (DataTypes.JSON.parse) {\n            return DataTypes.JSON.parse(modelField, this.sequelize.options,\n              row[modelField.fieldName]);\n          }\n          return row;\n        });\n      }\n    }\n  }\n\n  async logWarnings(results) {\n    const warningResults = await this.run('SHOW WARNINGS');\n    const warningMessage = `MariaDB Warnings (${this.connection.uuid || 'default'}): `;\n    const messages = [];\n    for (const _warningRow of warningResults) {\n      if (_warningRow === undefined || typeof _warningRow[Symbol.iterator] !== 'function') {\n        continue;\n      }\n      for (const _warningResult of _warningRow) {\n        if (Object.prototype.hasOwnProperty.call(_warningResult, 'Message')) {\n          messages.push(_warningResult.Message);\n        } else {\n          for (const _objectKey of _warningResult.keys()) {\n            messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\n          }\n        }\n      }\n    }\n\n    this.sequelize.log(warningMessage + messages.join('; '), this.options);\n\n    return results;\n  }\n\n  formatError(err, errStack) {\n    switch (err.errno) {\n      case ER_DUP_ENTRY: {\n        const match = err.message.match(\n          /Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?\\s.*$/);\n\n        let fields = {};\n        let message = 'Validation error';\n        const values = match ? match[1].split('-') : undefined;\n        const fieldKey = match ? match[2] : undefined;\n        const fieldVal = match ? match[1] : undefined;\n        const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n        if (uniqueKey) {\n          if (uniqueKey.msg) message = uniqueKey.msg;\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[fieldKey] = fieldVal;\n        }\n\n        const errors = [];\n        _.forOwn(fields, (value, field) => {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field,\n            value,\n            this.instance,\n            'not_unique'\n          ));\n        });\n\n        return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n      }\n\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW: {\n        // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n        const match = err.message.match(\n          /CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/\n        );\n        const quoteChar = match ? match[1] : '`';\n        const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          reltype: err.errno === ER_ROW_IS_REFERENCED ? 'parent' : 'child',\n          table: match ? match[4] : undefined,\n          fields,\n          value: fields && fields.length && this.instance && this.instance[fields[0]] || undefined,\n          index: match ? match[2] : undefined,\n          parent: err,\n          stack: errStack\n        });\n      }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n    }\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => ({\n      tableName: resultSet.TABLE_NAME,\n      schema: resultSet.TABLE_SCHEMA\n    }));\n  }\n\n  handleShowIndexesQuery(data) {\n\n    let currItem;\n    const result = [];\n\n    data.forEach(item => {\n      if (!currItem || currItem.name !== item.Key_name) {\n        currItem = {\n          primary: item.Key_name === 'PRIMARY',\n          fields: [],\n          name: item.Key_name,\n          tableName: item.Table,\n          unique: item.Non_unique !== 1,\n          type: item.Index_type\n        };\n        result.push(currItem);\n      }\n\n      currItem.fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || undefined,\n        order: item.Collation === 'A' ? 'ASC' : undefined\n      };\n    });\n\n    return result;\n  }\n}\n\nmodule.exports = Query;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 13430, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13435, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/abstract/query-generator/operators.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Op = require('../../../operators');\nconst Utils = require('../../../utils');\n\nconst OperatorHelpers = {\n  OperatorMap: {\n    [Op.eq]: '=',\n    [Op.ne]: '!=',\n    [Op.gte]: '>=',\n    [Op.gt]: '>',\n    [Op.lte]: '<=',\n    [Op.lt]: '<',\n    [Op.not]: 'IS NOT',\n    [Op.is]: 'IS',\n    [Op.in]: 'IN',\n    [Op.notIn]: 'NOT IN',\n    [Op.like]: 'LIKE',\n    [Op.notLike]: 'NOT LIKE',\n    [Op.iLike]: 'ILIKE',\n    [Op.notILike]: 'NOT ILIKE',\n    [Op.startsWith]: 'LIKE',\n    [Op.endsWith]: 'LIKE',\n    [Op.substring]: 'LIKE',\n    [Op.regexp]: '~',\n    [Op.notRegexp]: '!~',\n    [Op.iRegexp]: '~*',\n    [Op.notIRegexp]: '!~*',\n    [Op.between]: 'BETWEEN',\n    [Op.notBetween]: 'NOT BETWEEN',\n    [Op.overlap]: '&&',\n    [Op.contains]: '@>',\n    [Op.contained]: '<@',\n    [Op.adjacent]: '-|-',\n    [Op.strictLeft]: '<<',\n    [Op.strictRight]: '>>',\n    [Op.noExtendRight]: '&<',\n    [Op.noExtendLeft]: '&>',\n    [Op.any]: 'ANY',\n    [Op.all]: 'ALL',\n    [Op.and]: ' AND ',\n    [Op.or]: ' OR ',\n    [Op.col]: 'COL',\n    [Op.placeholder]: '$$PLACEHOLDER$$',\n    [Op.match]: '@@'\n  },\n\n  OperatorsAliasMap: {},\n\n  setOperatorsAliases(aliases) {\n    if (!aliases || _.isEmpty(aliases)) {\n      this.OperatorsAliasMap = false;\n    } else {\n      this.OperatorsAliasMap = { ...aliases };\n    }\n  },\n\n  _replaceAliases(orig) {\n    const obj = {};\n    if (!this.OperatorsAliasMap) {\n      return orig;\n    }\n\n    Utils.getOperators(orig).forEach(op => {\n      const item = orig[op];\n      if (_.isPlainObject(item)) {\n        obj[op] = this._replaceAliases(item);\n      } else {\n        obj[op] = item;\n      }\n    });\n\n    _.forOwn(orig, (item, prop) => {\n      prop = this.OperatorsAliasMap[prop] || prop;\n      if (_.isPlainObject(item)) {\n        item = this._replaceAliases(item);\n      }\n      obj[prop] = item;\n    });\n    return obj;\n  }\n};\n\nmodule.exports = OperatorHelpers;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAEA,MAAM,IAAI,QAAQ;AAClB,MAAM,KAAK,QAAQ;AACnB,MAAM,QAAQ,QAAQ;AAEtB,MAAM,kBAAkB;IACtB,aAAa;QAAA,CACV,GAAG,EAAA,CAAA,EAAK;QAAA,CACR,GAAG,EAAA,CAAA,EAAK;QAAA,CACR,GAAG,GAAA,CAAA,EAAM;QAAA,CACT,GAAG,EAAA,CAAA,EAAK;QAAA,CACR,GAAG,GAAA,CAAA,EAAM;QAAA,CACT,GAAG,EAAA,CAAA,EAAK;QAAA,CACR,GAAG,GAAA,CAAA,EAAM;QAAA,CACT,GAAG,EAAA,CAAA,EAAK;QAAA,CACR,GAAG,EAAA,CAAA,EAAK;QAAA,CACR,GAAG,KAAA,CAAA,EAAQ;QAAA,CACX,GAAG,IAAA,CAAA,EAAO;QAAA,CACV,GAAG,OAAA,CAAA,EAAU;QAAA,CACb,GAAG,KAAA,CAAA,EAAQ;QAAA,CACX,GAAG,QAAA,CAAA,EAAW;QAAA,CACd,GAAG,UAAA,CAAA,EAAa;QAAA,CAChB,GAAG,QAAA,CAAA,EAAW;QAAA,CACd,GAAG,SAAA,CAAA,EAAY;QAAA,CACf,GAAG,MAAA,CAAA,EAAS;QAAA,CACZ,GAAG,SAAA,CAAA,EAAY;QAAA,CACf,GAAG,OAAA,CAAA,EAAU;QAAA,CACb,GAAG,UAAA,CAAA,EAAa;QAAA,CAChB,GAAG,OAAA,CAAA,EAAU;QAAA,CACb,GAAG,UAAA,CAAA,EAAa;QAAA,CAChB,GAAG,OAAA,CAAA,EAAU;QAAA,CACb,GAAG,QAAA,CAAA,EAAW;QAAA,CACd,GAAG,SAAA,CAAA,EAAY;QAAA,CACf,GAAG,QAAA,CAAA,EAAW;QAAA,CACd,GAAG,UAAA,CAAA,EAAa;QAAA,CAChB,GAAG,WAAA,CAAA,EAAc;QAAA,CACjB,GAAG,aAAA,CAAA,EAAgB;QAAA,CACnB,GAAG,YAAA,CAAA,EAAe;QAAA,CAClB,GAAG,GAAA,CAAA,EAAM;QAAA,CACT,GAAG,GAAA,CAAA,EAAM;QAAA,CACT,GAAG,GAAA,CAAA,EAAM;QAAA,CACT,GAAG,EAAA,CAAA,EAAK;QAAA,CACR,GAAG,GAAA,CAAA,EAAM;QAAA,CACT,GAAG,WAAA,CAAA,EAAc;QAAA,CACjB,GAAG,KAAA,CAAA,EAAQ;IAAA;IAGd,mBAAmB,CAAA;IAEnB,qBAAoB,OAAA,EAAS;QAC3B,IAAI,CAAC,WAAW,EAAE,OAAA,CAAQ,UAAU;YAClC,IAAA,CAAK,iBAAA,GAAoB;QAAA,OACpB;YACL,IAAA,CAAK,iBAAA,GAAoB,eAAA,CAAA,GAAK;QAAA;IAAA;IAIlC,iBAAgB,IAAA,EAAM;QACpB,MAAM,MAAM,CAAA;QACZ,IAAI,CAAC,IAAA,CAAK,iBAAA,EAAmB;YAC3B,OAAO;QAAA;QAGT,MAAM,YAAA,CAAa,MAAM,OAAA,CAAQ,CAAA,OAAM;YACrC,MAAM,OAAO,IAAA,CAAK,GAAA;YAClB,IAAI,EAAE,aAAA,CAAc,OAAO;gBACzB,GAAA,CAAI,GAAA,GAAM,IAAA,CAAK,eAAA,CAAgB;YAAA,OAC1B;gBACL,GAAA,CAAI,GAAA,GAAM;YAAA;QAAA;QAId,EAAE,MAAA,CAAO,MAAM,CAAC,MAAM,SAAS;YAC7B,OAAO,IAAA,CAAK,iBAAA,CAAkB,KAAA,IAAS;YACvC,IAAI,EAAE,aAAA,CAAc,OAAO;gBACzB,OAAO,IAAA,CAAK,eAAA,CAAgB;YAAA;YAE9B,GAAA,CAAI,KAAA,GAAQ;QAAA;QAEd,OAAO;IAAA;AAAA;AAIX,OAAO,OAAA,GAAU","ignoreList":[0]}},
    {"offset": {"line": 13529, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13534, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/abstract/query-generator/transaction.js"],"sourcesContent":["'use strict';\n\nconst uuidv4 = require('uuid').v4;\n\nconst TransactionQueries = {\n  /**\n   * Returns a query that sets the transaction isolation level.\n   *\n   * @param  {string} value   The isolation level.\n   * @param  {object} options An object with options.\n   * @returns {string}         The generated sql query.\n   * @private\n   */\n  setIsolationLevelQuery(value, options) {\n    if (options.parent) {\n      return;\n    }\n\n    return `SET TRANSACTION ISOLATION LEVEL ${value};`;\n  },\n\n  generateTransactionId() {\n    return uuidv4();\n  },\n\n  /**\n   * Returns a query that starts a transaction.\n   *\n   * @param  {Transaction} transaction\n   * @returns {string}         The generated sql query.\n   * @private\n   */\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      // force quoting of savepoint identifiers for postgres\n      return `SAVEPOINT ${this.quoteIdentifier(transaction.name, true)};`;\n    }\n\n    return 'START TRANSACTION;';\n  },\n\n  deferConstraintsQuery() {},\n\n  setConstraintQuery() {},\n  setDeferredQuery() {},\n  setImmediateQuery() {},\n\n  /**\n   * Returns a query that commits a transaction.\n   *\n   * @param  {Transaction} transaction An object with options.\n   * @returns {string}         The generated sql query.\n   * @private\n   */\n  commitTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return;\n    }\n\n    return 'COMMIT;';\n  },\n\n  /**\n   * Returns a query that rollbacks a transaction.\n   *\n   * @param  {Transaction} transaction\n   * @returns {string}         The generated sql query.\n   * @private\n   */\n  rollbackTransactionQuery(transaction) {\n    if (transaction.parent) {\n      // force quoting of savepoint identifiers for postgres\n      return `ROLLBACK TO SAVEPOINT ${this.quoteIdentifier(transaction.name, true)};`;\n    }\n\n    return 'ROLLBACK;';\n  }\n};\n\nmodule.exports = TransactionQueries;\n"],"names":[],"mappings":";AAEA,MAAM,SAAS,QAAQ,iGAAQ,EAAA;AAE/B,MAAM,qBAAqB;IASzB,wBAAuB,KAAA,EAAO,OAAA,EAAS;QACrC,IAAI,QAAQ,MAAA,EAAQ;YAClB;QAAA;QAGF,OAAO,CAAA,gCAAA,EAAmC,MAAA,CAAA,CAAA;IAAA;IAG5C,wBAAwB;QACtB,OAAO;IAAA;IAUT,uBAAsB,WAAA,EAAa;QACjC,IAAI,YAAY,MAAA,EAAQ;YAEtB,OAAO,CAAA,UAAA,EAAa,IAAA,CAAK,eAAA,CAAgB,YAAY,IAAA,EAAM,MAAA,CAAA,CAAA;QAAA;QAG7D,OAAO;IAAA;IAGT,wBAAwB,EAAA;IAExB,qBAAqB,EAAA;IACrB,mBAAmB,EAAA;IACnB,oBAAoB,EAAA;IASpB,wBAAuB,WAAA,EAAa;QAClC,IAAI,YAAY,MAAA,EAAQ;YACtB;QAAA;QAGF,OAAO;IAAA;IAUT,0BAAyB,WAAA,EAAa;QACpC,IAAI,YAAY,MAAA,EAAQ;YAEtB,OAAO,CAAA,sBAAA,EAAyB,IAAA,CAAK,eAAA,CAAgB,YAAY,IAAA,EAAM,MAAA,CAAA,CAAA;QAAA;QAGzE,OAAO;IAAA;AAAA;AAIX,OAAO,OAAA,GAAU","ignoreList":[0]}},
    {"offset": {"line": 13570, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13575, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/abstract/query-generator.js"],"sourcesContent":["'use strict';\n\nconst util = require('util');\nconst _ = require('lodash');\nconst uuidv4 = require('uuid').v4;\n\nconst Utils = require('../../utils');\nconst deprecations = require('../../utils/deprecations');\nconst SqlString = require('../../sql-string');\nconst DataTypes = require('../../data-types');\nconst Model = require('../../model');\nconst Association = require('../../associations/base');\nconst BelongsTo = require('../../associations/belongs-to');\nconst BelongsToMany = require('../../associations/belongs-to-many');\nconst HasMany = require('../../associations/has-many');\nconst Op = require('../../operators');\nconst sequelizeError = require('../../errors');\nconst IndexHints = require('../../index-hints');\n\n\n/**\n * Abstract Query Generator\n *\n * @private\n */\nclass QueryGenerator {\n  constructor(options) {\n    if (!options.sequelize) throw new Error('QueryGenerator initialized without options.sequelize');\n    if (!options._dialect) throw new Error('QueryGenerator initialized without options._dialect');\n\n    this.sequelize = options.sequelize;\n    this.options = options.sequelize.options;\n\n    // dialect name\n    this.dialect = options._dialect.name;\n    this._dialect = options._dialect;\n\n    // wrap quoteIdentifier with common logic\n    this._initQuoteIdentifier();\n  }\n\n  extractTableDetails(tableName, options) {\n    options = options || {};\n    tableName = tableName || {};\n    return {\n      schema: tableName.schema || options.schema || this.options.schema || 'public',\n      tableName: _.isPlainObject(tableName) ? tableName.tableName : tableName,\n      delimiter: tableName.delimiter || options.delimiter || '.'\n    };\n  }\n\n  addSchema(param) {\n    if (!param._schema) return param.tableName || param;\n    const self = this;\n    return {\n      tableName: param.tableName || param,\n      table: param.tableName || param,\n      name: param.name || param,\n      schema: param._schema,\n      delimiter: param._schemaDelimiter || '.',\n      toString() {\n        return self.quoteTable(this);\n      }\n    };\n  }\n\n  dropSchema(tableName, options) {\n    return this.dropTableQuery(tableName, options);\n  }\n\n  describeTableQuery(tableName, schema, schemaDelimiter) {\n    const table = this.quoteTable(\n      this.addSchema({\n        tableName,\n        _schema: schema,\n        _schemaDelimiter: schemaDelimiter\n      })\n    );\n\n    return `DESCRIBE ${table};`;\n  }\n\n  dropTableQuery(tableName) {\n    return `DROP TABLE IF EXISTS ${this.quoteTable(tableName)};`;\n  }\n\n  renameTableQuery(before, after) {\n    return `ALTER TABLE ${this.quoteTable(before)} RENAME TO ${this.quoteTable(after)};`;\n  }\n\n  /**\n   * Helper method for populating the returning into bind information\n   * that is needed by some dialects (currently Oracle)\n   *\n   * @private\n   */\n  populateInsertQueryReturnIntoBinds() {\n    // noop by default\n  }\n\n  /**\n   * Returns an insert into command\n   *\n   * @param {string} table\n   * @param {object} valueHash       attribute value pairs\n   * @param {object} modelAttributes\n   * @param {object} [options]\n   *\n   * @private\n   */\n  insertQuery(table, valueHash, modelAttributes, options) {\n    options = options || {};\n    _.defaults(options, this.options);\n\n    const modelAttributeMap = {};\n    const bind = options.bind || [];\n    const fields = [];\n    const returningModelAttributes = [];\n    const returnTypes = [];\n    const values = [];\n    const quotedTable = this.quoteTable(table);\n    const bindParam = options.bindParam === undefined ? this.bindParam(bind) : options.bindParam;\n    const returnAttributes = [];\n    let query;\n    let valueQuery = '';\n    let emptyQuery = '';\n    let outputFragment = '';\n    let returningFragment = '';\n    let identityWrapperRequired = false;\n    let tmpTable = ''; //tmpTable declaration for trigger\n\n    if (modelAttributes) {\n      _.each(modelAttributes, (attribute, key) => {\n        modelAttributeMap[key] = attribute;\n        if (attribute.field) {\n          modelAttributeMap[attribute.field] = attribute;\n        }\n      });\n    }\n\n    if (this._dialect.supports['DEFAULT VALUES']) {\n      emptyQuery += ' DEFAULT VALUES';\n    } else if (this._dialect.supports['VALUES ()']) {\n      emptyQuery += ' VALUES ()';\n    }\n\n    if ((this._dialect.supports.returnValues || this._dialect.supports.returnIntoValues) && options.returning) {\n      const returnValues = this.generateReturnValues(modelAttributes, options);\n\n      returningModelAttributes.push(...returnValues.returnFields);\n      // Storing the returnTypes for dialects that need to have returning into bind information for outbinds\n      if (this._dialect.supports.returnIntoValues) {\n        returnTypes.push(...returnValues.returnTypes);\n      }\n      returningFragment = returnValues.returningFragment;\n      tmpTable = returnValues.tmpTable || '';\n      outputFragment = returnValues.outputFragment || '';\n    }\n\n    if (_.get(this, ['sequelize', 'options', 'dialectOptions', 'prependSearchPath']) || options.searchPath) {\n      // Not currently supported with search path (requires output of multiple queries)\n      options.bindParam = false;\n    }\n\n    if (this._dialect.supports.EXCEPTION && options.exception) {\n      // Not currently supported with bind parameters (requires output of multiple queries)\n      options.bindParam = false;\n    }\n\n    valueHash = Utils.removeNullValuesFromHash(valueHash, this.options.omitNull);\n    for (const key in valueHash) {\n      if (Object.prototype.hasOwnProperty.call(valueHash, key)) {\n        const value = valueHash[key];\n        fields.push(this.quoteIdentifier(key));\n\n        // SERIALS' can't be NULL in postgresql, use DEFAULT where supported\n        if (modelAttributeMap && modelAttributeMap[key] && modelAttributeMap[key].autoIncrement === true && value == null) {\n          if (!this._dialect.supports.autoIncrement.defaultValue) {\n            fields.splice(-1, 1);\n          } else if (this._dialect.supports.DEFAULT) {\n            values.push('DEFAULT');\n          } else {\n            values.push(this.escape(null));\n          }\n        } else {\n          if (modelAttributeMap && modelAttributeMap[key] && modelAttributeMap[key].autoIncrement === true) {\n            identityWrapperRequired = true;\n          }\n\n          if (value instanceof Utils.SequelizeMethod || options.bindParam === false) {\n            values.push(this.escape(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'INSERT' }));\n          } else {\n            values.push(this.format(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'INSERT' }, bindParam));\n          }\n        }\n      }\n    }\n\n    let onDuplicateKeyUpdate = '';\n\n    if (\n      !_.isEmpty(options.conflictWhere)\n      && !this._dialect.supports.inserts.onConflictWhere\n    ) {\n      throw new Error('missing dialect support for conflictWhere option');\n    }\n\n    // `options.updateOnDuplicate` is the list of field names to update if a duplicate key is hit during the insert.  It\n    // contains just the field names.  This option is _usually_ explicitly set by the corresponding query-interface\n    // upsert function.\n    if (this._dialect.supports.inserts.updateOnDuplicate && options.updateOnDuplicate) {\n      if (this._dialect.supports.inserts.updateOnDuplicate == ' ON CONFLICT DO UPDATE SET') { // postgres / sqlite\n        // If no conflict target columns were specified, use the primary key names from options.upsertKeys\n        const conflictKeys = options.upsertKeys.map(attr => this.quoteIdentifier(attr));\n        const updateKeys = options.updateOnDuplicate.map(attr => `${this.quoteIdentifier(attr)}=EXCLUDED.${this.quoteIdentifier(attr)}`);\n\n        const fragments = [\n          'ON CONFLICT',\n          '(',\n          conflictKeys.join(','),\n          ')'\n        ];\n\n        if (!_.isEmpty(options.conflictWhere)) {\n          fragments.push(this.whereQuery(options.conflictWhere, options));\n        }\n\n        // if update keys are provided, then apply them here.  if there are no updateKeys provided, then do not try to\n        // do an update.  Instead, fall back to DO NOTHING.\n        if (_.isEmpty(updateKeys)) {\n          fragments.push('DO NOTHING');\n        } else {\n          fragments.push('DO UPDATE SET', updateKeys.join(','));\n        }\n\n        onDuplicateKeyUpdate = ` ${Utils.joinSQLFragments(fragments)}`;\n\n      } else {\n        const valueKeys = options.updateOnDuplicate.map(attr => `${this.quoteIdentifier(attr)}=VALUES(${this.quoteIdentifier(attr)})`);\n        // the rough equivalent to ON CONFLICT DO NOTHING in mysql, etc is ON DUPLICATE KEY UPDATE id = id\n        // So, if no update values were provided, fall back to the identifier columns provided in the upsertKeys array.\n        // This will be the primary key in most cases, but it could be some other constraint.\n        if (_.isEmpty(valueKeys) && options.upsertKeys) {\n          valueKeys.push(...options.upsertKeys.map(attr => `${this.quoteIdentifier(attr)}=${this.quoteIdentifier(attr)}`));\n        }\n\n        // edge case... but if for some reason there were no valueKeys, and there were also no upsertKeys... then we\n        // can no longer build the requested query without a syntax error.  Let's throw something more graceful here\n        // so the devs know what the problem is.\n        if (_.isEmpty(valueKeys)) {\n          throw new Error('No update values found for ON DUPLICATE KEY UPDATE clause, and no identifier fields could be found to use instead.');\n        }\n        onDuplicateKeyUpdate += `${this._dialect.supports.inserts.updateOnDuplicate} ${valueKeys.join(',')}`;\n      }\n    }\n\n    const replacements = {\n      ignoreDuplicates: options.ignoreDuplicates ? this._dialect.supports.inserts.ignoreDuplicates : '',\n      onConflictDoNothing: options.ignoreDuplicates ? this._dialect.supports.inserts.onConflictDoNothing : '',\n      attributes: fields.join(','),\n      output: outputFragment,\n      values: values.join(','),\n      tmpTable\n    };\n\n    valueQuery = `${tmpTable}INSERT${replacements.ignoreDuplicates} INTO ${quotedTable} (${replacements.attributes})${replacements.output} VALUES (${replacements.values})${onDuplicateKeyUpdate}${replacements.onConflictDoNothing}${valueQuery}`;\n    emptyQuery = `${tmpTable}INSERT${replacements.ignoreDuplicates} INTO ${quotedTable}${replacements.output}${onDuplicateKeyUpdate}${replacements.onConflictDoNothing}${emptyQuery}`;\n\n    // Mostly for internal use, so we expect the user to know what he's doing!\n    // pg_temp functions are private per connection, so we never risk this function interfering with another one.\n    if (this._dialect.supports.EXCEPTION && options.exception) {\n      const dropFunction = 'DROP FUNCTION IF EXISTS pg_temp.testfunc()';\n\n      if (returningModelAttributes.length === 0) {\n        returningModelAttributes.push('*');\n      }\n\n      const delimiter = `$func_${uuidv4().replace(/-/g, '')}$`;\n      const selectQuery = `SELECT (testfunc.response).${returningModelAttributes.join(', (testfunc.response).')}, testfunc.sequelize_caught_exception FROM pg_temp.testfunc();`;\n\n      options.exception = 'WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL;';\n      valueQuery = `CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response ${quotedTable}, OUT sequelize_caught_exception text) RETURNS RECORD AS ${delimiter} BEGIN ${valueQuery} RETURNING * INTO response; EXCEPTION ${options.exception} END ${delimiter} LANGUAGE plpgsql; ${selectQuery} ${dropFunction}`;\n    } else {\n      valueQuery += returningFragment;\n      emptyQuery += returningFragment;\n    }\n\n    if (this._dialect.supports.returnIntoValues && options.returning) {\n      // Populating the returnAttributes array and performing operations needed for output binds of insertQuery\n      this.populateInsertQueryReturnIntoBinds(returningModelAttributes, returnTypes, bind.length, returnAttributes, options);\n    }\n\n    query = `${replacements.attributes.length ? valueQuery : emptyQuery}${returnAttributes.join(',')};`;\n    if (this._dialect.supports.finalTable) {\n      query = `SELECT * FROM FINAL TABLE(${ replacements.attributes.length ? valueQuery : emptyQuery });`;\n    }\n    if (identityWrapperRequired && this._dialect.supports.autoIncrement.identityInsert) {\n      query = `SET IDENTITY_INSERT ${quotedTable} ON; ${query} SET IDENTITY_INSERT ${quotedTable} OFF;`;\n    }\n\n    // Used by Postgres upsertQuery and calls to here with options.exception set to true\n    const result = { query };\n    if (options.bindParam !== false) {\n      result.bind = bind;\n    }\n\n    return result;\n  }\n\n  /**\n   * Returns an insert into command for multiple values.\n   *\n   * @param {string} tableName\n   * @param {object} fieldValueHashes\n   * @param {object} options\n   * @param {object} fieldMappedAttributes\n   *\n   * @private\n   */\n  bulkInsertQuery(tableName, fieldValueHashes, options, fieldMappedAttributes) {\n    options = options || {};\n    fieldMappedAttributes = fieldMappedAttributes || {};\n\n    const tuples = [];\n    const serials = {};\n    const allAttributes = [];\n    let onDuplicateKeyUpdate = '';\n\n    for (const fieldValueHash of fieldValueHashes) {\n      _.forOwn(fieldValueHash, (value, key) => {\n        if (!allAttributes.includes(key)) {\n          allAttributes.push(key);\n        }\n        if (\n          fieldMappedAttributes[key]\n          && fieldMappedAttributes[key].autoIncrement === true\n        ) {\n          serials[key] = true;\n        }\n      });\n    }\n\n    for (const fieldValueHash of fieldValueHashes) {\n      const values = allAttributes.map(key => {\n        if (\n          this._dialect.supports.bulkDefault\n          && serials[key] === true\n        ) {\n          // fieldValueHashes[key] ?? 'DEFAULT'\n          return fieldValueHash[key] != null ? fieldValueHash[key] : 'DEFAULT';\n        }\n\n        return this.escape(fieldValueHash[key], fieldMappedAttributes[key], { context: 'INSERT' });\n      });\n\n      tuples.push(`(${values.join(',')})`);\n    }\n\n    // `options.updateOnDuplicate` is the list of field names to update if a duplicate key is hit during the insert.  It\n    // contains just the field names.  This option is _usually_ explicitly set by the corresponding query-interface\n    // upsert function.\n    if (this._dialect.supports.inserts.updateOnDuplicate && options.updateOnDuplicate) {\n      if (this._dialect.supports.inserts.updateOnDuplicate == ' ON CONFLICT DO UPDATE SET') { // postgres / sqlite\n        // If no conflict target columns were specified, use the primary key names from options.upsertKeys\n        const conflictKeys = options.upsertKeys.map(attr => this.quoteIdentifier(attr));\n        const updateKeys = options.updateOnDuplicate.map(attr => `${this.quoteIdentifier(attr)}=EXCLUDED.${this.quoteIdentifier(attr)}`);\n\n        let whereClause = false;\n        if (options.conflictWhere) {\n          if (!this._dialect.supports.inserts.onConflictWhere) {\n            throw new Error(`conflictWhere not supported for dialect ${this._dialect.name}`);\n          }\n\n          whereClause = this.whereQuery(options.conflictWhere, options);\n        }\n\n        // The Utils.joinSQLFragments later on will join this as it handles nested arrays.\n        onDuplicateKeyUpdate = [\n          'ON CONFLICT',\n          '(',\n          conflictKeys.join(','),\n          ')',\n          whereClause,\n          'DO UPDATE SET',\n          updateKeys.join(',')\n        ];\n      } else { // mysql / maria\n        if (options.conflictWhere) {\n          throw new Error(`conflictWhere not supported for dialect ${this._dialect.name}`);\n        }\n\n        const valueKeys = options.updateOnDuplicate.map(attr => `${this.quoteIdentifier(attr)}=VALUES(${this.quoteIdentifier(attr)})`);\n        onDuplicateKeyUpdate = `${this._dialect.supports.inserts.updateOnDuplicate} ${valueKeys.join(',')}`;\n      }\n    }\n\n    const ignoreDuplicates = options.ignoreDuplicates ? this._dialect.supports.inserts.ignoreDuplicates : '';\n    const attributes = allAttributes.map(attr => this.quoteIdentifier(attr)).join(',');\n    const onConflictDoNothing = options.ignoreDuplicates ? this._dialect.supports.inserts.onConflictDoNothing : '';\n    let returning = '';\n\n    if (this._dialect.supports.returnValues && options.returning) {\n      const returnValues = this.generateReturnValues(fieldMappedAttributes, options);\n\n      returning += returnValues.returningFragment;\n    }\n\n    return Utils.joinSQLFragments([\n      'INSERT',\n      ignoreDuplicates,\n      'INTO',\n      this.quoteTable(tableName),\n      `(${attributes})`,\n      'VALUES',\n      tuples.join(','),\n      onDuplicateKeyUpdate,\n      onConflictDoNothing,\n      returning,\n      ';'\n    ]);\n  }\n\n  /**\n   * Returns an update query\n   *\n   * @param {string} tableName\n   * @param {object} attrValueHash\n   * @param {object} where A hash with conditions (e.g. {name: 'foo'}) OR an ID as integer\n   * @param {object} options\n   * @param {object} attributes\n   *\n   * @private\n   */\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    options = options || {};\n    _.defaults(options, this.options);\n\n    attrValueHash = Utils.removeNullValuesFromHash(attrValueHash, options.omitNull, options);\n\n    const values = [];\n    const bind = [];\n    const modelAttributeMap = {};\n    let outputFragment = '';\n    let tmpTable = ''; // tmpTable declaration for trigger\n    let suffix = '';\n\n    if (_.get(this, ['sequelize', 'options', 'dialectOptions', 'prependSearchPath']) || options.searchPath) {\n      // Not currently supported with search path (requires output of multiple queries)\n      options.bindParam = false;\n    }\n\n    const bindParam = options.bindParam === undefined ? this.bindParam(bind) : options.bindParam;\n\n    if (this._dialect.supports['LIMIT ON UPDATE'] && options.limit) {\n      if (!['mssql', 'db2', 'oracle'].includes(this.dialect)) {\n        suffix = ` LIMIT ${this.escape(options.limit)} `;\n      } else if (this.dialect === 'oracle') {\n        // This cannot be setted in where because rownum will be quoted\n        if (where && (where.length && where.length > 0 || Object.keys(where).length > 0)) {\n          // If we have a where clause, we add AND\n          suffix += ' AND ';\n        } else {\n          // No where clause, we add where\n          suffix += ' WHERE ';\n        }\n        suffix += `rownum <= ${this.escape(options.limit)} `;\n      }\n    }\n\n    if (this._dialect.supports.returnValues && options.returning) {\n      const returnValues = this.generateReturnValues(attributes, options);\n\n      suffix += returnValues.returningFragment;\n      tmpTable = returnValues.tmpTable || '';\n      outputFragment = returnValues.outputFragment || '';\n\n      // ensure that the return output is properly mapped to model fields.\n      if (!this._dialect.supports.returnValues.output && options.returning) {\n        options.mapToModel = true;\n      }\n    }\n\n    if (attributes) {\n      _.each(attributes, (attribute, key) => {\n        modelAttributeMap[key] = attribute;\n        if (attribute.field) {\n          modelAttributeMap[attribute.field] = attribute;\n        }\n      });\n    }\n\n    for (const key in attrValueHash) {\n      if (modelAttributeMap && modelAttributeMap[key] &&\n        modelAttributeMap[key].autoIncrement === true &&\n        !this._dialect.supports.autoIncrement.update) {\n        // not allowed to update identity column\n        continue;\n      }\n\n      const value = attrValueHash[key];\n\n      if (value instanceof Utils.SequelizeMethod || options.bindParam === false) {\n        values.push(`${this.quoteIdentifier(key)}=${this.escape(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'UPDATE' })}`);\n      } else {\n        values.push(`${this.quoteIdentifier(key)}=${this.format(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'UPDATE' }, bindParam)}`);\n      }\n    }\n\n    const whereOptions = { ...options, bindParam };\n\n    if (values.length === 0) {\n      return '';\n    }\n\n    const query = `${tmpTable}UPDATE ${this.quoteTable(tableName)} SET ${values.join(',')}${outputFragment} ${this.whereQuery(where, whereOptions)}${suffix}`.trim();\n    // Used by Postgres upsertQuery and calls to here with options.exception set to true\n    const result = { query };\n    if (options.bindParam !== false) {\n      result.bind = bind;\n    }\n    return result;\n  }\n\n  /**\n   * Returns an update query using arithmetic operator\n   *\n   * @param {string} operator                    String with the arithmetic operator (e.g. '+' or '-')\n   * @param {string} tableName                   Name of the table\n   * @param {object} where                       A plain-object with conditions (e.g. {name: 'foo'}) OR an ID as integer\n   * @param {object} incrementAmountsByField     A plain-object with attribute-value-pairs\n   * @param {object} extraAttributesToBeUpdated  A plain-object with attribute-value-pairs\n   * @param {object} options\n   *\n   * @private\n   */\n  arithmeticQuery(operator, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options) {\n    options = options || {};\n    _.defaults(options, { returning: true });\n\n    extraAttributesToBeUpdated = Utils.removeNullValuesFromHash(extraAttributesToBeUpdated, this.options.omitNull);\n\n    let outputFragment = '';\n    let returningFragment = '';\n\n    if (this._dialect.supports.returnValues && options.returning) {\n      const returnValues = this.generateReturnValues(null, options);\n\n      outputFragment = returnValues.outputFragment;\n      returningFragment = returnValues.returningFragment;\n    }\n\n    const updateSetSqlFragments = [];\n    for (const field in incrementAmountsByField) {\n      const incrementAmount = incrementAmountsByField[field];\n      const quotedField = this.quoteIdentifier(field);\n      const escapedAmount = this.escape(incrementAmount);\n      updateSetSqlFragments.push(`${quotedField}=${quotedField}${operator} ${escapedAmount}`);\n    }\n    for (const field in extraAttributesToBeUpdated) {\n      const newValue = extraAttributesToBeUpdated[field];\n      const quotedField = this.quoteIdentifier(field);\n      const escapedValue = this.escape(newValue);\n      updateSetSqlFragments.push(`${quotedField}=${escapedValue}`);\n    }\n\n    return Utils.joinSQLFragments([\n      'UPDATE',\n      this.quoteTable(tableName),\n      'SET',\n      updateSetSqlFragments.join(','),\n      outputFragment,\n      this.whereQuery(where),\n      returningFragment\n    ]);\n  }\n\n  /*\n    Returns an add index query.\n    Parameters:\n      - tableName -> Name of an existing table, possibly with schema.\n      - options:\n        - type: UNIQUE|FULLTEXT|SPATIAL\n        - name: The name of the index. Default is <table>_<attr1>_<attr2>\n        - fields: An array of attributes as string or as hash.\n                  If the attribute is a hash, it must have the following content:\n                  - name: The name of the attribute/column\n                  - length: An integer. Optional\n                  - order: 'ASC' or 'DESC'. Optional\n        - parser\n        - using\n        - operator\n        - concurrently: Pass CONCURRENT so other operations run while the index is created\n      - rawTablename, the name of the table, without schema. Used to create the name of the index\n   @private\n  */\n  addIndexQuery(tableName, attributes, options, rawTablename) {\n    options = options || {};\n\n    if (!Array.isArray(attributes)) {\n      options = attributes;\n      attributes = undefined;\n    } else {\n      options.fields = attributes;\n    }\n\n    options.prefix = options.prefix || rawTablename || tableName;\n    if (options.prefix && typeof options.prefix === 'string') {\n      options.prefix = options.prefix.replace(/\\./g, '_');\n      options.prefix = options.prefix.replace(/(\"|')/g, '');\n    }\n\n    const fieldsSql = options.fields.map(field => {\n      if (field instanceof Utils.SequelizeMethod) {\n        return this.handleSequelizeMethod(field);\n      }\n      if (typeof field === 'string') {\n        field = {\n          name: field\n        };\n      }\n      let result = '';\n\n      if (field.attribute) {\n        field.name = field.attribute;\n      }\n\n      if (!field.name) {\n        throw new Error(`The following index field has no name: ${util.inspect(field)}`);\n      }\n\n      result += this.quoteIdentifier(field.name);\n\n      if (this._dialect.supports.index.collate && field.collate) {\n        result += ` COLLATE ${this.quoteIdentifier(field.collate)}`;\n      }\n\n      if (this._dialect.supports.index.operator) {\n        const operator = field.operator || options.operator;\n        if (operator) {\n          result += ` ${operator}`;\n        }\n      }\n\n      if (this._dialect.supports.index.length && field.length) {\n        result += `(${field.length})`;\n      }\n\n      if (field.order) {\n        result += ` ${field.order}`;\n      }\n\n      return result;\n    });\n\n    if (!options.name) {\n      // Mostly for cases where addIndex is called directly by the user without an options object (for example in migrations)\n      // All calls that go through sequelize should already have a name\n      options = Utils.nameIndex(options, options.prefix);\n    }\n\n    options = Model._conformIndex(options);\n\n    if (!this._dialect.supports.index.type) {\n      delete options.type;\n    }\n\n    if (options.where) {\n      options.where = this.whereQuery(options.where);\n    }\n\n    if (typeof tableName === 'string') {\n      tableName = this.quoteIdentifiers(tableName);\n    } else {\n      tableName = this.quoteTable(tableName);\n    }\n\n    const concurrently = this._dialect.supports.index.concurrently && options.concurrently ? 'CONCURRENTLY' : undefined;\n    let ind;\n    if (this._dialect.supports.indexViaAlter) {\n      ind = [\n        'ALTER TABLE',\n        tableName,\n        concurrently,\n        'ADD'\n      ];\n    } else {\n      ind = ['CREATE'];\n    }\n\n    ind = ind.concat(\n      options.unique ? 'UNIQUE' : '',\n      options.type, 'INDEX',\n      !this._dialect.supports.indexViaAlter ? concurrently : undefined,\n      this.quoteIdentifiers(options.name),\n      this._dialect.supports.index.using === 1 && options.using ? `USING ${options.using}` : '',\n      !this._dialect.supports.indexViaAlter ? `ON ${tableName}` : undefined,\n      this._dialect.supports.index.using === 2 && options.using ? `USING ${options.using}` : '',\n      `(${fieldsSql.join(', ')})`,\n      this._dialect.supports.index.parser && options.parser ? `WITH PARSER ${options.parser}` : undefined,\n      this._dialect.supports.index.where && options.where ? options.where : undefined\n    );\n\n    return _.compact(ind).join(' ');\n  }\n\n  addConstraintQuery(tableName, options) {\n    if (typeof tableName === 'string') {\n      tableName = this.quoteIdentifiers(tableName);\n    } else {\n      tableName = this.quoteTable(tableName);\n    }\n\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      tableName,\n      'ADD',\n      this.getConstraintSnippet(tableName, options || {}),\n      ';'\n    ]);\n  }\n\n  getConstraintSnippet(tableName, options) {\n    let constraintSnippet, constraintName;\n\n    const fieldsSql = options.fields.map(field => {\n      if (typeof field === 'string') {\n        return this.quoteIdentifier(field);\n      }\n      if (field instanceof Utils.SequelizeMethod) {\n        return this.handleSequelizeMethod(field);\n      }\n      if (field.attribute) {\n        field.name = field.attribute;\n      }\n\n      if (!field.name) {\n        throw new Error(`The following index field has no name: ${field}`);\n      }\n\n      return this.quoteIdentifier(field.name);\n    });\n\n    const fieldsSqlQuotedString = fieldsSql.join(', ');\n    const fieldsSqlString = fieldsSql.join('_');\n\n    switch (options.type.toUpperCase()) {\n      case 'UNIQUE':\n        constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_uk`);\n        constraintSnippet = `CONSTRAINT ${constraintName} UNIQUE (${fieldsSqlQuotedString})`;\n        break;\n      case 'CHECK':\n        options.where = this.whereItemsQuery(options.where);\n        constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_ck`);\n        constraintSnippet = `CONSTRAINT ${constraintName} CHECK (${options.where})`;\n        break;\n      case 'DEFAULT':\n        if (options.defaultValue === undefined) {\n          throw new Error('Default value must be specified for DEFAULT CONSTRAINT');\n        }\n\n        if (this._dialect.name !== 'mssql') {\n          throw new Error('Default constraints are supported only for MSSQL dialect.');\n        }\n\n        constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_df`);\n        constraintSnippet = `CONSTRAINT ${constraintName} DEFAULT (${this.escape(options.defaultValue)}) FOR ${fieldsSql[0]}`;\n        break;\n      case 'PRIMARY KEY':\n        constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_pk`);\n        constraintSnippet = `CONSTRAINT ${constraintName} PRIMARY KEY (${fieldsSqlQuotedString})`;\n        break;\n      case 'FOREIGN KEY':\n        const references = options.references;\n        if (!references || !references.table || !(references.field || references.fields)) {\n          throw new Error('references object with table and field must be specified');\n        }\n        constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_${references.table}_fk`);\n        const quotedReferences =\n          typeof references.field !== 'undefined'\n            ? this.quoteIdentifier(references.field)\n            : references.fields.map(f => this.quoteIdentifier(f)).join(', ');\n        const referencesSnippet = `${this.quoteTable(references.table)} (${quotedReferences})`;\n        constraintSnippet = `CONSTRAINT ${constraintName} `;\n        constraintSnippet += `FOREIGN KEY (${fieldsSqlQuotedString}) REFERENCES ${referencesSnippet}`;\n        if (options.onUpdate) {\n          constraintSnippet += ` ON UPDATE ${options.onUpdate.toUpperCase()}`;\n        }\n        if (options.onDelete) {\n          constraintSnippet += ` ON DELETE ${options.onDelete.toUpperCase()}`;\n        }\n        break;\n      default: throw new Error(`${options.type} is invalid.`);\n    }\n\n    if (options.deferrable && ['UNIQUE', 'PRIMARY KEY', 'FOREIGN KEY'].includes(options.type.toUpperCase())) {\n      constraintSnippet += ` ${this.deferConstraintsQuery(options)}`;\n    }\n\n    return constraintSnippet;\n  }\n\n  removeConstraintQuery(tableName, constraintName) {\n    if (typeof tableName === 'string') {\n      tableName = this.quoteIdentifiers(tableName);\n    } else {\n      tableName = this.quoteTable(tableName);\n    }\n\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      tableName,\n      'DROP CONSTRAINT',\n      this.quoteIdentifiers(constraintName)\n    ]);\n  }\n\n  /*\n    Quote an object based on its type. This is a more general version of quoteIdentifiers\n    Strings: should proxy to quoteIdentifiers\n    Arrays:\n      * Expects array in the form: [<model> (optional), <model> (optional),... String, String (optional)]\n        Each <model> can be a model, or an object {model: Model, as: String}, matching include, or an\n        association object, or the name of an association.\n      * Zero or more models can be included in the array and are used to trace a path through the tree of\n        included nested associations. This produces the correct table name for the ORDER BY/GROUP BY SQL\n        and quotes it.\n      * If a single string is appended to end of array, it is quoted.\n        If two strings appended, the 1st string is quoted, the 2nd string unquoted.\n    Objects:\n      * If raw is set, that value should be returned verbatim, without quoting\n      * If fn is set, the string should start with the value of fn, starting paren, followed by\n        the values of cols (which is assumed to be an array), quoted and joined with ', ',\n        unless they are themselves objects\n      * If direction is set, should be prepended\n\n    Currently this function is only used for ordering / grouping columns and Sequelize.col(), but it could\n    potentially also be used for other places where we want to be able to call SQL functions (e.g. as default values)\n   @private\n  */\n  quote(collection, parent, connector) {\n    // init\n    const validOrderOptions = [\n      'ASC',\n      'DESC',\n      'ASC NULLS LAST',\n      'DESC NULLS LAST',\n      'ASC NULLS FIRST',\n      'DESC NULLS FIRST',\n      'NULLS FIRST',\n      'NULLS LAST'\n    ];\n\n    // default\n    connector = connector || '.';\n\n    // just quote as identifiers if string\n    if (typeof collection === 'string') {\n      return this.quoteIdentifiers(collection);\n    }\n    if (Array.isArray(collection)) {\n      // iterate through the collection and mutate objects into associations\n      collection.forEach((item, index) => {\n        const previous = collection[index - 1];\n        let previousAssociation;\n        let previousModel;\n\n        // set the previous as the parent when previous is undefined or the target of the association\n        if (!previous && parent !== undefined) {\n          previousModel = parent;\n        } else if (previous && previous instanceof Association) {\n          previousAssociation = previous;\n          previousModel = previous.target;\n        }\n\n        // if the previous item is a model, then attempt getting an association\n        if (previousModel && previousModel.prototype instanceof Model) {\n          let model;\n          let as;\n\n          if (typeof item === 'function' && item.prototype instanceof Model) {\n            // set\n            model = item;\n          } else if (_.isPlainObject(item) && item.model && item.model.prototype instanceof Model) {\n            // set\n            model = item.model;\n            as = item.as;\n          }\n\n          if (model) {\n            // set the as to either the through name or the model name\n            if (!as && previousAssociation && previousAssociation instanceof Association && previousAssociation.through && previousAssociation.through.model === model) {\n              // get from previous association\n              item = new Association(previousModel, model, {\n                as: model.name\n              });\n            } else {\n              // get association from previous model\n              item = previousModel.getAssociationForAlias(model, as);\n\n              // attempt to use the model name if the item is still null\n              if (!item) {\n                item = previousModel.getAssociationForAlias(model, model.name);\n              }\n            }\n\n            // make sure we have an association\n            if (!(item instanceof Association)) {\n              throw new Error(util.format('Unable to find a valid association for model, \\'%s\\'', model.name));\n            }\n          }\n        }\n\n        if (typeof item === 'string') {\n          // get order index\n          const orderIndex = validOrderOptions.indexOf(item.toUpperCase());\n\n          // see if this is an order\n          if (index > 0 && orderIndex !== -1) {\n            item = this.sequelize.literal(` ${validOrderOptions[orderIndex]}`);\n          } else if (previousModel && previousModel.prototype instanceof Model) {\n            // only go down this path if we have preivous model and check only once\n            if (previousModel.associations !== undefined && previousModel.associations[item]) {\n              // convert the item to an association\n              item = previousModel.associations[item];\n            } else if (previousModel.rawAttributes !== undefined && previousModel.rawAttributes[item] && item !== previousModel.rawAttributes[item].field) {\n              // convert the item attribute from its alias\n              item = previousModel.rawAttributes[item].field;\n            } else if (\n              item.includes('.')\n              && previousModel.rawAttributes !== undefined\n            ) {\n              const itemSplit = item.split('.');\n\n              if (previousModel.rawAttributes[itemSplit[0]].type instanceof DataTypes.JSON) {\n                // just quote identifiers for now\n                const identifier = this.quoteIdentifiers(`${previousModel.name}.${previousModel.rawAttributes[itemSplit[0]].field}`);\n\n                // get path\n                const path = itemSplit.slice(1);\n\n                // extract path\n                item = this.jsonPathExtractionQuery(identifier, path);\n\n                // literal because we don't want to append the model name when string\n                item = this.sequelize.literal(item);\n              }\n            }\n          }\n        }\n\n        collection[index] = item;\n      }, this);\n\n      // loop through array, adding table names of models to quoted\n      const collectionLength = collection.length;\n      const tableNames = [];\n      let item;\n      let i = 0;\n\n      for (i = 0; i < collectionLength - 1; i++) {\n        item = collection[i];\n        if (typeof item === 'string' || item._modelAttribute || item instanceof Utils.SequelizeMethod) {\n          break;\n        } else if (item instanceof Association) {\n          tableNames[i] = item.as;\n        }\n      }\n\n      // start building sql\n      let sql = '';\n\n      if (i > 0) {\n        sql += `${this.quoteIdentifier(tableNames.join(connector))}.`;\n      } else if (typeof collection[0] === 'string' && parent) {\n        sql += `${this.quoteIdentifier(parent.name)}.`;\n      }\n\n      // loop through everything past i and append to the sql\n      collection.slice(i).forEach(collectionItem => {\n        sql += this.quote(collectionItem, parent, connector);\n      }, this);\n\n      return sql;\n    }\n    if (collection._modelAttribute) {\n      return `${this.quoteTable(collection.Model.name)}.${this.quoteIdentifier(collection.fieldName)}`;\n    }\n    if (collection instanceof Utils.SequelizeMethod) {\n      return this.handleSequelizeMethod(collection);\n    }\n    if (_.isPlainObject(collection) && collection.raw) {\n      // simple objects with raw is no longer supported\n      throw new Error('The `{raw: \"...\"}` syntax is no longer supported.  Use `sequelize.literal` instead.');\n    }\n    throw new Error(`Unknown structure passed to order / group: ${util.inspect(collection)}`);\n  }\n\n  _initQuoteIdentifier() {\n    this._quoteIdentifier = this.quoteIdentifier;\n    this.quoteIdentifier = function(identifier, force) {\n      if (identifier === '*') return identifier;\n      return this._quoteIdentifier(identifier, force);\n    };\n  }\n\n  /**\n   * Adds quotes to identifier\n   *\n   * @param {string} identifier\n   * @param {boolean} force\n   *\n   * @returns {string}\n   */\n  quoteIdentifier(identifier, force) {\n    throw new Error(`quoteIdentifier for Dialect \"${this.dialect}\" is not implemented`);\n  }\n\n  /**\n   * Split a list of identifiers by \".\" and quote each part.\n   *\n   * @param {string} identifiers\n   *\n   * @returns {string}\n   */\n  quoteIdentifiers(identifiers) {\n    if (identifiers.includes('.')) {\n      identifiers = identifiers.split('.');\n\n      const head = identifiers.slice(0, identifiers.length - 1).join('->');\n      const tail = identifiers[identifiers.length - 1];\n\n      return `${this.quoteIdentifier(head)}.${this.quoteIdentifier(tail)}`;\n    }\n\n    return this.quoteIdentifier(identifiers);\n  }\n\n  quoteAttribute(attribute, model) {\n    if (model && attribute in model.rawAttributes) {\n      return this.quoteIdentifier(attribute);\n    }\n    return this.quoteIdentifiers(attribute);\n  }\n\n  /**\n   * Returns the alias token\n   *\n   * @returns {string}\n   */\n  getAliasToken() {\n    return 'AS';\n  }\n\n  /**\n   * Quote table name with optional alias and schema attribution\n   *\n   * @param {string|object}  param table string or object\n   * @param {string|boolean} alias alias name\n   *\n   * @returns {string}\n   */\n  quoteTable(param, alias) {\n    let table = '';\n\n    if (alias === true) {\n      alias = param.as || param.name || param;\n    }\n\n    if (_.isObject(param)) {\n      if (this._dialect.supports.schemas) {\n        if (param.schema) {\n          table += `${this.quoteIdentifier(param.schema)}.`;\n        }\n\n        table += this.quoteIdentifier(param.tableName);\n      } else {\n        if (param.schema) {\n          table += param.schema + (param.delimiter || '.');\n        }\n\n        table += param.tableName;\n        table = this.quoteIdentifier(table);\n      }\n    } else {\n      table = this.quoteIdentifier(param);\n    }\n\n    if (alias) {\n      table += ` ${this.getAliasToken()} ${this.quoteIdentifier(alias)}`;\n    }\n\n    return table;\n  }\n\n  /*\n    Escape a value (e.g. a string, number or date)\n    @private\n  */\n  escape(value, field, options) {\n    options = options || {};\n\n    if (value !== null && value !== undefined) {\n      if (value instanceof Utils.SequelizeMethod) {\n        return this.handleSequelizeMethod(value);\n      }\n      if (field && field.type) {\n        if (field.type instanceof DataTypes.STRING\n            && ['mysql', 'mariadb'].includes(this.dialect)\n            && ['number', 'boolean'].includes(typeof value)) {\n          value = String(Number(value));\n        }\n              \n        this.validate(value, field, options);\n\n        if (field.type.stringify) {\n          // Users shouldn't have to worry about these args - just give them a function that takes a single arg\n          const simpleEscape = escVal => SqlString.escape(escVal, this.options.timezone, this.dialect);\n\n          value = field.type.stringify(value, { escape: simpleEscape, field, timezone: this.options.timezone, operation: options.operation });\n\n          if (field.type.escape === false) {\n            // The data-type already did the required escaping\n            return value;\n          }\n        }\n      }\n    }\n    return SqlString.escape(value, this.options.timezone, this.dialect);\n  }\n\n  bindParam(bind) {\n    return value => {\n      bind.push(value);\n      return `$${bind.length}`;\n    };\n  }\n\n  /*\n    Returns a bind parameter representation of a value (e.g. a string, number or date)\n    @private\n  */\n  format(value, field, options, bindParam) {\n    options = options || {};\n\n    if (value !== null && value !== undefined) {\n      if (value instanceof Utils.SequelizeMethod) {\n        throw new Error('Cannot pass SequelizeMethod as a bind parameter - use escape instead');\n      }\n      if (field && field.type) {\n        this.validate(value, field, options);\n\n        if (field.type.bindParam) {\n          return field.type.bindParam(value, { escape: _.identity, field, timezone: this.options.timezone, operation: options.operation, bindParam });\n        }\n      }\n    }\n\n    return bindParam(value);\n  }\n\n  /*\n    Validate a value against a field specification\n    @private\n  */\n  validate(value, field, options) {\n    if (this.typeValidation && field.type.validate && value) {\n      try {\n        if (options.isList && Array.isArray(value)) {\n          for (const item of value) {\n            field.type.validate(item, options);\n          }\n        } else {\n          field.type.validate(value, options);\n        }\n      } catch (error) {\n        if (error instanceof sequelizeError.ValidationError) {\n          error.errors.push(new sequelizeError.ValidationErrorItem(\n            error.message,\n            'Validation error',\n            field.fieldName,\n            value,\n            null,\n            `${field.type.key} validator`\n          ));\n        }\n\n        throw error;\n      }\n    }\n  }\n\n  isIdentifierQuoted(identifier) {\n    return /^\\s*(?:([`\"'])(?:(?!\\1).|\\1{2})*\\1\\.?)+\\s*$/i.test(identifier);\n  }\n\n  /**\n   * Generates an SQL query that extract JSON property of given path.\n   *\n   * @param   {string}               column   The JSON column\n   * @param   {string|Array<string>} [path]   The path to extract (optional)\n   * @param   {boolean}              [isJson] The value is JSON use alt symbols (optional)\n   * @returns {string}                        The generated sql query\n   * @private\n   */\n  jsonPathExtractionQuery(column, path, isJson) {\n    let paths = _.toPath(path);\n    let pathStr;\n    const quotedColumn = this.isIdentifierQuoted(column)\n      ? column\n      : this.quoteIdentifier(column);\n\n    switch (this.dialect) {\n      case 'mysql':\n      case 'mariadb':\n      case 'sqlite':\n        /**\n         * Non digit sub paths need to be quoted as ECMAScript identifiers\n         * https://bugs.mysql.com/bug.php?id=81896\n         */\n        if (this.dialect === 'mysql') {\n          paths = paths.map(subPath => {\n            return /\\D/.test(subPath)\n              ? Utils.addTicks(subPath, '\"')\n              : subPath;\n          });\n        }\n\n        pathStr = this.escape(['$']\n          .concat(paths)\n          .join('.')\n          .replace(/\\.(\\d+)(?:(?=\\.)|$)/g, (__, digit) => `[${digit}]`));\n\n        if (this.dialect === 'sqlite') {\n          return `json_extract(${quotedColumn},${pathStr})`;\n        }\n\n        return `json_unquote(json_extract(${quotedColumn},${pathStr}))`;\n\n      case 'postgres':\n        const join = isJson ? '#>' : '#>>';\n        pathStr = this.escape(`{${paths.join(',')}}`);\n        return `(${quotedColumn}${join}${pathStr})`;\n\n      default:\n        throw new Error(`Unsupported ${this.dialect} for JSON operations`);\n    }\n  }\n\n  /*\n    Returns a query for selecting elements in the table <tableName>.\n    Options:\n      - attributes -> An array of attributes (e.g. ['name', 'birthday']). Default: *\n      - where -> A hash with conditions (e.g. {name: 'foo'})\n                 OR an ID as integer\n      - order -> e.g. 'id DESC'\n      - group\n      - limit -> The maximum count you want to get.\n      - offset -> An offset value to start from. Only useable with limit!\n   @private\n  */\n  selectQuery(tableName, options, model) {\n    options = options || {};\n    const limit = options.limit;\n    const mainQueryItems = [];\n    const subQueryItems = [];\n    const subQuery = options.subQuery === undefined ? limit && options.hasMultiAssociation : options.subQuery;\n    const attributes = {\n      main: options.attributes && options.attributes.slice(),\n      subQuery: null\n    };\n    const mainTable = {\n      name: tableName,\n      quotedName: null,\n      as: null,\n      model\n    };\n    const topLevelInfo = {\n      names: mainTable,\n      options,\n      subQuery\n    };\n    let mainJoinQueries = [];\n    let subJoinQueries = [];\n    let query;\n\n    // Aliases can be passed through subqueries and we don't want to reset them\n    if (this.options.minifyAliases && !options.aliasesMapping) {\n      options.aliasesMapping = new Map();\n      options.aliasesByTable = {};\n      options.includeAliases = new Map();\n    }\n\n    // resolve table name options\n    if (options.tableAs) {\n      mainTable.as = this.quoteIdentifier(options.tableAs);\n    } else if (!Array.isArray(mainTable.name) && mainTable.model) {\n      mainTable.as = this.quoteIdentifier(mainTable.model.name);\n    }\n\n    mainTable.quotedName = !Array.isArray(mainTable.name) ? this.quoteTable(mainTable.name) : tableName.map(t => {\n      return Array.isArray(t) ? this.quoteTable(t[0], t[1]) : this.quoteTable(t, true);\n    }).join(', ');\n\n    if (subQuery && attributes.main) {\n      for (const keyAtt of mainTable.model.primaryKeyAttributes) {\n        // Check if mainAttributes contain the primary key of the model either as a field or an aliased field\n        if (!attributes.main.some(attr => keyAtt === attr || keyAtt === attr[0] || keyAtt === attr[1])) {\n          attributes.main.push(mainTable.model.rawAttributes[keyAtt].field ? [keyAtt, mainTable.model.rawAttributes[keyAtt].field] : keyAtt);\n        }\n      }\n    }\n\n    attributes.main = this.escapeAttributes(attributes.main, options, mainTable.as);\n    attributes.main = attributes.main || (options.include ? [`${mainTable.as}.*`] : ['*']);\n\n    // If subquery, we add the mainAttributes to the subQuery and set the mainAttributes to select * from subquery\n    if (subQuery || options.groupedLimit) {\n      // We need primary keys\n      attributes.subQuery = attributes.main;\n      attributes.main = [`${mainTable.as || mainTable.quotedName}.*`];\n    }\n\n    if (options.include) {\n      for (const include of options.include) {\n        if (include.separate) {\n          continue;\n        }\n        const joinQueries = this.generateInclude(include, { externalAs: mainTable.as, internalAs: mainTable.as }, topLevelInfo);\n\n        subJoinQueries = subJoinQueries.concat(joinQueries.subQuery);\n        mainJoinQueries = mainJoinQueries.concat(joinQueries.mainQuery);\n\n        if (joinQueries.attributes.main.length > 0) {\n          attributes.main = _.uniq(attributes.main.concat(joinQueries.attributes.main));\n        }\n        if (joinQueries.attributes.subQuery.length > 0) {\n          attributes.subQuery = _.uniq(attributes.subQuery.concat(joinQueries.attributes.subQuery));\n        }\n      }\n    }\n\n    if (subQuery) {\n      subQueryItems.push(this.selectFromTableFragment(options, mainTable.model, attributes.subQuery, mainTable.quotedName, mainTable.as));\n      subQueryItems.push(subJoinQueries.join(''));\n    } else {\n      if (options.groupedLimit) {\n        if (!mainTable.as) {\n          mainTable.as = mainTable.quotedName;\n        }\n        const where = { ...options.where };\n        let groupedLimitOrder,\n          whereKey,\n          include,\n          groupedTableName = mainTable.as;\n\n        if (typeof options.groupedLimit.on === 'string') {\n          whereKey = options.groupedLimit.on;\n        } else if (options.groupedLimit.on instanceof HasMany) {\n          whereKey = options.groupedLimit.on.foreignKeyField;\n        }\n\n        if (options.groupedLimit.on instanceof BelongsToMany) {\n          // BTM includes needs to join the through table on to check ID\n          groupedTableName = options.groupedLimit.on.manyFromSource.as;\n          const groupedLimitOptions = Model._validateIncludedElements({\n            include: [{\n              association: options.groupedLimit.on.manyFromSource,\n              duplicating: false, // The UNION'ed query may contain duplicates, but each sub-query cannot\n              required: true,\n              where: {\n                [Op.placeholder]: true,\n                ...options.groupedLimit.through && options.groupedLimit.through.where\n              }\n            }],\n            model\n          });\n\n          // Make sure attributes from the join table are mapped back to models\n          options.hasJoin = true;\n          options.hasMultiAssociation = true;\n          options.includeMap = Object.assign(groupedLimitOptions.includeMap, options.includeMap);\n          options.includeNames = groupedLimitOptions.includeNames.concat(options.includeNames || []);\n          include = groupedLimitOptions.include;\n\n          if (Array.isArray(options.order)) {\n            // We need to make sure the order by attributes are available to the parent query\n            options.order.forEach((order, i) => {\n              if (Array.isArray(order)) {\n                order = order[0];\n              }\n\n              let alias = `subquery_order_${i}`;\n              options.attributes.push([order, alias]);\n\n              // We don't want to prepend model name when we alias the attributes, so quote them here\n              alias = this.sequelize.literal(this.quote(alias));\n\n              if (Array.isArray(options.order[i])) {\n                options.order[i][0] = alias;\n              } else {\n                options.order[i] = alias;\n              }\n            });\n            groupedLimitOrder = options.order;\n          }\n        } else {\n          // Ordering is handled by the subqueries, so ordering the UNION'ed result is not needed\n          groupedLimitOrder = options.order;\n\n          // For the Oracle dialect, the result of a select is a set, not a sequence, and so is the result of UNION.\n          // So the top level ORDER BY is required\n          if (!this._dialect.supports.topLevelOrderByRequired) {\n            delete options.order;\n          }\n          where[Op.placeholder] = true;\n        }\n\n        // Caching the base query and splicing the where part into it is consistently > twice\n        // as fast than generating from scratch each time for values.length >= 5\n        const baseQuery = `SELECT * FROM (${this.selectQuery(\n          tableName,\n          {\n            attributes: options.attributes,\n            offset: options.offset,\n            limit: options.groupedLimit.limit,\n            order: groupedLimitOrder,\n            aliasesMapping: options.aliasesMapping,\n            aliasesByTable: options.aliasesByTable,\n            where,\n            include,\n            model\n          },\n          model\n        ).replace(/;$/, '')}) ${this.getAliasToken()} sub`; // Every derived table must have its own alias\n        const placeHolder = this.whereItemQuery(Op.placeholder, true, { model });\n        const splicePos = baseQuery.indexOf(placeHolder);\n\n        mainQueryItems.push(this.selectFromTableFragment(options, mainTable.model, attributes.main, `(${\n          options.groupedLimit.values.map(value => {\n            let groupWhere;\n            if (whereKey) {\n              groupWhere = {\n                [whereKey]: value\n              };\n            }\n            if (include) {\n              groupWhere = {\n                [options.groupedLimit.on.foreignIdentifierField]: value\n              };\n            }\n\n            return Utils.spliceStr(baseQuery, splicePos, placeHolder.length, this.getWhereConditions(groupWhere, groupedTableName));\n          }).join(\n            this._dialect.supports['UNION ALL'] ? ' UNION ALL ' : ' UNION '\n          )\n        })`, mainTable.as));\n      } else {\n        mainQueryItems.push(this.selectFromTableFragment(options, mainTable.model, attributes.main, mainTable.quotedName, mainTable.as));\n      }\n\n      mainQueryItems.push(mainJoinQueries.join(''));\n    }\n\n    // Add WHERE to sub or main query\n    if (Object.prototype.hasOwnProperty.call(options, 'where') && !options.groupedLimit) {\n      options.where = this.getWhereConditions(options.where, mainTable.as || tableName, model, options);\n      if (options.where) {\n        if (subQuery) {\n          subQueryItems.push(` WHERE ${options.where}`);\n        } else {\n          mainQueryItems.push(` WHERE ${options.where}`);\n          // Walk the main query to update all selects\n          mainQueryItems.forEach((value, key) => {\n            if (value.startsWith('SELECT')) {\n              mainQueryItems[key] = this.selectFromTableFragment(options, model, attributes.main, mainTable.quotedName, mainTable.as, options.where);\n            }\n          });\n        }\n      }\n    }\n\n    // Add GROUP BY to sub or main query\n    if (options.group) {\n      options.group = Array.isArray(options.group) ? options.group.map(t => this.aliasGrouping(t, model, mainTable.as, options)).join(', ') : this.aliasGrouping(options.group, model, mainTable.as, options);\n\n      if (subQuery && options.group) {\n        subQueryItems.push(` GROUP BY ${options.group}`);\n      } else if (options.group) {\n        mainQueryItems.push(` GROUP BY ${options.group}`);\n      }\n    }\n\n    // Add HAVING to sub or main query\n    if (Object.prototype.hasOwnProperty.call(options, 'having')) {\n      options.having = this.getWhereConditions(options.having, tableName, model, options, false);\n      if (options.having) {\n        if (subQuery) {\n          subQueryItems.push(` HAVING ${options.having}`);\n        } else {\n          mainQueryItems.push(` HAVING ${options.having}`);\n        }\n      }\n    }\n\n    // Add ORDER to sub or main query\n    if (options.order) {\n      const orders = this.getQueryOrders(options, model, subQuery);\n      if (orders.mainQueryOrder.length) {\n        mainQueryItems.push(` ORDER BY ${orders.mainQueryOrder.join(', ')}`);\n      }\n      if (orders.subQueryOrder.length) {\n        subQueryItems.push(` ORDER BY ${orders.subQueryOrder.join(', ')}`);\n      }\n    }\n\n    // Add LIMIT, OFFSET to sub or main query\n    const limitOrder = this.addLimitAndOffset(options, mainTable.model);\n    if (limitOrder && !options.groupedLimit) {\n      if (subQuery) {\n        subQueryItems.push(limitOrder);\n      } else {\n        mainQueryItems.push(limitOrder);\n      }\n    }\n\n    if (subQuery) {\n      this._throwOnEmptyAttributes(attributes.main, { modelName: model && model.name, as: mainTable.as });\n      query = `SELECT ${attributes.main.join(', ')} FROM (${subQueryItems.join('')}) ${this.getAliasToken()} ${mainTable.as}${mainJoinQueries.join('')}${mainQueryItems.join('')}`;\n    } else {\n      query = mainQueryItems.join('');\n    }\n\n    if (options.lock && this._dialect.supports.lock) {\n      let lock = options.lock;\n      if (typeof options.lock === 'object') {\n        lock = options.lock.level;\n      }\n      if (this._dialect.supports.lockKey && ['KEY SHARE', 'NO KEY UPDATE'].includes(lock)) {\n        query += ` FOR ${lock}`;\n      } else if (lock === 'SHARE') {\n        query += ` ${this._dialect.supports.forShare}`;\n      } else {\n        query += ' FOR UPDATE';\n      }\n      if (this._dialect.supports.lockOf && options.lock.of && options.lock.of.prototype instanceof Model) {\n        query += ` OF ${this.quoteTable(options.lock.of.name)}`;\n      }\n      if (this._dialect.supports.skipLocked && options.skipLocked) {\n        query += ' SKIP LOCKED';\n      }\n    }\n\n    return `${query};`;\n  }\n\n  aliasGrouping(field, model, tableName, options) {\n    const src = Array.isArray(field) ? field[0] : field;\n\n    return this.quote(this._getAliasForField(tableName, src, options) || src, model);\n  }\n\n  escapeAttributes(attributes, options, mainTableAs) {\n    return attributes && attributes.map(attr => {\n      let addTable = true;\n\n      if (attr instanceof Utils.SequelizeMethod) {\n        return this.handleSequelizeMethod(attr);\n      }\n      if (Array.isArray(attr)) {\n        if (attr.length !== 2) {\n          throw new Error(`${JSON.stringify(attr)} is not a valid attribute definition. Please use the following format: ['attribute definition', 'alias']`);\n        }\n        attr = attr.slice();\n\n        if (attr[0] instanceof Utils.SequelizeMethod) {\n          attr[0] = this.handleSequelizeMethod(attr[0]);\n          addTable = false;\n        } else if (this.options.attributeBehavior === 'escape' || !attr[0].includes('(') && !attr[0].includes(')')) {\n          attr[0] = this.quoteIdentifier(attr[0]);\n        } else if (this.options.attributeBehavior !== 'unsafe-legacy') {\n          throw new Error(`Attributes cannot include parentheses in Sequelize 6:\nIn order to fix the vulnerability CVE-2023-22578, we had to remove support for treating attributes as raw SQL if they included parentheses.\nSequelize 7 escapes all attributes, even if they include parentheses.\nFor Sequelize 6, because we're introducing this change in a minor release, we've opted for throwing an error instead of silently escaping the attribute as a way to warn you about this change.\n\nHere is what you can do to fix this error:\n- Wrap the attribute in a literal() call. This will make Sequelize treat it as raw SQL.\n- Set the \"attributeBehavior\" sequelize option to \"escape\" to make Sequelize escape the attribute, like in Sequelize v7. We highly recommend this option.\n- Set the \"attributeBehavior\" sequelize option to \"unsafe-legacy\" to make Sequelize escape the attribute, like in Sequelize v5.\n\nWe sincerely apologize for the inconvenience this may cause you. You can find more information on the following threads:\nhttps://github.com/sequelize/sequelize/security/advisories/GHSA-f598-mfpv-gmfx\nhttps://github.com/sequelize/sequelize/discussions/15694`);\n        }\n\n        let alias = attr[1];\n\n        if (this.options.minifyAliases) {\n          alias = this._getMinifiedAlias(alias, mainTableAs, options);\n        }\n\n        attr = [attr[0], this.quoteIdentifier(alias)].join(' AS ');\n      } else {\n        attr = !attr.includes(Utils.TICK_CHAR) && !attr.includes('\"')\n          ? this.quoteAttribute(attr, options.model)\n          : this.escape(attr);\n      }\n      if (!_.isEmpty(options.include) && (!attr.includes('.') || options.dotNotation) && addTable) {\n        attr = `${mainTableAs}.${attr}`;\n      }\n\n      return attr;\n    });\n  }\n\n  generateInclude(include, parentTableName, topLevelInfo) {\n    const joinQueries = {\n      mainQuery: [],\n      subQuery: []\n    };\n    const mainChildIncludes = [];\n    const subChildIncludes = [];\n    let requiredMismatch = false;\n    const includeAs = {\n      internalAs: include.as,\n      externalAs: include.as\n    };\n    const attributes = {\n      main: [],\n      subQuery: []\n    };\n    let joinQuery;\n\n    topLevelInfo.options.keysEscaped = true;\n\n    if (topLevelInfo.names.name !== parentTableName.externalAs && topLevelInfo.names.as !== parentTableName.externalAs) {\n      includeAs.internalAs = `${parentTableName.internalAs}->${include.as}`;\n      includeAs.externalAs = `${parentTableName.externalAs}.${include.as}`;\n    }\n\n    // includeIgnoreAttributes is used by aggregate functions\n    if (topLevelInfo.options.includeIgnoreAttributes !== false) {\n      include.model._expandAttributes(include);\n      Utils.mapFinderOptions(include, include.model);\n\n      const includeAttributes = include.attributes.map(attr => {\n        let attrAs = attr;\n        let verbatim = false;\n\n        if (Array.isArray(attr) && attr.length === 2) {\n          if (attr[0] instanceof Utils.SequelizeMethod && (\n            attr[0] instanceof Utils.Literal ||\n            attr[0] instanceof Utils.Cast ||\n            attr[0] instanceof Utils.Fn\n          )) {\n            verbatim = true;\n          }\n\n          attr = attr.map(attr => attr instanceof Utils.SequelizeMethod ? this.handleSequelizeMethod(attr) : attr);\n\n          attrAs = attr[1];\n          attr = attr[0];\n        }\n        if (attr instanceof Utils.Literal) {\n          return attr.val; // We trust the user to rename the field correctly\n        }\n        if (attr instanceof Utils.Cast || attr instanceof Utils.Fn) {\n          throw new Error(\n            'Tried to select attributes using Sequelize.cast or Sequelize.fn without specifying an alias for the result, during eager loading. ' +\n            'This means the attribute will not be added to the returned instance'\n          );\n        }\n\n        let prefix;\n        if (verbatim === true) {\n          prefix = attr;\n        } else if (/#>>|->>/.test(attr)) {\n          prefix = `(${this.quoteIdentifier(includeAs.internalAs)}.${attr.replace(/\\(|\\)/g, '')})`;\n        } else if (/json_extract\\(/.test(attr)) {\n          prefix = attr.replace(/json_extract\\(/i, `json_extract(${this.quoteIdentifier(includeAs.internalAs)}.`);\n        } else if (/json_value\\(/.test(attr)) {\n          prefix = attr.replace(/json_value\\(/i, `json_value(${this.quoteIdentifier(includeAs.internalAs)}.`);\n        } else {\n          prefix = `${this.quoteIdentifier(includeAs.internalAs)}.${this.quoteIdentifier(attr)}`;\n        }\n        let alias = `${includeAs.externalAs}.${attrAs}`;\n\n        if (this.options.minifyAliases) {\n          alias = this._getMinifiedAlias(alias, includeAs.internalAs, topLevelInfo.options);\n        }\n\n        return Utils.joinSQLFragments([\n          prefix,\n          'AS',\n          this.quoteIdentifier(alias, true)\n        ]);\n      });\n      if (include.subQuery && topLevelInfo.subQuery) {\n        for (const attr of includeAttributes) {\n          attributes.subQuery.push(attr);\n        }\n      } else {\n        for (const attr of includeAttributes) {\n          attributes.main.push(attr);\n        }\n      }\n    }\n\n    //through\n    if (include.through) {\n      joinQuery = this.generateThroughJoin(include, includeAs, parentTableName.internalAs, topLevelInfo);\n    } else {\n      this._generateSubQueryFilter(include, includeAs, topLevelInfo);\n      joinQuery = this.generateJoin(include, topLevelInfo);\n    }\n\n    // handle possible new attributes created in join\n    if (joinQuery.attributes.main.length > 0) {\n      attributes.main = attributes.main.concat(joinQuery.attributes.main);\n    }\n\n    if (joinQuery.attributes.subQuery.length > 0) {\n      attributes.subQuery = attributes.subQuery.concat(joinQuery.attributes.subQuery);\n    }\n\n    if (include.include) {\n      for (const childInclude of include.include) {\n        if (childInclude.separate || childInclude._pseudo) {\n          continue;\n        }\n\n        const childJoinQueries = this.generateInclude(childInclude, includeAs, topLevelInfo);\n\n        if (include.required === false && childInclude.required === true) {\n          requiredMismatch = true;\n        }\n        // if the child is a sub query we just give it to the\n        if (childInclude.subQuery && topLevelInfo.subQuery) {\n          subChildIncludes.push(childJoinQueries.subQuery);\n        }\n        if (childJoinQueries.mainQuery) {\n          mainChildIncludes.push(childJoinQueries.mainQuery);\n        }\n        if (childJoinQueries.attributes.main.length > 0) {\n          attributes.main = attributes.main.concat(childJoinQueries.attributes.main);\n        }\n        if (childJoinQueries.attributes.subQuery.length > 0) {\n          attributes.subQuery = attributes.subQuery.concat(childJoinQueries.attributes.subQuery);\n        }\n      }\n    }\n\n    if (include.subQuery && topLevelInfo.subQuery) {\n      if (requiredMismatch && subChildIncludes.length > 0) {\n        joinQueries.subQuery.push(` ${joinQuery.join} ( ${joinQuery.body}${subChildIncludes.join('')} ) ON ${joinQuery.condition}`);\n      } else {\n        joinQueries.subQuery.push(` ${joinQuery.join} ${joinQuery.body} ON ${joinQuery.condition}`);\n        if (subChildIncludes.length > 0) {\n          joinQueries.subQuery.push(subChildIncludes.join(''));\n        }\n      }\n      joinQueries.mainQuery.push(mainChildIncludes.join(''));\n    } else {\n      if (requiredMismatch && mainChildIncludes.length > 0) {\n        joinQueries.mainQuery.push(` ${joinQuery.join} ( ${joinQuery.body}${mainChildIncludes.join('')} ) ON ${joinQuery.condition}`);\n      } else {\n        joinQueries.mainQuery.push(` ${joinQuery.join} ${joinQuery.body} ON ${joinQuery.condition}`);\n        if (mainChildIncludes.length > 0) {\n          joinQueries.mainQuery.push(mainChildIncludes.join(''));\n        }\n      }\n      joinQueries.subQuery.push(subChildIncludes.join(''));\n    }\n\n    return {\n      mainQuery: joinQueries.mainQuery.join(''),\n      subQuery: joinQueries.subQuery.join(''),\n      attributes\n    };\n  }\n\n  _getMinifiedAlias(alias, tableName, options) {\n    // We do not want to re-alias in case of a subquery\n    if (options.aliasesByTable[`${tableName}${alias}`]) {\n      return options.aliasesByTable[`${tableName}${alias}`];\n    }\n\n    // Do not alias custom suquery_orders\n    if (alias.match(/subquery_order_[0-9]/)) {\n      return alias;\n    }\n\n    const minifiedAlias = `_${options.aliasesMapping.size}`;\n\n    options.aliasesMapping.set(minifiedAlias, alias);\n    options.aliasesByTable[`${tableName}${alias}`] = minifiedAlias;\n\n    return minifiedAlias;\n  }\n\n  _getAliasForField(tableName, field, options) {\n    if (this.options.minifyAliases) {\n      if (options.aliasesByTable[`${tableName}${field}`]) {\n        return options.aliasesByTable[`${tableName}${field}`];\n      }\n    }\n    return null;\n  }\n\n  generateJoin(include, topLevelInfo) {\n    const association = include.association;\n    const parent = include.parent;\n    const parentIsTop = !!parent && !include.parent.association && include.parent.model.name === topLevelInfo.options.model.name;\n    let $parent;\n    let joinWhere;\n    /* Attributes for the left side */\n    const left = association.source;\n    const attrLeft = association instanceof BelongsTo ?\n      association.identifier :\n      association.sourceKeyAttribute || left.primaryKeyAttribute;\n    const fieldLeft = association instanceof BelongsTo ?\n      association.identifierField :\n      left.rawAttributes[association.sourceKeyAttribute || left.primaryKeyAttribute].field;\n    let asLeft;\n    /* Attributes for the right side */\n    const right = include.model;\n    const tableRight = right.getTableName();\n    const fieldRight = association instanceof BelongsTo ?\n      right.rawAttributes[association.targetIdentifier || right.primaryKeyAttribute].field :\n      association.identifierField;\n    let asRight = include.as;\n\n    while (($parent = $parent && $parent.parent || include.parent) && $parent.association) {\n      if (asLeft) {\n        asLeft = `${$parent.as}->${asLeft}`;\n      } else {\n        asLeft = $parent.as;\n      }\n    }\n\n    if (!asLeft) asLeft = parent.as || parent.model.name;\n    else asRight = `${asLeft}->${asRight}`;\n\n    let joinOn = `${this.quoteTable(asLeft)}.${this.quoteIdentifier(fieldLeft)}`;\n    const subqueryAttributes = [];\n\n    if (topLevelInfo.options.groupedLimit && parentIsTop || topLevelInfo.subQuery && include.parent.subQuery && !include.subQuery) {\n      if (parentIsTop) {\n        // The main model attributes is not aliased to a prefix\n        const tableName = this.quoteTable(parent.as || parent.model.name);\n\n        // Check for potential aliased JOIN condition\n        joinOn = this._getAliasForField(tableName, attrLeft, topLevelInfo.options) || `${tableName}.${this.quoteIdentifier(attrLeft)}`;\n\n        if (topLevelInfo.subQuery) {\n          const dbIdentifier = `${tableName}.${this.quoteIdentifier(fieldLeft)}`;\n          subqueryAttributes.push(dbIdentifier !== joinOn ? `${dbIdentifier} AS ${this.quoteIdentifier(attrLeft)}` : dbIdentifier);\n        }\n      } else {\n        const joinSource = `${asLeft.replace(/->/g, '.')}.${attrLeft}`;\n\n        // Check for potential aliased JOIN condition\n        joinOn = this._getAliasForField(asLeft, joinSource, topLevelInfo.options) || this.quoteIdentifier(joinSource);\n      }\n    }\n\n    joinOn += ` = ${this.quoteIdentifier(asRight)}.${this.quoteIdentifier(fieldRight)}`;\n\n    if (include.on) {\n      joinOn = this.whereItemsQuery(include.on, {\n        prefix: this.sequelize.literal(this.quoteIdentifier(asRight)),\n        model: include.model\n      });\n    }\n\n    if (include.where) {\n      joinWhere = this.whereItemsQuery(include.where, {\n        prefix: this.sequelize.literal(this.quoteIdentifier(asRight)),\n        model: include.model\n      });\n      if (joinWhere) {\n        if (include.or) {\n          joinOn += ` OR ${joinWhere}`;\n        } else {\n          joinOn += ` AND ${joinWhere}`;\n        }\n      }\n    }\n\n    this.aliasAs(asRight, topLevelInfo);\n\n    return {\n      join: include.required ? 'INNER JOIN' : include.right && this._dialect.supports['RIGHT JOIN'] ? 'RIGHT OUTER JOIN' : 'LEFT OUTER JOIN',\n      body: this.quoteTable(tableRight, asRight),\n      condition: joinOn,\n      attributes: {\n        main: [],\n        subQuery: subqueryAttributes\n      }\n    };\n  }\n\n  /**\n   * Returns the SQL fragments to handle returning the attributes from an insert/update query.\n   *\n   * @param  {object} modelAttributes An object with the model attributes.\n   * @param  {object} options         An object with options.\n   *\n   * @private\n   */\n  generateReturnValues(modelAttributes, options) {\n    const returnFields = [];\n    const returnTypes = [];\n    let outputFragment = '';\n    let returningFragment = '';\n    let tmpTable = '';\n\n    if (Array.isArray(options.returning)) {\n      returnFields.push(...options.returning.map(field => this.quoteIdentifier(field)));\n    } else if (modelAttributes) {\n      _.each(modelAttributes, attribute => {\n        if (!(attribute.type instanceof DataTypes.VIRTUAL)) {\n          returnFields.push(this.quoteIdentifier(attribute.field));\n          returnTypes.push(attribute.type);\n        }\n      });\n    }\n\n    if (_.isEmpty(returnFields)) {\n      returnFields.push('*');\n    }\n\n    if (this._dialect.supports.returnValues.returning) {\n      returningFragment = ` RETURNING ${returnFields.join(',')}`;\n    } else if (this._dialect.supports.returnIntoValues) {\n      returningFragment = ` RETURNING ${returnFields.join(',')} INTO `;\n    } else if (this._dialect.supports.returnValues.output) {\n      outputFragment = ` OUTPUT ${returnFields.map(field => `INSERTED.${field}`).join(',')}`;\n\n      //To capture output rows when there is a trigger on MSSQL DB\n      if (options.hasTrigger && this._dialect.supports.tmpTableTrigger) {\n        const tmpColumns = returnFields.map((field, i) => `${field} ${returnTypes[i].toSql()}`);\n\n        tmpTable = `DECLARE @tmp TABLE (${tmpColumns.join(',')}); `;\n        outputFragment += ' INTO @tmp';\n        returningFragment = '; SELECT * FROM @tmp';\n      }\n    }\n\n    return { outputFragment, returnFields, returnTypes, returningFragment, tmpTable };\n  }\n\n  generateThroughJoin(include, includeAs, parentTableName, topLevelInfo) {\n    const through = include.through;\n    const throughTable = through.model.getTableName();\n    const throughAs = `${includeAs.internalAs}->${through.as}`;\n    const externalThroughAs = `${includeAs.externalAs}.${through.as}`;\n    const throughAttributes = through.attributes.map(attr => {\n      let alias = `${externalThroughAs}.${Array.isArray(attr) ? attr[1] : attr}`;\n\n      if (this.options.minifyAliases) {\n        alias = this._getMinifiedAlias(alias, throughAs, topLevelInfo.options);\n      }\n\n      return Utils.joinSQLFragments([\n        `${this.quoteIdentifier(throughAs)}.${this.quoteIdentifier(Array.isArray(attr) ? attr[0] : attr)}`,\n        'AS',\n        this.quoteIdentifier(alias)\n      ]);\n    });\n    const association = include.association;\n    const parentIsTop = !include.parent.association && include.parent.model.name === topLevelInfo.options.model.name;\n    const tableSource = parentTableName;\n    const identSource = association.identifierField;\n    const tableTarget = includeAs.internalAs;\n    const identTarget = association.foreignIdentifierField;\n    const attrTarget = association.targetKeyField;\n\n    const joinType = include.required ? 'INNER JOIN' : include.right && this._dialect.supports['RIGHT JOIN'] ? 'RIGHT OUTER JOIN' : 'LEFT OUTER JOIN';\n    let joinBody;\n    let joinCondition;\n    const attributes = {\n      main: [],\n      subQuery: []\n    };\n    let attrSource = association.sourceKey;\n    let sourceJoinOn;\n    let targetJoinOn;\n    let throughWhere;\n    let targetWhere;\n\n    if (topLevelInfo.options.includeIgnoreAttributes !== false) {\n      // Through includes are always hasMany, so we need to add the attributes to the mainAttributes no matter what (Real join will never be executed in subquery)\n      for (const attr of throughAttributes) {\n        attributes.main.push(attr);\n      }\n    }\n\n    // Figure out if we need to use field or attribute\n    if (!topLevelInfo.subQuery) {\n      attrSource = association.sourceKeyField;\n    }\n    if (topLevelInfo.subQuery && !include.subQuery && !include.parent.subQuery && include.parent.model !== topLevelInfo.options.mainModel) {\n      attrSource = association.sourceKeyField;\n    }\n\n    // Filter statement for left side of through\n    // Used by both join and subquery where\n    // If parent include was in a subquery need to join on the aliased attribute\n    if (topLevelInfo.subQuery && !include.subQuery && include.parent.subQuery && !parentIsTop) {\n      // If we are minifying aliases and our JOIN target has been minified, we need to use the alias instead of the original column name\n      const joinSource = this._getAliasForField(tableSource, `${tableSource}.${attrSource}`, topLevelInfo.options) || `${tableSource}.${attrSource}`;\n\n      sourceJoinOn = `${this.quoteIdentifier(joinSource)} = `;\n    } else {\n      // If we are minifying aliases and our JOIN target has been minified, we need to use the alias instead of the original column name\n      const aliasedSource = this._getAliasForField(tableSource, attrSource, topLevelInfo.options) || attrSource;\n\n      sourceJoinOn = `${this.quoteTable(tableSource)}.${this.quoteIdentifier(aliasedSource)} = `;\n    }\n    sourceJoinOn += `${this.quoteIdentifier(throughAs)}.${this.quoteIdentifier(identSource)}`;\n\n    // Filter statement for right side of through\n    // Used by both join and subquery where\n    targetJoinOn = `${this.quoteIdentifier(tableTarget)}.${this.quoteIdentifier(attrTarget)} = `;\n    targetJoinOn += `${this.quoteIdentifier(throughAs)}.${this.quoteIdentifier(identTarget)}`;\n\n    if (through.where) {\n      throughWhere = this.getWhereConditions(through.where, this.sequelize.literal(this.quoteIdentifier(throughAs)), through.model);\n    }\n\n    this.aliasAs(includeAs.internalAs, topLevelInfo);\n\n    // Generate a wrapped join so that the through table join can be dependent on the target join\n    joinBody = `( ${this.quoteTable(throughTable, throughAs)} INNER JOIN ${this.quoteTable(include.model.getTableName(), includeAs.internalAs)} ON ${targetJoinOn}`;\n    if (throughWhere) {\n      joinBody += ` AND ${throughWhere}`;\n    }\n    joinBody += ')';\n    joinCondition = sourceJoinOn;\n\n    if (include.where || include.through.where) {\n      if (include.where) {\n        targetWhere = this.getWhereConditions(include.where, this.sequelize.literal(this.quoteIdentifier(includeAs.internalAs)), include.model, topLevelInfo.options);\n        if (targetWhere) {\n          joinCondition += ` AND ${targetWhere}`;\n        }\n      }\n    }\n\n    this._generateSubQueryFilter(include, includeAs, topLevelInfo);\n\n    return {\n      join: joinType,\n      body: joinBody,\n      condition: joinCondition,\n      attributes\n    };\n  }\n\n  /*\n   * Appends to the alias cache if the alias 64+ characters long and minifyAliases is true.\n   * This helps to avoid character limits in PostgreSQL.\n   */\n  aliasAs(as, topLevelInfo) {\n    if (this.options.minifyAliases && as.length >= 64) {\n      const alias = `%${topLevelInfo.options.includeAliases.size}`;\n\n      topLevelInfo.options.includeAliases.set(alias, as);\n    }\n  }\n\n  /*\n   * Generates subQueryFilter - a select nested in the where clause of the subQuery.\n   * For a given include a query is generated that contains all the way from the subQuery\n   * table to the include table plus everything that's in required transitive closure of the\n   * given include.\n   */\n  _generateSubQueryFilter(include, includeAs, topLevelInfo) {\n    if (!topLevelInfo.subQuery || !include.subQueryFilter) {\n      return;\n    }\n\n    if (!topLevelInfo.options.where) {\n      topLevelInfo.options.where = {};\n    }\n    let parent = include;\n    let child = include;\n    let nestedIncludes = this._getRequiredClosure(include).include;\n    let query;\n\n    while ((parent = parent.parent)) { // eslint-disable-line\n      if (parent.parent && !parent.required) {\n        return; // only generate subQueryFilter if all the parents of this include are required\n      }\n\n      if (parent.subQueryFilter) {\n        // the include is already handled as this parent has the include on its required closure\n        // skip to prevent duplicate subQueryFilter\n        return;\n      }\n\n      nestedIncludes = [{ ...child, include: nestedIncludes, attributes: [] }];\n      child = parent;\n    }\n\n    const topInclude = nestedIncludes[0];\n    const topParent = topInclude.parent;\n    const topAssociation = topInclude.association;\n    topInclude.association = undefined;\n\n    if (topInclude.through && Object(topInclude.through.model) === topInclude.through.model) {\n      query = this.selectQuery(topInclude.through.model.getTableName(), {\n        attributes: [topInclude.through.model.primaryKeyField],\n        include: Model._validateIncludedElements({\n          model: topInclude.through.model,\n          include: [{\n            association: topAssociation.toTarget,\n            required: true,\n            where: topInclude.where,\n            include: topInclude.include\n          }]\n        }).include,\n        model: topInclude.through.model,\n        where: {\n          [Op.and]: [\n            this.sequelize.literal([\n              `${this.quoteTable(topParent.model.name)}.${this.quoteIdentifier(topParent.model.primaryKeyField)}`,\n              `${this.quoteIdentifier(topInclude.through.model.name)}.${this.quoteIdentifier(topAssociation.identifierField)}`\n            ].join(' = ')),\n            topInclude.through.where\n          ]\n        },\n        limit: 1,\n        includeIgnoreAttributes: false\n      }, topInclude.through.model);\n    } else {\n      const isBelongsTo = topAssociation.associationType === 'BelongsTo';\n      const sourceField = isBelongsTo ? topAssociation.identifierField : topAssociation.sourceKeyField || topParent.model.primaryKeyField;\n      const targetField = isBelongsTo ? topAssociation.sourceKeyField || topInclude.model.primaryKeyField : topAssociation.identifierField;\n\n      const join = [\n        `${this.quoteIdentifier(topInclude.as)}.${this.quoteIdentifier(targetField)}`,\n        `${this.quoteTable(topParent.as || topParent.model.name)}.${this.quoteIdentifier(sourceField)}`\n      ].join(' = ');\n\n      query = this.selectQuery(topInclude.model.getTableName(), {\n        attributes: [targetField],\n        include: Model._validateIncludedElements(topInclude).include,\n        model: topInclude.model,\n        where: {\n          [Op.and]: [\n            topInclude.where,\n            { [Op.join]: this.sequelize.literal(join) }\n          ]\n        },\n        limit: 1,\n        tableAs: topInclude.as,\n        includeIgnoreAttributes: false\n      }, topInclude.model);\n    }\n\n    if (!topLevelInfo.options.where[Op.and]) {\n      topLevelInfo.options.where[Op.and] = [];\n    }\n\n    topLevelInfo.options.where[`__${includeAs.internalAs}`] = this.sequelize.literal([\n      '(',\n      query.replace(/;$/, ''),\n      ')',\n      'IS NOT NULL'\n    ].join(' '));\n  }\n\n  /*\n   * For a given include hierarchy creates a copy of it where only the required includes\n   * are preserved.\n   */\n  _getRequiredClosure(include) {\n    const copy = { ...include, attributes: [], include: [] };\n\n    if (Array.isArray(include.include)) {\n      copy.include = include.include\n        .filter(i => i.required)\n        .map(inc => this._getRequiredClosure(inc));\n    }\n\n    return copy;\n  }\n\n  getQueryOrders(options, model, subQuery) {\n    const mainQueryOrder = [];\n    const subQueryOrder = [];\n\n    if (Array.isArray(options.order)) {\n      for (let order of options.order) {\n\n        // wrap if not array\n        if (!Array.isArray(order)) {\n          order = [order];\n        }\n\n        if (\n          subQuery\n          && Array.isArray(order)\n          && order[0]\n          && !(order[0] instanceof Association)\n          && !(typeof order[0] === 'function' && order[0].prototype instanceof Model)\n          && !(typeof order[0].model === 'function' && order[0].model.prototype instanceof Model)\n          && !(typeof order[0] === 'string' && model && model.associations !== undefined && model.associations[order[0]])\n        ) {\n          const field = model.rawAttributes[order[0]] ? model.rawAttributes[order[0]].field : order[0];\n          const subQueryAlias = this._getAliasForField(this.quoteIdentifier(model.name), field, options);\n\n          let parent = null;\n          let orderToQuote = [];\n\n          // we need to ensure that the parent is null if we use the subquery alias, else we'll get an exception since\n          // \"model_name\".\"alias\" doesn't exist - only \"alias\" does. we also need to ensure that we preserve order direction\n          // by pushing order[1] to the subQueryOrder as well - in case it doesn't exist, we want to push \"ASC\"\n          if (subQueryAlias === null) {\n            orderToQuote = order;\n            parent = model;\n          } else {\n            orderToQuote = [subQueryAlias, order.length > 1 ? order[1] : 'ASC'];\n            parent = null;\n          }\n\n          subQueryOrder.push(this.quote(orderToQuote, parent, '->'));\n        }\n\n        // Handle case where renamed attributes are used to order by,\n        // see https://github.com/sequelize/sequelize/issues/8739\n        // need to check if either of the attribute options match the order\n        if (options.attributes && model) {\n          const aliasedAttribute = options.attributes.find(attr => Array.isArray(attr)\n              && attr[1]\n              && (attr[0] === order[0] || attr[1] === order[0]));\n\n          if (aliasedAttribute) {\n            const modelName = this.quoteIdentifier(model.name);\n            const alias = this._getAliasForField(modelName, aliasedAttribute[1], options);\n\n            order[0] = new Utils.Col(alias || aliasedAttribute[1]);\n          }\n        }\n\n        mainQueryOrder.push(this.quote(order, model, '->'));\n      }\n    } else if (options.order instanceof Utils.SequelizeMethod) {\n      const sql = this.quote(options.order, model, '->');\n      if (subQuery) {\n        subQueryOrder.push(sql);\n      }\n      mainQueryOrder.push(sql);\n    } else {\n      throw new Error('Order must be type of array or instance of a valid sequelize method.');\n    }\n\n    return { mainQueryOrder, subQueryOrder };\n  }\n\n  _throwOnEmptyAttributes(attributes, extraInfo = {}) {\n    if (attributes.length > 0) return;\n    const asPart = extraInfo.as && `as ${extraInfo.as}` || '';\n    const namePart = extraInfo.modelName && `for model '${extraInfo.modelName}'` || '';\n    const message = `Attempted a SELECT query ${namePart} ${asPart} without selecting any columns`;\n    throw new sequelizeError.QueryError(message.replace(/ +/g, ' '));\n  }\n\n  selectFromTableFragment(options, model, attributes, tables, mainTableAs) {\n    this._throwOnEmptyAttributes(attributes, { modelName: model && model.name, as: mainTableAs });\n\n    let fragment = `SELECT ${attributes.join(', ')} FROM ${tables}`;\n\n    if (mainTableAs) {\n      fragment += ` ${this.getAliasToken()} ${mainTableAs}`;\n    }\n\n    if (options.indexHints && this._dialect.supports.indexHints) {\n      for (const hint of options.indexHints) {\n        if (IndexHints[hint.type]) {\n          fragment += ` ${IndexHints[hint.type]} INDEX (${hint.values.map(indexName => this.quoteIdentifiers(indexName)).join(',')})`;\n        }\n      }\n    }\n\n    return fragment;\n  }\n\n  /**\n   * Returns an SQL fragment for adding result constraints.\n   *\n   * @param  {object} options An object with selectQuery options.\n   * @returns {string}         The generated sql query.\n   * @private\n   */\n  addLimitAndOffset(options) {\n    let fragment = '';\n\n    /* eslint-disable */\n    if (options.offset != null && options.limit == null) {\n      fragment += ' LIMIT ' + this.escape(options.offset) + ', ' + 10000000000000;\n    } else if (options.limit != null) {\n      if (options.offset != null) {\n        fragment += ' LIMIT ' + this.escape(options.offset) + ', ' + this.escape(options.limit);\n      } else {\n        fragment += ' LIMIT ' + this.escape(options.limit);\n      }\n    }\n    /* eslint-enable */\n\n    return fragment;\n  }\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    let result;\n\n    if (Object.prototype.hasOwnProperty.call(this.OperatorMap, smth.comparator)) {\n      smth.comparator = this.OperatorMap[smth.comparator];\n    }\n\n    if (smth instanceof Utils.Where) {\n      let value = smth.logic;\n      let key;\n\n      if (smth.attribute instanceof Utils.SequelizeMethod) {\n        key = this.getWhereConditions(smth.attribute, tableName, factory, options, prepend);\n      } else {\n        key = `${this.quoteTable(smth.attribute.Model.name)}.${this.quoteIdentifier(smth.attribute.field || smth.attribute.fieldName)}`;\n      }\n\n      if (value && value instanceof Utils.SequelizeMethod) {\n        value = this.getWhereConditions(value, tableName, factory, options, prepend);\n\n        if (value === 'NULL') {\n          if (smth.comparator === '=') {\n            smth.comparator = 'IS';\n          }\n          if (smth.comparator === '!=') {\n            smth.comparator = 'IS NOT';\n          }\n        }\n\n        return [key, value].join(` ${smth.comparator} `);\n      }\n      if (_.isPlainObject(value)) {\n        return this.whereItemQuery(smth.attribute, value, {\n          model: factory\n        });\n      }\n      if ([this.OperatorMap[Op.between], this.OperatorMap[Op.notBetween]].includes(smth.comparator)) {\n        value = `${this.escape(value[0])} AND ${this.escape(value[1])}`;\n      } else if (typeof value === 'boolean') {\n        value = this.booleanValue(value);\n      } else {\n        value = this.escape(value);\n      }\n\n      if (value === 'NULL') {\n        if (smth.comparator === '=') {\n          smth.comparator = 'IS';\n        }\n        if (smth.comparator === '!=') {\n          smth.comparator = 'IS NOT';\n        }\n      }\n\n      return [key, value].join(` ${smth.comparator} `);\n    }\n    if (smth instanceof Utils.Literal) {\n      return smth.val;\n    }\n    if (smth instanceof Utils.Cast) {\n      if (smth.val instanceof Utils.SequelizeMethod) {\n        result = this.handleSequelizeMethod(smth.val, tableName, factory, options, prepend);\n      } else if (_.isPlainObject(smth.val)) {\n        result = this.whereItemsQuery(smth.val);\n      } else {\n        result = this.escape(smth.val);\n      }\n\n      return `CAST(${result} AS ${smth.type.toUpperCase()})`;\n    }\n    if (smth instanceof Utils.Fn) {\n      return `${smth.fn}(${\n        smth.args.map(arg => {\n          if (arg instanceof Utils.SequelizeMethod) {\n            return this.handleSequelizeMethod(arg, tableName, factory, options, prepend);\n          }\n          if (_.isPlainObject(arg)) {\n            return this.whereItemsQuery(arg);\n          }\n          return this.escape(typeof arg === 'string' ? arg.replace(/\\$/g, '$$$') : arg);\n        }).join(', ')\n      })`;\n    }\n    if (smth instanceof Utils.Col) {\n      if (Array.isArray(smth.col) && !factory) {\n        throw new Error('Cannot call Sequelize.col() with array outside of order / group clause');\n      }\n      if (smth.col.startsWith('*')) {\n        return '*';\n      }\n      return this.quote(smth.col, factory);\n    }\n    return smth.toString(this, factory);\n  }\n\n  whereQuery(where, options) {\n    const query = this.whereItemsQuery(where, options);\n    if (query && query.length) {\n      return `WHERE ${query}`;\n    }\n    return '';\n  }\n\n  whereItemsQuery(where, options, binding) {\n    if (\n      where === null ||\n      where === undefined ||\n      Utils.getComplexSize(where) === 0\n    ) {\n      // NO OP\n      return '';\n    }\n\n    if (typeof where === 'string') {\n      throw new Error('Support for `{where: \\'raw query\\'}` has been removed.');\n    }\n\n    const items = [];\n\n    binding = binding || 'AND';\n    if (binding[0] !== ' ') binding = ` ${binding} `;\n\n    if (_.isPlainObject(where)) {\n      Utils.getComplexKeys(where).forEach(prop => {\n        const item = where[prop];\n        items.push(this.whereItemQuery(prop, item, options));\n      });\n    } else {\n      items.push(this.whereItemQuery(undefined, where, options));\n    }\n\n    return items.length && items.filter(item => item && item.length).join(binding) || '';\n  }\n\n  whereItemQuery(key, value, options = {}) {\n    if (value === undefined) {\n      throw new Error(`WHERE parameter \"${key}\" has invalid \"undefined\" value`);\n    }\n\n    if (typeof key === 'string' && key.includes('.') && options.model) {\n      const keyParts = key.split('.');\n      if (options.model.rawAttributes[keyParts[0]] && options.model.rawAttributes[keyParts[0]].type instanceof DataTypes.JSON) {\n        const tmp = {};\n        const field = options.model.rawAttributes[keyParts[0]];\n        _.set(tmp, keyParts.slice(1), value);\n        return this.whereItemQuery(field.field || keyParts[0], tmp, { field, ...options });\n      }\n    }\n\n    const field = this._findField(key, options);\n    const fieldType = field && field.type || options.type;\n\n    const isPlainObject = _.isPlainObject(value);\n    const isArray = !isPlainObject && Array.isArray(value);\n    key = this.OperatorsAliasMap && this.OperatorsAliasMap[key] || key;\n    if (isPlainObject) {\n      value = this._replaceAliases(value);\n    }\n    const valueKeys = isPlainObject && Utils.getComplexKeys(value);\n\n    if (key === undefined) {\n      if (typeof value === 'string') {\n        return value;\n      }\n\n      if (isPlainObject && valueKeys.length === 1) {\n        return this.whereItemQuery(valueKeys[0], value[valueKeys[0]], options);\n      }\n    }\n\n    if (value === null) {\n      const opValue = options.bindParam ? 'NULL' : this.escape(value, field);\n      return this._joinKeyValue(key, opValue, this.OperatorMap[Op.is], options.prefix);\n    }\n\n    if (!value) {\n      const opValue = options.bindParam ? this.format(value, field, options, options.bindParam) : this.escape(value, field);\n      return this._joinKeyValue(key, opValue, this.OperatorMap[Op.eq], options.prefix);\n    }\n\n    if (value instanceof Utils.SequelizeMethod && !(key !== undefined && value instanceof Utils.Fn)) {\n      return this.handleSequelizeMethod(value);\n    }\n\n    // Convert where: [] to Op.and if possible, else treat as literal/replacements\n    if (key === undefined && isArray) {\n      if (Utils.canTreatArrayAsAnd(value)) {\n        key = Op.and;\n      } else {\n        throw new Error('Support for literal replacements in the `where` object has been removed.');\n      }\n    }\n\n    if (key === Op.or || key === Op.and || key === Op.not) {\n      return this._whereGroupBind(key, value, options);\n    }\n\n\n    if (value[Op.or]) {\n      return this._whereBind(this.OperatorMap[Op.or], key, value[Op.or], options);\n    }\n\n    if (value[Op.and]) {\n      return this._whereBind(this.OperatorMap[Op.and], key, value[Op.and], options);\n    }\n\n    if (isArray && fieldType instanceof DataTypes.ARRAY) {\n      const opValue = options.bindParam ? this.format(value, field, options, options.bindParam) : this.escape(value, field);\n      return this._joinKeyValue(key, opValue, this.OperatorMap[Op.eq], options.prefix);\n    }\n\n    if (isPlainObject && fieldType instanceof DataTypes.JSON && options.json !== false) {\n      return this._whereJSON(key, value, options);\n    }\n    // If multiple keys we combine the different logic conditions\n    if (isPlainObject && valueKeys.length > 1) {\n      return this._whereBind(this.OperatorMap[Op.and], key, value, options);\n    }\n\n    if (isArray) {\n      return this._whereParseSingleValueObject(key, field, Op.in, value, options);\n    }\n    if (isPlainObject) {\n      if (this.OperatorMap[valueKeys[0]]) {\n        return this._whereParseSingleValueObject(key, field, valueKeys[0], value[valueKeys[0]], options);\n      }\n      return this._whereParseSingleValueObject(key, field, this.OperatorMap[Op.eq], value, options);\n    }\n\n    if (key === Op.placeholder) {\n      const opValue = options.bindParam ? this.format(value, field, options, options.bindParam) : this.escape(value, field);\n      return this._joinKeyValue(this.OperatorMap[key], opValue, this.OperatorMap[Op.eq], options.prefix);\n    }\n\n    const opValue = options.bindParam ? this.format(value, field, options, options.bindParam) : this.escape(value, field);\n    return this._joinKeyValue(key, opValue, this.OperatorMap[Op.eq], options.prefix);\n  }\n\n  _findField(key, options) {\n    if (options.field) {\n      return options.field;\n    }\n\n    if (options.model && options.model.rawAttributes && options.model.rawAttributes[key]) {\n      return options.model.rawAttributes[key];\n    }\n\n    if (options.model && options.model.fieldRawAttributesMap && options.model.fieldRawAttributesMap[key]) {\n      return options.model.fieldRawAttributesMap[key];\n    }\n  }\n\n  // OR/AND/NOT grouping logic\n  _whereGroupBind(key, value, options) {\n    const binding = key === Op.or ? this.OperatorMap[Op.or] : this.OperatorMap[Op.and];\n    const outerBinding = key === Op.not ? 'NOT ' : '';\n\n    if (Array.isArray(value)) {\n      value = value.map(item => {\n        let itemQuery = this.whereItemsQuery(item, options, this.OperatorMap[Op.and]);\n        if (itemQuery && itemQuery.length && (Array.isArray(item) || _.isPlainObject(item)) && Utils.getComplexSize(item) > 1) {\n          itemQuery = `(${itemQuery})`;\n        }\n        return itemQuery;\n      }).filter(item => item && item.length);\n\n      value = value.length && value.join(binding);\n    } else {\n      value = this.whereItemsQuery(value, options, binding);\n    }\n    // Op.or: [] should return no data.\n    // Op.not of no restriction should also return no data\n    if ((key === Op.or || key === Op.not) && !value) {\n      return '0 = 1';\n    }\n\n    return value ? `${outerBinding}(${value})` : undefined;\n  }\n\n  _whereBind(binding, key, value, options) {\n    if (_.isPlainObject(value)) {\n      value = Utils.getComplexKeys(value).map(prop => {\n        const item = value[prop];\n        return this.whereItemQuery(key, { [prop]: item }, options);\n      });\n    } else {\n      value = value.map(item => this.whereItemQuery(key, item, options));\n    }\n\n    value = value.filter(item => item && item.length);\n\n    return value.length ? `(${value.join(binding)})` : undefined;\n  }\n\n  _whereJSON(key, value, options) {\n    const items = [];\n    let baseKey = this.quoteIdentifier(key);\n    if (options.prefix) {\n      if (options.prefix instanceof Utils.Literal) {\n        baseKey = `${this.handleSequelizeMethod(options.prefix)}.${baseKey}`;\n      } else {\n        baseKey = `${this.quoteTable(options.prefix)}.${baseKey}`;\n      }\n    }\n\n    Utils.getOperators(value).forEach(op => {\n      const where = {\n        [op]: value[op]\n      };\n      items.push(this.whereItemQuery(key, where, { ...options, json: false }));\n    });\n\n    _.forOwn(value, (item, prop) => {\n      this._traverseJSON(items, baseKey, prop, item, [prop]);\n    });\n\n    const result = items.join(this.OperatorMap[Op.and]);\n    return items.length > 1 ? `(${result})` : result;\n  }\n\n  _traverseJSON(items, baseKey, prop, item, path) {\n    let cast;\n\n    if (path[path.length - 1].includes('::')) {\n      const tmp = path[path.length - 1].split('::');\n      cast = tmp[1];\n      path[path.length - 1] = tmp[0];\n    }\n\n    let pathKey = this.jsonPathExtractionQuery(baseKey, path);\n\n    if (_.isPlainObject(item)) {\n      Utils.getOperators(item).forEach(op => {\n        const value = this._toJSONValue(item[op]);\n        let isJson = false;\n        if (typeof value === 'string' && op === Op.contains) {\n          try {\n            JSON.stringify(value);\n            isJson = true;\n          } catch (e) {\n            // failed to parse, is not json so isJson remains false\n          }\n        }\n        pathKey = this.jsonPathExtractionQuery(baseKey, path, isJson);\n        items.push(this.whereItemQuery(this._castKey(pathKey, value, cast), { [op]: value }));\n      });\n      _.forOwn(item, (value, itemProp) => {\n        this._traverseJSON(items, baseKey, itemProp, value, path.concat([itemProp]));\n      });\n\n      return;\n    }\n\n    item = this._toJSONValue(item);\n    items.push(this.whereItemQuery(this._castKey(pathKey, item, cast), { [Op.eq]: item }));\n  }\n\n  _toJSONValue(value) {\n    return value;\n  }\n\n  _castKey(key, value, cast, json) {\n    cast = cast || this._getJsonCast(Array.isArray(value) ? value[0] : value);\n    if (cast) {\n      return new Utils.Literal(this.handleSequelizeMethod(new Utils.Cast(new Utils.Literal(key), cast, json)));\n    }\n\n    return new Utils.Literal(key);\n  }\n\n  _getJsonCast(value) {\n    if (typeof value === 'number') {\n      return 'double precision';\n    }\n    if (value instanceof Date) {\n      return 'timestamptz';\n    }\n    if (typeof value === 'boolean') {\n      return 'boolean';\n    }\n    return;\n  }\n\n  _joinKeyValue(key, value, comparator, prefix) {\n    if (!key) {\n      return value;\n    }\n    if (comparator === undefined) {\n      throw new Error(`${key} and ${value} has no comparator`);\n    }\n    key = this._getSafeKey(key, prefix);\n    return [key, value].join(` ${comparator} `);\n  }\n\n  _getSafeKey(key, prefix) {\n    if (key instanceof Utils.SequelizeMethod) {\n      key = this.handleSequelizeMethod(key);\n      return this._prefixKey(this.handleSequelizeMethod(key), prefix);\n    }\n\n    if (Utils.isColString(key)) {\n      key = key.substr(1, key.length - 2).split('.');\n\n      if (key.length > 2) {\n        key = [\n          // join the tables by -> to match out internal namings\n          key.slice(0, -1).join('->'),\n          key[key.length - 1]\n        ];\n      }\n\n      return key.map(identifier => this.quoteIdentifier(identifier)).join('.');\n    }\n\n    return this._prefixKey(this.quoteIdentifier(key), prefix);\n  }\n\n  _prefixKey(key, prefix) {\n    if (prefix) {\n      if (prefix instanceof Utils.Literal) {\n        return [this.handleSequelizeMethod(prefix), key].join('.');\n      }\n\n      return [this.quoteTable(prefix), key].join('.');\n    }\n\n    return key;\n  }\n\n  _whereParseSingleValueObject(key, field, prop, value, options) {\n    if (prop === Op.not) {\n      if (Array.isArray(value)) {\n        prop = Op.notIn;\n      } else if (value !== null && value !== true && value !== false) {\n        prop = Op.ne;\n      }\n    }\n\n    let comparator = this.OperatorMap[prop] || this.OperatorMap[Op.eq];\n\n    switch (prop) {\n      case Op.in:\n      case Op.notIn:\n        if (value instanceof Utils.Literal) {\n          return this._joinKeyValue(key, value.val, comparator, options.prefix);\n        }\n\n        if (value.length) {\n          return this._joinKeyValue(key, `(${value.map(item => this.escape(item, field)).join(', ')})`, comparator, options.prefix);\n        }\n\n        if (comparator === this.OperatorMap[Op.in]) {\n          return this._joinKeyValue(key, '(NULL)', comparator, options.prefix);\n        }\n\n        return '';\n      case Op.any:\n      case Op.all:\n        comparator = `${this.OperatorMap[Op.eq]} ${comparator}`;\n        if (value[Op.values]) {\n          return this._joinKeyValue(key, `(VALUES ${value[Op.values].map(item => `(${this.escape(item)})`).join(', ')})`, comparator, options.prefix);\n        }\n\n        return this._joinKeyValue(key, `(${this.escape(value, field)})`, comparator, options.prefix);\n      case Op.between:\n      case Op.notBetween:\n        return this._joinKeyValue(key, `${this.escape(value[0], field)} AND ${this.escape(value[1], field)}`, comparator, options.prefix);\n      case Op.raw:\n        throw new Error('The `$raw` where property is no longer supported.  Use `sequelize.literal` instead.');\n      case Op.col:\n        comparator = this.OperatorMap[Op.eq];\n        value = value.split('.');\n\n        if (value.length > 2) {\n          value = [\n            // join the tables by -> to match out internal namings\n            value.slice(0, -1).join('->'),\n            value[value.length - 1]\n          ];\n        }\n\n        return this._joinKeyValue(key, value.map(identifier => this.quoteIdentifier(identifier)).join('.'), comparator, options.prefix);\n      case Op.startsWith:\n      case Op.endsWith:\n      case Op.substring:\n        comparator = this.OperatorMap[Op.like];\n\n        if (value instanceof Utils.Literal) {\n          value = value.val;\n        }\n\n        let pattern = `${value}%`;\n\n        if (prop === Op.endsWith) pattern = `%${value}`;\n        if (prop === Op.substring) pattern = `%${value}%`;\n\n        return this._joinKeyValue(key, this.escape(pattern), comparator, options.prefix);\n    }\n\n    const escapeOptions = {\n      acceptStrings: comparator.includes(this.OperatorMap[Op.like])\n    };\n\n    if (_.isPlainObject(value)) {\n      if (value[Op.col]) {\n        return this._joinKeyValue(key, this.whereItemQuery(null, value), comparator, options.prefix);\n      }\n      if (value[Op.any]) {\n        escapeOptions.isList = true;\n        return this._joinKeyValue(key, `(${this.escape(value[Op.any], field, escapeOptions)})`, `${comparator} ${this.OperatorMap[Op.any]}`, options.prefix);\n      }\n      if (value[Op.all]) {\n        escapeOptions.isList = true;\n        return this._joinKeyValue(key, `(${this.escape(value[Op.all], field, escapeOptions)})`, `${comparator} ${this.OperatorMap[Op.all]}`, options.prefix);\n      }\n    }\n\n    if (value === null && comparator === this.OperatorMap[Op.eq]) {\n      return this._joinKeyValue(key, this.escape(value, field, escapeOptions), this.OperatorMap[Op.is], options.prefix);\n    }\n    if (value === null && comparator === this.OperatorMap[Op.ne]) {\n      return this._joinKeyValue(key, this.escape(value, field, escapeOptions), this.OperatorMap[Op.not], options.prefix);\n    }\n\n    return this._joinKeyValue(key, this.escape(value, field, escapeOptions), comparator, options.prefix);\n  }\n\n  /*\n    Takes something and transforms it into values of a where condition.\n   @private\n  */\n  getWhereConditions(smth, tableName, factory, options, prepend) {\n    const where = {};\n\n    if (Array.isArray(tableName)) {\n      tableName = tableName[0];\n      if (Array.isArray(tableName)) {\n        tableName = tableName[1];\n      }\n    }\n\n    options = options || {};\n\n    if (prepend === undefined) {\n      prepend = true;\n    }\n\n    if (smth && smth instanceof Utils.SequelizeMethod) { // Checking a property is cheaper than a lot of instanceof calls\n      return this.handleSequelizeMethod(smth, tableName, factory, options, prepend);\n    }\n    if (_.isPlainObject(smth)) {\n      return this.whereItemsQuery(smth, {\n        model: factory,\n        prefix: prepend && tableName,\n        type: options.type\n      });\n    }\n    if (typeof smth === 'number' || typeof smth === 'bigint') {\n      let primaryKeys = factory ? Object.keys(factory.primaryKeys) : [];\n\n      if (primaryKeys.length > 0) {\n        // Since we're just a number, assume only the first key\n        primaryKeys = primaryKeys[0];\n      } else {\n        primaryKeys = 'id';\n      }\n\n      where[primaryKeys] = smth;\n\n      return this.whereItemsQuery(where, {\n        model: factory,\n        prefix: prepend && tableName\n      });\n    }\n    if (typeof smth === 'string') {\n      return this.whereItemsQuery(smth, {\n        model: factory,\n        prefix: prepend && tableName\n      });\n    }\n    if (Buffer.isBuffer(smth)) {\n      return this.escape(smth);\n    }\n    if (Array.isArray(smth)) {\n      if (smth.length === 0 || smth.length > 0 && smth[0].length === 0) return '1=1';\n      if (Utils.canTreatArrayAsAnd(smth)) {\n        const _smth = { [Op.and]: smth };\n        return this.getWhereConditions(_smth, tableName, factory, options, prepend);\n      }\n      throw new Error('Support for literal replacements in the `where` object has been removed.');\n    }\n    if (smth == null) {\n      return this.whereItemsQuery(smth, {\n        model: factory,\n        prefix: prepend && tableName\n      });\n    }\n\n    throw new Error(`Unsupported where option value: ${util.inspect(smth)}. Please refer to the Sequelize documentation to learn more about which values are accepted as part of the where option.`);\n  }\n\n  // A recursive parser for nested where conditions\n  parseConditionObject(conditions, path) {\n    path = path || [];\n    return _.reduce(conditions, (result, value, key) => {\n      if (_.isObject(value)) {\n        return result.concat(this.parseConditionObject(value, path.concat(key))); // Recursively parse objects\n      }\n      result.push({ path: path.concat(key), value });\n      return result;\n    }, []);\n  }\n\n  booleanValue(value) {\n    return value;\n  }\n\n  /**\n   * Returns the authenticate test query string\n   */\n  authTestQuery() {\n    return 'SELECT 1+1 AS result';\n  }\n}\n\nObject.assign(QueryGenerator.prototype, require('./query-generator/operators'));\nObject.assign(QueryGenerator.prototype, require('./query-generator/transaction'));\n\nmodule.exports = QueryGenerator;\n"],"names":[],"mappings":"AA80FQ;;;;;;;;;;;;;;;;;;;;;;AA50FR,MAAM,OAAO,QAAQ;AACrB,MAAM,IAAI,QAAQ;AAClB,MAAM,SAAS,QAAQ,iGAAQ,EAAA;AAE/B,MAAM,QAAQ,QAAQ;AACtB,MAAM,eAAe,QAAQ;AAC7B,MAAM,YAAY,QAAQ;AAC1B,MAAM,YAAY,QAAQ;AAC1B,MAAM,QAAQ,QAAQ;AACtB,MAAM,cAAc,QAAQ;AAC5B,MAAM,YAAY,QAAQ;AAC1B,MAAM,gBAAgB,QAAQ;AAC9B,MAAM,UAAU,QAAQ;AACxB,MAAM,KAAK,QAAQ;AACnB,MAAM,iBAAiB,QAAQ;AAC/B,MAAM,aAAa,QAAQ;AAQ3B,MAAA,eAAqB;IACnB,YAAY,OAAA,CAAS;QACnB,IAAI,CAAC,QAAQ,SAAA,EAAW,MAAM,IAAI,MAAM;QACxC,IAAI,CAAC,QAAQ,QAAA,EAAU,MAAM,IAAI,MAAM;QAEvC,IAAA,CAAK,SAAA,GAAY,QAAQ,SAAA;QACzB,IAAA,CAAK,OAAA,GAAU,QAAQ,SAAA,CAAU,OAAA;QAGjC,IAAA,CAAK,OAAA,GAAU,QAAQ,QAAA,CAAS,IAAA;QAChC,IAAA,CAAK,QAAA,GAAW,QAAQ,QAAA;QAGxB,IAAA,CAAK,oBAAA;IAAA;IAGP,oBAAoB,SAAA,EAAW,OAAA,EAAS;QACtC,UAAU,WAAW,CAAA;QACrB,YAAY,aAAa,CAAA;QACzB,OAAO;YACL,QAAQ,UAAU,MAAA,IAAU,QAAQ,MAAA,IAAU,IAAA,CAAK,OAAA,CAAQ,MAAA,IAAU;YACrE,WAAW,EAAE,aAAA,CAAc,aAAa,UAAU,SAAA,GAAY;YAC9D,WAAW,UAAU,SAAA,IAAa,QAAQ,SAAA,IAAa;QAAA;IAAA;IAI3D,UAAU,KAAA,EAAO;QACf,IAAI,CAAC,MAAM,OAAA,EAAS,OAAO,MAAM,SAAA,IAAa;QAC9C,MAAM,OAAO,IAAA;QACb,OAAO;YACL,WAAW,MAAM,SAAA,IAAa;YAC9B,OAAO,MAAM,SAAA,IAAa;YAC1B,MAAM,MAAM,IAAA,IAAQ;YACpB,QAAQ,MAAM,OAAA;YACd,WAAW,MAAM,gBAAA,IAAoB;YACrC,WAAW;gBACT,OAAO,KAAK,UAAA,CAAW,IAAA;YAAA;QAAA;IAAA;IAK7B,WAAW,SAAA,EAAW,OAAA,EAAS;QAC7B,OAAO,IAAA,CAAK,cAAA,CAAe,WAAW;IAAA;IAGxC,mBAAmB,SAAA,EAAW,MAAA,EAAQ,eAAA,EAAiB;QACrD,MAAM,QAAQ,IAAA,CAAK,UAAA,CACjB,IAAA,CAAK,SAAA,CAAU;YACb;YACA,SAAS;YACT,kBAAkB;QAAA;QAItB,OAAO,CAAA,SAAA,EAAY,MAAA,CAAA,CAAA;IAAA;IAGrB,eAAe,SAAA,EAAW;QACxB,OAAO,CAAA,qBAAA,EAAwB,IAAA,CAAK,UAAA,CAAW,WAAA,CAAA,CAAA;IAAA;IAGjD,iBAAiB,MAAA,EAAQ,KAAA,EAAO;QAC9B,OAAO,CAAA,YAAA,EAAe,IAAA,CAAK,UAAA,CAAW,QAAA,WAAA,EAAqB,IAAA,CAAK,UAAA,CAAW,OAAA,CAAA,CAAA;IAAA;IAS7E,qCAAqC,CAAA;IAcrC,YAAY,KAAA,EAAO,SAAA,EAAW,eAAA,EAAiB,OAAA,EAAS;QACtD,UAAU,WAAW,CAAA;QACrB,EAAE,QAAA,CAAS,SAAS,IAAA,CAAK,OAAA;QAEzB,MAAM,oBAAoB,CAAA;QAC1B,MAAM,OAAO,QAAQ,IAAA,IAAQ,EAAA;QAC7B,MAAM,SAAS,EAAA;QACf,MAAM,2BAA2B,EAAA;QACjC,MAAM,cAAc,EAAA;QACpB,MAAM,SAAS,EAAA;QACf,MAAM,cAAc,IAAA,CAAK,UAAA,CAAW;QACpC,MAAM,YAAY,QAAQ,SAAA,KAAc,KAAA,IAAY,IAAA,CAAK,SAAA,CAAU,QAAQ,QAAQ,SAAA;QACnF,MAAM,mBAAmB,EAAA;QACzB,IAAI;QACJ,IAAI,aAAa;QACjB,IAAI,aAAa;QACjB,IAAI,iBAAiB;QACrB,IAAI,oBAAoB;QACxB,IAAI,0BAA0B;QAC9B,IAAI,WAAW;QAEf,IAAI,iBAAiB;YACnB,EAAE,IAAA,CAAK,iBAAiB,CAAC,WAAW,QAAQ;gBAC1C,iBAAA,CAAkB,IAAA,GAAO;gBACzB,IAAI,UAAU,KAAA,EAAO;oBACnB,iBAAA,CAAkB,UAAU,KAAA,CAAA,GAAS;gBAAA;YAAA;QAAA;QAK3C,IAAI,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,iBAAA,EAAmB;YAC5C,cAAc;QAAA,OAAA,IACL,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,YAAA,EAAc;YAC9C,cAAc;QAAA;QAGhB,IAAK,CAAA,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,YAAA,IAAgB,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,gBAAA,KAAqB,QAAQ,SAAA,EAAW;YACzG,MAAM,eAAe,IAAA,CAAK,oBAAA,CAAqB,iBAAiB;YAEhE,yBAAyB,IAAA,CAAK,GAAG,aAAa,YAAA;YAE9C,IAAI,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,gBAAA,EAAkB;gBAC3C,YAAY,IAAA,CAAK,GAAG,aAAa,WAAA;YAAA;YAEnC,oBAAoB,aAAa,iBAAA;YACjC,WAAW,aAAa,QAAA,IAAY;YACpC,iBAAiB,aAAa,cAAA,IAAkB;QAAA;QAGlD,IAAI,EAAE,GAAA,CAAI,IAAA,EAAM;YAAC;YAAa;YAAW;YAAkB;SAAA,KAAyB,QAAQ,UAAA,EAAY;YAEtG,QAAQ,SAAA,GAAY;QAAA;QAGtB,IAAI,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,SAAA,IAAa,QAAQ,SAAA,EAAW;YAEzD,QAAQ,SAAA,GAAY;QAAA;QAGtB,YAAY,MAAM,wBAAA,CAAyB,WAAW,IAAA,CAAK,OAAA,CAAQ,QAAA;QACnE,IAAA,MAAW,OAAO,UAAW;YAC3B,IAAI,OAAO,SAAA,CAAU,cAAA,CAAe,IAAA,CAAK,WAAW,MAAM;gBACxD,MAAM,QAAQ,SAAA,CAAU,IAAA;gBACxB,OAAO,IAAA,CAAK,IAAA,CAAK,eAAA,CAAgB;gBAGjC,IAAI,qBAAqB,iBAAA,CAAkB,IAAA,IAAQ,iBAAA,CAAkB,IAAA,CAAK,aAAA,KAAkB,QAAQ,SAAS,MAAM;oBACjH,IAAI,CAAC,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,aAAA,CAAc,YAAA,EAAc;wBACtD,OAAO,MAAA,CAAO,CAAA,GAAI;oBAAA,OAAA,IACT,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,OAAA,EAAS;wBACzC,OAAO,IAAA,CAAK;oBAAA,OACP;wBACL,OAAO,IAAA,CAAK,IAAA,CAAK,MAAA,CAAO;oBAAA;gBAAA,OAErB;oBACL,IAAI,qBAAqB,iBAAA,CAAkB,IAAA,IAAQ,iBAAA,CAAkB,IAAA,CAAK,aAAA,KAAkB,MAAM;wBAChG,0BAA0B;oBAAA;oBAG5B,IAAI,iBAAiB,MAAM,eAAA,IAAmB,QAAQ,SAAA,KAAc,OAAO;wBACzE,OAAO,IAAA,CAAK,IAAA,CAAK,MAAA,CAAO,OAAO,qBAAqB,iBAAA,CAAkB,IAAA,IAAQ,KAAA,GAAW;4BAAE,SAAS;wBAAA;oBAAA,OAC/F;wBACL,OAAO,IAAA,CAAK,IAAA,CAAK,MAAA,CAAO,OAAO,qBAAqB,iBAAA,CAAkB,IAAA,IAAQ,KAAA,GAAW;4BAAE,SAAS;wBAAA,GAAY;oBAAA;gBAAA;YAAA;QAAA;QAMxH,IAAI,uBAAuB;QAE3B,IACE,CAAC,EAAE,OAAA,CAAQ,QAAQ,aAAA,KAChB,CAAC,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,OAAA,CAAQ,eAAA,EACnC;YACA,MAAM,IAAI,MAAM;QAAA;QAMlB,IAAI,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,OAAA,CAAQ,iBAAA,IAAqB,QAAQ,iBAAA,EAAmB;YACjF,IAAI,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,OAAA,CAAQ,iBAAA,IAAqB,8BAA8B;gBAEpF,MAAM,eAAe,QAAQ,UAAA,CAAW,GAAA,CAAI,CAAA,OAAQ,IAAA,CAAK,eAAA,CAAgB;gBACzE,MAAM,aAAa,QAAQ,iBAAA,CAAkB,GAAA,CAAI,CAAA,OAAQ,GAAG,IAAA,CAAK,eAAA,CAAgB,MAAA,UAAA,EAAkB,IAAA,CAAK,eAAA,CAAgB,OAAA;gBAExH,MAAM,YAAY;oBAChB;oBACA;oBACA,aAAa,IAAA,CAAK;oBAClB;iBAAA;gBAGF,IAAI,CAAC,EAAE,OAAA,CAAQ,QAAQ,aAAA,GAAgB;oBACrC,UAAU,IAAA,CAAK,IAAA,CAAK,UAAA,CAAW,QAAQ,aAAA,EAAe;gBAAA;gBAKxD,IAAI,EAAE,OAAA,CAAQ,aAAa;oBACzB,UAAU,IAAA,CAAK;gBAAA,OACV;oBACL,UAAU,IAAA,CAAK,iBAAiB,WAAW,IAAA,CAAK;gBAAA;gBAGlD,uBAAuB,CAAA,CAAA,EAAI,MAAM,gBAAA,CAAiB,YAAA;YAAA,OAE7C;gBACL,MAAM,YAAY,QAAQ,iBAAA,CAAkB,GAAA,CAAI,CAAA,OAAQ,GAAG,IAAA,CAAK,eAAA,CAAgB,MAAA,QAAA,EAAgB,IAAA,CAAK,eAAA,CAAgB,MAAA,CAAA,CAAA;gBAIrH,IAAI,EAAE,OAAA,CAAQ,cAAc,QAAQ,UAAA,EAAY;oBAC9C,UAAU,IAAA,CAAK,GAAG,QAAQ,UAAA,CAAW,GAAA,CAAI,CAAA,OAAQ,GAAG,IAAA,CAAK,eAAA,CAAgB,MAAA,CAAA,EAAS,IAAA,CAAK,eAAA,CAAgB,OAAA;gBAAA;gBAMzG,IAAI,EAAE,OAAA,CAAQ,YAAY;oBACxB,MAAM,IAAI,MAAM;gBAAA;gBAElB,wBAAwB,GAAG,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,OAAA,CAAQ,iBAAA,CAAA,CAAA,EAAqB,UAAU,IAAA,CAAK,MAAA;YAAA;QAAA;QAIlG,MAAM,eAAe;YACnB,kBAAkB,QAAQ,gBAAA,GAAmB,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,OAAA,CAAQ,gBAAA,GAAmB;YAC/F,qBAAqB,QAAQ,gBAAA,GAAmB,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,OAAA,CAAQ,mBAAA,GAAsB;YACrG,YAAY,OAAO,IAAA,CAAK;YACxB,QAAQ;YACR,QAAQ,OAAO,IAAA,CAAK;YACpB;QAAA;QAGF,aAAa,GAAG,SAAA,MAAA,EAAiB,aAAa,gBAAA,CAAA,MAAA,EAAyB,YAAA,EAAA,EAAgB,aAAa,UAAA,CAAA,CAAA,EAAc,aAAa,MAAA,CAAA,SAAA,EAAkB,aAAa,MAAA,CAAA,CAAA,EAAU,uBAAuB,aAAa,mBAAA,GAAsB,YAAA;QAClO,aAAa,GAAG,SAAA,MAAA,EAAiB,aAAa,gBAAA,CAAA,MAAA,EAAyB,cAAc,aAAa,MAAA,GAAS,uBAAuB,aAAa,mBAAA,GAAsB,YAAA;QAIrK,IAAI,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,SAAA,IAAa,QAAQ,SAAA,EAAW;YACzD,MAAM,eAAe;YAErB,IAAI,yBAAyB,MAAA,KAAW,GAAG;gBACzC,yBAAyB,IAAA,CAAK;YAAA;YAGhC,MAAM,YAAY,CAAA,MAAA,EAAS,SAAS,OAAA,CAAQ,MAAM,IAAA,CAAA,CAAA;YAClD,MAAM,cAAc,CAAA,2BAAA,EAA8B,yBAAyB,IAAA,CAAK,0BAAA,8DAAA,CAAA;YAEhF,QAAQ,SAAA,GAAY;YACpB,aAAa,CAAA,yDAAA,EAA4D,YAAA,yDAAA,EAAuE,UAAA,OAAA,EAAmB,WAAA,sCAAA,EAAmD,QAAQ,SAAA,CAAA,KAAA,EAAiB,UAAA,mBAAA,EAA+B,YAAA,CAAA,EAAe,cAAA;QAAA,OACxR;YACL,cAAc;YACd,cAAc;QAAA;QAGhB,IAAI,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,gBAAA,IAAoB,QAAQ,SAAA,EAAW;YAEhE,IAAA,CAAK,kCAAA,CAAmC,0BAA0B,aAAa,KAAK,MAAA,EAAQ,kBAAkB;QAAA;QAGhH,QAAQ,GAAG,aAAa,UAAA,CAAW,MAAA,GAAS,aAAa,aAAa,iBAAiB,IAAA,CAAK,KAAA,CAAA,CAAA;QAC5F,IAAI,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,UAAA,EAAY;YACrC,QAAQ,CAAA,0BAAA,EAA8B,aAAa,UAAA,CAAW,MAAA,GAAS,aAAa,WAAA,EAAA,CAAA;QAAA;QAEtF,IAAI,2BAA2B,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,aAAA,CAAc,cAAA,EAAgB;YAClF,QAAQ,CAAA,oBAAA,EAAuB,YAAA,KAAA,EAAmB,MAAA,qBAAA,EAA6B,YAAA,KAAA,CAAA;QAAA;QAIjF,MAAM,SAAS;YAAE;QAAA;QACjB,IAAI,QAAQ,SAAA,KAAc,OAAO;YAC/B,OAAO,IAAA,GAAO;QAAA;QAGhB,OAAO;IAAA;IAaT,gBAAgB,SAAA,EAAW,gBAAA,EAAkB,OAAA,EAAS,qBAAA,EAAuB;QAC3E,UAAU,WAAW,CAAA;QACrB,wBAAwB,yBAAyB,CAAA;QAEjD,MAAM,SAAS,EAAA;QACf,MAAM,UAAU,CAAA;QAChB,MAAM,gBAAgB,EAAA;QACtB,IAAI,uBAAuB;QAE3B,KAAA,MAAW,kBAAkB,iBAAkB;YAC7C,EAAE,MAAA,CAAO,gBAAgB,CAAC,OAAO,QAAQ;gBACvC,IAAI,CAAC,cAAc,QAAA,CAAS,MAAM;oBAChC,cAAc,IAAA,CAAK;gBAAA;gBAErB,IACE,qBAAA,CAAsB,IAAA,IACnB,qBAAA,CAAsB,IAAA,CAAK,aAAA,KAAkB,MAChD;oBACA,OAAA,CAAQ,IAAA,GAAO;gBAAA;YAAA;QAAA;QAKrB,KAAA,MAAW,kBAAkB,iBAAkB;YAC7C,MAAM,SAAS,cAAc,GAAA,CAAI,CAAA,QAAO;gBACtC,IACE,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,WAAA,IACpB,OAAA,CAAQ,IAAA,KAAS,MACpB;oBAEA,OAAO,cAAA,CAAe,IAAA,IAAQ,OAAO,cAAA,CAAe,IAAA,GAAO;gBAAA;gBAG7D,OAAO,IAAA,CAAK,MAAA,CAAO,cAAA,CAAe,IAAA,EAAM,qBAAA,CAAsB,IAAA,EAAM;oBAAE,SAAS;gBAAA;YAAA;YAGjF,OAAO,IAAA,CAAK,CAAA,CAAA,EAAI,OAAO,IAAA,CAAK,KAAA,CAAA,CAAA;QAAA;QAM9B,IAAI,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,OAAA,CAAQ,iBAAA,IAAqB,QAAQ,iBAAA,EAAmB;YACjF,IAAI,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,OAAA,CAAQ,iBAAA,IAAqB,8BAA8B;gBAEpF,MAAM,eAAe,QAAQ,UAAA,CAAW,GAAA,CAAI,CAAA,OAAQ,IAAA,CAAK,eAAA,CAAgB;gBACzE,MAAM,aAAa,QAAQ,iBAAA,CAAkB,GAAA,CAAI,CAAA,OAAQ,GAAG,IAAA,CAAK,eAAA,CAAgB,MAAA,UAAA,EAAkB,IAAA,CAAK,eAAA,CAAgB,OAAA;gBAExH,IAAI,cAAc;gBAClB,IAAI,QAAQ,aAAA,EAAe;oBACzB,IAAI,CAAC,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,OAAA,CAAQ,eAAA,EAAiB;wBACnD,MAAM,IAAI,MAAM,CAAA,wCAAA,EAA2C,IAAA,CAAK,QAAA,CAAS,IAAA,EAAA;oBAAA;oBAG3E,cAAc,IAAA,CAAK,UAAA,CAAW,QAAQ,aAAA,EAAe;gBAAA;gBAIvD,uBAAuB;oBACrB;oBACA;oBACA,aAAa,IAAA,CAAK;oBAClB;oBACA;oBACA;oBACA,WAAW,IAAA,CAAK;iBAAA;YAAA,OAEb;gBACL,IAAI,QAAQ,aAAA,EAAe;oBACzB,MAAM,IAAI,MAAM,CAAA,wCAAA,EAA2C,IAAA,CAAK,QAAA,CAAS,IAAA,EAAA;gBAAA;gBAG3E,MAAM,YAAY,QAAQ,iBAAA,CAAkB,GAAA,CAAI,CAAA,OAAQ,GAAG,IAAA,CAAK,eAAA,CAAgB,MAAA,QAAA,EAAgB,IAAA,CAAK,eAAA,CAAgB,MAAA,CAAA,CAAA;gBACrH,uBAAuB,GAAG,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,OAAA,CAAQ,iBAAA,CAAA,CAAA,EAAqB,UAAU,IAAA,CAAK,MAAA;YAAA;QAAA;QAIjG,MAAM,mBAAmB,QAAQ,gBAAA,GAAmB,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,OAAA,CAAQ,gBAAA,GAAmB;QACtG,MAAM,aAAa,cAAc,GAAA,CAAI,CAAA,OAAQ,IAAA,CAAK,eAAA,CAAgB,OAAO,IAAA,CAAK;QAC9E,MAAM,sBAAsB,QAAQ,gBAAA,GAAmB,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,OAAA,CAAQ,mBAAA,GAAsB;QAC5G,IAAI,YAAY;QAEhB,IAAI,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,YAAA,IAAgB,QAAQ,SAAA,EAAW;YAC5D,MAAM,eAAe,IAAA,CAAK,oBAAA,CAAqB,uBAAuB;YAEtE,aAAa,aAAa,iBAAA;QAAA;QAG5B,OAAO,MAAM,gBAAA,CAAiB;YAC5B;YACA;YACA;YACA,IAAA,CAAK,UAAA,CAAW;YAChB,CAAA,CAAA,EAAI,WAAA,CAAA,CAAA;YACJ;YACA,OAAO,IAAA,CAAK;YACZ;YACA;YACA;YACA;SAAA;IAAA;IAeJ,YAAY,SAAA,EAAW,aAAA,EAAe,KAAA,EAAO,OAAA,EAAS,UAAA,EAAY;QAChE,UAAU,WAAW,CAAA;QACrB,EAAE,QAAA,CAAS,SAAS,IAAA,CAAK,OAAA;QAEzB,gBAAgB,MAAM,wBAAA,CAAyB,eAAe,QAAQ,QAAA,EAAU;QAEhF,MAAM,SAAS,EAAA;QACf,MAAM,OAAO,EAAA;QACb,MAAM,oBAAoB,CAAA;QAC1B,IAAI,iBAAiB;QACrB,IAAI,WAAW;QACf,IAAI,SAAS;QAEb,IAAI,EAAE,GAAA,CAAI,IAAA,EAAM;YAAC;YAAa;YAAW;YAAkB;SAAA,KAAyB,QAAQ,UAAA,EAAY;YAEtG,QAAQ,SAAA,GAAY;QAAA;QAGtB,MAAM,YAAY,QAAQ,SAAA,KAAc,KAAA,IAAY,IAAA,CAAK,SAAA,CAAU,QAAQ,QAAQ,SAAA;QAEnF,IAAI,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,kBAAA,IAAsB,QAAQ,KAAA,EAAO;YAC9D,IAAI,CAAC;gBAAC;gBAAS;gBAAO;aAAA,CAAU,QAAA,CAAS,IAAA,CAAK,OAAA,GAAU;gBACtD,SAAS,CAAA,OAAA,EAAU,IAAA,CAAK,MAAA,CAAO,QAAQ,KAAA,EAAA,CAAA,CAAA;YAAA,OAAA,IAC9B,IAAA,CAAK,OAAA,KAAY,UAAU;gBAEpC,IAAI,SAAU,CAAA,MAAM,MAAA,IAAU,MAAM,MAAA,GAAS,KAAK,OAAO,IAAA,CAAK,OAAO,MAAA,GAAS,CAAA,GAAI;oBAEhF,UAAU;gBAAA,OACL;oBAEL,UAAU;gBAAA;gBAEZ,UAAU,CAAA,UAAA,EAAa,IAAA,CAAK,MAAA,CAAO,QAAQ,KAAA,EAAA,CAAA,CAAA;YAAA;QAAA;QAI/C,IAAI,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,YAAA,IAAgB,QAAQ,SAAA,EAAW;YAC5D,MAAM,eAAe,IAAA,CAAK,oBAAA,CAAqB,YAAY;YAE3D,UAAU,aAAa,iBAAA;YACvB,WAAW,aAAa,QAAA,IAAY;YACpC,iBAAiB,aAAa,cAAA,IAAkB;YAGhD,IAAI,CAAC,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,YAAA,CAAa,MAAA,IAAU,QAAQ,SAAA,EAAW;gBACpE,QAAQ,UAAA,GAAa;YAAA;QAAA;QAIzB,IAAI,YAAY;YACd,EAAE,IAAA,CAAK,YAAY,CAAC,WAAW,QAAQ;gBACrC,iBAAA,CAAkB,IAAA,GAAO;gBACzB,IAAI,UAAU,KAAA,EAAO;oBACnB,iBAAA,CAAkB,UAAU,KAAA,CAAA,GAAS;gBAAA;YAAA;QAAA;QAK3C,IAAA,MAAW,OAAO,cAAe;YAC/B,IAAI,qBAAqB,iBAAA,CAAkB,IAAA,IACzC,iBAAA,CAAkB,IAAA,CAAK,aAAA,KAAkB,QACzC,CAAC,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,aAAA,CAAc,MAAA,EAAQ;gBAE9C;YAAA;YAGF,MAAM,QAAQ,aAAA,CAAc,IAAA;YAE5B,IAAI,iBAAiB,MAAM,eAAA,IAAmB,QAAQ,SAAA,KAAc,OAAO;gBACzE,OAAO,IAAA,CAAK,GAAG,IAAA,CAAK,eAAA,CAAgB,KAAA,CAAA,EAAQ,IAAA,CAAK,MAAA,CAAO,OAAO,qBAAqB,iBAAA,CAAkB,IAAA,IAAQ,KAAA,GAAW;oBAAE,SAAS;gBAAA,IAAA;YAAA,OAC/H;gBACL,OAAO,IAAA,CAAK,GAAG,IAAA,CAAK,eAAA,CAAgB,KAAA,CAAA,EAAQ,IAAA,CAAK,MAAA,CAAO,OAAO,qBAAqB,iBAAA,CAAkB,IAAA,IAAQ,KAAA,GAAW;oBAAE,SAAS;gBAAA,GAAY,YAAA;YAAA;QAAA;QAIpJ,MAAM,eAAe,cAAA,eAAA,CAAA,GAAK,UAAL;YAAc;QAAA;QAEnC,IAAI,OAAO,MAAA,KAAW,GAAG;YACvB,OAAO;QAAA;QAGT,MAAM,QAAQ,GAAG,SAAA,OAAA,EAAkB,IAAA,CAAK,UAAA,CAAW,WAAA,KAAA,EAAkB,OAAO,IAAA,CAAK,OAAO,eAAA,CAAA,EAAkB,IAAA,CAAK,UAAA,CAAW,OAAO,gBAAgB,QAAA,CAAS,IAAA;QAE1J,MAAM,SAAS;YAAE;QAAA;QACjB,IAAI,QAAQ,SAAA,KAAc,OAAO;YAC/B,OAAO,IAAA,GAAO;QAAA;QAEhB,OAAO;IAAA;IAeT,gBAAgB,QAAA,EAAU,SAAA,EAAW,KAAA,EAAO,uBAAA,EAAyB,0BAAA,EAA4B,OAAA,EAAS;QACxG,UAAU,WAAW,CAAA;QACrB,EAAE,QAAA,CAAS,SAAS;YAAE,WAAW;QAAA;QAEjC,6BAA6B,MAAM,wBAAA,CAAyB,4BAA4B,IAAA,CAAK,OAAA,CAAQ,QAAA;QAErG,IAAI,iBAAiB;QACrB,IAAI,oBAAoB;QAExB,IAAI,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,YAAA,IAAgB,QAAQ,SAAA,EAAW;YAC5D,MAAM,eAAe,IAAA,CAAK,oBAAA,CAAqB,MAAM;YAErD,iBAAiB,aAAa,cAAA;YAC9B,oBAAoB,aAAa,iBAAA;QAAA;QAGnC,MAAM,wBAAwB,EAAA;QAC9B,IAAA,MAAW,SAAS,wBAAyB;YAC3C,MAAM,kBAAkB,uBAAA,CAAwB,MAAA;YAChD,MAAM,cAAc,IAAA,CAAK,eAAA,CAAgB;YACzC,MAAM,gBAAgB,IAAA,CAAK,MAAA,CAAO;YAClC,sBAAsB,IAAA,CAAK,GAAG,YAAA,CAAA,EAAe,cAAc,SAAA,CAAA,EAAY,eAAA;QAAA;QAEzE,IAAA,MAAW,SAAS,2BAA4B;YAC9C,MAAM,WAAW,0BAAA,CAA2B,MAAA;YAC5C,MAAM,cAAc,IAAA,CAAK,eAAA,CAAgB;YACzC,MAAM,eAAe,IAAA,CAAK,MAAA,CAAO;YACjC,sBAAsB,IAAA,CAAK,GAAG,YAAA,CAAA,EAAe,cAAA;QAAA;QAG/C,OAAO,MAAM,gBAAA,CAAiB;YAC5B;YACA,IAAA,CAAK,UAAA,CAAW;YAChB;YACA,sBAAsB,IAAA,CAAK;YAC3B;YACA,IAAA,CAAK,UAAA,CAAW;YAChB;SAAA;IAAA;IAuBJ,cAAc,SAAA,EAAW,UAAA,EAAY,OAAA,EAAS,YAAA,EAAc;QAC1D,UAAU,WAAW,CAAA;QAErB,IAAI,CAAC,MAAM,OAAA,CAAQ,aAAa;YAC9B,UAAU;YACV,aAAa,KAAA;QAAA,OACR;YACL,QAAQ,MAAA,GAAS;QAAA;QAGnB,QAAQ,MAAA,GAAS,QAAQ,MAAA,IAAU,gBAAgB;QACnD,IAAI,QAAQ,MAAA,IAAU,OAAO,QAAQ,MAAA,KAAW,UAAU;YACxD,QAAQ,MAAA,GAAS,QAAQ,MAAA,CAAO,OAAA,CAAQ,OAAO;YAC/C,QAAQ,MAAA,GAAS,QAAQ,MAAA,CAAO,OAAA,CAAQ,UAAU;QAAA;QAGpD,MAAM,YAAY,QAAQ,MAAA,CAAO,GAAA,CAAI,CAAA,UAAS;YAC5C,IAAI,iBAAiB,MAAM,eAAA,EAAiB;gBAC1C,OAAO,IAAA,CAAK,qBAAA,CAAsB;YAAA;YAEpC,IAAI,OAAO,UAAU,UAAU;gBAC7B,QAAQ;oBACN,MAAM;gBAAA;YAAA;YAGV,IAAI,SAAS;YAEb,IAAI,MAAM,SAAA,EAAW;gBACnB,MAAM,IAAA,GAAO,MAAM,SAAA;YAAA;YAGrB,IAAI,CAAC,MAAM,IAAA,EAAM;gBACf,MAAM,IAAI,MAAM,CAAA,uCAAA,EAA0C,KAAK,OAAA,CAAQ,QAAA;YAAA;YAGzE,UAAU,IAAA,CAAK,eAAA,CAAgB,MAAM,IAAA;YAErC,IAAI,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,KAAA,CAAM,OAAA,IAAW,MAAM,OAAA,EAAS;gBACzD,UAAU,CAAA,SAAA,EAAY,IAAA,CAAK,eAAA,CAAgB,MAAM,OAAA,GAAA;YAAA;YAGnD,IAAI,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,KAAA,CAAM,QAAA,EAAU;gBACzC,MAAM,WAAW,MAAM,QAAA,IAAY,QAAQ,QAAA;gBAC3C,IAAI,UAAU;oBACZ,UAAU,CAAA,CAAA,EAAI,UAAA;gBAAA;YAAA;YAIlB,IAAI,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,KAAA,CAAM,MAAA,IAAU,MAAM,MAAA,EAAQ;gBACvD,UAAU,CAAA,CAAA,EAAI,MAAM,MAAA,CAAA,CAAA,CAAA;YAAA;YAGtB,IAAI,MAAM,KAAA,EAAO;gBACf,UAAU,CAAA,CAAA,EAAI,MAAM,KAAA,EAAA;YAAA;YAGtB,OAAO;QAAA;QAGT,IAAI,CAAC,QAAQ,IAAA,EAAM;YAGjB,UAAU,MAAM,SAAA,CAAU,SAAS,QAAQ,MAAA;QAAA;QAG7C,UAAU,MAAM,aAAA,CAAc;QAE9B,IAAI,CAAC,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,KAAA,CAAM,IAAA,EAAM;YACtC,OAAO,QAAQ,IAAA;QAAA;QAGjB,IAAI,QAAQ,KAAA,EAAO;YACjB,QAAQ,KAAA,GAAQ,IAAA,CAAK,UAAA,CAAW,QAAQ,KAAA;QAAA;QAG1C,IAAI,OAAO,cAAc,UAAU;YACjC,YAAY,IAAA,CAAK,gBAAA,CAAiB;QAAA,OAC7B;YACL,YAAY,IAAA,CAAK,UAAA,CAAW;QAAA;QAG9B,MAAM,eAAe,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,KAAA,CAAM,YAAA,IAAgB,QAAQ,YAAA,GAAe,iBAAiB,KAAA;QAC1G,IAAI;QACJ,IAAI,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,aAAA,EAAe;YACxC,MAAM;gBACJ;gBACA;gBACA;gBACA;aAAA;QAAA,OAEG;YACL,MAAM;gBAAC;aAAA;QAAA;QAGT,MAAM,IAAI,MAAA,CACR,QAAQ,MAAA,GAAS,WAAW,IAC5B,QAAQ,IAAA,EAAM,SACd,CAAC,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,aAAA,GAAgB,eAAe,KAAA,GACvD,IAAA,CAAK,gBAAA,CAAiB,QAAQ,IAAA,GAC9B,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,KAAA,CAAM,KAAA,KAAU,KAAK,QAAQ,KAAA,GAAQ,CAAA,MAAA,EAAS,QAAQ,KAAA,EAAA,GAAU,IACvF,CAAC,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,aAAA,GAAgB,CAAA,GAAA,EAAM,WAAA,GAAc,KAAA,GAC5D,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,KAAA,CAAM,KAAA,KAAU,KAAK,QAAQ,KAAA,GAAQ,CAAA,MAAA,EAAS,QAAQ,KAAA,EAAA,GAAU,IACvF,CAAA,CAAA,EAAI,UAAU,IAAA,CAAK,MAAA,CAAA,CAAA,EACnB,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,KAAA,CAAM,MAAA,IAAU,QAAQ,MAAA,GAAS,CAAA,YAAA,EAAe,QAAQ,MAAA,EAAA,GAAW,KAAA,GAC1F,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,KAAA,CAAM,KAAA,IAAS,QAAQ,KAAA,GAAQ,QAAQ,KAAA,GAAQ,KAAA;QAGxE,OAAO,EAAE,OAAA,CAAQ,KAAK,IAAA,CAAK;IAAA;IAG7B,mBAAmB,SAAA,EAAW,OAAA,EAAS;QACrC,IAAI,OAAO,cAAc,UAAU;YACjC,YAAY,IAAA,CAAK,gBAAA,CAAiB;QAAA,OAC7B;YACL,YAAY,IAAA,CAAK,UAAA,CAAW;QAAA;QAG9B,OAAO,MAAM,gBAAA,CAAiB;YAC5B;YACA;YACA;YACA,IAAA,CAAK,oBAAA,CAAqB,WAAW,WAAW,CAAA;YAChD;SAAA;IAAA;IAIJ,qBAAqB,SAAA,EAAW,OAAA,EAAS;QACvC,IAAI,mBAAmB;QAEvB,MAAM,YAAY,QAAQ,MAAA,CAAO,GAAA,CAAI,CAAA,UAAS;YAC5C,IAAI,OAAO,UAAU,UAAU;gBAC7B,OAAO,IAAA,CAAK,eAAA,CAAgB;YAAA;YAE9B,IAAI,iBAAiB,MAAM,eAAA,EAAiB;gBAC1C,OAAO,IAAA,CAAK,qBAAA,CAAsB;YAAA;YAEpC,IAAI,MAAM,SAAA,EAAW;gBACnB,MAAM,IAAA,GAAO,MAAM,SAAA;YAAA;YAGrB,IAAI,CAAC,MAAM,IAAA,EAAM;gBACf,MAAM,IAAI,MAAM,CAAA,uCAAA,EAA0C,OAAA;YAAA;YAG5D,OAAO,IAAA,CAAK,eAAA,CAAgB,MAAM,IAAA;QAAA;QAGpC,MAAM,wBAAwB,UAAU,IAAA,CAAK;QAC7C,MAAM,kBAAkB,UAAU,IAAA,CAAK;QAEvC,OAAQ,QAAQ,IAAA,CAAK,WAAA;YAAA,KACd;gBACH,iBAAiB,IAAA,CAAK,eAAA,CAAgB,QAAQ,IAAA,IAAQ,GAAG,UAAA,CAAA,EAAa,gBAAA,GAAA,CAAA;gBACtE,oBAAoB,CAAA,WAAA,EAAc,eAAA,SAAA,EAA0B,sBAAA,CAAA,CAAA;gBAC5D;YAAA,KACG;gBACH,QAAQ,KAAA,GAAQ,IAAA,CAAK,eAAA,CAAgB,QAAQ,KAAA;gBAC7C,iBAAiB,IAAA,CAAK,eAAA,CAAgB,QAAQ,IAAA,IAAQ,GAAG,UAAA,CAAA,EAAa,gBAAA,GAAA,CAAA;gBACtE,oBAAoB,CAAA,WAAA,EAAc,eAAA,QAAA,EAAyB,QAAQ,KAAA,CAAA,CAAA,CAAA;gBACnE;YAAA,KACG;gBACH,IAAI,QAAQ,YAAA,KAAiB,KAAA,GAAW;oBACtC,MAAM,IAAI,MAAM;gBAAA;gBAGlB,IAAI,IAAA,CAAK,QAAA,CAAS,IAAA,KAAS,SAAS;oBAClC,MAAM,IAAI,MAAM;gBAAA;gBAGlB,iBAAiB,IAAA,CAAK,eAAA,CAAgB,QAAQ,IAAA,IAAQ,GAAG,UAAA,CAAA,EAAa,gBAAA,GAAA,CAAA;gBACtE,oBAAoB,CAAA,WAAA,EAAc,eAAA,UAAA,EAA2B,IAAA,CAAK,MAAA,CAAO,QAAQ,YAAA,EAAA,MAAA,EAAsB,SAAA,CAAU,EAAA,EAAA;gBACjH;YAAA,KACG;gBACH,iBAAiB,IAAA,CAAK,eAAA,CAAgB,QAAQ,IAAA,IAAQ,GAAG,UAAA,CAAA,EAAa,gBAAA,GAAA,CAAA;gBACtE,oBAAoB,CAAA,WAAA,EAAc,eAAA,cAAA,EAA+B,sBAAA,CAAA,CAAA;gBACjE;YAAA,KACG;gBACH,MAAM,aAAa,QAAQ,UAAA;gBAC3B,IAAI,CAAC,cAAc,CAAC,WAAW,KAAA,IAAS,CAAE,CAAA,WAAW,KAAA,IAAS,WAAW,MAAA,GAAS;oBAChF,MAAM,IAAI,MAAM;gBAAA;gBAElB,iBAAiB,IAAA,CAAK,eAAA,CAAgB,QAAQ,IAAA,IAAQ,GAAG,UAAA,CAAA,EAAa,gBAAA,CAAA,EAAmB,WAAW,KAAA,CAAA,GAAA,CAAA;gBACpG,MAAM,mBACJ,OAAO,WAAW,KAAA,KAAU,cACxB,IAAA,CAAK,eAAA,CAAgB,WAAW,KAAA,IAChC,WAAW,MAAA,CAAO,GAAA,CAAI,CAAA,IAAK,IAAA,CAAK,eAAA,CAAgB,IAAI,IAAA,CAAK;gBAC/D,MAAM,oBAAoB,GAAG,IAAA,CAAK,UAAA,CAAW,WAAW,KAAA,EAAA,EAAA,EAAW,iBAAA,CAAA,CAAA;gBACnE,oBAAoB,CAAA,WAAA,EAAc,eAAA,CAAA,CAAA;gBAClC,qBAAqB,CAAA,aAAA,EAAgB,sBAAA,aAAA,EAAqC,mBAAA;gBAC1E,IAAI,QAAQ,QAAA,EAAU;oBACpB,qBAAqB,CAAA,WAAA,EAAc,QAAQ,QAAA,CAAS,WAAA,IAAA;gBAAA;gBAEtD,IAAI,QAAQ,QAAA,EAAU;oBACpB,qBAAqB,CAAA,WAAA,EAAc,QAAQ,QAAA,CAAS,WAAA,IAAA;gBAAA;gBAEtD;YAAA;gBACO,MAAM,IAAI,MAAM,GAAG,QAAQ,IAAA,CAAA,YAAA,CAAA;QAAA;QAGtC,IAAI,QAAQ,UAAA,IAAc;YAAC;YAAU;YAAe;SAAA,CAAe,QAAA,CAAS,QAAQ,IAAA,CAAK,WAAA,KAAgB;YACvG,qBAAqB,CAAA,CAAA,EAAI,IAAA,CAAK,qBAAA,CAAsB,UAAA;QAAA;QAGtD,OAAO;IAAA;IAGT,sBAAsB,SAAA,EAAW,cAAA,EAAgB;QAC/C,IAAI,OAAO,cAAc,UAAU;YACjC,YAAY,IAAA,CAAK,gBAAA,CAAiB;QAAA,OAC7B;YACL,YAAY,IAAA,CAAK,UAAA,CAAW;QAAA;QAG9B,OAAO,MAAM,gBAAA,CAAiB;YAC5B;YACA;YACA;YACA,IAAA,CAAK,gBAAA,CAAiB;SAAA;IAAA;IA2B1B,MAAM,UAAA,EAAY,MAAA,EAAQ,SAAA,EAAW;QAEnC,MAAM,oBAAoB;YACxB;YACA;YACA;YACA;YACA;YACA;YACA;YACA;SAAA;QAIF,YAAY,aAAa;QAGzB,IAAI,OAAO,eAAe,UAAU;YAClC,OAAO,IAAA,CAAK,gBAAA,CAAiB;QAAA;QAE/B,IAAI,MAAM,OAAA,CAAQ,aAAa;YAE7B,WAAW,OAAA,CAAQ,CAAC,OAAM,UAAU;gBAClC,MAAM,WAAW,UAAA,CAAW,QAAQ,EAAA;gBACpC,IAAI;gBACJ,IAAI;gBAGJ,IAAI,CAAC,YAAY,WAAW,KAAA,GAAW;oBACrC,gBAAgB;gBAAA,OAAA,IACP,YAAY,oBAAoB,aAAa;oBACtD,sBAAsB;oBACtB,gBAAgB,SAAS,MAAA;gBAAA;gBAI3B,IAAI,iBAAiB,cAAc,SAAA,YAAqB,OAAO;oBAC7D,IAAI;oBACJ,IAAI;oBAEJ,IAAI,OAAO,UAAS,cAAc,MAAK,SAAA,YAAqB,OAAO;wBAEjE,QAAQ;oBAAA,OAAA,IACC,EAAE,aAAA,CAAc,UAAS,MAAK,KAAA,IAAS,MAAK,KAAA,CAAM,SAAA,YAAqB,OAAO;wBAEvF,QAAQ,MAAK,KAAA;wBACb,KAAK,MAAK,EAAA;oBAAA;oBAGZ,IAAI,OAAO;wBAET,IAAI,CAAC,MAAM,uBAAuB,+BAA+B,eAAe,oBAAoB,OAAA,IAAW,oBAAoB,OAAA,CAAQ,KAAA,KAAU,OAAO;4BAE1J,QAAO,IAAI,YAAY,eAAe,OAAO;gCAC3C,IAAI,MAAM,IAAA;4BAAA;wBAAA,OAEP;4BAEL,QAAO,cAAc,sBAAA,CAAuB,OAAO;4BAGnD,IAAI,CAAC,OAAM;gCACT,QAAO,cAAc,sBAAA,CAAuB,OAAO,MAAM,IAAA;4BAAA;wBAAA;wBAK7D,IAAI,CAAE,CAAA,iBAAgB,WAAA,GAAc;4BAClC,MAAM,IAAI,MAAM,KAAK,MAAA,CAAO,sDAAwD,MAAM,IAAA;wBAAA;oBAAA;gBAAA;gBAKhG,IAAI,OAAO,UAAS,UAAU;oBAE5B,MAAM,aAAa,kBAAkB,OAAA,CAAQ,MAAK,WAAA;oBAGlD,IAAI,QAAQ,KAAK,eAAe,CAAA,GAAI;wBAClC,QAAO,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ,CAAA,CAAA,EAAI,iBAAA,CAAkB,WAAA,EAAA;oBAAA,OAAA,IAC3C,iBAAiB,cAAc,SAAA,YAAqB,OAAO;wBAEpE,IAAI,cAAc,YAAA,KAAiB,KAAA,KAAa,cAAc,YAAA,CAAa,MAAA,EAAO;4BAEhF,QAAO,cAAc,YAAA,CAAa,MAAA;wBAAA,OAAA,IACzB,cAAc,aAAA,KAAkB,KAAA,KAAa,cAAc,aAAA,CAAc,MAAA,IAAS,UAAS,cAAc,aAAA,CAAc,MAAA,CAAM,KAAA,EAAO;4BAE7I,QAAO,cAAc,aAAA,CAAc,MAAA,CAAM,KAAA;wBAAA,OAAA,IAEzC,MAAK,QAAA,CAAS,QACX,cAAc,aAAA,KAAkB,KAAA,GACnC;4BACA,MAAM,YAAY,MAAK,KAAA,CAAM;4BAE7B,IAAI,cAAc,aAAA,CAAc,SAAA,CAAU,EAAA,CAAA,CAAI,IAAA,YAAgB,UAAU,IAAA,EAAM;gCAE5E,MAAM,aAAa,IAAA,CAAK,gBAAA,CAAiB,GAAG,cAAc,IAAA,CAAA,CAAA,EAAQ,cAAc,aAAA,CAAc,SAAA,CAAU,EAAA,CAAA,CAAI,KAAA,EAAA;gCAG5G,MAAM,OAAO,UAAU,KAAA,CAAM;gCAG7B,QAAO,IAAA,CAAK,uBAAA,CAAwB,YAAY;gCAGhD,QAAO,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ;4BAAA;wBAAA;oBAAA;gBAAA;gBAMtC,UAAA,CAAW,MAAA,GAAS;YAAA,GACnB,IAAA;YAGH,MAAM,mBAAmB,WAAW,MAAA;YACpC,MAAM,aAAa,EAAA;YACnB,IAAI;YACJ,IAAI,IAAI;YAER,IAAK,IAAI,GAAG,IAAI,mBAAmB,GAAG,IAAK;gBACzC,OAAO,UAAA,CAAW,EAAA;gBAClB,IAAI,OAAO,SAAS,YAAY,KAAK,eAAA,IAAmB,gBAAgB,MAAM,eAAA,EAAiB;oBAC7F;gBAAA,OAAA,IACS,gBAAgB,aAAa;oBACtC,UAAA,CAAW,EAAA,GAAK,KAAK,EAAA;gBAAA;YAAA;YAKzB,IAAI,MAAM;YAEV,IAAI,IAAI,GAAG;gBACT,OAAO,GAAG,IAAA,CAAK,eAAA,CAAgB,WAAW,IAAA,CAAK,YAAA,CAAA,CAAA;YAAA,OAAA,IACtC,OAAO,UAAA,CAAW,EAAA,KAAO,YAAY,QAAQ;gBACtD,OAAO,GAAG,IAAA,CAAK,eAAA,CAAgB,OAAO,IAAA,EAAA,CAAA,CAAA;YAAA;YAIxC,WAAW,KAAA,CAAM,GAAG,OAAA,CAAQ,CAAA,mBAAkB;gBAC5C,OAAO,IAAA,CAAK,KAAA,CAAM,gBAAgB,QAAQ;YAAA,GACzC,IAAA;YAEH,OAAO;QAAA;QAET,IAAI,WAAW,eAAA,EAAiB;YAC9B,OAAO,GAAG,IAAA,CAAK,UAAA,CAAW,WAAW,KAAA,CAAM,IAAA,EAAA,CAAA,EAAS,IAAA,CAAK,eAAA,CAAgB,WAAW,SAAA,GAAA;QAAA;QAEtF,IAAI,sBAAsB,MAAM,eAAA,EAAiB;YAC/C,OAAO,IAAA,CAAK,qBAAA,CAAsB;QAAA;QAEpC,IAAI,EAAE,aAAA,CAAc,eAAe,WAAW,GAAA,EAAK;YAEjD,MAAM,IAAI,MAAM;QAAA;QAElB,MAAM,IAAI,MAAM,CAAA,2CAAA,EAA8C,KAAK,OAAA,CAAQ,aAAA;IAAA;IAG7E,uBAAuB;QACrB,IAAA,CAAK,gBAAA,GAAmB,IAAA,CAAK,eAAA;QAC7B,IAAA,CAAK,eAAA,GAAkB,SAAS,UAAA,EAAY,KAAA,EAAO;YACjD,IAAI,eAAe,KAAK,OAAO;YAC/B,OAAO,IAAA,CAAK,gBAAA,CAAiB,YAAY;QAAA;IAAA;IAY7C,gBAAgB,UAAA,EAAY,KAAA,EAAO;QACjC,MAAM,IAAI,MAAM,CAAA,6BAAA,EAAgC,IAAA,CAAK,OAAA,CAAA,oBAAA,CAAA;IAAA;IAUvD,iBAAiB,WAAA,EAAa;QAC5B,IAAI,YAAY,QAAA,CAAS,MAAM;YAC7B,cAAc,YAAY,KAAA,CAAM;YAEhC,MAAM,OAAO,YAAY,KAAA,CAAM,GAAG,YAAY,MAAA,GAAS,GAAG,IAAA,CAAK;YAC/D,MAAM,OAAO,WAAA,CAAY,YAAY,MAAA,GAAS,EAAA;YAE9C,OAAO,GAAG,IAAA,CAAK,eAAA,CAAgB,MAAA,CAAA,EAAS,IAAA,CAAK,eAAA,CAAgB,OAAA;QAAA;QAG/D,OAAO,IAAA,CAAK,eAAA,CAAgB;IAAA;IAG9B,eAAe,SAAA,EAAW,KAAA,EAAO;QAC/B,IAAI,SAAS,aAAa,MAAM,aAAA,EAAe;YAC7C,OAAO,IAAA,CAAK,eAAA,CAAgB;QAAA;QAE9B,OAAO,IAAA,CAAK,gBAAA,CAAiB;IAAA;IAQ/B,gBAAgB;QACd,OAAO;IAAA;IAWT,WAAW,KAAA,EAAO,KAAA,EAAO;QACvB,IAAI,QAAQ;QAEZ,IAAI,UAAU,MAAM;YAClB,QAAQ,MAAM,EAAA,IAAM,MAAM,IAAA,IAAQ;QAAA;QAGpC,IAAI,EAAE,QAAA,CAAS,QAAQ;YACrB,IAAI,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,OAAA,EAAS;gBAClC,IAAI,MAAM,MAAA,EAAQ;oBAChB,SAAS,GAAG,IAAA,CAAK,eAAA,CAAgB,MAAM,MAAA,EAAA,CAAA,CAAA;gBAAA;gBAGzC,SAAS,IAAA,CAAK,eAAA,CAAgB,MAAM,SAAA;YAAA,OAC/B;gBACL,IAAI,MAAM,MAAA,EAAQ;oBAChB,SAAS,MAAM,MAAA,GAAU,CAAA,MAAM,SAAA,IAAa,GAAA;gBAAA;gBAG9C,SAAS,MAAM,SAAA;gBACf,QAAQ,IAAA,CAAK,eAAA,CAAgB;YAAA;QAAA,OAE1B;YACL,QAAQ,IAAA,CAAK,eAAA,CAAgB;QAAA;QAG/B,IAAI,OAAO;YACT,SAAS,CAAA,CAAA,EAAI,IAAA,CAAK,aAAA,GAAA,CAAA,EAAmB,IAAA,CAAK,eAAA,CAAgB,QAAA;QAAA;QAG5D,OAAO;IAAA;IAOT,OAAO,KAAA,EAAO,KAAA,EAAO,OAAA,EAAS;QAC5B,UAAU,WAAW,CAAA;QAErB,IAAI,UAAU,QAAQ,UAAU,KAAA,GAAW;YACzC,IAAI,iBAAiB,MAAM,eAAA,EAAiB;gBAC1C,OAAO,IAAA,CAAK,qBAAA,CAAsB;YAAA;YAEpC,IAAI,SAAS,MAAM,IAAA,EAAM;gBACvB,IAAI,MAAM,IAAA,YAAgB,UAAU,MAAA,IAC7B;oBAAC;oBAAS;iBAAA,CAAW,QAAA,CAAS,IAAA,CAAK,OAAA,KACnC;oBAAC;oBAAU;iBAAA,CAAW,QAAA,CAAS,OAAO,QAAQ;oBACnD,QAAQ,OAAO,OAAO;gBAAA;gBAGxB,IAAA,CAAK,QAAA,CAAS,OAAO,OAAO;gBAE5B,IAAI,MAAM,IAAA,CAAK,SAAA,EAAW;oBAExB,MAAM,eAAe,CAAA,SAAU,UAAU,MAAA,CAAO,QAAQ,IAAA,CAAK,OAAA,CAAQ,QAAA,EAAU,IAAA,CAAK,OAAA;oBAEpF,QAAQ,MAAM,IAAA,CAAK,SAAA,CAAU,OAAO;wBAAE,QAAQ;wBAAc;wBAAO,UAAU,IAAA,CAAK,OAAA,CAAQ,QAAA;wBAAU,WAAW,QAAQ,SAAA;oBAAA;oBAEvH,IAAI,MAAM,IAAA,CAAK,MAAA,KAAW,OAAO;wBAE/B,OAAO;oBAAA;gBAAA;YAAA;QAAA;QAKf,OAAO,UAAU,MAAA,CAAO,OAAO,IAAA,CAAK,OAAA,CAAQ,QAAA,EAAU,IAAA,CAAK,OAAA;IAAA;IAG7D,UAAU,IAAA,EAAM;QACd,OAAO,CAAA,UAAS;YACd,KAAK,IAAA,CAAK;YACV,OAAO,CAAA,CAAA,EAAI,KAAK,MAAA,EAAA;QAAA;IAAA;IAQpB,OAAO,KAAA,EAAO,KAAA,EAAO,OAAA,EAAS,SAAA,EAAW;QACvC,UAAU,WAAW,CAAA;QAErB,IAAI,UAAU,QAAQ,UAAU,KAAA,GAAW;YACzC,IAAI,iBAAiB,MAAM,eAAA,EAAiB;gBAC1C,MAAM,IAAI,MAAM;YAAA;YAElB,IAAI,SAAS,MAAM,IAAA,EAAM;gBACvB,IAAA,CAAK,QAAA,CAAS,OAAO,OAAO;gBAE5B,IAAI,MAAM,IAAA,CAAK,SAAA,EAAW;oBACxB,OAAO,MAAM,IAAA,CAAK,SAAA,CAAU,OAAO;wBAAE,QAAQ,EAAE,QAAA;wBAAU;wBAAO,UAAU,IAAA,CAAK,OAAA,CAAQ,QAAA;wBAAU,WAAW,QAAQ,SAAA;wBAAW;oBAAA;gBAAA;YAAA;QAAA;QAKrI,OAAO,UAAU;IAAA;IAOnB,SAAS,KAAA,EAAO,KAAA,EAAO,OAAA,EAAS;QAC9B,IAAI,IAAA,CAAK,cAAA,IAAkB,MAAM,IAAA,CAAK,QAAA,IAAY,OAAO;YACvD,IAAI;gBACF,IAAI,QAAQ,MAAA,IAAU,MAAM,OAAA,CAAQ,QAAQ;oBAC1C,KAAA,MAAW,QAAQ,MAAO;wBACxB,MAAM,IAAA,CAAK,QAAA,CAAS,MAAM;oBAAA;gBAAA,OAEvB;oBACL,MAAM,IAAA,CAAK,QAAA,CAAS,OAAO;gBAAA;YAAA,EAAA,OAEtB,OAAP;gBACA,IAAI,iBAAiB,eAAe,eAAA,EAAiB;oBACnD,MAAM,MAAA,CAAO,IAAA,CAAK,IAAI,eAAe,mBAAA,CACnC,MAAM,OAAA,EACN,oBACA,MAAM,SAAA,EACN,OACA,MACA,GAAG,MAAM,IAAA,CAAK,GAAA,CAAA,UAAA,CAAA;gBAAA;gBAIlB,MAAM;YAAA;QAAA;IAAA;IAKZ,mBAAmB,UAAA,EAAY;QAC7B,OAAO,+CAA+C,IAAA,CAAK;IAAA;IAY7D,wBAAwB,MAAA,EAAQ,IAAA,EAAM,MAAA,EAAQ;QAC5C,IAAI,QAAQ,EAAE,MAAA,CAAO;QACrB,IAAI;QACJ,MAAM,eAAe,IAAA,CAAK,kBAAA,CAAmB,UACzC,SACA,IAAA,CAAK,eAAA,CAAgB;QAEzB,OAAQ,IAAA,CAAK,OAAA;YAAA,KACN;YAAA,KACA;YAAA,KACA;gBAKH,IAAI,IAAA,CAAK,OAAA,KAAY,SAAS;oBAC5B,QAAQ,MAAM,GAAA,CAAI,CAAA,YAAW;wBAC3B,OAAO,KAAK,IAAA,CAAK,WACb,MAAM,QAAA,CAAS,SAAS,OACxB;oBAAA;gBAAA;gBAIR,UAAU,IAAA,CAAK,MAAA,CAAO;oBAAC;iBAAA,CACpB,MAAA,CAAO,OACP,IAAA,CAAK,KACL,OAAA,CAAQ,wBAAwB,CAAC,IAAI,QAAU,CAAA,CAAA,EAAI,MAAA,CAAA,CAAA;gBAEtD,IAAI,IAAA,CAAK,OAAA,KAAY,UAAU;oBAC7B,OAAO,CAAA,aAAA,EAAgB,aAAA,CAAA,EAAgB,QAAA,CAAA,CAAA;gBAAA;gBAGzC,OAAO,CAAA,0BAAA,EAA6B,aAAA,CAAA,EAAgB,QAAA,EAAA,CAAA;YAAA,KAEjD;gBACH,MAAM,OAAO,SAAS,OAAO;gBAC7B,UAAU,IAAA,CAAK,MAAA,CAAO,CAAA,CAAA,EAAI,MAAM,IAAA,CAAK,KAAA,CAAA,CAAA;gBACrC,OAAO,CAAA,CAAA,EAAI,eAAe,OAAO,QAAA,CAAA,CAAA;YAAA;gBAGjC,MAAM,IAAI,MAAM,CAAA,YAAA,EAAe,IAAA,CAAK,OAAA,CAAA,oBAAA,CAAA;QAAA;IAAA;IAgB1C,YAAY,SAAA,EAAW,OAAA,EAAS,KAAA,EAAO;QACrC,UAAU,WAAW,CAAA;QACrB,MAAM,QAAQ,QAAQ,KAAA;QACtB,MAAM,iBAAiB,EAAA;QACvB,MAAM,gBAAgB,EAAA;QACtB,MAAM,WAAW,QAAQ,QAAA,KAAa,KAAA,IAAY,SAAS,QAAQ,mBAAA,GAAsB,QAAQ,QAAA;QACjG,MAAM,aAAa;YACjB,MAAM,QAAQ,UAAA,IAAc,QAAQ,UAAA,CAAW,KAAA;YAC/C,UAAU;QAAA;QAEZ,MAAM,YAAY;YAChB,MAAM;YACN,YAAY;YACZ,IAAI;YACJ;QAAA;QAEF,MAAM,eAAe;YACnB,OAAO;YACP;YACA;QAAA;QAEF,IAAI,kBAAkB,EAAA;QACtB,IAAI,iBAAiB,EAAA;QACrB,IAAI;QAGJ,IAAI,IAAA,CAAK,OAAA,CAAQ,aAAA,IAAiB,CAAC,QAAQ,cAAA,EAAgB;YACzD,QAAQ,cAAA,GAAiB,aAAA,GAAA,IAAI;YAC7B,QAAQ,cAAA,GAAiB,CAAA;YACzB,QAAQ,cAAA,GAAiB,aAAA,GAAA,IAAI;QAAA;QAI/B,IAAI,QAAQ,OAAA,EAAS;YACnB,UAAU,EAAA,GAAK,IAAA,CAAK,eAAA,CAAgB,QAAQ,OAAA;QAAA,OAAA,IACnC,CAAC,MAAM,OAAA,CAAQ,UAAU,IAAA,KAAS,UAAU,KAAA,EAAO;YAC5D,UAAU,EAAA,GAAK,IAAA,CAAK,eAAA,CAAgB,UAAU,KAAA,CAAM,IAAA;QAAA;QAGtD,UAAU,UAAA,GAAa,CAAC,MAAM,OAAA,CAAQ,UAAU,IAAA,IAAQ,IAAA,CAAK,UAAA,CAAW,UAAU,IAAA,IAAQ,UAAU,GAAA,CAAI,CAAA,MAAK;YAC3G,OAAO,MAAM,OAAA,CAAQ,KAAK,IAAA,CAAK,UAAA,CAAW,CAAA,CAAE,EAAA,EAAI,CAAA,CAAE,EAAA,IAAM,IAAA,CAAK,UAAA,CAAW,GAAG;QAAA,GAC1E,IAAA,CAAK;QAER,IAAI,YAAY,WAAW,IAAA,EAAM;YAC/B,KAAA,MAAW,UAAU,UAAU,KAAA,CAAM,oBAAA,CAAsB;gBAEzD,IAAI,CAAC,WAAW,IAAA,CAAK,IAAA,CAAK,CAAA,OAAQ,WAAW,QAAQ,WAAW,IAAA,CAAK,EAAA,IAAM,WAAW,IAAA,CAAK,EAAA,GAAK;oBAC9F,WAAW,IAAA,CAAK,IAAA,CAAK,UAAU,KAAA,CAAM,aAAA,CAAc,OAAA,CAAQ,KAAA,GAAQ;wBAAC;wBAAQ,UAAU,KAAA,CAAM,aAAA,CAAc,OAAA,CAAQ,KAAA;qBAAA,GAAS;gBAAA;YAAA;QAAA;QAKjI,WAAW,IAAA,GAAO,IAAA,CAAK,gBAAA,CAAiB,WAAW,IAAA,EAAM,SAAS,UAAU,EAAA;QAC5E,WAAW,IAAA,GAAO,WAAW,IAAA,IAAS,CAAA,QAAQ,OAAA,GAAU;YAAC,GAAG,UAAU,EAAA,CAAA,EAAA,CAAA;SAAA,GAAU;YAAC;SAAA;QAGjF,IAAI,YAAY,QAAQ,YAAA,EAAc;YAEpC,WAAW,QAAA,GAAW,WAAW,IAAA;YACjC,WAAW,IAAA,GAAO;gBAAC,GAAG,UAAU,EAAA,IAAM,UAAU,UAAA,CAAA,EAAA,CAAA;aAAA;QAAA;QAGlD,IAAI,QAAQ,OAAA,EAAS;YACnB,KAAA,MAAW,WAAW,QAAQ,OAAA,CAAS;gBACrC,IAAI,QAAQ,QAAA,EAAU;oBACpB;gBAAA;gBAEF,MAAM,cAAc,IAAA,CAAK,eAAA,CAAgB,SAAS;oBAAE,YAAY,UAAU,EAAA;oBAAI,YAAY,UAAU,EAAA;gBAAA,GAAM;gBAE1G,iBAAiB,eAAe,MAAA,CAAO,YAAY,QAAA;gBACnD,kBAAkB,gBAAgB,MAAA,CAAO,YAAY,SAAA;gBAErD,IAAI,YAAY,UAAA,CAAW,IAAA,CAAK,MAAA,GAAS,GAAG;oBAC1C,WAAW,IAAA,GAAO,EAAE,IAAA,CAAK,WAAW,IAAA,CAAK,MAAA,CAAO,YAAY,UAAA,CAAW,IAAA;gBAAA;gBAEzE,IAAI,YAAY,UAAA,CAAW,QAAA,CAAS,MAAA,GAAS,GAAG;oBAC9C,WAAW,QAAA,GAAW,EAAE,IAAA,CAAK,WAAW,QAAA,CAAS,MAAA,CAAO,YAAY,UAAA,CAAW,QAAA;gBAAA;YAAA;QAAA;QAKrF,IAAI,UAAU;YACZ,cAAc,IAAA,CAAK,IAAA,CAAK,uBAAA,CAAwB,SAAS,UAAU,KAAA,EAAO,WAAW,QAAA,EAAU,UAAU,UAAA,EAAY,UAAU,EAAA;YAC/H,cAAc,IAAA,CAAK,eAAe,IAAA,CAAK;QAAA,OAClC;YACL,IAAI,QAAQ,YAAA,EAAc;gBACxB,IAAI,CAAC,UAAU,EAAA,EAAI;oBACjB,UAAU,EAAA,GAAK,UAAU,UAAA;gBAAA;gBAE3B,MAAM,QAAQ,eAAA,CAAA,GAAK,QAAQ,KAAA;gBAC3B,IAAI,mBACF,UACA,SACA,mBAAmB,UAAU,EAAA;gBAE/B,IAAI,OAAO,QAAQ,YAAA,CAAa,EAAA,KAAO,UAAU;oBAC/C,WAAW,QAAQ,YAAA,CAAa,EAAA;gBAAA,OAAA,IACvB,QAAQ,YAAA,CAAa,EAAA,YAAc,SAAS;oBACrD,WAAW,QAAQ,YAAA,CAAa,EAAA,CAAG,eAAA;gBAAA;gBAGrC,IAAI,QAAQ,YAAA,CAAa,EAAA,YAAc,eAAe;oBAEpD,mBAAmB,QAAQ,YAAA,CAAa,EAAA,CAAG,cAAA,CAAe,EAAA;oBAC1D,MAAM,sBAAsB,MAAM,yBAAA,CAA0B;wBAC1D,SAAS;4BAAC;gCACR,aAAa,QAAQ,YAAA,CAAa,EAAA,CAAG,cAAA;gCACrC,aAAa;gCACb,UAAU;gCACV,OAAO,eAAA;oCAAA,CACJ,GAAG,WAAA,CAAA,EAAc;gCAAA,GACf,QAAQ,YAAA,CAAa,OAAA,IAAW,QAAQ,YAAA,CAAa,OAAA,CAAQ,KAAA;4BAAA;yBAAA;wBAGpE;oBAAA;oBAIF,QAAQ,OAAA,GAAU;oBAClB,QAAQ,mBAAA,GAAsB;oBAC9B,QAAQ,UAAA,GAAa,OAAO,MAAA,CAAO,oBAAoB,UAAA,EAAY,QAAQ,UAAA;oBAC3E,QAAQ,YAAA,GAAe,oBAAoB,YAAA,CAAa,MAAA,CAAO,QAAQ,YAAA,IAAgB,EAAA;oBACvF,UAAU,oBAAoB,OAAA;oBAE9B,IAAI,MAAM,OAAA,CAAQ,QAAQ,KAAA,GAAQ;wBAEhC,QAAQ,KAAA,CAAM,OAAA,CAAQ,CAAC,OAAO,MAAM;4BAClC,IAAI,MAAM,OAAA,CAAQ,QAAQ;gCACxB,QAAQ,KAAA,CAAM,EAAA;4BAAA;4BAGhB,IAAI,QAAQ,CAAA,eAAA,EAAkB,GAAA;4BAC9B,QAAQ,UAAA,CAAW,IAAA,CAAK;gCAAC;gCAAO;6BAAA;4BAGhC,QAAQ,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ,IAAA,CAAK,KAAA,CAAM;4BAE1C,IAAI,MAAM,OAAA,CAAQ,QAAQ,KAAA,CAAM,EAAA,GAAK;gCACnC,QAAQ,KAAA,CAAM,EAAA,CAAG,EAAA,GAAK;4BAAA,OACjB;gCACL,QAAQ,KAAA,CAAM,EAAA,GAAK;4BAAA;wBAAA;wBAGvB,oBAAoB,QAAQ,KAAA;oBAAA;gBAAA,OAEzB;oBAEL,oBAAoB,QAAQ,KAAA;oBAI5B,IAAI,CAAC,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,uBAAA,EAAyB;wBACnD,OAAO,QAAQ,KAAA;oBAAA;oBAEjB,KAAA,CAAM,GAAG,WAAA,CAAA,GAAe;gBAAA;gBAK1B,MAAM,YAAY,CAAA,eAAA,EAAkB,IAAA,CAAK,WAAA,CACvC,WACA;oBACE,YAAY,QAAQ,UAAA;oBACpB,QAAQ,QAAQ,MAAA;oBAChB,OAAO,QAAQ,YAAA,CAAa,KAAA;oBAC5B,OAAO;oBACP,gBAAgB,QAAQ,cAAA;oBACxB,gBAAgB,QAAQ,cAAA;oBACxB;oBACA;oBACA;gBAAA,GAEF,OACA,OAAA,CAAQ,MAAM,IAAA,EAAA,EAAQ,IAAA,CAAK,aAAA,GAAA,IAAA,CAAA;gBAC7B,MAAM,cAAc,IAAA,CAAK,cAAA,CAAe,GAAG,WAAA,EAAa,MAAM;oBAAE;gBAAA;gBAChE,MAAM,YAAY,UAAU,OAAA,CAAQ;gBAEpC,eAAe,IAAA,CAAK,IAAA,CAAK,uBAAA,CAAwB,SAAS,UAAU,KAAA,EAAO,WAAW,IAAA,EAAM,CAAA,CAAA,EAC1F,QAAQ,YAAA,CAAa,MAAA,CAAO,GAAA,CAAI,CAAA,UAAS;oBACvC,IAAI;oBACJ,IAAI,UAAU;wBACZ,aAAa;4BAAA,CACV,SAAA,EAAW;wBAAA;oBAAA;oBAGhB,IAAI,SAAS;wBACX,aAAa;4BAAA,CACV,QAAQ,YAAA,CAAa,EAAA,CAAG,sBAAA,CAAA,EAAyB;wBAAA;oBAAA;oBAItD,OAAO,MAAM,SAAA,CAAU,WAAW,WAAW,YAAY,MAAA,EAAQ,IAAA,CAAK,kBAAA,CAAmB,YAAY;gBAAA,GACpG,IAAA,CACD,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,YAAA,GAAe,gBAAgB,WAAA,CAAA,CAAA,EAErD,UAAU,EAAA;YAAA,OACV;gBACL,eAAe,IAAA,CAAK,IAAA,CAAK,uBAAA,CAAwB,SAAS,UAAU,KAAA,EAAO,WAAW,IAAA,EAAM,UAAU,UAAA,EAAY,UAAU,EAAA;YAAA;YAG9H,eAAe,IAAA,CAAK,gBAAgB,IAAA,CAAK;QAAA;QAI3C,IAAI,OAAO,SAAA,CAAU,cAAA,CAAe,IAAA,CAAK,SAAS,YAAY,CAAC,QAAQ,YAAA,EAAc;YACnF,QAAQ,KAAA,GAAQ,IAAA,CAAK,kBAAA,CAAmB,QAAQ,KAAA,EAAO,UAAU,EAAA,IAAM,WAAW,OAAO;YACzF,IAAI,QAAQ,KAAA,EAAO;gBACjB,IAAI,UAAU;oBACZ,cAAc,IAAA,CAAK,CAAA,OAAA,EAAU,QAAQ,KAAA,EAAA;gBAAA,OAChC;oBACL,eAAe,IAAA,CAAK,CAAA,OAAA,EAAU,QAAQ,KAAA,EAAA;oBAEtC,eAAe,OAAA,CAAQ,CAAC,OAAO,QAAQ;wBACrC,IAAI,MAAM,UAAA,CAAW,WAAW;4BAC9B,cAAA,CAAe,IAAA,GAAO,IAAA,CAAK,uBAAA,CAAwB,SAAS,OAAO,WAAW,IAAA,EAAM,UAAU,UAAA,EAAY,UAAU,EAAA,EAAI,QAAQ,KAAA;wBAAA;oBAAA;gBAAA;YAAA;QAAA;QAQ1I,IAAI,QAAQ,KAAA,EAAO;YACjB,QAAQ,KAAA,GAAQ,MAAM,OAAA,CAAQ,QAAQ,KAAA,IAAS,QAAQ,KAAA,CAAM,GAAA,CAAI,CAAA,IAAK,IAAA,CAAK,aAAA,CAAc,GAAG,OAAO,UAAU,EAAA,EAAI,UAAU,IAAA,CAAK,QAAQ,IAAA,CAAK,aAAA,CAAc,QAAQ,KAAA,EAAO,OAAO,UAAU,EAAA,EAAI;YAE/L,IAAI,YAAY,QAAQ,KAAA,EAAO;gBAC7B,cAAc,IAAA,CAAK,CAAA,UAAA,EAAa,QAAQ,KAAA,EAAA;YAAA,OAAA,IAC/B,QAAQ,KAAA,EAAO;gBACxB,eAAe,IAAA,CAAK,CAAA,UAAA,EAAa,QAAQ,KAAA,EAAA;YAAA;QAAA;QAK7C,IAAI,OAAO,SAAA,CAAU,cAAA,CAAe,IAAA,CAAK,SAAS,WAAW;YAC3D,QAAQ,MAAA,GAAS,IAAA,CAAK,kBAAA,CAAmB,QAAQ,MAAA,EAAQ,WAAW,OAAO,SAAS;YACpF,IAAI,QAAQ,MAAA,EAAQ;gBAClB,IAAI,UAAU;oBACZ,cAAc,IAAA,CAAK,CAAA,QAAA,EAAW,QAAQ,MAAA,EAAA;gBAAA,OACjC;oBACL,eAAe,IAAA,CAAK,CAAA,QAAA,EAAW,QAAQ,MAAA,EAAA;gBAAA;YAAA;QAAA;QAM7C,IAAI,QAAQ,KAAA,EAAO;YACjB,MAAM,SAAS,IAAA,CAAK,cAAA,CAAe,SAAS,OAAO;YACnD,IAAI,OAAO,cAAA,CAAe,MAAA,EAAQ;gBAChC,eAAe,IAAA,CAAK,CAAA,UAAA,EAAa,OAAO,cAAA,CAAe,IAAA,CAAK,OAAA;YAAA;YAE9D,IAAI,OAAO,aAAA,CAAc,MAAA,EAAQ;gBAC/B,cAAc,IAAA,CAAK,CAAA,UAAA,EAAa,OAAO,aAAA,CAAc,IAAA,CAAK,OAAA;YAAA;QAAA;QAK9D,MAAM,aAAa,IAAA,CAAK,iBAAA,CAAkB,SAAS,UAAU,KAAA;QAC7D,IAAI,cAAc,CAAC,QAAQ,YAAA,EAAc;YACvC,IAAI,UAAU;gBACZ,cAAc,IAAA,CAAK;YAAA,OACd;gBACL,eAAe,IAAA,CAAK;YAAA;QAAA;QAIxB,IAAI,UAAU;YACZ,IAAA,CAAK,uBAAA,CAAwB,WAAW,IAAA,EAAM;gBAAE,WAAW,SAAS,MAAM,IAAA;gBAAM,IAAI,UAAU,EAAA;YAAA;YAC9F,QAAQ,CAAA,OAAA,EAAU,WAAW,IAAA,CAAK,IAAA,CAAK,MAAA,OAAA,EAAe,cAAc,IAAA,CAAK,IAAA,EAAA,EAAQ,IAAA,CAAK,aAAA,GAAA,CAAA,EAAmB,UAAU,EAAA,GAAK,gBAAgB,IAAA,CAAK,MAAM,eAAe,IAAA,CAAK,KAAA;QAAA,OAClK;YACL,QAAQ,eAAe,IAAA,CAAK;QAAA;QAG9B,IAAI,QAAQ,IAAA,IAAQ,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,IAAA,EAAM;YAC/C,IAAI,OAAO,QAAQ,IAAA;YACnB,IAAI,OAAO,QAAQ,IAAA,KAAS,UAAU;gBACpC,OAAO,QAAQ,IAAA,CAAK,KAAA;YAAA;YAEtB,IAAI,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,OAAA,IAAW;gBAAC;gBAAa;aAAA,CAAiB,QAAA,CAAS,OAAO;gBACnF,SAAS,CAAA,KAAA,EAAQ,MAAA;YAAA,OAAA,IACR,SAAS,SAAS;gBAC3B,SAAS,CAAA,CAAA,EAAI,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,QAAA,EAAA;YAAA,OAC/B;gBACL,SAAS;YAAA;YAEX,IAAI,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,MAAA,IAAU,QAAQ,IAAA,CAAK,EAAA,IAAM,QAAQ,IAAA,CAAK,EAAA,CAAG,SAAA,YAAqB,OAAO;gBAClG,SAAS,CAAA,IAAA,EAAO,IAAA,CAAK,UAAA,CAAW,QAAQ,IAAA,CAAK,EAAA,CAAG,IAAA,GAAA;YAAA;YAElD,IAAI,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,UAAA,IAAc,QAAQ,UAAA,EAAY;gBAC3D,SAAS;YAAA;QAAA;QAIb,OAAO,GAAG,MAAA,CAAA,CAAA;IAAA;IAGZ,cAAc,KAAA,EAAO,KAAA,EAAO,SAAA,EAAW,OAAA,EAAS;QAC9C,MAAM,MAAM,MAAM,OAAA,CAAQ,SAAS,KAAA,CAAM,EAAA,GAAK;QAE9C,OAAO,IAAA,CAAK,KAAA,CAAM,IAAA,CAAK,iBAAA,CAAkB,WAAW,KAAK,YAAY,KAAK;IAAA;IAG5E,iBAAiB,UAAA,EAAY,OAAA,EAAS,WAAA,EAAa;QACjD,OAAO,cAAc,WAAW,GAAA,CAAI,CAAA,SAAQ;YAC1C,IAAI,WAAW;YAEf,IAAI,gBAAgB,MAAM,eAAA,EAAiB;gBACzC,OAAO,IAAA,CAAK,qBAAA,CAAsB;YAAA;YAEpC,IAAI,MAAM,OAAA,CAAQ,OAAO;gBACvB,IAAI,KAAK,MAAA,KAAW,GAAG;oBACrB,MAAM,IAAI,MAAM,GAAG,KAAK,SAAA,CAAU,MAAA,wGAAA,CAAA;gBAAA;gBAEpC,OAAO,KAAK,KAAA;gBAEZ,IAAI,IAAA,CAAK,EAAA,YAAc,MAAM,eAAA,EAAiB;oBAC5C,IAAA,CAAK,EAAA,GAAK,IAAA,CAAK,qBAAA,CAAsB,IAAA,CAAK,EAAA;oBAC1C,WAAW;gBAAA,OAAA,IACF,IAAA,CAAK,OAAA,CAAQ,iBAAA,KAAsB,YAAY,CAAC,IAAA,CAAK,EAAA,CAAG,QAAA,CAAS,QAAQ,CAAC,IAAA,CAAK,EAAA,CAAG,QAAA,CAAS,MAAM;oBAC1G,IAAA,CAAK,EAAA,GAAK,IAAA,CAAK,eAAA,CAAgB,IAAA,CAAK,EAAA;gBAAA,OAAA,IAC3B,IAAA,CAAK,OAAA,CAAQ,iBAAA,KAAsB,iBAAiB;oBAC7D,MAAM,IAAI,MAAM,CAAA;;;;;;;;;;;;wDAAA,CAAA;gBAAA;gBAelB,IAAI,QAAQ,IAAA,CAAK,EAAA;gBAEjB,IAAI,IAAA,CAAK,OAAA,CAAQ,aAAA,EAAe;oBAC9B,QAAQ,IAAA,CAAK,iBAAA,CAAkB,OAAO,aAAa;gBAAA;gBAGrD,OAAO;oBAAC,IAAA,CAAK,EAAA;oBAAI,IAAA,CAAK,eAAA,CAAgB;iBAAA,CAAQ,IAAA,CAAK;YAAA,OAC9C;gBACL,OAAO,CAAC,KAAK,QAAA,CAAS,MAAM,SAAA,KAAc,CAAC,KAAK,QAAA,CAAS,OACrD,IAAA,CAAK,cAAA,CAAe,MAAM,QAAQ,KAAA,IAClC,IAAA,CAAK,MAAA,CAAO;YAAA;YAElB,IAAI,CAAC,EAAE,OAAA,CAAQ,QAAQ,OAAA,KAAa,CAAA,CAAC,KAAK,QAAA,CAAS,QAAQ,QAAQ,WAAA,KAAgB,UAAU;gBAC3F,OAAO,GAAG,YAAA,CAAA,EAAe,MAAA;YAAA;YAG3B,OAAO;QAAA;IAAA;IAIX,gBAAgB,OAAA,EAAS,eAAA,EAAiB,YAAA,EAAc;QACtD,MAAM,cAAc;YAClB,WAAW,EAAA;YACX,UAAU,EAAA;QAAA;QAEZ,MAAM,oBAAoB,EAAA;QAC1B,MAAM,mBAAmB,EAAA;QACzB,IAAI,mBAAmB;QACvB,MAAM,YAAY;YAChB,YAAY,QAAQ,EAAA;YACpB,YAAY,QAAQ,EAAA;QAAA;QAEtB,MAAM,aAAa;YACjB,MAAM,EAAA;YACN,UAAU,EAAA;QAAA;QAEZ,IAAI;QAEJ,aAAa,OAAA,CAAQ,WAAA,GAAc;QAEnC,IAAI,aAAa,KAAA,CAAM,IAAA,KAAS,gBAAgB,UAAA,IAAc,aAAa,KAAA,CAAM,EAAA,KAAO,gBAAgB,UAAA,EAAY;YAClH,UAAU,UAAA,GAAa,GAAG,gBAAgB,UAAA,CAAA,EAAA,EAAe,QAAQ,EAAA,EAAA;YACjE,UAAU,UAAA,GAAa,GAAG,gBAAgB,UAAA,CAAA,CAAA,EAAc,QAAQ,EAAA,EAAA;QAAA;QAIlE,IAAI,aAAa,OAAA,CAAQ,uBAAA,KAA4B,OAAO;YAC1D,QAAQ,KAAA,CAAM,iBAAA,CAAkB;YAChC,MAAM,gBAAA,CAAiB,SAAS,QAAQ,KAAA;YAExC,MAAM,oBAAoB,QAAQ,UAAA,CAAW,GAAA,CAAI,CAAA,SAAQ;gBACvD,IAAI,SAAS;gBACb,IAAI,WAAW;gBAEf,IAAI,MAAM,OAAA,CAAQ,SAAS,KAAK,MAAA,KAAW,GAAG;oBAC5C,IAAI,IAAA,CAAK,EAAA,YAAc,MAAM,eAAA,IAC3B,CAAA,IAAA,CAAK,EAAA,YAAc,MAAM,OAAA,IACzB,IAAA,CAAK,EAAA,YAAc,MAAM,IAAA,IACzB,IAAA,CAAK,EAAA,YAAc,MAAM,EAAA,GACxB;wBACD,WAAW;oBAAA;oBAGb,OAAO,KAAK,GAAA,CAAI,CAAA,QAAQ,iBAAgB,MAAM,eAAA,GAAkB,IAAA,CAAK,qBAAA,CAAsB,SAAQ;oBAEnG,SAAS,IAAA,CAAK,EAAA;oBACd,OAAO,IAAA,CAAK,EAAA;gBAAA;gBAEd,IAAI,gBAAgB,MAAM,OAAA,EAAS;oBACjC,OAAO,KAAK,GAAA;gBAAA;gBAEd,IAAI,gBAAgB,MAAM,IAAA,IAAQ,gBAAgB,MAAM,EAAA,EAAI;oBAC1D,MAAM,IAAI,MACR;gBAAA;gBAKJ,IAAI;gBACJ,IAAI,aAAa,MAAM;oBACrB,SAAS;gBAAA,OAAA,IACA,UAAU,IAAA,CAAK,OAAO;oBAC/B,SAAS,CAAA,CAAA,EAAI,IAAA,CAAK,eAAA,CAAgB,UAAU,UAAA,EAAA,CAAA,EAAe,KAAK,OAAA,CAAQ,UAAU,IAAA,CAAA,CAAA;gBAAA,OAAA,IACzE,iBAAiB,IAAA,CAAK,OAAO;oBACtC,SAAS,KAAK,OAAA,CAAQ,mBAAmB,CAAA,aAAA,EAAgB,IAAA,CAAK,eAAA,CAAgB,UAAU,UAAA,EAAA,CAAA,CAAA;gBAAA,OAAA,IAC/E,eAAe,IAAA,CAAK,OAAO;oBACpC,SAAS,KAAK,OAAA,CAAQ,iBAAiB,CAAA,WAAA,EAAc,IAAA,CAAK,eAAA,CAAgB,UAAU,UAAA,EAAA,CAAA,CAAA;gBAAA,OAC/E;oBACL,SAAS,GAAG,IAAA,CAAK,eAAA,CAAgB,UAAU,UAAA,EAAA,CAAA,EAAe,IAAA,CAAK,eAAA,CAAgB,OAAA;gBAAA;gBAEjF,IAAI,QAAQ,GAAG,UAAU,UAAA,CAAA,CAAA,EAAc,QAAA;gBAEvC,IAAI,IAAA,CAAK,OAAA,CAAQ,aAAA,EAAe;oBAC9B,QAAQ,IAAA,CAAK,iBAAA,CAAkB,OAAO,UAAU,UAAA,EAAY,aAAa,OAAA;gBAAA;gBAG3E,OAAO,MAAM,gBAAA,CAAiB;oBAC5B;oBACA;oBACA,IAAA,CAAK,eAAA,CAAgB,OAAO;iBAAA;YAAA;YAGhC,IAAI,QAAQ,QAAA,IAAY,aAAa,QAAA,EAAU;gBAC7C,KAAA,MAAW,QAAQ,kBAAmB;oBACpC,WAAW,QAAA,CAAS,IAAA,CAAK;gBAAA;YAAA,OAEtB;gBACL,KAAA,MAAW,QAAQ,kBAAmB;oBACpC,WAAW,IAAA,CAAK,IAAA,CAAK;gBAAA;YAAA;QAAA;QAM3B,IAAI,QAAQ,OAAA,EAAS;YACnB,YAAY,IAAA,CAAK,mBAAA,CAAoB,SAAS,WAAW,gBAAgB,UAAA,EAAY;QAAA,OAChF;YACL,IAAA,CAAK,uBAAA,CAAwB,SAAS,WAAW;YACjD,YAAY,IAAA,CAAK,YAAA,CAAa,SAAS;QAAA;QAIzC,IAAI,UAAU,UAAA,CAAW,IAAA,CAAK,MAAA,GAAS,GAAG;YACxC,WAAW,IAAA,GAAO,WAAW,IAAA,CAAK,MAAA,CAAO,UAAU,UAAA,CAAW,IAAA;QAAA;QAGhE,IAAI,UAAU,UAAA,CAAW,QAAA,CAAS,MAAA,GAAS,GAAG;YAC5C,WAAW,QAAA,GAAW,WAAW,QAAA,CAAS,MAAA,CAAO,UAAU,UAAA,CAAW,QAAA;QAAA;QAGxE,IAAI,QAAQ,OAAA,EAAS;YACnB,KAAA,MAAW,gBAAgB,QAAQ,OAAA,CAAS;gBAC1C,IAAI,aAAa,QAAA,IAAY,aAAa,OAAA,EAAS;oBACjD;gBAAA;gBAGF,MAAM,mBAAmB,IAAA,CAAK,eAAA,CAAgB,cAAc,WAAW;gBAEvE,IAAI,QAAQ,QAAA,KAAa,SAAS,aAAa,QAAA,KAAa,MAAM;oBAChE,mBAAmB;gBAAA;gBAGrB,IAAI,aAAa,QAAA,IAAY,aAAa,QAAA,EAAU;oBAClD,iBAAiB,IAAA,CAAK,iBAAiB,QAAA;gBAAA;gBAEzC,IAAI,iBAAiB,SAAA,EAAW;oBAC9B,kBAAkB,IAAA,CAAK,iBAAiB,SAAA;gBAAA;gBAE1C,IAAI,iBAAiB,UAAA,CAAW,IAAA,CAAK,MAAA,GAAS,GAAG;oBAC/C,WAAW,IAAA,GAAO,WAAW,IAAA,CAAK,MAAA,CAAO,iBAAiB,UAAA,CAAW,IAAA;gBAAA;gBAEvE,IAAI,iBAAiB,UAAA,CAAW,QAAA,CAAS,MAAA,GAAS,GAAG;oBACnD,WAAW,QAAA,GAAW,WAAW,QAAA,CAAS,MAAA,CAAO,iBAAiB,UAAA,CAAW,QAAA;gBAAA;YAAA;QAAA;QAKnF,IAAI,QAAQ,QAAA,IAAY,aAAa,QAAA,EAAU;YAC7C,IAAI,oBAAoB,iBAAiB,MAAA,GAAS,GAAG;gBACnD,YAAY,QAAA,CAAS,IAAA,CAAK,CAAA,CAAA,EAAI,UAAU,IAAA,CAAA,GAAA,EAAU,UAAU,IAAA,GAAO,iBAAiB,IAAA,CAAK,IAAA,MAAA,EAAY,UAAU,SAAA,EAAA;YAAA,OAC1G;gBACL,YAAY,QAAA,CAAS,IAAA,CAAK,CAAA,CAAA,EAAI,UAAU,IAAA,CAAA,CAAA,EAAQ,UAAU,IAAA,CAAA,IAAA,EAAW,UAAU,SAAA,EAAA;gBAC/E,IAAI,iBAAiB,MAAA,GAAS,GAAG;oBAC/B,YAAY,QAAA,CAAS,IAAA,CAAK,iBAAiB,IAAA,CAAK;gBAAA;YAAA;YAGpD,YAAY,SAAA,CAAU,IAAA,CAAK,kBAAkB,IAAA,CAAK;QAAA,OAC7C;YACL,IAAI,oBAAoB,kBAAkB,MAAA,GAAS,GAAG;gBACpD,YAAY,SAAA,CAAU,IAAA,CAAK,CAAA,CAAA,EAAI,UAAU,IAAA,CAAA,GAAA,EAAU,UAAU,IAAA,GAAO,kBAAkB,IAAA,CAAK,IAAA,MAAA,EAAY,UAAU,SAAA,EAAA;YAAA,OAC5G;gBACL,YAAY,SAAA,CAAU,IAAA,CAAK,CAAA,CAAA,EAAI,UAAU,IAAA,CAAA,CAAA,EAAQ,UAAU,IAAA,CAAA,IAAA,EAAW,UAAU,SAAA,EAAA;gBAChF,IAAI,kBAAkB,MAAA,GAAS,GAAG;oBAChC,YAAY,SAAA,CAAU,IAAA,CAAK,kBAAkB,IAAA,CAAK;gBAAA;YAAA;YAGtD,YAAY,QAAA,CAAS,IAAA,CAAK,iBAAiB,IAAA,CAAK;QAAA;QAGlD,OAAO;YACL,WAAW,YAAY,SAAA,CAAU,IAAA,CAAK;YACtC,UAAU,YAAY,QAAA,CAAS,IAAA,CAAK;YACpC;QAAA;IAAA;IAIJ,kBAAkB,KAAA,EAAO,SAAA,EAAW,OAAA,EAAS;QAE3C,IAAI,QAAQ,cAAA,CAAe,GAAG,YAAY,OAAA,CAAA,EAAU;YAClD,OAAO,QAAQ,cAAA,CAAe,GAAG,YAAY,OAAA,CAAA;QAAA;QAI/C,IAAI,MAAM,KAAA,CAAM,yBAAyB;YACvC,OAAO;QAAA;QAGT,MAAM,gBAAgB,CAAA,CAAA,EAAI,QAAQ,cAAA,CAAe,IAAA,EAAA;QAEjD,QAAQ,cAAA,CAAe,GAAA,CAAI,eAAe;QAC1C,QAAQ,cAAA,CAAe,GAAG,YAAY,OAAA,CAAA,GAAW;QAEjD,OAAO;IAAA;IAGT,kBAAkB,SAAA,EAAW,KAAA,EAAO,OAAA,EAAS;QAC3C,IAAI,IAAA,CAAK,OAAA,CAAQ,aAAA,EAAe;YAC9B,IAAI,QAAQ,cAAA,CAAe,GAAG,YAAY,OAAA,CAAA,EAAU;gBAClD,OAAO,QAAQ,cAAA,CAAe,GAAG,YAAY,OAAA,CAAA;YAAA;QAAA;QAGjD,OAAO;IAAA;IAGT,aAAa,OAAA,EAAS,YAAA,EAAc;QAClC,MAAM,cAAc,QAAQ,WAAA;QAC5B,MAAM,SAAS,QAAQ,MAAA;QACvB,MAAM,cAAc,CAAC,CAAC,UAAU,CAAC,QAAQ,MAAA,CAAO,WAAA,IAAe,QAAQ,MAAA,CAAO,KAAA,CAAM,IAAA,KAAS,aAAa,OAAA,CAAQ,KAAA,CAAM,IAAA;QACxH,IAAI;QACJ,IAAI;QAEJ,MAAM,OAAO,YAAY,MAAA;QACzB,MAAM,WAAW,uBAAuB,YACtC,YAAY,UAAA,GACZ,YAAY,kBAAA,IAAsB,KAAK,mBAAA;QACzC,MAAM,YAAY,uBAAuB,YACvC,YAAY,eAAA,GACZ,KAAK,aAAA,CAAc,YAAY,kBAAA,IAAsB,KAAK,mBAAA,CAAA,CAAqB,KAAA;QACjF,IAAI;QAEJ,MAAM,QAAQ,QAAQ,KAAA;QACtB,MAAM,aAAa,MAAM,YAAA;QACzB,MAAM,aAAa,uBAAuB,YACxC,MAAM,aAAA,CAAc,YAAY,gBAAA,IAAoB,MAAM,mBAAA,CAAA,CAAqB,KAAA,GAC/E,YAAY,eAAA;QACd,IAAI,UAAU,QAAQ,EAAA;QAEtB,MAAQ,CAAA,UAAU,WAAW,QAAQ,MAAA,IAAU,QAAQ,MAAA,KAAW,QAAQ,WAAA,CAAa;YACrF,IAAI,QAAQ;gBACV,SAAS,GAAG,QAAQ,EAAA,CAAA,EAAA,EAAO,QAAA;YAAA,OACtB;gBACL,SAAS,QAAQ,EAAA;YAAA;QAAA;QAIrB,IAAI,CAAC,QAAQ,SAAS,OAAO,EAAA,IAAM,OAAO,KAAA,CAAM,IAAA;aAC3C,UAAU,GAAG,OAAA,EAAA,EAAW,SAAA;QAE7B,IAAI,SAAS,GAAG,IAAA,CAAK,UAAA,CAAW,QAAA,CAAA,EAAW,IAAA,CAAK,eAAA,CAAgB,YAAA;QAChE,MAAM,qBAAqB,EAAA;QAE3B,IAAI,aAAa,OAAA,CAAQ,YAAA,IAAgB,eAAe,aAAa,QAAA,IAAY,QAAQ,MAAA,CAAO,QAAA,IAAY,CAAC,QAAQ,QAAA,EAAU;YAC7H,IAAI,aAAa;gBAEf,MAAM,YAAY,IAAA,CAAK,UAAA,CAAW,OAAO,EAAA,IAAM,OAAO,KAAA,CAAM,IAAA;gBAG5D,SAAS,IAAA,CAAK,iBAAA,CAAkB,WAAW,UAAU,aAAa,OAAA,KAAY,GAAG,UAAA,CAAA,EAAa,IAAA,CAAK,eAAA,CAAgB,WAAA;gBAEnH,IAAI,aAAa,QAAA,EAAU;oBACzB,MAAM,eAAe,GAAG,UAAA,CAAA,EAAa,IAAA,CAAK,eAAA,CAAgB,YAAA;oBAC1D,mBAAmB,IAAA,CAAK,iBAAiB,SAAS,GAAG,aAAA,IAAA,EAAmB,IAAA,CAAK,eAAA,CAAgB,WAAA,GAAc;gBAAA;YAAA,OAExG;gBACL,MAAM,aAAa,GAAG,OAAO,OAAA,CAAQ,OAAO,KAAA,CAAA,EAAQ,UAAA;gBAGpD,SAAS,IAAA,CAAK,iBAAA,CAAkB,QAAQ,YAAY,aAAa,OAAA,KAAY,IAAA,CAAK,eAAA,CAAgB;YAAA;QAAA;QAItG,UAAU,CAAA,GAAA,EAAM,IAAA,CAAK,eAAA,CAAgB,SAAA,CAAA,EAAY,IAAA,CAAK,eAAA,CAAgB,aAAA;QAEtE,IAAI,QAAQ,EAAA,EAAI;YACd,SAAS,IAAA,CAAK,eAAA,CAAgB,QAAQ,EAAA,EAAI;gBACxC,QAAQ,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ,IAAA,CAAK,eAAA,CAAgB;gBACpD,OAAO,QAAQ,KAAA;YAAA;QAAA;QAInB,IAAI,QAAQ,KAAA,EAAO;YACjB,YAAY,IAAA,CAAK,eAAA,CAAgB,QAAQ,KAAA,EAAO;gBAC9C,QAAQ,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ,IAAA,CAAK,eAAA,CAAgB;gBACpD,OAAO,QAAQ,KAAA;YAAA;YAEjB,IAAI,WAAW;gBACb,IAAI,QAAQ,EAAA,EAAI;oBACd,UAAU,CAAA,IAAA,EAAO,WAAA;gBAAA,OACZ;oBACL,UAAU,CAAA,KAAA,EAAQ,WAAA;gBAAA;YAAA;QAAA;QAKxB,IAAA,CAAK,OAAA,CAAQ,SAAS;QAEtB,OAAO;YACL,MAAM,QAAQ,QAAA,GAAW,eAAe,QAAQ,KAAA,IAAS,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,aAAA,GAAgB,qBAAqB;YACrH,MAAM,IAAA,CAAK,UAAA,CAAW,YAAY;YAClC,WAAW;YACX,YAAY;gBACV,MAAM,EAAA;gBACN,UAAU;YAAA;QAAA;IAAA;IAahB,qBAAqB,eAAA,EAAiB,OAAA,EAAS;QAC7C,MAAM,eAAe,EAAA;QACrB,MAAM,cAAc,EAAA;QACpB,IAAI,iBAAiB;QACrB,IAAI,oBAAoB;QACxB,IAAI,WAAW;QAEf,IAAI,MAAM,OAAA,CAAQ,QAAQ,SAAA,GAAY;YACpC,aAAa,IAAA,CAAK,GAAG,QAAQ,SAAA,CAAU,GAAA,CAAI,CAAA,QAAS,IAAA,CAAK,eAAA,CAAgB;QAAA,OAAA,IAChE,iBAAiB;YAC1B,EAAE,IAAA,CAAK,iBAAiB,CAAA,cAAa;gBACnC,IAAI,CAAE,CAAA,UAAU,IAAA,YAAgB,UAAU,OAAA,GAAU;oBAClD,aAAa,IAAA,CAAK,IAAA,CAAK,eAAA,CAAgB,UAAU,KAAA;oBACjD,YAAY,IAAA,CAAK,UAAU,IAAA;gBAAA;YAAA;QAAA;QAKjC,IAAI,EAAE,OAAA,CAAQ,eAAe;YAC3B,aAAa,IAAA,CAAK;QAAA;QAGpB,IAAI,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,YAAA,CAAa,SAAA,EAAW;YACjD,oBAAoB,CAAA,WAAA,EAAc,aAAa,IAAA,CAAK,MAAA;QAAA,OAAA,IAC3C,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,gBAAA,EAAkB;YAClD,oBAAoB,CAAA,WAAA,EAAc,aAAa,IAAA,CAAK,KAAA,MAAA,CAAA;QAAA,OAAA,IAC3C,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,YAAA,CAAa,MAAA,EAAQ;YACrD,iBAAiB,CAAA,QAAA,EAAW,aAAa,GAAA,CAAI,CAAA,QAAS,CAAA,SAAA,EAAY,OAAA,EAAS,IAAA,CAAK,MAAA;YAGhF,IAAI,QAAQ,UAAA,IAAc,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,eAAA,EAAiB;gBAChE,MAAM,aAAa,aAAa,GAAA,CAAI,CAAC,OAAO,IAAM,GAAG,MAAA,CAAA,EAAS,WAAA,CAAY,EAAA,CAAG,KAAA,IAAA;gBAE7E,WAAW,CAAA,oBAAA,EAAuB,WAAW,IAAA,CAAK,KAAA,GAAA,CAAA;gBAClD,kBAAkB;gBAClB,oBAAoB;YAAA;QAAA;QAIxB,OAAO;YAAE;YAAgB;YAAc;YAAa;YAAmB;QAAA;IAAA;IAGzE,oBAAoB,OAAA,EAAS,SAAA,EAAW,eAAA,EAAiB,YAAA,EAAc;QACrE,MAAM,UAAU,QAAQ,OAAA;QACxB,MAAM,eAAe,QAAQ,KAAA,CAAM,YAAA;QACnC,MAAM,YAAY,GAAG,UAAU,UAAA,CAAA,EAAA,EAAe,QAAQ,EAAA,EAAA;QACtD,MAAM,oBAAoB,GAAG,UAAU,UAAA,CAAA,CAAA,EAAc,QAAQ,EAAA,EAAA;QAC7D,MAAM,oBAAoB,QAAQ,UAAA,CAAW,GAAA,CAAI,CAAA,SAAQ;YACvD,IAAI,QAAQ,GAAG,kBAAA,CAAA,EAAqB,MAAM,OAAA,CAAQ,QAAQ,IAAA,CAAK,EAAA,GAAK,MAAA;YAEpE,IAAI,IAAA,CAAK,OAAA,CAAQ,aAAA,EAAe;gBAC9B,QAAQ,IAAA,CAAK,iBAAA,CAAkB,OAAO,WAAW,aAAa,OAAA;YAAA;YAGhE,OAAO,MAAM,gBAAA,CAAiB;gBAC5B,GAAG,IAAA,CAAK,eAAA,CAAgB,WAAA,CAAA,EAAc,IAAA,CAAK,eAAA,CAAgB,MAAM,OAAA,CAAQ,QAAQ,IAAA,CAAK,EAAA,GAAK,OAAA;gBAC3F;gBACA,IAAA,CAAK,eAAA,CAAgB;aAAA;QAAA;QAGzB,MAAM,cAAc,QAAQ,WAAA;QAC5B,MAAM,cAAc,CAAC,QAAQ,MAAA,CAAO,WAAA,IAAe,QAAQ,MAAA,CAAO,KAAA,CAAM,IAAA,KAAS,aAAa,OAAA,CAAQ,KAAA,CAAM,IAAA;QAC5G,MAAM,cAAc;QACpB,MAAM,cAAc,YAAY,eAAA;QAChC,MAAM,cAAc,UAAU,UAAA;QAC9B,MAAM,cAAc,YAAY,sBAAA;QAChC,MAAM,aAAa,YAAY,cAAA;QAE/B,MAAM,WAAW,QAAQ,QAAA,GAAW,eAAe,QAAQ,KAAA,IAAS,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,aAAA,GAAgB,qBAAqB;QAChI,IAAI;QACJ,IAAI;QACJ,MAAM,aAAa;YACjB,MAAM,EAAA;YACN,UAAU,EAAA;QAAA;QAEZ,IAAI,aAAa,YAAY,SAAA;QAC7B,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,IAAI;QAEJ,IAAI,aAAa,OAAA,CAAQ,uBAAA,KAA4B,OAAO;YAE1D,KAAA,MAAW,QAAQ,kBAAmB;gBACpC,WAAW,IAAA,CAAK,IAAA,CAAK;YAAA;QAAA;QAKzB,IAAI,CAAC,aAAa,QAAA,EAAU;YAC1B,aAAa,YAAY,cAAA;QAAA;QAE3B,IAAI,aAAa,QAAA,IAAY,CAAC,QAAQ,QAAA,IAAY,CAAC,QAAQ,MAAA,CAAO,QAAA,IAAY,QAAQ,MAAA,CAAO,KAAA,KAAU,aAAa,OAAA,CAAQ,SAAA,EAAW;YACrI,aAAa,YAAY,cAAA;QAAA;QAM3B,IAAI,aAAa,QAAA,IAAY,CAAC,QAAQ,QAAA,IAAY,QAAQ,MAAA,CAAO,QAAA,IAAY,CAAC,aAAa;YAEzF,MAAM,aAAa,IAAA,CAAK,iBAAA,CAAkB,aAAa,GAAG,YAAA,CAAA,EAAe,YAAA,EAAc,aAAa,OAAA,KAAY,GAAG,YAAA,CAAA,EAAe,YAAA;YAElI,eAAe,GAAG,IAAA,CAAK,eAAA,CAAgB,YAAA,GAAA,CAAA;QAAA,OAClC;YAEL,MAAM,gBAAgB,IAAA,CAAK,iBAAA,CAAkB,aAAa,YAAY,aAAa,OAAA,KAAY;YAE/F,eAAe,GAAG,IAAA,CAAK,UAAA,CAAW,aAAA,CAAA,EAAgB,IAAA,CAAK,eAAA,CAAgB,eAAA,GAAA,CAAA;QAAA;QAEzE,gBAAgB,GAAG,IAAA,CAAK,eAAA,CAAgB,WAAA,CAAA,EAAc,IAAA,CAAK,eAAA,CAAgB,cAAA;QAI3E,eAAe,GAAG,IAAA,CAAK,eAAA,CAAgB,aAAA,CAAA,EAAgB,IAAA,CAAK,eAAA,CAAgB,YAAA,GAAA,CAAA;QAC5E,gBAAgB,GAAG,IAAA,CAAK,eAAA,CAAgB,WAAA,CAAA,EAAc,IAAA,CAAK,eAAA,CAAgB,cAAA;QAE3E,IAAI,QAAQ,KAAA,EAAO;YACjB,eAAe,IAAA,CAAK,kBAAA,CAAmB,QAAQ,KAAA,EAAO,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ,IAAA,CAAK,eAAA,CAAgB,aAAa,QAAQ,KAAA;QAAA;QAGzH,IAAA,CAAK,OAAA,CAAQ,UAAU,UAAA,EAAY;QAGnC,WAAW,CAAA,EAAA,EAAK,IAAA,CAAK,UAAA,CAAW,cAAc,WAAA,YAAA,EAAyB,IAAA,CAAK,UAAA,CAAW,QAAQ,KAAA,CAAM,YAAA,IAAgB,UAAU,UAAA,EAAA,IAAA,EAAkB,cAAA;QACjJ,IAAI,cAAc;YAChB,YAAY,CAAA,KAAA,EAAQ,cAAA;QAAA;QAEtB,YAAY;QACZ,gBAAgB;QAEhB,IAAI,QAAQ,KAAA,IAAS,QAAQ,OAAA,CAAQ,KAAA,EAAO;YAC1C,IAAI,QAAQ,KAAA,EAAO;gBACjB,cAAc,IAAA,CAAK,kBAAA,CAAmB,QAAQ,KAAA,EAAO,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ,IAAA,CAAK,eAAA,CAAgB,UAAU,UAAA,IAAc,QAAQ,KAAA,EAAO,aAAa,OAAA;gBACrJ,IAAI,aAAa;oBACf,iBAAiB,CAAA,KAAA,EAAQ,aAAA;gBAAA;YAAA;QAAA;QAK/B,IAAA,CAAK,uBAAA,CAAwB,SAAS,WAAW;QAEjD,OAAO;YACL,MAAM;YACN,MAAM;YACN,WAAW;YACX;QAAA;IAAA;IAQJ,QAAQ,EAAA,EAAI,YAAA,EAAc;QACxB,IAAI,IAAA,CAAK,OAAA,CAAQ,aAAA,IAAiB,GAAG,MAAA,IAAU,IAAI;YACjD,MAAM,QAAQ,CAAA,CAAA,EAAI,aAAa,OAAA,CAAQ,cAAA,CAAe,IAAA,EAAA;YAEtD,aAAa,OAAA,CAAQ,cAAA,CAAe,GAAA,CAAI,OAAO;QAAA;IAAA;IAUnD,wBAAwB,OAAA,EAAS,SAAA,EAAW,YAAA,EAAc;QACxD,IAAI,CAAC,aAAa,QAAA,IAAY,CAAC,QAAQ,cAAA,EAAgB;YACrD;QAAA;QAGF,IAAI,CAAC,aAAa,OAAA,CAAQ,KAAA,EAAO;YAC/B,aAAa,OAAA,CAAQ,KAAA,GAAQ,CAAA;QAAA;QAE/B,IAAI,SAAS;QACb,IAAI,QAAQ;QACZ,IAAI,iBAAiB,IAAA,CAAK,mBAAA,CAAoB,SAAS,OAAA;QACvD,IAAI;QAEJ,MAAQ,SAAS,OAAO,MAAA,CAAS;YAC/B,IAAI,OAAO,MAAA,IAAU,CAAC,OAAO,QAAA,EAAU;gBACrC;YAAA;YAGF,IAAI,OAAO,cAAA,EAAgB;gBAGzB;YAAA;YAGF,iBAAiB;gBAAC,cAAA,eAAA,CAAA,GAAK,QAAL;oBAAY,SAAS;oBAAgB,YAAY,EAAA;gBAAA;aAAA;YACnE,QAAQ;QAAA;QAGV,MAAM,aAAa,cAAA,CAAe,EAAA;QAClC,MAAM,YAAY,WAAW,MAAA;QAC7B,MAAM,iBAAiB,WAAW,WAAA;QAClC,WAAW,WAAA,GAAc,KAAA;QAEzB,IAAI,WAAW,OAAA,IAAW,OAAO,WAAW,OAAA,CAAQ,KAAA,MAAW,WAAW,OAAA,CAAQ,KAAA,EAAO;YACvF,QAAQ,IAAA,CAAK,WAAA,CAAY,WAAW,OAAA,CAAQ,KAAA,CAAM,YAAA,IAAgB;gBAChE,YAAY;oBAAC,WAAW,OAAA,CAAQ,KAAA,CAAM,eAAA;iBAAA;gBACtC,SAAS,MAAM,yBAAA,CAA0B;oBACvC,OAAO,WAAW,OAAA,CAAQ,KAAA;oBAC1B,SAAS;wBAAC;4BACR,aAAa,eAAe,QAAA;4BAC5B,UAAU;4BACV,OAAO,WAAW,KAAA;4BAClB,SAAS,WAAW,OAAA;wBAAA;qBAAA;gBAAA,GAErB,OAAA;gBACH,OAAO,WAAW,OAAA,CAAQ,KAAA;gBAC1B,OAAO;oBAAA,CACJ,GAAG,GAAA,CAAA,EAAM;wBACR,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ;4BACrB,GAAG,IAAA,CAAK,UAAA,CAAW,UAAU,KAAA,CAAM,IAAA,EAAA,CAAA,EAAS,IAAA,CAAK,eAAA,CAAgB,UAAU,KAAA,CAAM,eAAA,GAAA;4BACjF,GAAG,IAAA,CAAK,eAAA,CAAgB,WAAW,OAAA,CAAQ,KAAA,CAAM,IAAA,EAAA,CAAA,EAAS,IAAA,CAAK,eAAA,CAAgB,eAAe,eAAA,GAAA;yBAAA,CAC9F,IAAA,CAAK;wBACP,WAAW,OAAA,CAAQ,KAAA;qBAAA;gBAAA;gBAGvB,OAAO;gBACP,yBAAyB;YAAA,GACxB,WAAW,OAAA,CAAQ,KAAA;QAAA,OACjB;YACL,MAAM,cAAc,eAAe,eAAA,KAAoB;YACvD,MAAM,cAAc,cAAc,eAAe,eAAA,GAAkB,eAAe,cAAA,IAAkB,UAAU,KAAA,CAAM,eAAA;YACpH,MAAM,cAAc,cAAc,eAAe,cAAA,IAAkB,WAAW,KAAA,CAAM,eAAA,GAAkB,eAAe,eAAA;YAErH,MAAM,OAAO;gBACX,GAAG,IAAA,CAAK,eAAA,CAAgB,WAAW,EAAA,EAAA,CAAA,EAAO,IAAA,CAAK,eAAA,CAAgB,cAAA;gBAC/D,GAAG,IAAA,CAAK,UAAA,CAAW,UAAU,EAAA,IAAM,UAAU,KAAA,CAAM,IAAA,EAAA,CAAA,EAAS,IAAA,CAAK,eAAA,CAAgB,cAAA;aAAA,CACjF,IAAA,CAAK;YAEP,QAAQ,IAAA,CAAK,WAAA,CAAY,WAAW,KAAA,CAAM,YAAA,IAAgB;gBACxD,YAAY;oBAAC;iBAAA;gBACb,SAAS,MAAM,yBAAA,CAA0B,YAAY,OAAA;gBACrD,OAAO,WAAW,KAAA;gBAClB,OAAO;oBAAA,CACJ,GAAG,GAAA,CAAA,EAAM;wBACR,WAAW,KAAA;wBACX;4BAAA,CAAG,GAAG,IAAA,CAAA,EAAO,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ;wBAAA;qBAAA;gBAAA;gBAGxC,OAAO;gBACP,SAAS,WAAW,EAAA;gBACpB,yBAAyB;YAAA,GACxB,WAAW,KAAA;QAAA;QAGhB,IAAI,CAAC,aAAa,OAAA,CAAQ,KAAA,CAAM,GAAG,GAAA,CAAA,EAAM;YACvC,aAAa,OAAA,CAAQ,KAAA,CAAM,GAAG,GAAA,CAAA,GAAO,EAAA;QAAA;QAGvC,aAAa,OAAA,CAAQ,KAAA,CAAM,CAAA,EAAA,EAAK,UAAU,UAAA,EAAA,CAAA,GAAgB,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ;YAC/E;YACA,MAAM,OAAA,CAAQ,MAAM;YACpB;YACA;SAAA,CACA,IAAA,CAAK;IAAA;IAOT,oBAAoB,OAAA,EAAS;QAC3B,MAAM,OAAO,cAAA,eAAA,CAAA,GAAK,UAAL;YAAc,YAAY,EAAA;YAAI,SAAS,EAAA;QAAA;QAEpD,IAAI,MAAM,OAAA,CAAQ,QAAQ,OAAA,GAAU;YAClC,KAAK,OAAA,GAAU,QAAQ,OAAA,CACpB,MAAA,CAAO,CAAA,IAAK,EAAE,QAAA,EACd,GAAA,CAAI,CAAA,MAAO,IAAA,CAAK,mBAAA,CAAoB;QAAA;QAGzC,OAAO;IAAA;IAGT,eAAe,OAAA,EAAS,KAAA,EAAO,QAAA,EAAU;QACvC,MAAM,iBAAiB,EAAA;QACvB,MAAM,gBAAgB,EAAA;QAEtB,IAAI,MAAM,OAAA,CAAQ,QAAQ,KAAA,GAAQ;YAChC,KAAA,IAAS,SAAS,QAAQ,KAAA,CAAO;gBAG/B,IAAI,CAAC,MAAM,OAAA,CAAQ,QAAQ;oBACzB,QAAQ;wBAAC;qBAAA;gBAAA;gBAGX,IACE,YACG,MAAM,OAAA,CAAQ,UACd,KAAA,CAAM,EAAA,IACN,CAAE,CAAA,KAAA,CAAM,EAAA,YAAc,WAAA,KACtB,CAAE,CAAA,OAAO,KAAA,CAAM,EAAA,KAAO,cAAc,KAAA,CAAM,EAAA,CAAG,SAAA,YAAqB,KAAA,KAClE,CAAE,CAAA,OAAO,KAAA,CAAM,EAAA,CAAG,KAAA,KAAU,cAAc,KAAA,CAAM,EAAA,CAAG,KAAA,CAAM,SAAA,YAAqB,KAAA,KAC9E,CAAE,CAAA,OAAO,KAAA,CAAM,EAAA,KAAO,YAAY,SAAS,MAAM,YAAA,KAAiB,KAAA,KAAa,MAAM,YAAA,CAAa,KAAA,CAAM,EAAA,CAAA,GAC3G;oBACA,MAAM,QAAQ,MAAM,aAAA,CAAc,KAAA,CAAM,EAAA,CAAA,GAAM,MAAM,aAAA,CAAc,KAAA,CAAM,EAAA,CAAA,CAAI,KAAA,GAAQ,KAAA,CAAM,EAAA;oBAC1F,MAAM,gBAAgB,IAAA,CAAK,iBAAA,CAAkB,IAAA,CAAK,eAAA,CAAgB,MAAM,IAAA,GAAO,OAAO;oBAEtF,IAAI,SAAS;oBACb,IAAI,eAAe,EAAA;oBAKnB,IAAI,kBAAkB,MAAM;wBAC1B,eAAe;wBACf,SAAS;oBAAA,OACJ;wBACL,eAAe;4BAAC;4BAAe,MAAM,MAAA,GAAS,IAAI,KAAA,CAAM,EAAA,GAAK;yBAAA;wBAC7D,SAAS;oBAAA;oBAGX,cAAc,IAAA,CAAK,IAAA,CAAK,KAAA,CAAM,cAAc,QAAQ;gBAAA;gBAMtD,IAAI,QAAQ,UAAA,IAAc,OAAO;oBAC/B,MAAM,mBAAmB,QAAQ,UAAA,CAAW,IAAA,CAAK,CAAA,OAAQ,MAAM,OAAA,CAAQ,SAChE,IAAA,CAAK,EAAA,IACJ,CAAA,IAAA,CAAK,EAAA,KAAO,KAAA,CAAM,EAAA,IAAM,IAAA,CAAK,EAAA,KAAO,KAAA,CAAM,EAAA;oBAElD,IAAI,kBAAkB;wBACpB,MAAM,YAAY,IAAA,CAAK,eAAA,CAAgB,MAAM,IAAA;wBAC7C,MAAM,QAAQ,IAAA,CAAK,iBAAA,CAAkB,WAAW,gBAAA,CAAiB,EAAA,EAAI;wBAErE,KAAA,CAAM,EAAA,GAAK,IAAI,MAAM,GAAA,CAAI,SAAS,gBAAA,CAAiB,EAAA;oBAAA;gBAAA;gBAIvD,eAAe,IAAA,CAAK,IAAA,CAAK,KAAA,CAAM,OAAO,OAAO;YAAA;QAAA,OAAA,IAEtC,QAAQ,KAAA,YAAiB,MAAM,eAAA,EAAiB;YACzD,MAAM,MAAM,IAAA,CAAK,KAAA,CAAM,QAAQ,KAAA,EAAO,OAAO;YAC7C,IAAI,UAAU;gBACZ,cAAc,IAAA,CAAK;YAAA;YAErB,eAAe,IAAA,CAAK;QAAA,OACf;YACL,MAAM,IAAI,MAAM;QAAA;QAGlB,OAAO;YAAE;YAAgB;QAAA;IAAA;IAG3B,wBAAwB,UAAA,EAAY,YAAY,CAAA,CAAA,EAAI;QAClD,IAAI,WAAW,MAAA,GAAS,GAAG;QAC3B,MAAM,SAAS,UAAU,EAAA,IAAM,CAAA,GAAA,EAAM,UAAU,EAAA,EAAA,IAAQ;QACvD,MAAM,WAAW,UAAU,SAAA,IAAa,CAAA,WAAA,EAAc,UAAU,SAAA,CAAA,CAAA,CAAA,IAAgB;QAChF,MAAM,UAAU,CAAA,yBAAA,EAA4B,SAAA,CAAA,EAAY,OAAA,8BAAA,CAAA;QACxD,MAAM,IAAI,eAAe,UAAA,CAAW,QAAQ,OAAA,CAAQ,OAAO;IAAA;IAG7D,wBAAwB,OAAA,EAAS,KAAA,EAAO,UAAA,EAAY,MAAA,EAAQ,WAAA,EAAa;QACvE,IAAA,CAAK,uBAAA,CAAwB,YAAY;YAAE,WAAW,SAAS,MAAM,IAAA;YAAM,IAAI;QAAA;QAE/E,IAAI,WAAW,CAAA,OAAA,EAAU,WAAW,IAAA,CAAK,MAAA,MAAA,EAAc,QAAA;QAEvD,IAAI,aAAa;YACf,YAAY,CAAA,CAAA,EAAI,IAAA,CAAK,aAAA,GAAA,CAAA,EAAmB,aAAA;QAAA;QAG1C,IAAI,QAAQ,UAAA,IAAc,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,UAAA,EAAY;YAC3D,KAAA,MAAW,QAAQ,QAAQ,UAAA,CAAY;gBACrC,IAAI,UAAA,CAAW,KAAK,IAAA,CAAA,EAAO;oBACzB,YAAY,CAAA,CAAA,EAAI,UAAA,CAAW,KAAK,IAAA,CAAA,CAAA,QAAA,EAAgB,KAAK,MAAA,CAAO,GAAA,CAAI,CAAA,YAAa,IAAA,CAAK,gBAAA,CAAiB,YAAY,IAAA,CAAK,KAAA,CAAA,CAAA;gBAAA;YAAA;QAAA;QAK1H,OAAO;IAAA;IAUT,kBAAkB,OAAA,EAAS;QACzB,IAAI,WAAW;QAGf,IAAI,QAAQ,MAAA,IAAU,QAAQ,QAAQ,KAAA,IAAS,MAAM;YACnD,YAAY,YAAY,IAAA,CAAK,MAAA,CAAO,QAAQ,MAAA,IAAU,OAAO;QAAA,OAAA,IACpD,QAAQ,KAAA,IAAS,MAAM;YAChC,IAAI,QAAQ,MAAA,IAAU,MAAM;gBAC1B,YAAY,YAAY,IAAA,CAAK,MAAA,CAAO,QAAQ,MAAA,IAAU,OAAO,IAAA,CAAK,MAAA,CAAO,QAAQ,KAAA;YAAA,OAC5E;gBACL,YAAY,YAAY,IAAA,CAAK,MAAA,CAAO,QAAQ,KAAA;YAAA;QAAA;QAKhD,OAAO;IAAA;IAGT,sBAAsB,IAAA,EAAM,SAAA,EAAW,OAAA,EAAS,OAAA,EAAS,OAAA,EAAS;QAChE,IAAI;QAEJ,IAAI,OAAO,SAAA,CAAU,cAAA,CAAe,IAAA,CAAK,IAAA,CAAK,WAAA,EAAa,KAAK,UAAA,GAAa;YAC3E,KAAK,UAAA,GAAa,IAAA,CAAK,WAAA,CAAY,KAAK,UAAA,CAAA;QAAA;QAG1C,IAAI,gBAAgB,MAAM,KAAA,EAAO;YAC/B,IAAI,QAAQ,KAAK,KAAA;YACjB,IAAI;YAEJ,IAAI,KAAK,SAAA,YAAqB,MAAM,eAAA,EAAiB;gBACnD,MAAM,IAAA,CAAK,kBAAA,CAAmB,KAAK,SAAA,EAAW,WAAW,SAAS,SAAS;YAAA,OACtE;gBACL,MAAM,GAAG,IAAA,CAAK,UAAA,CAAW,KAAK,SAAA,CAAU,KAAA,CAAM,IAAA,EAAA,CAAA,EAAS,IAAA,CAAK,eAAA,CAAgB,KAAK,SAAA,CAAU,KAAA,IAAS,KAAK,SAAA,CAAU,SAAA,GAAA;YAAA;YAGrH,IAAI,SAAS,iBAAiB,MAAM,eAAA,EAAiB;gBACnD,QAAQ,IAAA,CAAK,kBAAA,CAAmB,OAAO,WAAW,SAAS,SAAS;gBAEpE,IAAI,UAAU,QAAQ;oBACpB,IAAI,KAAK,UAAA,KAAe,KAAK;wBAC3B,KAAK,UAAA,GAAa;oBAAA;oBAEpB,IAAI,KAAK,UAAA,KAAe,MAAM;wBAC5B,KAAK,UAAA,GAAa;oBAAA;gBAAA;gBAItB,OAAO;oBAAC;oBAAK;iBAAA,CAAO,IAAA,CAAK,CAAA,CAAA,EAAI,KAAK,UAAA,CAAA,CAAA,CAAA;YAAA;YAEpC,IAAI,EAAE,aAAA,CAAc,QAAQ;gBAC1B,OAAO,IAAA,CAAK,cAAA,CAAe,KAAK,SAAA,EAAW,OAAO;oBAChD,OAAO;gBAAA;YAAA;YAGX,IAAI;gBAAC,IAAA,CAAK,WAAA,CAAY,GAAG,OAAA,CAAA;gBAAU,IAAA,CAAK,WAAA,CAAY,GAAG,UAAA,CAAA;aAAA,CAAa,QAAA,CAAS,KAAK,UAAA,GAAa;gBAC7F,QAAQ,GAAG,IAAA,CAAK,MAAA,CAAO,KAAA,CAAM,EAAA,EAAA,KAAA,EAAW,IAAA,CAAK,MAAA,CAAO,KAAA,CAAM,EAAA,GAAA;YAAA,OAAA,IACjD,OAAO,UAAU,WAAW;gBACrC,QAAQ,IAAA,CAAK,YAAA,CAAa;YAAA,OACrB;gBACL,QAAQ,IAAA,CAAK,MAAA,CAAO;YAAA;YAGtB,IAAI,UAAU,QAAQ;gBACpB,IAAI,KAAK,UAAA,KAAe,KAAK;oBAC3B,KAAK,UAAA,GAAa;gBAAA;gBAEpB,IAAI,KAAK,UAAA,KAAe,MAAM;oBAC5B,KAAK,UAAA,GAAa;gBAAA;YAAA;YAItB,OAAO;gBAAC;gBAAK;aAAA,CAAO,IAAA,CAAK,CAAA,CAAA,EAAI,KAAK,UAAA,CAAA,CAAA,CAAA;QAAA;QAEpC,IAAI,gBAAgB,MAAM,OAAA,EAAS;YACjC,OAAO,KAAK,GAAA;QAAA;QAEd,IAAI,gBAAgB,MAAM,IAAA,EAAM;YAC9B,IAAI,KAAK,GAAA,YAAe,MAAM,eAAA,EAAiB;gBAC7C,SAAS,IAAA,CAAK,qBAAA,CAAsB,KAAK,GAAA,EAAK,WAAW,SAAS,SAAS;YAAA,OAAA,IAClE,EAAE,aAAA,CAAc,KAAK,GAAA,GAAM;gBACpC,SAAS,IAAA,CAAK,eAAA,CAAgB,KAAK,GAAA;YAAA,OAC9B;gBACL,SAAS,IAAA,CAAK,MAAA,CAAO,KAAK,GAAA;YAAA;YAG5B,OAAO,CAAA,KAAA,EAAQ,OAAA,IAAA,EAAa,KAAK,IAAA,CAAK,WAAA,GAAA,CAAA,CAAA;QAAA;QAExC,IAAI,gBAAgB,MAAM,EAAA,EAAI;YAC5B,OAAO,GAAG,KAAK,EAAA,CAAA,CAAA,EACb,KAAK,IAAA,CAAK,GAAA,CAAI,CAAA,QAAO;gBACnB,IAAI,eAAe,MAAM,eAAA,EAAiB;oBACxC,OAAO,IAAA,CAAK,qBAAA,CAAsB,KAAK,WAAW,SAAS,SAAS;gBAAA;gBAEtE,IAAI,EAAE,aAAA,CAAc,MAAM;oBACxB,OAAO,IAAA,CAAK,eAAA,CAAgB;gBAAA;gBAE9B,OAAO,IAAA,CAAK,MAAA,CAAO,OAAO,QAAQ,WAAW,IAAI,OAAA,CAAQ,OAAO,SAAS;YAAA,GACxE,IAAA,CAAK,MAAA,CAAA,CAAA;QAAA;QAGZ,IAAI,gBAAgB,MAAM,GAAA,EAAK;YAC7B,IAAI,MAAM,OAAA,CAAQ,KAAK,GAAA,KAAQ,CAAC,SAAS;gBACvC,MAAM,IAAI,MAAM;YAAA;YAElB,IAAI,KAAK,GAAA,CAAI,UAAA,CAAW,MAAM;gBAC5B,OAAO;YAAA;YAET,OAAO,IAAA,CAAK,KAAA,CAAM,KAAK,GAAA,EAAK;QAAA;QAE9B,OAAO,KAAK,QAAA,CAAS,IAAA,EAAM;IAAA;IAG7B,WAAW,KAAA,EAAO,OAAA,EAAS;QACzB,MAAM,QAAQ,IAAA,CAAK,eAAA,CAAgB,OAAO;QAC1C,IAAI,SAAS,MAAM,MAAA,EAAQ;YACzB,OAAO,CAAA,MAAA,EAAS,OAAA;QAAA;QAElB,OAAO;IAAA;IAGT,gBAAgB,KAAA,EAAO,OAAA,EAAS,OAAA,EAAS;QACvC,IACE,UAAU,QACV,UAAU,KAAA,KACV,MAAM,cAAA,CAAe,WAAW,GAChC;YAEA,OAAO;QAAA;QAGT,IAAI,OAAO,UAAU,UAAU;YAC7B,MAAM,IAAI,MAAM;QAAA;QAGlB,MAAM,QAAQ,EAAA;QAEd,UAAU,WAAW;QACrB,IAAI,OAAA,CAAQ,EAAA,KAAO,KAAK,UAAU,CAAA,CAAA,EAAI,QAAA,CAAA,CAAA;QAEtC,IAAI,EAAE,aAAA,CAAc,QAAQ;YAC1B,MAAM,cAAA,CAAe,OAAO,OAAA,CAAQ,CAAA,SAAQ;gBAC1C,MAAM,OAAO,KAAA,CAAM,KAAA;gBACnB,MAAM,IAAA,CAAK,IAAA,CAAK,cAAA,CAAe,MAAM,MAAM;YAAA;QAAA,OAExC;YACL,MAAM,IAAA,CAAK,IAAA,CAAK,cAAA,CAAe,KAAA,GAAW,OAAO;QAAA;QAGnD,OAAO,MAAM,MAAA,IAAU,MAAM,MAAA,CAAO,CAAA,OAAQ,QAAQ,KAAK,MAAA,EAAQ,IAAA,CAAK,YAAY;IAAA;IAGpF,eAAe,GAAA,EAAK,KAAA,EAAO,UAAU,CAAA,CAAA,EAAI;QACvC,IAAI,UAAU,KAAA,GAAW;YACvB,MAAM,IAAI,MAAM,CAAA,iBAAA,EAAoB,IAAA,+BAAA,CAAA;QAAA;QAGtC,IAAI,OAAO,QAAQ,YAAY,IAAI,QAAA,CAAS,QAAQ,QAAQ,KAAA,EAAO;YACjE,MAAM,WAAW,IAAI,KAAA,CAAM;YAC3B,IAAI,QAAQ,KAAA,CAAM,aAAA,CAAc,QAAA,CAAS,EAAA,CAAA,IAAO,QAAQ,KAAA,CAAM,aAAA,CAAc,QAAA,CAAS,EAAA,CAAA,CAAI,IAAA,YAAgB,UAAU,IAAA,EAAM;gBACvH,MAAM,MAAM,CAAA;gBACZ,MAAM,SAAQ,QAAQ,KAAA,CAAM,aAAA,CAAc,QAAA,CAAS,EAAA,CAAA;gBACnD,EAAE,GAAA,CAAI,KAAK,SAAS,KAAA,CAAM,IAAI;gBAC9B,OAAO,IAAA,CAAK,cAAA,CAAe,OAAM,KAAA,IAAS,QAAA,CAAS,EAAA,EAAI,KAAK,eAAA;oBAAE,OAAA;gBAAA,GAAU;YAAA;QAAA;QAI5E,MAAM,QAAQ,IAAA,CAAK,UAAA,CAAW,KAAK;QACnC,MAAM,YAAY,SAAS,MAAM,IAAA,IAAQ,QAAQ,IAAA;QAEjD,MAAM,gBAAgB,EAAE,aAAA,CAAc;QACtC,MAAM,UAAU,CAAC,iBAAiB,MAAM,OAAA,CAAQ;QAChD,MAAM,IAAA,CAAK,iBAAA,IAAqB,IAAA,CAAK,iBAAA,CAAkB,IAAA,IAAQ;QAC/D,IAAI,eAAe;YACjB,QAAQ,IAAA,CAAK,eAAA,CAAgB;QAAA;QAE/B,MAAM,YAAY,iBAAiB,MAAM,cAAA,CAAe;QAExD,IAAI,QAAQ,KAAA,GAAW;YACrB,IAAI,OAAO,UAAU,UAAU;gBAC7B,OAAO;YAAA;YAGT,IAAI,iBAAiB,UAAU,MAAA,KAAW,GAAG;gBAC3C,OAAO,IAAA,CAAK,cAAA,CAAe,SAAA,CAAU,EAAA,EAAI,KAAA,CAAM,SAAA,CAAU,EAAA,CAAA,EAAK;YAAA;QAAA;QAIlE,IAAI,UAAU,MAAM;YAClB,MAAM,WAAU,QAAQ,SAAA,GAAY,SAAS,IAAA,CAAK,MAAA,CAAO,OAAO;YAChE,OAAO,IAAA,CAAK,aAAA,CAAc,KAAK,UAAS,IAAA,CAAK,WAAA,CAAY,GAAG,EAAA,CAAA,EAAK,QAAQ,MAAA;QAAA;QAG3E,IAAI,CAAC,OAAO;YACV,MAAM,WAAU,QAAQ,SAAA,GAAY,IAAA,CAAK,MAAA,CAAO,OAAO,OAAO,SAAS,QAAQ,SAAA,IAAa,IAAA,CAAK,MAAA,CAAO,OAAO;YAC/G,OAAO,IAAA,CAAK,aAAA,CAAc,KAAK,UAAS,IAAA,CAAK,WAAA,CAAY,GAAG,EAAA,CAAA,EAAK,QAAQ,MAAA;QAAA;QAG3E,IAAI,iBAAiB,MAAM,eAAA,IAAmB,CAAE,CAAA,QAAQ,KAAA,KAAa,iBAAiB,MAAM,EAAA,GAAK;YAC/F,OAAO,IAAA,CAAK,qBAAA,CAAsB;QAAA;QAIpC,IAAI,QAAQ,KAAA,KAAa,SAAS;YAChC,IAAI,MAAM,kBAAA,CAAmB,QAAQ;gBACnC,MAAM,GAAG,GAAA;YAAA,OACJ;gBACL,MAAM,IAAI,MAAM;YAAA;QAAA;QAIpB,IAAI,QAAQ,GAAG,EAAA,IAAM,QAAQ,GAAG,GAAA,IAAO,QAAQ,GAAG,GAAA,EAAK;YACrD,OAAO,IAAA,CAAK,eAAA,CAAgB,KAAK,OAAO;QAAA;QAI1C,IAAI,KAAA,CAAM,GAAG,EAAA,CAAA,EAAK;YAChB,OAAO,IAAA,CAAK,UAAA,CAAW,IAAA,CAAK,WAAA,CAAY,GAAG,EAAA,CAAA,EAAK,KAAK,KAAA,CAAM,GAAG,EAAA,CAAA,EAAK;QAAA;QAGrE,IAAI,KAAA,CAAM,GAAG,GAAA,CAAA,EAAM;YACjB,OAAO,IAAA,CAAK,UAAA,CAAW,IAAA,CAAK,WAAA,CAAY,GAAG,GAAA,CAAA,EAAM,KAAK,KAAA,CAAM,GAAG,GAAA,CAAA,EAAM;QAAA;QAGvE,IAAI,WAAW,qBAAqB,UAAU,KAAA,EAAO;YACnD,MAAM,WAAU,QAAQ,SAAA,GAAY,IAAA,CAAK,MAAA,CAAO,OAAO,OAAO,SAAS,QAAQ,SAAA,IAAa,IAAA,CAAK,MAAA,CAAO,OAAO;YAC/G,OAAO,IAAA,CAAK,aAAA,CAAc,KAAK,UAAS,IAAA,CAAK,WAAA,CAAY,GAAG,EAAA,CAAA,EAAK,QAAQ,MAAA;QAAA;QAG3E,IAAI,iBAAiB,qBAAqB,UAAU,IAAA,IAAQ,QAAQ,IAAA,KAAS,OAAO;YAClF,OAAO,IAAA,CAAK,UAAA,CAAW,KAAK,OAAO;QAAA;QAGrC,IAAI,iBAAiB,UAAU,MAAA,GAAS,GAAG;YACzC,OAAO,IAAA,CAAK,UAAA,CAAW,IAAA,CAAK,WAAA,CAAY,GAAG,GAAA,CAAA,EAAM,KAAK,OAAO;QAAA;QAG/D,IAAI,SAAS;YACX,OAAO,IAAA,CAAK,4BAAA,CAA6B,KAAK,OAAO,GAAG,EAAA,EAAI,OAAO;QAAA;QAErE,IAAI,eAAe;YACjB,IAAI,IAAA,CAAK,WAAA,CAAY,SAAA,CAAU,EAAA,CAAA,EAAK;gBAClC,OAAO,IAAA,CAAK,4BAAA,CAA6B,KAAK,OAAO,SAAA,CAAU,EAAA,EAAI,KAAA,CAAM,SAAA,CAAU,EAAA,CAAA,EAAK;YAAA;YAE1F,OAAO,IAAA,CAAK,4BAAA,CAA6B,KAAK,OAAO,IAAA,CAAK,WAAA,CAAY,GAAG,EAAA,CAAA,EAAK,OAAO;QAAA;QAGvF,IAAI,QAAQ,GAAG,WAAA,EAAa;YAC1B,MAAM,WAAU,QAAQ,SAAA,GAAY,IAAA,CAAK,MAAA,CAAO,OAAO,OAAO,SAAS,QAAQ,SAAA,IAAa,IAAA,CAAK,MAAA,CAAO,OAAO;YAC/G,OAAO,IAAA,CAAK,aAAA,CAAc,IAAA,CAAK,WAAA,CAAY,IAAA,EAAM,UAAS,IAAA,CAAK,WAAA,CAAY,GAAG,EAAA,CAAA,EAAK,QAAQ,MAAA;QAAA;QAG7F,MAAM,UAAU,QAAQ,SAAA,GAAY,IAAA,CAAK,MAAA,CAAO,OAAO,OAAO,SAAS,QAAQ,SAAA,IAAa,IAAA,CAAK,MAAA,CAAO,OAAO;QAC/G,OAAO,IAAA,CAAK,aAAA,CAAc,KAAK,SAAS,IAAA,CAAK,WAAA,CAAY,GAAG,EAAA,CAAA,EAAK,QAAQ,MAAA;IAAA;IAG3E,WAAW,GAAA,EAAK,OAAA,EAAS;QACvB,IAAI,QAAQ,KAAA,EAAO;YACjB,OAAO,QAAQ,KAAA;QAAA;QAGjB,IAAI,QAAQ,KAAA,IAAS,QAAQ,KAAA,CAAM,aAAA,IAAiB,QAAQ,KAAA,CAAM,aAAA,CAAc,IAAA,EAAM;YACpF,OAAO,QAAQ,KAAA,CAAM,aAAA,CAAc,IAAA;QAAA;QAGrC,IAAI,QAAQ,KAAA,IAAS,QAAQ,KAAA,CAAM,qBAAA,IAAyB,QAAQ,KAAA,CAAM,qBAAA,CAAsB,IAAA,EAAM;YACpG,OAAO,QAAQ,KAAA,CAAM,qBAAA,CAAsB,IAAA;QAAA;IAAA;IAK/C,gBAAgB,GAAA,EAAK,KAAA,EAAO,OAAA,EAAS;QACnC,MAAM,UAAU,QAAQ,GAAG,EAAA,GAAK,IAAA,CAAK,WAAA,CAAY,GAAG,EAAA,CAAA,GAAM,IAAA,CAAK,WAAA,CAAY,GAAG,GAAA,CAAA;QAC9E,MAAM,eAAe,QAAQ,GAAG,GAAA,GAAM,SAAS;QAE/C,IAAI,MAAM,OAAA,CAAQ,QAAQ;YACxB,QAAQ,MAAM,GAAA,CAAI,CAAA,SAAQ;gBACxB,IAAI,YAAY,IAAA,CAAK,eAAA,CAAgB,MAAM,SAAS,IAAA,CAAK,WAAA,CAAY,GAAG,GAAA,CAAA;gBACxE,IAAI,aAAa,UAAU,MAAA,IAAW,CAAA,MAAM,OAAA,CAAQ,SAAS,EAAE,aAAA,CAAc,KAAA,KAAU,MAAM,cAAA,CAAe,QAAQ,GAAG;oBACrH,YAAY,CAAA,CAAA,EAAI,UAAA,CAAA,CAAA;gBAAA;gBAElB,OAAO;YAAA,GACN,MAAA,CAAO,CAAA,OAAQ,QAAQ,KAAK,MAAA;YAE/B,QAAQ,MAAM,MAAA,IAAU,MAAM,IAAA,CAAK;QAAA,OAC9B;YACL,QAAQ,IAAA,CAAK,eAAA,CAAgB,OAAO,SAAS;QAAA;QAI/C,IAAK,CAAA,QAAQ,GAAG,EAAA,IAAM,QAAQ,GAAG,GAAA,KAAQ,CAAC,OAAO;YAC/C,OAAO;QAAA;QAGT,OAAO,QAAQ,GAAG,aAAA,CAAA,EAAgB,MAAA,CAAA,CAAA,GAAW,KAAA;IAAA;IAG/C,WAAW,OAAA,EAAS,GAAA,EAAK,KAAA,EAAO,OAAA,EAAS;QACvC,IAAI,EAAE,aAAA,CAAc,QAAQ;YAC1B,QAAQ,MAAM,cAAA,CAAe,OAAO,GAAA,CAAI,CAAA,SAAQ;gBAC9C,MAAM,OAAO,KAAA,CAAM,KAAA;gBACnB,OAAO,IAAA,CAAK,cAAA,CAAe,KAAK;oBAAA,CAAG,KAAA,EAAO;gBAAA,GAAQ;YAAA;QAAA,OAE/C;YACL,QAAQ,MAAM,GAAA,CAAI,CAAA,OAAQ,IAAA,CAAK,cAAA,CAAe,KAAK,MAAM;QAAA;QAG3D,QAAQ,MAAM,MAAA,CAAO,CAAA,OAAQ,QAAQ,KAAK,MAAA;QAE1C,OAAO,MAAM,MAAA,GAAS,CAAA,CAAA,EAAI,MAAM,IAAA,CAAK,SAAA,CAAA,CAAA,GAAc,KAAA;IAAA;IAGrD,WAAW,GAAA,EAAK,KAAA,EAAO,OAAA,EAAS;QAC9B,MAAM,QAAQ,EAAA;QACd,IAAI,UAAU,IAAA,CAAK,eAAA,CAAgB;QACnC,IAAI,QAAQ,MAAA,EAAQ;YAClB,IAAI,QAAQ,MAAA,YAAkB,MAAM,OAAA,EAAS;gBAC3C,UAAU,GAAG,IAAA,CAAK,qBAAA,CAAsB,QAAQ,MAAA,EAAA,CAAA,EAAW,SAAA;YAAA,OACtD;gBACL,UAAU,GAAG,IAAA,CAAK,UAAA,CAAW,QAAQ,MAAA,EAAA,CAAA,EAAW,SAAA;YAAA;QAAA;QAIpD,MAAM,YAAA,CAAa,OAAO,OAAA,CAAQ,CAAA,OAAM;YACtC,MAAM,QAAQ;gBAAA,CACX,GAAA,EAAK,KAAA,CAAM,GAAA;YAAA;YAEd,MAAM,IAAA,CAAK,IAAA,CAAK,cAAA,CAAe,KAAK,OAAO,cAAA,eAAA,CAAA,GAAK,UAAL;gBAAc,MAAM;YAAA;QAAA;QAGjE,EAAE,MAAA,CAAO,OAAO,CAAC,MAAM,SAAS;YAC9B,IAAA,CAAK,aAAA,CAAc,OAAO,SAAS,MAAM,MAAM;gBAAC;aAAA;QAAA;QAGlD,MAAM,SAAS,MAAM,IAAA,CAAK,IAAA,CAAK,WAAA,CAAY,GAAG,GAAA,CAAA;QAC9C,OAAO,MAAM,MAAA,GAAS,IAAI,CAAA,CAAA,EAAI,OAAA,CAAA,CAAA,GAAY;IAAA;IAG5C,cAAc,KAAA,EAAO,OAAA,EAAS,IAAA,EAAM,IAAA,EAAM,IAAA,EAAM;QAC9C,IAAI;QAEJ,IAAI,IAAA,CAAK,KAAK,MAAA,GAAS,EAAA,CAAG,QAAA,CAAS,OAAO;YACxC,MAAM,MAAM,IAAA,CAAK,KAAK,MAAA,GAAS,EAAA,CAAG,KAAA,CAAM;YACxC,OAAO,GAAA,CAAI,EAAA;YACX,IAAA,CAAK,KAAK,MAAA,GAAS,EAAA,GAAK,GAAA,CAAI,EAAA;QAAA;QAG9B,IAAI,UAAU,IAAA,CAAK,uBAAA,CAAwB,SAAS;QAEpD,IAAI,EAAE,aAAA,CAAc,OAAO;YACzB,MAAM,YAAA,CAAa,MAAM,OAAA,CAAQ,CAAA,OAAM;gBACrC,MAAM,QAAQ,IAAA,CAAK,YAAA,CAAa,IAAA,CAAK,GAAA;gBACrC,IAAI,SAAS;gBACb,IAAI,OAAO,UAAU,YAAY,OAAO,GAAG,QAAA,EAAU;oBACnD,IAAI;wBACF,KAAK,SAAA,CAAU;wBACf,SAAS;oBAAA,EAAA,OACF,GAAP,CAAA;gBAAA;gBAIJ,UAAU,IAAA,CAAK,uBAAA,CAAwB,SAAS,MAAM;gBACtD,MAAM,IAAA,CAAK,IAAA,CAAK,cAAA,CAAe,IAAA,CAAK,QAAA,CAAS,SAAS,OAAO,OAAO;oBAAA,CAAG,GAAA,EAAK;gBAAA;YAAA;YAE9E,EAAE,MAAA,CAAO,MAAM,CAAC,OAAO,aAAa;gBAClC,IAAA,CAAK,aAAA,CAAc,OAAO,SAAS,UAAU,OAAO,KAAK,MAAA,CAAO;oBAAC;iBAAA;YAAA;YAGnE;QAAA;QAGF,OAAO,IAAA,CAAK,YAAA,CAAa;QACzB,MAAM,IAAA,CAAK,IAAA,CAAK,cAAA,CAAe,IAAA,CAAK,QAAA,CAAS,SAAS,MAAM,OAAO;YAAA,CAAG,GAAG,EAAA,CAAA,EAAK;QAAA;IAAA;IAGhF,aAAa,KAAA,EAAO;QAClB,OAAO;IAAA;IAGT,SAAS,GAAA,EAAK,KAAA,EAAO,IAAA,EAAM,IAAA,EAAM;QAC/B,OAAO,QAAQ,IAAA,CAAK,YAAA,CAAa,MAAM,OAAA,CAAQ,SAAS,KAAA,CAAM,EAAA,GAAK;QACnE,IAAI,MAAM;YACR,OAAO,IAAI,MAAM,OAAA,CAAQ,IAAA,CAAK,qBAAA,CAAsB,IAAI,MAAM,IAAA,CAAK,IAAI,MAAM,OAAA,CAAQ,MAAM,MAAM;QAAA;QAGnG,OAAO,IAAI,MAAM,OAAA,CAAQ;IAAA;IAG3B,aAAa,KAAA,EAAO;QAClB,IAAI,OAAO,UAAU,UAAU;YAC7B,OAAO;QAAA;QAET,IAAI,iBAAiB,MAAM;YACzB,OAAO;QAAA;QAET,IAAI,OAAO,UAAU,WAAW;YAC9B,OAAO;QAAA;QAET;IAAA;IAGF,cAAc,GAAA,EAAK,KAAA,EAAO,UAAA,EAAY,MAAA,EAAQ;QAC5C,IAAI,CAAC,KAAK;YACR,OAAO;QAAA;QAET,IAAI,eAAe,KAAA,GAAW;YAC5B,MAAM,IAAI,MAAM,GAAG,IAAA,KAAA,EAAW,MAAA,kBAAA,CAAA;QAAA;QAEhC,MAAM,IAAA,CAAK,WAAA,CAAY,KAAK;QAC5B,OAAO;YAAC;YAAK;SAAA,CAAO,IAAA,CAAK,CAAA,CAAA,EAAI,WAAA,CAAA,CAAA;IAAA;IAG/B,YAAY,GAAA,EAAK,MAAA,EAAQ;QACvB,IAAI,eAAe,MAAM,eAAA,EAAiB;YACxC,MAAM,IAAA,CAAK,qBAAA,CAAsB;YACjC,OAAO,IAAA,CAAK,UAAA,CAAW,IAAA,CAAK,qBAAA,CAAsB,MAAM;QAAA;QAG1D,IAAI,MAAM,WAAA,CAAY,MAAM;YAC1B,MAAM,IAAI,MAAA,CAAO,GAAG,IAAI,MAAA,GAAS,GAAG,KAAA,CAAM;YAE1C,IAAI,IAAI,MAAA,GAAS,GAAG;gBAClB,MAAM;oBAEJ,IAAI,KAAA,CAAM,GAAG,CAAA,GAAI,IAAA,CAAK;oBACtB,GAAA,CAAI,IAAI,MAAA,GAAS,EAAA;iBAAA;YAAA;YAIrB,OAAO,IAAI,GAAA,CAAI,CAAA,aAAc,IAAA,CAAK,eAAA,CAAgB,aAAa,IAAA,CAAK;QAAA;QAGtE,OAAO,IAAA,CAAK,UAAA,CAAW,IAAA,CAAK,eAAA,CAAgB,MAAM;IAAA;IAGpD,WAAW,GAAA,EAAK,MAAA,EAAQ;QACtB,IAAI,QAAQ;YACV,IAAI,kBAAkB,MAAM,OAAA,EAAS;gBACnC,OAAO;oBAAC,IAAA,CAAK,qBAAA,CAAsB;oBAAS;iBAAA,CAAK,IAAA,CAAK;YAAA;YAGxD,OAAO;gBAAC,IAAA,CAAK,UAAA,CAAW;gBAAS;aAAA,CAAK,IAAA,CAAK;QAAA;QAG7C,OAAO;IAAA;IAGT,6BAA6B,GAAA,EAAK,KAAA,EAAO,IAAA,EAAM,KAAA,EAAO,OAAA,EAAS;QAC7D,IAAI,SAAS,GAAG,GAAA,EAAK;YACnB,IAAI,MAAM,OAAA,CAAQ,QAAQ;gBACxB,OAAO,GAAG,KAAA;YAAA,OAAA,IACD,UAAU,QAAQ,UAAU,QAAQ,UAAU,OAAO;gBAC9D,OAAO,GAAG,EAAA;YAAA;QAAA;QAId,IAAI,aAAa,IAAA,CAAK,WAAA,CAAY,KAAA,IAAS,IAAA,CAAK,WAAA,CAAY,GAAG,EAAA,CAAA;QAE/D,OAAQ;YAAA,KACD,GAAG,EAAA;YAAA,KACH,GAAG,KAAA;gBACN,IAAI,iBAAiB,MAAM,OAAA,EAAS;oBAClC,OAAO,IAAA,CAAK,aAAA,CAAc,KAAK,MAAM,GAAA,EAAK,YAAY,QAAQ,MAAA;gBAAA;gBAGhE,IAAI,MAAM,MAAA,EAAQ;oBAChB,OAAO,IAAA,CAAK,aAAA,CAAc,KAAK,CAAA,CAAA,EAAI,MAAM,GAAA,CAAI,CAAA,OAAQ,IAAA,CAAK,MAAA,CAAO,MAAM,QAAQ,IAAA,CAAK,MAAA,CAAA,CAAA,EAAU,YAAY,QAAQ,MAAA;gBAAA;gBAGpH,IAAI,eAAe,IAAA,CAAK,WAAA,CAAY,GAAG,EAAA,CAAA,EAAK;oBAC1C,OAAO,IAAA,CAAK,aAAA,CAAc,KAAK,UAAU,YAAY,QAAQ,MAAA;gBAAA;gBAG/D,OAAO;YAAA,KACJ,GAAG,GAAA;YAAA,KACH,GAAG,GAAA;gBACN,aAAa,GAAG,IAAA,CAAK,WAAA,CAAY,GAAG,EAAA,CAAA,CAAA,CAAA,EAAO,YAAA;gBAC3C,IAAI,KAAA,CAAM,GAAG,MAAA,CAAA,EAAS;oBACpB,OAAO,IAAA,CAAK,aAAA,CAAc,KAAK,CAAA,QAAA,EAAW,KAAA,CAAM,GAAG,MAAA,CAAA,CAAQ,GAAA,CAAI,CAAA,OAAQ,CAAA,CAAA,EAAI,IAAA,CAAK,MAAA,CAAO,MAAA,CAAA,CAAA,EAAU,IAAA,CAAK,MAAA,CAAA,CAAA,EAAU,YAAY,QAAQ,MAAA;gBAAA;gBAGtI,OAAO,IAAA,CAAK,aAAA,CAAc,KAAK,CAAA,CAAA,EAAI,IAAA,CAAK,MAAA,CAAO,OAAO,OAAA,CAAA,CAAA,EAAW,YAAY,QAAQ,MAAA;YAAA,KAClF,GAAG,OAAA;YAAA,KACH,GAAG,UAAA;gBACN,OAAO,IAAA,CAAK,aAAA,CAAc,KAAK,GAAG,IAAA,CAAK,MAAA,CAAO,KAAA,CAAM,EAAA,EAAI,OAAA,KAAA,EAAc,IAAA,CAAK,MAAA,CAAO,KAAA,CAAM,EAAA,EAAI,QAAA,EAAU,YAAY,QAAQ,MAAA;YAAA,KACvH,GAAG,GAAA;gBACN,MAAM,IAAI,MAAM;YAAA,KACb,GAAG,GAAA;gBACN,aAAa,IAAA,CAAK,WAAA,CAAY,GAAG,EAAA,CAAA;gBACjC,QAAQ,MAAM,KAAA,CAAM;gBAEpB,IAAI,MAAM,MAAA,GAAS,GAAG;oBACpB,QAAQ;wBAEN,MAAM,KAAA,CAAM,GAAG,CAAA,GAAI,IAAA,CAAK;wBACxB,KAAA,CAAM,MAAM,MAAA,GAAS,EAAA;qBAAA;gBAAA;gBAIzB,OAAO,IAAA,CAAK,aAAA,CAAc,KAAK,MAAM,GAAA,CAAI,CAAA,aAAc,IAAA,CAAK,eAAA,CAAgB,aAAa,IAAA,CAAK,MAAM,YAAY,QAAQ,MAAA;YAAA,KACrH,GAAG,UAAA;YAAA,KACH,GAAG,QAAA;YAAA,KACH,GAAG,SAAA;gBACN,aAAa,IAAA,CAAK,WAAA,CAAY,GAAG,IAAA,CAAA;gBAEjC,IAAI,iBAAiB,MAAM,OAAA,EAAS;oBAClC,QAAQ,MAAM,GAAA;gBAAA;gBAGhB,IAAI,UAAU,GAAG,MAAA,CAAA,CAAA;gBAEjB,IAAI,SAAS,GAAG,QAAA,EAAU,UAAU,CAAA,CAAA,EAAI,OAAA;gBACxC,IAAI,SAAS,GAAG,SAAA,EAAW,UAAU,CAAA,CAAA,EAAI,MAAA,CAAA,CAAA;gBAEzC,OAAO,IAAA,CAAK,aAAA,CAAc,KAAK,IAAA,CAAK,MAAA,CAAO,UAAU,YAAY,QAAQ,MAAA;QAAA;QAG7E,MAAM,gBAAgB;YACpB,eAAe,WAAW,QAAA,CAAS,IAAA,CAAK,WAAA,CAAY,GAAG,IAAA,CAAA;QAAA;QAGzD,IAAI,EAAE,aAAA,CAAc,QAAQ;YAC1B,IAAI,KAAA,CAAM,GAAG,GAAA,CAAA,EAAM;gBACjB,OAAO,IAAA,CAAK,aAAA,CAAc,KAAK,IAAA,CAAK,cAAA,CAAe,MAAM,QAAQ,YAAY,QAAQ,MAAA;YAAA;YAEvF,IAAI,KAAA,CAAM,GAAG,GAAA,CAAA,EAAM;gBACjB,cAAc,MAAA,GAAS;gBACvB,OAAO,IAAA,CAAK,aAAA,CAAc,KAAK,CAAA,CAAA,EAAI,IAAA,CAAK,MAAA,CAAO,KAAA,CAAM,GAAG,GAAA,CAAA,EAAM,OAAO,eAAA,CAAA,CAAA,EAAmB,GAAG,WAAA,CAAA,EAAc,IAAA,CAAK,WAAA,CAAY,GAAG,GAAA,CAAA,EAAA,EAAQ,QAAQ,MAAA;YAAA;YAE/I,IAAI,KAAA,CAAM,GAAG,GAAA,CAAA,EAAM;gBACjB,cAAc,MAAA,GAAS;gBACvB,OAAO,IAAA,CAAK,aAAA,CAAc,KAAK,CAAA,CAAA,EAAI,IAAA,CAAK,MAAA,CAAO,KAAA,CAAM,GAAG,GAAA,CAAA,EAAM,OAAO,eAAA,CAAA,CAAA,EAAmB,GAAG,WAAA,CAAA,EAAc,IAAA,CAAK,WAAA,CAAY,GAAG,GAAA,CAAA,EAAA,EAAQ,QAAQ,MAAA;YAAA;QAAA;QAIjJ,IAAI,UAAU,QAAQ,eAAe,IAAA,CAAK,WAAA,CAAY,GAAG,EAAA,CAAA,EAAK;YAC5D,OAAO,IAAA,CAAK,aAAA,CAAc,KAAK,IAAA,CAAK,MAAA,CAAO,OAAO,OAAO,gBAAgB,IAAA,CAAK,WAAA,CAAY,GAAG,EAAA,CAAA,EAAK,QAAQ,MAAA;QAAA;QAE5G,IAAI,UAAU,QAAQ,eAAe,IAAA,CAAK,WAAA,CAAY,GAAG,EAAA,CAAA,EAAK;YAC5D,OAAO,IAAA,CAAK,aAAA,CAAc,KAAK,IAAA,CAAK,MAAA,CAAO,OAAO,OAAO,gBAAgB,IAAA,CAAK,WAAA,CAAY,GAAG,GAAA,CAAA,EAAM,QAAQ,MAAA;QAAA;QAG7G,OAAO,IAAA,CAAK,aAAA,CAAc,KAAK,IAAA,CAAK,MAAA,CAAO,OAAO,OAAO,gBAAgB,YAAY,QAAQ,MAAA;IAAA;IAO/F,mBAAmB,IAAA,EAAM,SAAA,EAAW,OAAA,EAAS,OAAA,EAAS,OAAA,EAAS;QAC7D,MAAM,QAAQ,CAAA;QAEd,IAAI,MAAM,OAAA,CAAQ,YAAY;YAC5B,YAAY,SAAA,CAAU,EAAA;YACtB,IAAI,MAAM,OAAA,CAAQ,YAAY;gBAC5B,YAAY,SAAA,CAAU,EAAA;YAAA;QAAA;QAI1B,UAAU,WAAW,CAAA;QAErB,IAAI,YAAY,KAAA,GAAW;YACzB,UAAU;QAAA;QAGZ,IAAI,QAAQ,gBAAgB,MAAM,eAAA,EAAiB;YACjD,OAAO,IAAA,CAAK,qBAAA,CAAsB,MAAM,WAAW,SAAS,SAAS;QAAA;QAEvE,IAAI,EAAE,aAAA,CAAc,OAAO;YACzB,OAAO,IAAA,CAAK,eAAA,CAAgB,MAAM;gBAChC,OAAO;gBACP,QAAQ,WAAW;gBACnB,MAAM,QAAQ,IAAA;YAAA;QAAA;QAGlB,IAAI,OAAO,SAAS,YAAY,OAAO,SAAS,UAAU;YACxD,IAAI,cAAc,UAAU,OAAO,IAAA,CAAK,QAAQ,WAAA,IAAe,EAAA;YAE/D,IAAI,YAAY,MAAA,GAAS,GAAG;gBAE1B,cAAc,WAAA,CAAY,EAAA;YAAA,OACrB;gBACL,cAAc;YAAA;YAGhB,KAAA,CAAM,YAAA,GAAe;YAErB,OAAO,IAAA,CAAK,eAAA,CAAgB,OAAO;gBACjC,OAAO;gBACP,QAAQ,WAAW;YAAA;QAAA;QAGvB,IAAI,OAAO,SAAS,UAAU;YAC5B,OAAO,IAAA,CAAK,eAAA,CAAgB,MAAM;gBAChC,OAAO;gBACP,QAAQ,WAAW;YAAA;QAAA;QAGvB,4KAAI,CAAO,QAAA,CAAS,OAAO;YACzB,OAAO,IAAA,CAAK,MAAA,CAAO;QAAA;QAErB,IAAI,MAAM,OAAA,CAAQ,OAAO;YACvB,IAAI,KAAK,MAAA,KAAW,KAAK,KAAK,MAAA,GAAS,KAAK,IAAA,CAAK,EAAA,CAAG,MAAA,KAAW,GAAG,OAAO;YACzE,IAAI,MAAM,kBAAA,CAAmB,OAAO;gBAClC,MAAM,QAAQ;oBAAA,CAAG,GAAG,GAAA,CAAA,EAAM;gBAAA;gBAC1B,OAAO,IAAA,CAAK,kBAAA,CAAmB,OAAO,WAAW,SAAS,SAAS;YAAA;YAErE,MAAM,IAAI,MAAM;QAAA;QAElB,IAAI,QAAQ,MAAM;YAChB,OAAO,IAAA,CAAK,eAAA,CAAgB,MAAM;gBAChC,OAAO;gBACP,QAAQ,WAAW;YAAA;QAAA;QAIvB,MAAM,IAAI,MAAM,CAAA,gCAAA,EAAmC,KAAK,OAAA,CAAQ,MAAA,wHAAA,CAAA;IAAA;IAIlE,qBAAqB,UAAA,EAAY,IAAA,EAAM;QACrC,OAAO,QAAQ,EAAA;QACf,OAAO,EAAE,MAAA,CAAO,YAAY,CAAC,QAAQ,OAAO,QAAQ;YAClD,IAAI,EAAE,QAAA,CAAS,QAAQ;gBACrB,OAAO,OAAO,MAAA,CAAO,IAAA,CAAK,oBAAA,CAAqB,OAAO,KAAK,MAAA,CAAO;YAAA;YAEpE,OAAO,IAAA,CAAK;gBAAE,MAAM,KAAK,MAAA,CAAO;gBAAM;YAAA;YACtC,OAAO;QAAA,GACN,EAAA;IAAA;IAGL,aAAa,KAAA,EAAO;QAClB,OAAO;IAAA;IAMT,gBAAgB;QACd,OAAO;IAAA;AAAA;AAIX,OAAO,MAAA,CAAO,eAAe,SAAA,EAAW,QAAQ;AAChD,OAAO,MAAA,CAAO,eAAe,SAAA,EAAW,QAAQ;AAEhD,OAAO,OAAA,GAAU","ignoreList":[0]}},
    {"offset": {"line": 15861, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15866, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/mysql/query-generator.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Utils = require('../../utils');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\nconst util = require('util');\nconst Op = require('../../operators');\n\n\nconst JSON_FUNCTION_REGEX = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\nconst JSON_OPERATOR_REGEX = /^\\s*(->>?|@>|<@|\\?[|&]?|\\|{2}|#-)/i;\nconst TOKEN_CAPTURE_REGEX = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\nconst FOREIGN_KEY_FIELDS = [\n  'CONSTRAINT_NAME as constraint_name',\n  'CONSTRAINT_NAME as constraintName',\n  'CONSTRAINT_SCHEMA as constraintSchema',\n  'CONSTRAINT_SCHEMA as constraintCatalog',\n  'TABLE_NAME as tableName',\n  'TABLE_SCHEMA as tableSchema',\n  'TABLE_SCHEMA as tableCatalog',\n  'COLUMN_NAME as columnName',\n  'REFERENCED_TABLE_SCHEMA as referencedTableSchema',\n  'REFERENCED_TABLE_SCHEMA as referencedTableCatalog',\n  'REFERENCED_TABLE_NAME as referencedTableName',\n  'REFERENCED_COLUMN_NAME as referencedColumnName'\n].join(',');\n\nconst typeWithoutDefault = new Set(['BLOB', 'TEXT', 'GEOMETRY', 'JSON']);\n\nclass MySQLQueryGenerator extends AbstractQueryGenerator {\n  constructor(options) {\n    super(options);\n\n    this.OperatorMap = {\n      ...this.OperatorMap,\n      [Op.regexp]: 'REGEXP',\n      [Op.notRegexp]: 'NOT REGEXP'\n    };\n  }\n\n  createDatabaseQuery(databaseName, options) {\n    options = {\n      charset: null,\n      collate: null,\n      ...options\n    };\n\n    return Utils.joinSQLFragments([\n      'CREATE DATABASE IF NOT EXISTS',\n      this.quoteIdentifier(databaseName),\n      options.charset && `DEFAULT CHARACTER SET ${this.escape(options.charset)}`,\n      options.collate && `DEFAULT COLLATE ${this.escape(options.collate)}`,\n      ';'\n    ]);\n  }\n\n  dropDatabaseQuery(databaseName) {\n    return `DROP DATABASE IF EXISTS ${this.quoteIdentifier(databaseName)};`;\n  }\n\n  createSchema() {\n    return 'SHOW TABLES';\n  }\n\n  showSchemasQuery() {\n    return 'SHOW TABLES';\n  }\n\n  versionQuery() {\n    return 'SELECT VERSION() as `version`';\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    options = {\n      engine: 'InnoDB',\n      charset: null,\n      rowFormat: null,\n      ...options\n    };\n\n    const primaryKeys = [];\n    const foreignKeys = {};\n    const attrStr = [];\n\n    for (const attr in attributes) {\n      if (!Object.prototype.hasOwnProperty.call(attributes, attr)) continue;\n      const dataType = attributes[attr];\n      let match;\n\n      if (dataType.includes('PRIMARY KEY')) {\n        primaryKeys.push(attr);\n\n        if (dataType.includes('REFERENCES')) {\n          // MySQL doesn't support inline REFERENCES declarations: move to the end\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attrStr.push(`${this.quoteIdentifier(attr)} ${match[1].replace('PRIMARY KEY', '')}`);\n          foreignKeys[attr] = match[2];\n        } else {\n          attrStr.push(`${this.quoteIdentifier(attr)} ${dataType.replace('PRIMARY KEY', '')}`);\n        }\n      } else if (dataType.includes('REFERENCES')) {\n        // MySQL doesn't support inline REFERENCES declarations: move to the end\n        match = dataType.match(/^(.+) (REFERENCES.*)$/);\n        attrStr.push(`${this.quoteIdentifier(attr)} ${match[1]}`);\n        foreignKeys[attr] = match[2];\n      } else {\n        attrStr.push(`${this.quoteIdentifier(attr)} ${dataType}`);\n      }\n    }\n\n    const table = this.quoteTable(tableName);\n    let attributesClause = attrStr.join(', ');\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, (columns, indexName) => {\n        if (columns.customIndex) {\n          if (typeof indexName !== 'string') {\n            indexName = `uniq_${tableName}_${columns.fields.join('_')}`;\n          }\n          attributesClause += `, UNIQUE ${this.quoteIdentifier(indexName)} (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n        }\n      });\n    }\n\n    if (pkString.length > 0) {\n      attributesClause += `, PRIMARY KEY (${pkString})`;\n    }\n\n    for (const fkey in foreignKeys) {\n      if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {\n        attributesClause += `, FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`;\n      }\n    }\n\n    return Utils.joinSQLFragments([\n      'CREATE TABLE IF NOT EXISTS',\n      table,\n      `(${attributesClause})`,\n      `ENGINE=${options.engine}`,\n      options.comment && typeof options.comment === 'string' && `COMMENT ${this.escape(options.comment)}`,\n      options.charset && `DEFAULT CHARSET=${options.charset}`,\n      options.collate && `COLLATE ${options.collate}`,\n      options.initialAutoIncrement && `AUTO_INCREMENT=${options.initialAutoIncrement}`,\n      options.rowFormat && `ROW_FORMAT=${options.rowFormat}`,\n      ';'\n    ]);\n  }\n\n  describeTableQuery(tableName, schema, schemaDelimiter) {\n    const table = this.quoteTable(\n      this.addSchema({\n        tableName,\n        _schema: schema,\n        _schemaDelimiter: schemaDelimiter\n      })\n    );\n\n    return `SHOW FULL COLUMNS FROM ${table};`;\n  }\n\n  showTablesQuery(database) {\n    let query = 'SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = \\'BASE TABLE\\'';\n    if (database) {\n      query += ` AND TABLE_SCHEMA = ${this.escape(database)}`;\n    } else {\n      query += ' AND TABLE_SCHEMA NOT IN (\\'MYSQL\\', \\'INFORMATION_SCHEMA\\', \\'PERFORMANCE_SCHEMA\\', \\'SYS\\', \\'mysql\\', \\'information_schema\\', \\'performance_schema\\', \\'sys\\')';\n    }\n    return `${query};`;\n  }\n\n  tableExistsQuery(table) {\n    // remove first & last `, then escape as SQL string\n    const tableName = this.escape(this.quoteTable(table).slice(1, -1));\n\n    return `SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = ${tableName} AND TABLE_SCHEMA = ${this.escape(this.sequelize.config.database)}`;\n  }\n\n  addColumnQuery(table, key, dataType) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(table),\n      'ADD',\n      this.quoteIdentifier(key),\n      this.attributeToSQL(dataType, {\n        context: 'addColumn',\n        tableName: table,\n        foreignKey: key\n      }),\n      ';'\n    ]);\n  }\n\n  removeColumnQuery(tableName, attributeName) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP',\n      this.quoteIdentifier(attributeName),\n      ';'\n    ]);\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const attrString = [];\n    const constraintString = [];\n\n    for (const attributeName in attributes) {\n      let definition = attributes[attributeName];\n      if (definition.includes('REFERENCES')) {\n        const attrName = this.quoteIdentifier(attributeName);\n        definition = definition.replace(/.+?(?=REFERENCES)/, '');\n        constraintString.push(`FOREIGN KEY (${attrName}) ${definition}`);\n      } else {\n        attrString.push(`\\`${attributeName}\\` \\`${attributeName}\\` ${definition}`);\n      }\n    }\n\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      attrString.length && `CHANGE ${attrString.join(', ')}`,\n      constraintString.length && `ADD ${constraintString.join(', ')}`,\n      ';'\n    ]);\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const attrString = [];\n\n    for (const attrName in attributes) {\n      const definition = attributes[attrName];\n      attrString.push(`\\`${attrBefore}\\` \\`${attrName}\\` ${definition}`);\n    }\n\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'CHANGE',\n      attrString.join(', '),\n      ';'\n    ]);\n  }\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      // Parse nested object\n      if (smth.conditions) {\n        const conditions = this.parseConditionObject(smth.conditions).map(condition =>\n          `${this.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path))} = '${condition.value}'`\n        );\n\n        return conditions.join(' AND ');\n      }\n      if (smth.path) {\n        let str;\n\n        // Allow specifying conditions using the sqlite json functions\n        if (this._checkValidJsonStatement(smth.path)) {\n          str = smth.path;\n        } else {\n          // Also support json property accessors\n          const paths = _.toPath(smth.path);\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n\n        if (smth.value) {\n          str += util.format(' = %s', this.escape(smth.value));\n        }\n\n        return str;\n      }\n    } else if (smth instanceof Utils.Cast) {\n      if (/timestamp/i.test(smth.type)) {\n        smth.type = 'datetime';\n      } else if (smth.json && /boolean/i.test(smth.type)) {\n        // true or false cannot be casted as booleans within a JSON structure\n        smth.type = 'char';\n      } else if (/double precision/i.test(smth.type) || /boolean/i.test(smth.type) || /integer/i.test(smth.type)) {\n        smth.type = 'decimal';\n      } else if (/text/i.test(smth.type)) {\n        smth.type = 'char';\n      }\n    }\n\n    return super.handleSequelizeMethod(smth, tableName, factory, options, prepend);\n  }\n\n  _toJSONValue(value) {\n    // true/false are stored as strings in mysql\n    if (typeof value === 'boolean') {\n      return value.toString();\n    }\n    // null is stored as a string in mysql\n    if (value === null) {\n      return 'null';\n    }\n    return value;\n  }\n\n  truncateTableQuery(tableName) {\n    return `TRUNCATE ${this.quoteTable(tableName)}`;\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    let limit = '';\n    let query = `DELETE FROM ${this.quoteTable(tableName)}`;\n\n    if (options.limit) {\n      limit = ` LIMIT ${this.escape(options.limit)}`;\n    }\n\n    where = this.getWhereConditions(where, null, model, options);\n\n    if (where) {\n      query += ` WHERE ${where}`;\n    }\n\n    return query + limit;\n  }\n\n  showIndexesQuery(tableName, options) {\n    return Utils.joinSQLFragments([\n      `SHOW INDEX FROM ${this.quoteTable(tableName)}`,\n      options && options.database && `FROM \\`${options.database}\\``\n    ]);\n  }\n\n  showConstraintsQuery(table, constraintName) {\n    const tableName = table.tableName || table;\n    const schemaName = table.schema;\n\n    return Utils.joinSQLFragments([\n      'SELECT CONSTRAINT_CATALOG AS constraintCatalog,',\n      'CONSTRAINT_NAME AS constraintName,',\n      'CONSTRAINT_SCHEMA AS constraintSchema,',\n      'CONSTRAINT_TYPE AS constraintType,',\n      'TABLE_NAME AS tableName,',\n      'TABLE_SCHEMA AS tableSchema',\n      'from INFORMATION_SCHEMA.TABLE_CONSTRAINTS',\n      `WHERE table_name='${tableName}'`,\n      constraintName && `AND constraint_name = '${constraintName}'`,\n      schemaName && `AND TABLE_SCHEMA = '${schemaName}'`,\n      ';'\n    ]);\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return Utils.joinSQLFragments([\n      'DROP INDEX',\n      this.quoteIdentifier(indexName),\n      'ON',\n      this.quoteTable(tableName)\n    ]);\n  }\n\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    const attributeString = attribute.type.toString({ escape: this.escape.bind(this) });\n    let template = attributeString;\n\n    if (attribute.allowNull === false) {\n      template += ' NOT NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      template += ' auto_increment';\n    }\n\n    // BLOB/TEXT/GEOMETRY/JSON cannot have a default value\n    if (!typeWithoutDefault.has(attributeString)\n      && attribute.type._binary !== true\n      && Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;\n    }\n\n    if (attribute.unique === true) {\n      template += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      template += ' PRIMARY KEY';\n    }\n\n    if (attribute.comment) {\n      template += ` COMMENT ${this.escape(attribute.comment)}`;\n    }\n\n    if (attribute.first) {\n      template += ' FIRST';\n    }\n    if (attribute.after) {\n      template += ` AFTER ${this.quoteIdentifier(attribute.after)}`;\n    }\n\n    if ((!options || !options.withoutForeignKeyConstraints) && attribute.references) {\n      if (options && options.context === 'addColumn' && options.foreignKey) {\n        const attrName = this.quoteIdentifier(options.foreignKey);\n        const fkName = this.quoteIdentifier(`${options.tableName}_${attrName}_foreign_idx`);\n\n        template += `, ADD CONSTRAINT ${fkName} FOREIGN KEY (${attrName})`;\n      }\n\n      template += ` REFERENCES ${this.quoteTable(attribute.references.model)}`;\n\n      if (attribute.references.key) {\n        template += ` (${this.quoteIdentifier(attribute.references.key)})`;\n      } else {\n        template += ` (${this.quoteIdentifier('id')})`;\n      }\n\n      if (attribute.onDelete) {\n        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n\n      if (attribute.onUpdate) {\n        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n    }\n\n    return template;\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {};\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n\n    return result;\n  }\n\n  /**\n   * Check whether the statmement is json function or simple path\n   *\n   * @param   {string}  stmt  The statement to validate\n   * @returns {boolean}       true if the given statement is json function\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\n   * @private\n   */\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== 'string') {\n      return false;\n    }\n\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = JSON_FUNCTION_REGEX.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf('(');\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const operatorMatches = JSON_OPERATOR_REGEX.exec(string);\n      if (operatorMatches) {\n        currentIndex += operatorMatches[0].length;\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = TOKEN_CAPTURE_REGEX.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === '(') {\n          openingBrackets++;\n        } else if (capturedToken === ')') {\n          closingBrackets++;\n        } else if (capturedToken === ';') {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    // Check invalid json statement\n    if (hasJsonFunction && (hasInvalidToken || openingBrackets !== closingBrackets)) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n\n    // return true if the statement has valid json function\n    return hasJsonFunction;\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {object} table  The table.\n   * @param  {string} schemaName The name of the schema.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  getForeignKeysQuery(table, schemaName) {\n    const tableName = table.tableName || table;\n    return Utils.joinSQLFragments([\n      'SELECT',\n      FOREIGN_KEY_FIELDS,\n      `FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = '${tableName}'`,\n      `AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='${schemaName}'`,\n      'AND REFERENCED_TABLE_NAME IS NOT NULL',\n      ';'\n    ]);\n  }\n\n  /**\n   * Generates an SQL query that returns the foreign key constraint of a given column.\n   *\n   * @param  {object} table  The table.\n   * @param  {string} columnName The name of the column.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  getForeignKeyQuery(table, columnName) {\n    const quotedSchemaName = table.schema ? wrapSingleQuote(table.schema) : '';\n    const quotedTableName = wrapSingleQuote(table.tableName || table);\n    const quotedColumnName = wrapSingleQuote(columnName);\n\n    return Utils.joinSQLFragments([\n      'SELECT',\n      FOREIGN_KEY_FIELDS,\n      'FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE',\n      'WHERE (',\n      [\n        `REFERENCED_TABLE_NAME = ${quotedTableName}`,\n        table.schema && `AND REFERENCED_TABLE_SCHEMA = ${quotedSchemaName}`,\n        `AND REFERENCED_COLUMN_NAME = ${quotedColumnName}`\n      ],\n      ') OR (',\n      [\n        `TABLE_NAME = ${quotedTableName}`,\n        table.schema && `AND TABLE_SCHEMA = ${quotedSchemaName}`,\n        `AND COLUMN_NAME = ${quotedColumnName}`,\n        'AND REFERENCED_TABLE_NAME IS NOT NULL'\n      ],\n      ')'\n    ]);\n  }\n\n  /**\n   * Generates an SQL query that removes a foreign key from a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @param  {string} foreignKey The name of the foreign key constraint.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP FOREIGN KEY',\n      this.quoteIdentifier(foreignKey),\n      ';'\n    ]);\n  }\n\n  /**\n   * Quote identifier in sql clause\n   *\n   * @param {string} identifier\n   * @param {boolean} force\n   *\n   * @returns {string}\n   */\n  quoteIdentifier(identifier, force) {\n    return Utils.addTicks(Utils.removeTicks(identifier, '`'), '`');\n  }\n}\n\n// private methods\nfunction wrapSingleQuote(identifier) {\n  return Utils.addTicks(identifier, '\\'');\n}\n\nmodule.exports = MySQLQueryGenerator;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 16342, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 16347, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/mariadb/query-generator.js"],"sourcesContent":["'use strict';\n\nconst MySQLQueryGenerator = require('../mysql/query-generator');\nconst Utils = require('./../../utils');\n\nclass MariaDBQueryGenerator extends MySQLQueryGenerator {\n  createSchema(schema, options) {\n    options = {\n      charset: null,\n      collate: null,\n      ...options\n    };\n\n    return Utils.joinSQLFragments([\n      'CREATE SCHEMA IF NOT EXISTS',\n      this.quoteIdentifier(schema),\n      options.charset && `DEFAULT CHARACTER SET ${this.escape(options.charset)}`,\n      options.collate && `DEFAULT COLLATE ${this.escape(options.collate)}`,\n      ';'\n    ]);\n  }\n\n  dropSchema(schema) {\n    return `DROP SCHEMA IF EXISTS ${this.quoteIdentifier(schema)};`;\n  }\n\n  showSchemasQuery(options) {\n    const schemasToSkip = [\n      '\\'MYSQL\\'',\n      '\\'INFORMATION_SCHEMA\\'',\n      '\\'PERFORMANCE_SCHEMA\\''\n    ];\n    if (options.skip && Array.isArray(options.skip) && options.skip.length > 0) {\n      for (const schemaName of options.skip) {\n        schemasToSkip.push(this.escape(schemaName));\n      }\n    }\n    return Utils.joinSQLFragments([\n      'SELECT SCHEMA_NAME as schema_name',\n      'FROM INFORMATION_SCHEMA.SCHEMATA',\n      `WHERE SCHEMA_NAME NOT IN (${schemasToSkip.join(', ')})`,\n      ';'\n    ]);\n  }\n\n  showTablesQuery(database) {\n    let query = 'SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = \\'BASE TABLE\\'';\n    if (database) {\n      query += ` AND TABLE_SCHEMA = ${this.escape(database)}`;\n    } else {\n      query += ' AND TABLE_SCHEMA NOT IN (\\'MYSQL\\', \\'INFORMATION_SCHEMA\\', \\'PERFORMANCE_SCHEMA\\')';\n    }\n    return `${query};`;\n  }\n\n  /**\n   * Quote identifier in sql clause\n   *\n   * @param {string} identifier\n   * @param {boolean} force\n   *\n   * @returns {string}\n   */\n  quoteIdentifier(identifier, force) {\n    return Utils.addTicks(Utils.removeTicks(identifier, '`'), '`');\n  }\n}\n\nmodule.exports = MariaDBQueryGenerator;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAEA,MAAM,sBAAsB,QAAQ;AACpC,MAAM,QAAQ,QAAQ;AAEtB,MAAA,8BAAoC,oBAAoB;IACtD,aAAa,MAAA,EAAQ,OAAA,EAAS;QAC5B,UAAU,eAAA;YACR,SAAS;YACT,SAAS;QAAA,GACN;QAGL,OAAO,MAAM,gBAAA,CAAiB;YAC5B;YACA,IAAA,CAAK,eAAA,CAAgB;YACrB,QAAQ,OAAA,IAAW,CAAA,sBAAA,EAAyB,IAAA,CAAK,MAAA,CAAO,QAAQ,OAAA,GAAA;YAChE,QAAQ,OAAA,IAAW,CAAA,gBAAA,EAAmB,IAAA,CAAK,MAAA,CAAO,QAAQ,OAAA,GAAA;YAC1D;SAAA;IAAA;IAIJ,WAAW,MAAA,EAAQ;QACjB,OAAO,CAAA,sBAAA,EAAyB,IAAA,CAAK,eAAA,CAAgB,QAAA,CAAA,CAAA;IAAA;IAGvD,iBAAiB,OAAA,EAAS;QACxB,MAAM,gBAAgB;YACpB;YACA;YACA;SAAA;QAEF,IAAI,QAAQ,IAAA,IAAQ,MAAM,OAAA,CAAQ,QAAQ,IAAA,KAAS,QAAQ,IAAA,CAAK,MAAA,GAAS,GAAG;YAC1E,KAAA,MAAW,cAAc,QAAQ,IAAA,CAAM;gBACrC,cAAc,IAAA,CAAK,IAAA,CAAK,MAAA,CAAO;YAAA;QAAA;QAGnC,OAAO,MAAM,gBAAA,CAAiB;YAC5B;YACA;YACA,CAAA,0BAAA,EAA6B,cAAc,IAAA,CAAK,MAAA,CAAA,CAAA;YAChD;SAAA;IAAA;IAIJ,gBAAgB,QAAA,EAAU;QACxB,IAAI,QAAQ;QACZ,IAAI,UAAU;YACZ,SAAS,CAAA,oBAAA,EAAuB,IAAA,CAAK,MAAA,CAAO,WAAA;QAAA,OACvC;YACL,SAAS;QAAA;QAEX,OAAO,GAAG,MAAA,CAAA,CAAA;IAAA;IAWZ,gBAAgB,UAAA,EAAY,KAAA,EAAO;QACjC,OAAO,MAAM,QAAA,CAAS,MAAM,WAAA,CAAY,YAAY,MAAM;IAAA;AAAA;AAI9D,OAAO,OAAA,GAAU","ignoreList":[0]}},
    {"offset": {"line": 16416, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 16421, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/mysql/query-interface.js"],"sourcesContent":["'use strict';\n\nconst sequelizeErrors = require('../../errors');\nconst { QueryInterface } = require('../abstract/query-interface');\nconst QueryTypes = require('../../query-types');\n\n/**\n * The interface that Sequelize uses to talk with MySQL/MariaDB database\n */\nclass MySQLQueryInterface extends QueryInterface {\n  /**\n   * A wrapper that fixes MySQL's inability to cleanly remove columns from existing tables if they have a foreign key constraint.\n   *\n   * @override\n   */\n  async removeColumn(tableName, columnName, options) {\n    options = options || {};\n\n    const [results] = await this.sequelize.query(\n      this.queryGenerator.getForeignKeyQuery(tableName.tableName ? tableName : {\n        tableName,\n        schema: this.sequelize.config.database\n      }, columnName),\n      { raw: true, ...options }\n    );\n\n    //Exclude primary key constraint\n    if (results.length && results[0].constraint_name !== 'PRIMARY') {\n      await Promise.all(results.map(constraint => this.sequelize.query(\n        this.queryGenerator.dropForeignKeyQuery(tableName, constraint.constraint_name),\n        { raw: true, ...options }\n      )));\n    }\n\n    return await this.sequelize.query(\n      this.queryGenerator.removeColumnQuery(tableName, columnName),\n      { raw: true, ...options }\n    );\n  }\n\n  /**\n   * @override\n   */\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = { ...options };\n\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n    options.upsertKeys = Object.values(options.model.primaryKeys).map(item => item.field);\n\n    const model = options.model;\n    const sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * @override\n   */\n  async removeConstraint(tableName, constraintName, options) {\n    const sql = this.queryGenerator.showConstraintsQuery(\n      tableName.tableName ? tableName : {\n        tableName,\n        schema: this.sequelize.config.database\n      }, constraintName);\n\n    const constraints = await this.sequelize.query(sql, { ...options,\n      type: this.sequelize.QueryTypes.SHOWCONSTRAINTS });\n\n    const constraint = constraints[0];\n    let query;\n    if (!constraint || !constraint.constraintType) {\n      throw new sequelizeErrors.UnknownConstraintError(\n        {\n          message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n          constraint: constraintName,\n          table: tableName\n        });\n    }\n\n    if (constraint.constraintType === 'FOREIGN KEY') {\n      query = this.queryGenerator.dropForeignKeyQuery(tableName, constraintName);\n    } else {\n      query = this.queryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);\n    }\n\n    return await this.sequelize.query(query, options);\n  }\n}\n\nexports.MySQLQueryInterface = MySQLQueryInterface;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAEA,MAAM,kBAAkB,QAAQ;AAChC,MAAM,EAAE,cAAA,EAAA,GAAmB,QAAQ;AACnC,MAAM,aAAa,QAAQ;AAK3B,MAAA,4BAAkC,eAAe;IAAA,MAMzC,aAAa,SAAA,EAAW,UAAA,EAAY,OAAA,EAAS;QACjD,UAAU,WAAW,CAAA;QAErB,MAAM,CAAC,QAAA,GAAW,MAAM,IAAA,CAAK,SAAA,CAAU,KAAA,CACrC,IAAA,CAAK,cAAA,CAAe,kBAAA,CAAmB,UAAU,SAAA,GAAY,YAAY;YACvE;YACA,QAAQ,IAAA,CAAK,SAAA,CAAU,MAAA,CAAO,QAAA;QAAA,GAC7B,aACH,eAAA;YAAE,KAAK;QAAA,GAAS;QAIlB,IAAI,QAAQ,MAAA,IAAU,OAAA,CAAQ,EAAA,CAAG,eAAA,KAAoB,WAAW;YAC9D,MAAM,QAAQ,GAAA,CAAI,QAAQ,GAAA,CAAI,CAAA,aAAc,IAAA,CAAK,SAAA,CAAU,KAAA,CACzD,IAAA,CAAK,cAAA,CAAe,mBAAA,CAAoB,WAAW,WAAW,eAAA,GAC9D,eAAA;oBAAE,KAAK;gBAAA,GAAS;QAAA;QAIpB,OAAO,MAAM,IAAA,CAAK,SAAA,CAAU,KAAA,CAC1B,IAAA,CAAK,cAAA,CAAe,iBAAA,CAAkB,WAAW,aACjD,eAAA;YAAE,KAAK;QAAA,GAAS;IAAA;IAAA,MAOd,OAAO,SAAA,EAAW,YAAA,EAAc,YAAA,EAAc,KAAA,EAAO,OAAA,EAAS;QAClE,UAAU,eAAA,CAAA,GAAK;QAEf,QAAQ,IAAA,GAAO,WAAW,MAAA;QAC1B,QAAQ,iBAAA,GAAoB,OAAO,IAAA,CAAK;QACxC,QAAQ,UAAA,GAAa,OAAO,MAAA,CAAO,QAAQ,KAAA,CAAM,WAAA,EAAa,GAAA,CAAI,CAAA,OAAQ,KAAK,KAAA;QAE/E,MAAM,QAAQ,QAAQ,KAAA;QACtB,MAAM,MAAM,IAAA,CAAK,cAAA,CAAe,WAAA,CAAY,WAAW,cAAc,MAAM,aAAA,EAAe;QAC1F,OAAO,MAAM,IAAA,CAAK,SAAA,CAAU,KAAA,CAAM,KAAK;IAAA;IAAA,MAMnC,iBAAiB,SAAA,EAAW,cAAA,EAAgB,OAAA,EAAS;QACzD,MAAM,MAAM,IAAA,CAAK,cAAA,CAAe,oBAAA,CAC9B,UAAU,SAAA,GAAY,YAAY;YAChC;YACA,QAAQ,IAAA,CAAK,SAAA,CAAU,MAAA,CAAO,QAAA;QAAA,GAC7B;QAEL,MAAM,cAAc,MAAM,IAAA,CAAK,SAAA,CAAU,KAAA,CAAM,KAAK,cAAA,eAAA,CAAA,GAAK,UAAL;YAClD,MAAM,IAAA,CAAK,SAAA,CAAU,UAAA,CAAW,eAAA;QAAA;QAElC,MAAM,aAAa,WAAA,CAAY,EAAA;QAC/B,IAAI;QACJ,IAAI,CAAC,cAAc,CAAC,WAAW,cAAA,EAAgB;YAC7C,MAAM,IAAI,gBAAgB,sBAAA,CACxB;gBACE,SAAS,CAAA,WAAA,EAAc,eAAA,UAAA,EAA2B,UAAA,eAAA,CAAA;gBAClD,YAAY;gBACZ,OAAO;YAAA;QAAA;QAIb,IAAI,WAAW,cAAA,KAAmB,eAAe;YAC/C,QAAQ,IAAA,CAAK,cAAA,CAAe,mBAAA,CAAoB,WAAW;QAAA,OACtD;YACL,QAAQ,IAAA,CAAK,cAAA,CAAe,gBAAA,CAAiB,WAAW,SAAA,EAAW,WAAW,cAAA;QAAA;QAGhF,OAAO,MAAM,IAAA,CAAK,SAAA,CAAU,KAAA,CAAM,OAAO;IAAA;AAAA;AAI7C,QAAQ,mBAAA,GAAsB","ignoreList":[0]}},
    {"offset": {"line": 16498, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 16503, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/mariadb/index.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst { MySQLQueryInterface } = require('../mysql/query-interface');\nconst DataTypes = require('../../data-types').mariadb;\n\nclass MariadbDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new MySQLQueryInterface(\n      sequelize,\n      this.queryGenerator\n    );\n  }\n\n  canBackslashEscape() {\n    return true;\n  }\n}\n\nMariadbDialect.prototype.supports = _.merge(\n  _.cloneDeep(AbstractDialect.prototype.supports),\n  {\n    'VALUES ()': true,\n    'LIMIT ON UPDATE': true,\n    lock: true,\n    forShare: 'LOCK IN SHARE MODE',\n    settingIsolationLevelDuringTransaction: false,\n    schemas: true,\n    inserts: {\n      ignoreDuplicates: ' IGNORE',\n      updateOnDuplicate: ' ON DUPLICATE KEY UPDATE'\n    },\n    index: {\n      collate: false,\n      length: true,\n      parser: true,\n      type: true,\n      using: 1\n    },\n    constraints: {\n      dropConstraint: false,\n      check: false\n    },\n    indexViaAlter: true,\n    indexHints: true,\n    NUMERIC: true,\n    GEOMETRY: true,\n    JSON: true,\n    REGEXP: true\n  }\n);\n\nMariadbDialect.prototype.defaultVersion = '10.1.44'; // minimum supported version\nMariadbDialect.prototype.Query = Query;\nMariadbDialect.prototype.QueryGenerator = QueryGenerator;\nMariadbDialect.prototype.DataTypes = DataTypes;\nMariadbDialect.prototype.name = 'mariadb';\nMariadbDialect.prototype.TICK_CHAR = '`';\nMariadbDialect.prototype.TICK_CHAR_LEFT = MariadbDialect.prototype.TICK_CHAR;\nMariadbDialect.prototype.TICK_CHAR_RIGHT = MariadbDialect.prototype.TICK_CHAR;\n\nmodule.exports = MariadbDialect;\n"],"names":[],"mappings":";AAEA,MAAM,IAAI,QAAQ;AAClB,MAAM,kBAAkB,QAAQ;AAChC,MAAM,oBAAoB,QAAQ;AAClC,MAAM,QAAQ,QAAQ;AACtB,MAAM,iBAAiB,QAAQ;AAC/B,MAAM,EAAE,mBAAA,EAAA,GAAwB,QAAQ;AACxC,MAAM,YAAY,QAAQ,8FAAoB,OAAA;AAE9C,MAAA,uBAA6B,gBAAgB;IAC3C,YAAY,SAAA,CAAW;QACrB,KAAA;QACA,IAAA,CAAK,SAAA,GAAY;QACjB,IAAA,CAAK,iBAAA,GAAoB,IAAI,kBAAkB,IAAA,EAAM;QACrD,IAAA,CAAK,cAAA,GAAiB,IAAI,eAAe;YACvC,UAAU,IAAA;YACV;QAAA;QAEF,IAAA,CAAK,cAAA,GAAiB,IAAI,oBACxB,WACA,IAAA,CAAK,cAAA;IAAA;IAIT,qBAAqB;QACnB,OAAO;IAAA;AAAA;AAIX,eAAe,SAAA,CAAU,QAAA,GAAW,EAAE,KAAA,CACpC,EAAE,SAAA,CAAU,gBAAgB,SAAA,CAAU,QAAA,GACtC;IACE,aAAa;IACb,mBAAmB;IACnB,MAAM;IACN,UAAU;IACV,wCAAwC;IACxC,SAAS;IACT,SAAS;QACP,kBAAkB;QAClB,mBAAmB;IAAA;IAErB,OAAO;QACL,SAAS;QACT,QAAQ;QACR,QAAQ;QACR,MAAM;QACN,OAAO;IAAA;IAET,aAAa;QACX,gBAAgB;QAChB,OAAO;IAAA;IAET,eAAe;IACf,YAAY;IACZ,SAAS;IACT,UAAU;IACV,MAAM;IACN,QAAQ;AAAA;AAIZ,eAAe,SAAA,CAAU,cAAA,GAAiB;AAC1C,eAAe,SAAA,CAAU,KAAA,GAAQ;AACjC,eAAe,SAAA,CAAU,cAAA,GAAiB;AAC1C,eAAe,SAAA,CAAU,SAAA,GAAY;AACrC,eAAe,SAAA,CAAU,IAAA,GAAO;AAChC,eAAe,SAAA,CAAU,SAAA,GAAY;AACrC,eAAe,SAAA,CAAU,cAAA,GAAiB,eAAe,SAAA,CAAU,SAAA;AACnE,eAAe,SAAA,CAAU,eAAA,GAAkB,eAAe,SAAA,CAAU,SAAA;AAEpE,OAAO,OAAA,GAAU","ignoreList":[0]}},
    {"offset": {"line": 16564, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 16569, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/mssql/connection-manager.js"],"sourcesContent":["'use strict';\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst AsyncQueue = require('./async-queue').default;\nconst { logger } = require('../../utils/logger');\nconst sequelizeErrors = require('../../errors');\nconst DataTypes = require('../../data-types').mssql;\nconst parserStore = require('../parserStore')('mssql');\nconst debug = logger.debugContext('connection:mssql');\nconst debugTedious = logger.debugContext('connection:mssql:tedious');\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 1433;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule('tedious');\n    this.refreshTypeParser(DataTypes);\n  }\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  async connect(config) {\n    const connectionConfig = {\n      server: config.host,\n      authentication: {\n        type: 'default',\n        options: {\n          userName: config.username || undefined,\n          password: config.password || undefined\n        }\n      },\n      options: {\n        port: parseInt(config.port, 10),\n        database: config.database,\n        trustServerCertificate: true\n      }\n    };\n\n    if (config.dialectOptions) {\n      // only set port if no instance name was provided\n      if (\n        config.dialectOptions.options &&\n        config.dialectOptions.options.instanceName\n      ) {\n        delete connectionConfig.options.port;\n      }\n\n      if (config.dialectOptions.authentication) {\n        Object.assign(connectionConfig.authentication, config.dialectOptions.authentication);\n      }\n\n      Object.assign(connectionConfig.options, config.dialectOptions.options);\n    }\n\n    try {\n      return await new Promise((resolve, reject) => {\n        const connection = new this.lib.Connection(connectionConfig);\n        if (connection.state === connection.STATE.INITIALIZED) {\n          connection.connect();\n        }\n        connection.queue = new AsyncQueue();\n        connection.lib = this.lib;\n\n        const connectHandler = error => {\n          connection.removeListener('end', endHandler);\n          connection.removeListener('error', errorHandler);\n\n          if (error) return reject(error);\n\n          debug('connection acquired');\n          resolve(connection);\n        };\n\n        const endHandler = () => {\n          connection.removeListener('connect', connectHandler);\n          connection.removeListener('error', errorHandler);\n          reject(new Error('Connection was closed by remote server'));\n        };\n\n        const errorHandler = error => {\n          connection.removeListener('connect', connectHandler);\n          connection.removeListener('end', endHandler);\n          reject(error);\n        };\n\n        connection.once('error', errorHandler);\n        connection.once('end', endHandler);\n        connection.once('connect', connectHandler);\n\n        /*\n         * Permanently attach this event before connection is even acquired\n         * tedious sometime emits error even after connect(with error).\n         *\n         * If we dont attach this even that unexpected error event will crash node process\n         *\n         * E.g. connectTimeout is set higher than requestTimeout\n         */\n        connection.on('error', error => {\n          switch (error.code) {\n            case 'ESOCKET':\n            case 'ECONNRESET':\n              this.pool.destroy(connection);\n          }\n        });\n\n        if (config.dialectOptions && config.dialectOptions.debug) {\n          connection.on('debug', debugTedious.log.bind(debugTedious));\n        }\n      });\n    } catch (error) {\n      if (!error.code) {\n        throw new sequelizeErrors.ConnectionError(error);\n      }\n\n      switch (error.code) {\n        case 'ESOCKET':\n          if (error.message.includes('connect EHOSTUNREACH')) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n          if (error.message.includes('connect ENETUNREACH')) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n          if (error.message.includes('connect EADDRNOTAVAIL')) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n          if (error.message.includes('connect EAFNOSUPPORT')) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n          if (error.message.includes('getaddrinfo ENOTFOUND')) {\n            throw new sequelizeErrors.HostNotFoundError(error);\n          }\n          if (error.message.includes('connect ECONNREFUSED')) {\n            throw new sequelizeErrors.ConnectionRefusedError(error);\n          }\n          throw new sequelizeErrors.ConnectionError(error);\n        case 'ER_ACCESS_DENIED_ERROR':\n        case 'ELOGIN':\n          throw new sequelizeErrors.AccessDeniedError(error);\n        case 'EINVAL':\n          throw new sequelizeErrors.InvalidConnectionError(error);\n        default:\n          throw new sequelizeErrors.ConnectionError(error);\n      }\n    }\n  }\n\n  async disconnect(connection) {\n    // Don't disconnect a connection that is already disconnected\n    if (connection.closed) {\n      return;\n    }\n\n    connection.queue.close();\n\n    return new Promise(resolve => {\n      connection.on('end', resolve);\n      connection.close();\n      debug('connection closed');\n    });\n  }\n\n  validate(connection) {\n    return connection && (connection.loggedIn || connection.state.name === 'LoggedIn');\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 16708, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 16713, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/mssql/query.js"],"sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('mssql');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:mssql');\n\nconst minSafeIntegerAsBigInt = BigInt(Number.MIN_SAFE_INTEGER);\nconst maxSafeIntegerAsBigInt = BigInt(Number.MAX_SAFE_INTEGER);\n\nfunction getScale(aNum) {\n  if (!Number.isFinite(aNum)) return 0;\n  let e = 1;\n  while (Math.round(aNum * e) / e !== aNum) e *= 10;\n  return Math.log10(e);\n}\n\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return 'id';\n  }\n\n  getSQLTypeFromJsType(value, TYPES) {\n    const paramType = { type: TYPES.NVarChar, typeOptions: {}, value };\n    if (typeof value === 'number') {\n      if (Number.isInteger(value)) {\n        if (value >= -2147483648 && value <= 2147483647) {\n          paramType.type = TYPES.Int;\n        } else {\n          paramType.type = TYPES.BigInt;\n        }\n      } else {\n        paramType.type = TYPES.Numeric;\n        //Default to a reasonable numeric precision/scale pending more sophisticated logic\n        paramType.typeOptions = { precision: 30, scale: getScale(value) };\n      }\n    } else if (typeof value === 'bigint') {\n      if (value < minSafeIntegerAsBigInt || value > maxSafeIntegerAsBigInt) {\n        paramType.type = TYPES.VarChar;\n        paramType.value = value.toString();\n      } else {\n        return this.getSQLTypeFromJsType(Number(value), TYPES);\n      }\n    } else if (typeof value === 'boolean') {\n      paramType.type = TYPES.Bit;\n    }\n    if (Buffer.isBuffer(value)) {\n      paramType.type = TYPES.VarBinary;\n    }\n    return paramType;\n  }\n\n  async _run(connection, sql, parameters, errStack) {\n    this.sql = sql;\n    const { options } = this;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    const query = new Promise((resolve, reject) => {\n      // TRANSACTION SUPPORT\n      if (sql.startsWith('BEGIN TRANSACTION')) {\n        return connection.beginTransaction(error => error ? reject(error) : resolve([]), options.transaction.name, connection.lib.ISOLATION_LEVEL[options.isolationLevel]);\n      }\n      if (sql.startsWith('COMMIT TRANSACTION')) {\n        return connection.commitTransaction(error => error ? reject(error) : resolve([]));\n      }\n      if (sql.startsWith('ROLLBACK TRANSACTION')) {\n        return connection.rollbackTransaction(error => error ? reject(error) : resolve([]), options.transaction.name);\n      }\n      if (sql.startsWith('SAVE TRANSACTION')) {\n        return connection.saveTransaction(error => error ? reject(error) : resolve([]), options.transaction.name);\n      }\n\n      const rows = [];\n      const request = new connection.lib.Request(sql, (err, rowCount) => err ? reject(err) : resolve([rows, rowCount]));\n\n      if (parameters) {\n        _.forOwn(parameters, (value, key) => {\n          const paramType = this.getSQLTypeFromJsType(value, connection.lib.TYPES);\n          request.addParameter(key, paramType.type, value, paramType.typeOptions);\n        });\n      }\n\n      request.on('row', columns => {\n        rows.push(columns);\n      });\n\n      connection.execSql(request);\n    });\n\n    let rows, rowCount;\n\n    try {\n      [rows, rowCount] = await query;\n    } catch (err) {\n      err.sql = sql;\n      err.parameters = parameters;\n\n      throw this.formatError(err, errStack);\n    }\n\n    complete();\n\n    if (Array.isArray(rows)) {\n      rows = rows.map(columns => {\n        const row = {};\n        for (const column of columns) {\n          const typeid = column.metadata.type.id;\n          const parse = parserStore.get(typeid);\n          let value = column.value;\n\n          if (value !== null & !!parse) {\n            value = parse(value);\n          }\n          row[column.metadata.colName] = value;\n        }\n        return row;\n      });\n    }\n\n    return this.formatResults(rows, rowCount);\n  }\n\n  run(sql, parameters) {\n    const errForStack = new Error();\n    return this.connection.queue.enqueue(() =>\n      this._run(this.connection, sql, parameters, errForStack.stack)\n    );\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = {};\n    const replacementFunc = (match, key, values) => {\n      if (values[key] !== undefined) {\n        bindParam[key] = values[key];\n        return `@${key}`;\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n\n    return [sql, bindParam];\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   * @param {Array} data - The result of the query execution.\n   * @param {number} rowCount\n   * @private\n   * @example\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   */\n  formatResults(data, rowCount) {\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n      return [this.instance || data, rowCount];\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      const result = {};\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", '').replace(\"')\", '').replace(/'/g, '');\n        }\n\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === 'YES' ? true : false,\n          defaultValue: _result.Default,\n          primaryKey: _result.Constraint === 'PRIMARY KEY',\n          autoIncrement: _result.IsIdentity === 1,\n          comment: _result.Comment\n        };\n\n        if (\n          result[_result.Name].type.includes('CHAR')\n          && _result.Length\n        ) {\n          if (_result.Length === -1) {\n            result[_result.Name].type += '(MAX)';\n          } else {\n            result[_result.Name].type += `(${_result.Length})`;\n          }\n        }\n      }\n      return result;\n    }\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isBulkUpdateQuery()) {\n      if (this.options.returning) {\n        return this.handleSelectQuery(data);\n      }\n\n      return rowCount;\n    }\n    if (this.isBulkDeleteQuery()) {\n      return data[0] ? data[0].AFFECTEDROWS : 0;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n    if (this.isUpsertQuery()) {\n      // if this was an upsert and no data came back, that means the record exists, but the update was a noop.\n      // return the current instance and mark it as an \"not an insert\".\n      if (data && data.length === 0) {\n        return [this.instance || data, false];\n      }\n      this.handleInsertQuery(data);\n      return [this.instance || data, data[0].$action === 'INSERT'];\n    }\n    if (this.isUpdateQuery()) {\n      return [this.instance || data, rowCount];\n    }\n    if (this.isShowConstraintsQuery()) {\n      return this.handleShowConstraintsQuery(data);\n    }\n    if (this.isRawQuery()) {\n      return [data, rowCount];\n    }\n    return data;\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n\n  handleShowConstraintsQuery(data) {\n    //Convert snake_case keys to camelCase as it's generated by stored procedure\n    return data.slice(1).map(result => {\n      const constraint = {};\n      for (const key in result) {\n        constraint[_.camelCase(key)] = result[key];\n      }\n      return constraint;\n    });\n  }\n\n  formatError(err, errStack) {\n    let match;\n\n    match = err.message.match(/Violation of (?:UNIQUE|PRIMARY) KEY constraint '([^']*)'. Cannot insert duplicate key in object '.*'.(:? The duplicate key value is \\((.*)\\).)?/);\n    match = match || err.message.match(/Cannot insert duplicate key row in object .* with unique index '(.*)'/);\n    if (match && match.length > 1) {\n      let fields = {};\n      const uniqueKey = this.model && this.model.uniqueKeys[match[1]];\n      let message = 'Validation error';\n\n      if (uniqueKey && !!uniqueKey.msg) {\n        message = uniqueKey.msg;\n      }\n      if (match[3]) {\n        const values = match[3].split(',').map(part => part.trim());\n        if (uniqueKey) {\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[match[1]] = match[3];\n        }\n      }\n\n      const errors = [];\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(\n          this.getUniqueConstraintErrorMessage(field),\n          'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n          field,\n          value,\n          this.instance,\n          'not_unique'\n        ));\n      });\n\n      return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n    }\n\n    match = err.message.match(/Failed on step '(.*)'.Could not create constraint. See previous errors./) ||\n      err.message.match(/The DELETE statement conflicted with the REFERENCE constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./) ||\n      err.message.match(/The (?:INSERT|MERGE|UPDATE) statement conflicted with the FOREIGN KEY constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./);\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    match = err.message.match(/Could not drop constraint. See previous errors./);\n    if (match && match.length > 0) {\n      let constraint = err.sql.match(/(?:constraint|index) \\[(.+?)\\]/i);\n      constraint = constraint ? constraint[1] : undefined;\n      let table = err.sql.match(/table \\[(.+?)\\]/i);\n      table = table ? table[1] : undefined;\n\n      return new sequelizeErrors.UnknownConstraintError({\n        message: match[1],\n        constraint,\n        table,\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\");\n    result = result || this.sql.toLowerCase().startsWith('select tablename = t.name, name = ind.name,');\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n\n    return result;\n  }\n\n  isShowIndexesQuery() {\n    return this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = data.reduce((acc, item) => {\n      if (!(item.index_name in acc)) {\n        acc[item.index_name] = item;\n        item.fields = [];\n      }\n\n      item.index_keys.split(',').forEach(column => {\n        let columnName = column.trim();\n        if (columnName.includes('(-)')) {\n          columnName = columnName.replace('(-)', '');\n        }\n\n        acc[item.index_name].fields.push({\n          attribute: columnName,\n          length: undefined,\n          order: column.includes('(-)') ? 'DESC' : 'ASC',\n          collate: undefined\n        });\n      });\n      delete item.index_keys;\n      return acc;\n    }, {});\n\n    return _.map(data, item => ({\n      primary: item.index_name.toLowerCase().startsWith('pk'),\n      fields: item.fields,\n      name: item.index_name,\n      tableName: undefined,\n      unique: item.index_description.toLowerCase().includes('unique'),\n      type: undefined\n    }));\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) &&\n        this.model.rawAttributes[autoIncrementAttribute].field !== undefined)\n        autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n\n      this.instance[autoIncrementAttribute] = id;\n\n      if (this.instance.dataValues) {\n        for (const key in results[0]) {\n          if (Object.prototype.hasOwnProperty.call(results[0], key)) {\n            const record = results[0][key];\n\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n\n    }\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 17076, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 17081, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/mssql/query-generator.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Utils = require('../../utils');\nconst DataTypes = require('../../data-types');\nconst TableHints = require('../../table-hints');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\nconst randomBytes = require('crypto').randomBytes;\nconst semver = require('semver');\nconst Op = require('../../operators');\n\n/* istanbul ignore next */\nconst throwMethodUndefined = function(methodName) {\n  throw new Error(`The method \"${methodName}\" is not defined! Please add it to your sql dialect.`);\n};\n\nclass MSSQLQueryGenerator extends AbstractQueryGenerator {\n  createDatabaseQuery(databaseName, options) {\n    options = { collate: null, ...options };\n\n    const collation = options.collate ? `COLLATE ${this.escape(options.collate)}` : '';\n\n    return [\n      'IF NOT EXISTS (SELECT * FROM sys.databases WHERE name =', wrapSingleQuote(databaseName), ')',\n      'BEGIN',\n      'CREATE DATABASE', this.quoteIdentifier(databaseName),\n      `${collation};`,\n      'END;'\n    ].join(' ');\n  }\n\n  dropDatabaseQuery(databaseName) {\n    return [\n      'IF EXISTS (SELECT * FROM sys.databases WHERE name =', wrapSingleQuote(databaseName), ')',\n      'BEGIN',\n      'DROP DATABASE', this.quoteIdentifier(databaseName), ';',\n      'END;'\n    ].join(' ');\n  }\n\n  createSchema(schema) {\n    return [\n      'IF NOT EXISTS (SELECT schema_name',\n      'FROM information_schema.schemata',\n      'WHERE schema_name =', wrapSingleQuote(schema), ')',\n      'BEGIN',\n      \"EXEC sp_executesql N'CREATE SCHEMA\",\n      this.quoteIdentifier(schema),\n      \";'\",\n      'END;'\n    ].join(' ');\n  }\n\n  dropSchema(schema) {\n    // Mimics Postgres CASCADE, will drop objects belonging to the schema\n    const quotedSchema = wrapSingleQuote(schema);\n    return [\n      'IF EXISTS (SELECT schema_name',\n      'FROM information_schema.schemata',\n      'WHERE schema_name =', quotedSchema, ')',\n      'BEGIN',\n      'DECLARE @id INT, @ms_sql NVARCHAR(2000);',\n      'DECLARE @cascade TABLE (',\n      'id INT NOT NULL IDENTITY PRIMARY KEY,',\n      'ms_sql NVARCHAR(2000) NOT NULL );',\n      'INSERT INTO @cascade ( ms_sql )',\n      \"SELECT CASE WHEN o.type IN ('F','PK')\",\n      \"THEN N'ALTER TABLE ['+ s.name + N'].[' + p.name + N'] DROP CONSTRAINT [' + o.name + N']'\",\n      \"ELSE N'DROP TABLE ['+ s.name + N'].[' + o.name + N']' END\",\n      'FROM sys.objects o',\n      'JOIN sys.schemas s on o.schema_id = s.schema_id',\n      'LEFT OUTER JOIN sys.objects p on o.parent_object_id = p.object_id',\n      \"WHERE o.type IN ('F', 'PK', 'U') AND s.name = \", quotedSchema,\n      'ORDER BY o.type ASC;',\n      'SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;',\n      'WHILE @id IS NOT NULL',\n      'BEGIN',\n      'BEGIN TRY EXEC sp_executesql @ms_sql; END TRY',\n      'BEGIN CATCH BREAK; THROW; END CATCH;',\n      'DELETE FROM @cascade WHERE id = @id;',\n      'SELECT @id = NULL, @ms_sql = NULL;',\n      'SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;',\n      'END',\n      \"EXEC sp_executesql N'DROP SCHEMA\", this.quoteIdentifier(schema), \";'\",\n      'END;'\n    ].join(' ');\n  }\n\n  showSchemasQuery() {\n    return [\n      'SELECT \"name\" as \"schema_name\" FROM sys.schemas as s',\n      'WHERE \"s\".\"name\" NOT IN (',\n      \"'INFORMATION_SCHEMA', 'dbo', 'guest', 'sys', 'archive'\",\n      ')', 'AND', '\"s\".\"name\" NOT LIKE', \"'db_%'\"\n    ].join(' ');\n  }\n\n  versionQuery() {\n    // Uses string manipulation to convert the MS Maj.Min.Patch.Build to semver Maj.Min.Patch\n    return [\n      'DECLARE @ms_ver NVARCHAR(20);',\n      \"SET @ms_ver = REVERSE(CONVERT(NVARCHAR(20), SERVERPROPERTY('ProductVersion')));\",\n      \"SELECT REVERSE(SUBSTRING(@ms_ver, CHARINDEX('.', @ms_ver)+1, 20)) AS 'version'\"\n    ].join(' ');\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    const primaryKeys = [],\n      foreignKeys = {},\n      attributesClauseParts = [];\n\n    let commentStr = '';\n\n    for (const attr in attributes) {\n      if (Object.prototype.hasOwnProperty.call(attributes, attr)) {\n        let dataType = attributes[attr];\n        let match;\n\n        if (dataType.includes('COMMENT ')) {\n          const commentMatch = dataType.match(/^(.+) (COMMENT.*)$/);\n          const commentText = commentMatch[2].replace('COMMENT', '').trim();\n          commentStr += this.commentTemplate(commentText, tableName, attr);\n          // remove comment related substring from dataType\n          dataType = commentMatch[1];\n        }\n\n        if (dataType.includes('PRIMARY KEY')) {\n          primaryKeys.push(attr);\n\n          if (dataType.includes('REFERENCES')) {\n            // MSSQL doesn't support inline REFERENCES declarations: move to the end\n            match = dataType.match(/^(.+) (REFERENCES.*)$/);\n            attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${match[1].replace('PRIMARY KEY', '')}`);\n            foreignKeys[attr] = match[2];\n          } else {\n            attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${dataType.replace('PRIMARY KEY', '')}`);\n          }\n        } else if (dataType.includes('REFERENCES')) {\n          // MSSQL doesn't support inline REFERENCES declarations: move to the end\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${match[1]}`);\n          foreignKeys[attr] = match[2];\n        } else {\n          attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${dataType}`);\n        }\n      }\n    }\n\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, (columns, indexName) => {\n        if (columns.customIndex) {\n          if (typeof indexName !== 'string') {\n            indexName = `uniq_${tableName}_${columns.fields.join('_')}`;\n          }\n          attributesClauseParts.push(`CONSTRAINT ${\n            this.quoteIdentifier(indexName)\n          } UNIQUE (${\n            columns.fields.map(field => this.quoteIdentifier(field)).join(', ')\n          })`);\n        }\n      });\n    }\n\n    if (pkString.length > 0) {\n      attributesClauseParts.push(`PRIMARY KEY (${pkString})`);\n    }\n\n    for (const fkey in foreignKeys) {\n      if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {\n        attributesClauseParts.push(`FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`);\n      }\n    }\n\n    const quotedTableName = this.quoteTable(tableName);\n\n    return Utils.joinSQLFragments([\n      `IF OBJECT_ID('${quotedTableName}', 'U') IS NULL`,\n      `CREATE TABLE ${quotedTableName} (${attributesClauseParts.join(', ')})`,\n      ';',\n      commentStr\n    ]);\n  }\n\n  describeTableQuery(tableName, schema) {\n    let sql = [\n      'SELECT',\n      \"c.COLUMN_NAME AS 'Name',\",\n      \"c.DATA_TYPE AS 'Type',\",\n      \"c.CHARACTER_MAXIMUM_LENGTH AS 'Length',\",\n      \"c.IS_NULLABLE as 'IsNull',\",\n      \"COLUMN_DEFAULT AS 'Default',\",\n      \"pk.CONSTRAINT_TYPE AS 'Constraint',\",\n      \"COLUMNPROPERTY(OBJECT_ID('[' + c.TABLE_SCHEMA + '].[' + c.TABLE_NAME + ']'), c.COLUMN_NAME, 'IsIdentity') as 'IsIdentity',\",\n      \"CAST(prop.value AS NVARCHAR) AS 'Comment'\",\n      'FROM',\n      'INFORMATION_SCHEMA.TABLES t',\n      'INNER JOIN',\n      'INFORMATION_SCHEMA.COLUMNS c ON t.TABLE_NAME = c.TABLE_NAME AND t.TABLE_SCHEMA = c.TABLE_SCHEMA',\n      'LEFT JOIN (SELECT tc.table_schema, tc.table_name, ',\n      'cu.column_name, tc.CONSTRAINT_TYPE ',\n      'FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc ',\n      'JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE  cu ',\n      'ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name ',\n      'and tc.constraint_name=cu.constraint_name ',\n      'and tc.CONSTRAINT_TYPE=\\'PRIMARY KEY\\') pk ',\n      'ON pk.table_schema=c.table_schema ',\n      'AND pk.table_name=c.table_name ',\n      'AND pk.column_name=c.column_name ',\n      'INNER JOIN sys.columns AS sc',\n      \"ON sc.object_id = OBJECT_ID('[' + t.TABLE_SCHEMA + '].[' + t.TABLE_NAME + ']') AND sc.name = c.column_name\",\n      'LEFT JOIN sys.extended_properties prop ON prop.major_id = sc.object_id',\n      'AND prop.minor_id = sc.column_id',\n      \"AND prop.name = 'MS_Description'\",\n      'WHERE t.TABLE_NAME =', wrapSingleQuote(tableName)\n    ].join(' ');\n\n    if (schema) {\n      sql += `AND t.TABLE_SCHEMA =${wrapSingleQuote(schema)}`;\n    }\n\n    return sql;\n  }\n\n  renameTableQuery(before, after) {\n    return `EXEC sp_rename ${this.quoteTable(before)}, ${this.quoteTable(after)};`;\n  }\n\n  showTablesQuery() {\n    return \"SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE';\";\n  }\n\n  tableExistsQuery(table) {\n    const tableName = table.tableName || table;\n    const schemaName = table.schema || 'dbo';\n\n    return `SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = ${this.escape(tableName)} AND TABLE_SCHEMA = ${this.escape(schemaName)}`;\n  }\n\n  dropTableQuery(tableName) {\n    const quoteTbl = this.quoteTable(tableName);\n    return Utils.joinSQLFragments([\n      `IF OBJECT_ID('${quoteTbl}', 'U') IS NOT NULL`,\n      'DROP TABLE',\n      quoteTbl,\n      ';'\n    ]);\n  }\n\n  addColumnQuery(table, key, dataType) {\n    // FIXME: attributeToSQL SHOULD be using attributes in addColumnQuery\n    //        but instead we need to pass the key along as the field here\n    dataType.field = key;\n    let commentStr = '';\n\n    if (dataType.comment && _.isString(dataType.comment)) {\n      commentStr = this.commentTemplate(dataType.comment, table, key);\n      // attributeToSQL will try to include `COMMENT 'Comment Text'` when it returns if the comment key\n      // is present. This is needed for createTable statement where that part is extracted with regex.\n      // Here we can intercept the object and remove comment property since we have the original object.\n      delete dataType['comment'];\n    }\n\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(table),\n      'ADD',\n      this.quoteIdentifier(key),\n      this.attributeToSQL(dataType, { context: 'addColumn' }),\n      ';',\n      commentStr\n    ]);\n  }\n\n  commentTemplate(comment, table, column) {\n    return ' EXEC sp_addextendedproperty ' +\n        `@name = N'MS_Description', @value = ${this.escape(comment)}, ` +\n        '@level0type = N\\'Schema\\', @level0name = \\'dbo\\', ' +\n        `@level1type = N'Table', @level1name = ${this.quoteIdentifier(table)}, ` +\n        `@level2type = N'Column', @level2name = ${this.quoteIdentifier(column)};`;\n  }\n\n  removeColumnQuery(tableName, attributeName) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP COLUMN',\n      this.quoteIdentifier(attributeName),\n      ';'\n    ]);\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const attrString = [],\n      constraintString = [];\n    let commentString = '';\n\n    for (const attributeName in attributes) {\n      const quotedAttrName = this.quoteIdentifier(attributeName);\n      let definition = attributes[attributeName];\n      if (definition.includes('COMMENT ')) {\n        const commentMatch = definition.match(/^(.+) (COMMENT.*)$/);\n        const commentText = commentMatch[2].replace('COMMENT', '').trim();\n        commentString += this.commentTemplate(commentText, tableName, attributeName);\n        // remove comment related substring from dataType\n        definition = commentMatch[1];\n      }\n      if (definition.includes('REFERENCES')) {\n        constraintString.push(`FOREIGN KEY (${quotedAttrName}) ${definition.replace(/.+?(?=REFERENCES)/, '')}`);\n      } else {\n        attrString.push(`${quotedAttrName} ${definition}`);\n      }\n    }\n\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      attrString.length && `ALTER COLUMN ${attrString.join(', ')}`,\n      constraintString.length && `ADD ${constraintString.join(', ')}`,\n      ';',\n      commentString\n    ]);\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const newName = Object.keys(attributes)[0];\n    return Utils.joinSQLFragments([\n      'EXEC sp_rename',\n      `'${this.quoteTable(tableName)}.${attrBefore}',`,\n      `'${newName}',`,\n      \"'COLUMN'\",\n      ';'\n    ]);\n  }\n\n  bulkInsertQuery(tableName, attrValueHashes, options, attributes) {\n    const quotedTable = this.quoteTable(tableName);\n    options = options || {};\n    attributes = attributes || {};\n\n    const tuples = [];\n    const allAttributes = [];\n    const allQueries = [];\n\n    let needIdentityInsertWrapper = false,\n      outputFragment = '';\n\n    if (options.returning) {\n      const returnValues = this.generateReturnValues(attributes, options);\n\n      outputFragment = returnValues.outputFragment;\n    }\n\n    const emptyQuery = `INSERT INTO ${quotedTable}${outputFragment} DEFAULT VALUES`;\n\n    attrValueHashes.forEach(attrValueHash => {\n      // special case for empty objects with primary keys\n      const fields = Object.keys(attrValueHash);\n      const firstAttr = attributes[fields[0]];\n      if (fields.length === 1 && firstAttr && firstAttr.autoIncrement && attrValueHash[fields[0]] === null) {\n        allQueries.push(emptyQuery);\n        return;\n      }\n\n      // normal case\n      _.forOwn(attrValueHash, (value, key) => {\n        if (value !== null && attributes[key] && attributes[key].autoIncrement) {\n          needIdentityInsertWrapper = true;\n        }\n\n        if (!allAttributes.includes(key)) {\n          if (value === null && attributes[key] && attributes[key].autoIncrement)\n            return;\n\n          allAttributes.push(key);\n        }\n      });\n    });\n\n    if (allAttributes.length > 0) {\n      attrValueHashes.forEach(attrValueHash => {\n        tuples.push(`(${\n          allAttributes.map(key =>\n            this.escape(attrValueHash[key])).join(',')\n        })`);\n      });\n\n      const quotedAttributes = allAttributes.map(attr => this.quoteIdentifier(attr)).join(',');\n      allQueries.push(tupleStr => `INSERT INTO ${quotedTable} (${quotedAttributes})${outputFragment} VALUES ${tupleStr};`);\n    }\n    const commands = [];\n    let offset = 0;\n    const batch = Math.floor(250 / (allAttributes.length + 1)) + 1;\n    while (offset < Math.max(tuples.length, 1)) {\n      const tupleStr = tuples.slice(offset, Math.min(tuples.length, offset + batch));\n      let generatedQuery = allQueries.map(v => typeof v === 'string' ? v : v(tupleStr)).join(';');\n      if (needIdentityInsertWrapper) {\n        generatedQuery = `SET IDENTITY_INSERT ${quotedTable} ON; ${generatedQuery}; SET IDENTITY_INSERT ${quotedTable} OFF;`;\n      }\n      commands.push(generatedQuery);\n      offset += batch;\n    }\n    return commands.join(';');\n  }\n\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    const sql = super.updateQuery(tableName, attrValueHash, where, options, attributes);\n    if (options.limit) {\n      const updateArgs = `UPDATE TOP(${this.escape(options.limit)})`;\n      sql.query = sql.query.replace('UPDATE', updateArgs);\n    }\n    return sql;\n  }\n\n  upsertQuery(tableName, insertValues, updateValues, where, model) {\n    const targetTableAlias = this.quoteTable(`${tableName}_target`);\n    const sourceTableAlias = this.quoteTable(`${tableName}_source`);\n    const primaryKeysAttrs = [];\n    const identityAttrs = [];\n    const uniqueAttrs = [];\n    const tableNameQuoted = this.quoteTable(tableName);\n    let needIdentityInsertWrapper = false;\n\n    //Obtain primaryKeys, uniquekeys and identity attrs from rawAttributes as model is not passed\n    for (const key in model.rawAttributes) {\n      if (model.rawAttributes[key].primaryKey) {\n        primaryKeysAttrs.push(model.rawAttributes[key].field || key);\n      }\n      if (model.rawAttributes[key].unique) {\n        uniqueAttrs.push(model.rawAttributes[key].field || key);\n      }\n      if (model.rawAttributes[key].autoIncrement) {\n        identityAttrs.push(model.rawAttributes[key].field || key);\n      }\n    }\n\n    //Add unique indexes defined by indexes option to uniqueAttrs\n    for (const index of model._indexes) {\n      if (index.unique && index.fields) {\n        for (const field of index.fields) {\n          const fieldName = typeof field === 'string' ? field : field.name || field.attribute;\n          if (!uniqueAttrs.includes(fieldName) && model.rawAttributes[fieldName]) {\n            uniqueAttrs.push(fieldName);\n          }\n        }\n      }\n    }\n\n    const updateKeys = Object.keys(updateValues);\n    const insertKeys = Object.keys(insertValues);\n    const insertKeysQuoted = insertKeys.map(key => this.quoteIdentifier(key)).join(', ');\n    const insertValuesEscaped = insertKeys.map(key => this.escape(insertValues[key])).join(', ');\n    const sourceTableQuery = `VALUES(${insertValuesEscaped})`; //Virtual Table\n    let joinCondition;\n\n    //IDENTITY_INSERT Condition\n    identityAttrs.forEach(key => {\n      if (insertValues[key] && insertValues[key] !== null) {\n        needIdentityInsertWrapper = true;\n        /*\n         * IDENTITY_INSERT Column Cannot be updated, only inserted\n         * http://stackoverflow.com/a/30176254/2254360\n         */\n      }\n    });\n\n    //Filter NULL Clauses\n    const clauses = where[Op.or].filter(clause => {\n      let valid = true;\n      /*\n       * Exclude NULL Composite PK/UK. Partial Composite clauses should also be excluded as it doesn't guarantee a single row\n       */\n      for (const key in clause) {\n        if (typeof clause[key] === 'undefined' || clause[key] == null) {\n          valid = false;\n          break;\n        }\n      }\n      return valid;\n    });\n\n    /*\n     * Generate ON condition using PK(s).\n     * If not, generate using UK(s). Else throw error\n     */\n    const getJoinSnippet = array => {\n      return array.map(key => {\n        key = this.quoteIdentifier(key);\n        return `${targetTableAlias}.${key} = ${sourceTableAlias}.${key}`;\n      });\n    };\n\n    if (clauses.length === 0) {\n      throw new Error('Primary Key or Unique key should be passed to upsert query');\n    } else {\n      // Search for primary key attribute in clauses -- Model can have two separate unique keys\n      for (const key in clauses) {\n        const keys = Object.keys(clauses[key]);\n        if (primaryKeysAttrs.includes(keys[0])) {\n          joinCondition = getJoinSnippet(primaryKeysAttrs).join(' AND ');\n          break;\n        }\n      }\n      if (!joinCondition) {\n        joinCondition = getJoinSnippet(uniqueAttrs).join(' AND ');\n      }\n    }\n\n    // Remove the IDENTITY_INSERT Column from update\n    const filteredUpdateClauses = updateKeys.filter(key => !identityAttrs.includes(key))\n      .map(key => {\n        const value = this.escape(updateValues[key]);\n        key = this.quoteIdentifier(key);\n        return `${targetTableAlias}.${key} = ${value}`;\n      });\n    const updateSnippet = filteredUpdateClauses.length > 0 ? `WHEN MATCHED THEN UPDATE SET ${filteredUpdateClauses.join(', ')}` : '';\n\n    const insertSnippet = `(${insertKeysQuoted}) VALUES(${insertValuesEscaped})`;\n\n    let query = `MERGE INTO ${tableNameQuoted} WITH(HOLDLOCK) AS ${targetTableAlias} USING (${sourceTableQuery}) AS ${sourceTableAlias}(${insertKeysQuoted}) ON ${joinCondition}`;\n    query += ` ${updateSnippet} WHEN NOT MATCHED THEN INSERT ${insertSnippet} OUTPUT $action, INSERTED.*;`;\n    if (needIdentityInsertWrapper) {\n      query = `SET IDENTITY_INSERT ${tableNameQuoted} ON; ${query} SET IDENTITY_INSERT ${tableNameQuoted} OFF;`;\n    }\n    return query;\n  }\n\n  truncateTableQuery(tableName) {\n    return `TRUNCATE TABLE ${this.quoteTable(tableName)}`;\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    const table = this.quoteTable(tableName);\n    const whereClause = this.getWhereConditions(where, null, model, options);\n\n    return Utils.joinSQLFragments([\n      'DELETE',\n      options.limit && `TOP(${this.escape(options.limit)})`,\n      'FROM',\n      table,\n      whereClause && `WHERE ${whereClause}`,\n      ';',\n      'SELECT @@ROWCOUNT AS AFFECTEDROWS',\n      ';'\n    ]);\n  }\n\n  showIndexesQuery(tableName) {\n    return `EXEC sys.sp_helpindex @objname = N'${this.quoteTable(tableName)}';`;\n  }\n\n  showConstraintsQuery(tableName) {\n    return `EXEC sp_helpconstraint @objname = ${this.escape(this.quoteTable(tableName))};`;\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return `DROP INDEX ${this.quoteIdentifiers(indexName)} ON ${this.quoteIdentifiers(tableName)}`;\n  }\n\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    // handle self referential constraints\n    if (attribute.references) {\n\n      if (attribute.Model && attribute.Model.tableName === attribute.references.model) {\n        this.sequelize.log('MSSQL does not support self referencial constraints, '\n          + 'we will remove it but we recommend restructuring your query');\n        attribute.onDelete = '';\n        attribute.onUpdate = '';\n      }\n    }\n\n    let template;\n\n    if (attribute.type instanceof DataTypes.ENUM) {\n      if (attribute.type.values && !attribute.values) attribute.values = attribute.type.values;\n\n      // enums are a special case\n      template = attribute.type.toSql();\n      template += ` CHECK (${this.quoteIdentifier(attribute.field)} IN(${attribute.values.map(value => {\n        return this.escape(value);\n      }).join(', ') }))`;\n      return template;\n    }\n    template = attribute.type.toString();\n\n    if (attribute.allowNull === false) {\n      template += ' NOT NULL';\n    } else if (!attribute.primaryKey && !Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ' NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      template += ' IDENTITY(1,1)';\n    }\n\n    // Blobs/texts cannot have a defaultValue\n    if (attribute.type !== 'TEXT' && attribute.type._binary !== true &&\n        Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;\n    }\n\n    if (attribute.unique === true) {\n      template += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      template += ' PRIMARY KEY';\n    }\n\n    if ((!options || !options.withoutForeignKeyConstraints) && attribute.references) {\n      template += ` REFERENCES ${this.quoteTable(attribute.references.model)}`;\n\n      if (attribute.references.key) {\n        template += ` (${this.quoteIdentifier(attribute.references.key)})`;\n      } else {\n        template += ` (${this.quoteIdentifier('id')})`;\n      }\n\n      if (attribute.onDelete) {\n        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n\n      if (attribute.onUpdate) {\n        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n    }\n\n    if (attribute.comment && typeof attribute.comment === 'string') {\n      template += ` COMMENT ${attribute.comment}`;\n    }\n\n    return template;\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {},\n      existingConstraints = [];\n    let key,\n      attribute;\n\n    for (key in attributes) {\n      attribute = attributes[key];\n\n      if (attribute.references) {\n        if (existingConstraints.includes(attribute.references.model.toString())) {\n          // no cascading constraints to a table more than once\n          attribute.onDelete = '';\n          attribute.onUpdate = '';\n        } else {\n          existingConstraints.push(attribute.references.model.toString());\n\n          // NOTE: this really just disables cascading updates for all\n          //       definitions. Can be made more robust to support the\n          //       few cases where MSSQL actually supports them\n          attribute.onUpdate = '';\n        }\n\n      }\n\n      if (key && !attribute.field) attribute.field = key;\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n\n    return result;\n  }\n\n  createTrigger() {\n    throwMethodUndefined('createTrigger');\n  }\n\n  dropTrigger() {\n    throwMethodUndefined('dropTrigger');\n  }\n\n  renameTrigger() {\n    throwMethodUndefined('renameTrigger');\n  }\n\n  createFunction() {\n    throwMethodUndefined('createFunction');\n  }\n\n  dropFunction() {\n    throwMethodUndefined('dropFunction');\n  }\n\n  renameFunction() {\n    throwMethodUndefined('renameFunction');\n  }\n\n  /**\n   * Generate common SQL prefix for ForeignKeysQuery.\n   *\n   * @param {string} catalogName\n   * @returns {string}\n   */\n  _getForeignKeysQueryPrefix(catalogName) {\n    return `${'SELECT ' +\n        'constraint_name = OBJ.NAME, ' +\n        'constraintName = OBJ.NAME, '}${\n      catalogName ? `constraintCatalog = '${catalogName}', ` : ''\n    }constraintSchema = SCHEMA_NAME(OBJ.SCHEMA_ID), ` +\n        'tableName = TB.NAME, ' +\n        `tableSchema = SCHEMA_NAME(TB.SCHEMA_ID), ${\n          catalogName ? `tableCatalog = '${catalogName}', ` : ''\n        }columnName = COL.NAME, ` +\n        `referencedTableSchema = SCHEMA_NAME(RTB.SCHEMA_ID), ${\n          catalogName ? `referencedCatalog = '${catalogName}', ` : ''\n        }referencedTableName = RTB.NAME, ` +\n        'referencedColumnName = RCOL.NAME ' +\n      'FROM sys.foreign_key_columns FKC ' +\n        'INNER JOIN sys.objects OBJ ON OBJ.OBJECT_ID = FKC.CONSTRAINT_OBJECT_ID ' +\n        'INNER JOIN sys.tables TB ON TB.OBJECT_ID = FKC.PARENT_OBJECT_ID ' +\n        'INNER JOIN sys.columns COL ON COL.COLUMN_ID = PARENT_COLUMN_ID AND COL.OBJECT_ID = TB.OBJECT_ID ' +\n        'INNER JOIN sys.tables RTB ON RTB.OBJECT_ID = FKC.REFERENCED_OBJECT_ID ' +\n        'INNER JOIN sys.columns RCOL ON RCOL.COLUMN_ID = REFERENCED_COLUMN_ID AND RCOL.OBJECT_ID = RTB.OBJECT_ID';\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys details of a table.\n   *\n   * @param {string|object} table\n   * @param {string} catalogName database name\n   * @returns {string}\n   */\n  getForeignKeysQuery(table, catalogName) {\n    const tableName = table.tableName || table;\n    let sql = `${this._getForeignKeysQueryPrefix(catalogName)\n    } WHERE TB.NAME =${wrapSingleQuote(tableName)}`;\n\n    if (table.schema) {\n      sql += ` AND SCHEMA_NAME(TB.SCHEMA_ID) =${wrapSingleQuote(table.schema)}`;\n    }\n    return sql;\n  }\n\n  getForeignKeyQuery(table, attributeName) {\n    const tableName = table.tableName || table;\n    return Utils.joinSQLFragments([\n      this._getForeignKeysQueryPrefix(),\n      'WHERE',\n      `TB.NAME =${wrapSingleQuote(tableName)}`,\n      'AND',\n      `COL.NAME =${wrapSingleQuote(attributeName)}`,\n      table.schema && `AND SCHEMA_NAME(TB.SCHEMA_ID) =${wrapSingleQuote(table.schema)}`\n    ]);\n  }\n\n  getPrimaryKeyConstraintQuery(table, attributeName) {\n    const tableName = wrapSingleQuote(table.tableName || table);\n    return Utils.joinSQLFragments([\n      'SELECT K.TABLE_NAME AS tableName,',\n      'K.COLUMN_NAME AS columnName,',\n      'K.CONSTRAINT_NAME AS constraintName',\n      'FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS C',\n      'JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS K',\n      'ON C.TABLE_NAME = K.TABLE_NAME',\n      'AND C.CONSTRAINT_CATALOG = K.CONSTRAINT_CATALOG',\n      'AND C.CONSTRAINT_SCHEMA = K.CONSTRAINT_SCHEMA',\n      'AND C.CONSTRAINT_NAME = K.CONSTRAINT_NAME',\n      'WHERE C.CONSTRAINT_TYPE = \\'PRIMARY KEY\\'',\n      `AND K.COLUMN_NAME = ${wrapSingleQuote(attributeName)}`,\n      `AND K.TABLE_NAME = ${tableName}`,\n      ';'\n    ]);\n  }\n\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP',\n      this.quoteIdentifier(foreignKey)\n    ]);\n  }\n\n  getDefaultConstraintQuery(tableName, attributeName) {\n    const quotedTable = this.quoteTable(tableName);\n    return Utils.joinSQLFragments([\n      'SELECT name FROM sys.default_constraints',\n      `WHERE PARENT_OBJECT_ID = OBJECT_ID('${quotedTable}', 'U')`,\n      `AND PARENT_COLUMN_ID = (SELECT column_id FROM sys.columns WHERE NAME = ('${attributeName}')`,\n      `AND object_id = OBJECT_ID('${quotedTable}', 'U'))`,\n      ';'\n    ]);\n  }\n\n  dropConstraintQuery(tableName, constraintName) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP CONSTRAINT',\n      this.quoteIdentifier(constraintName),\n      ';'\n    ]);\n  }\n\n  setIsolationLevelQuery() {\n\n  }\n\n  generateTransactionId() {\n    return randomBytes(10).toString('hex');\n  }\n\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `SAVE TRANSACTION ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return 'BEGIN TRANSACTION;';\n  }\n\n  commitTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return;\n    }\n\n    return 'COMMIT TRANSACTION;';\n  }\n\n  rollbackTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `ROLLBACK TRANSACTION ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return 'ROLLBACK TRANSACTION;';\n  }\n\n  selectFromTableFragment(options, model, attributes, tables, mainTableAs, where) {\n    this._throwOnEmptyAttributes(attributes, { modelName: model && model.name, as: mainTableAs });\n\n    const dbVersion = this.sequelize.options.databaseVersion;\n    const isSQLServer2008 = semver.valid(dbVersion) && semver.lt(dbVersion, '11.0.0');\n\n    if (isSQLServer2008 && options.offset) {\n      // For earlier versions of SQL server, we need to nest several queries\n      // in order to emulate the OFFSET behavior.\n      //\n      // 1. The outermost query selects all items from the inner query block.\n      //    This is due to a limitation in SQL server with the use of computed\n      //    columns (e.g. SELECT ROW_NUMBER()...AS x) in WHERE clauses.\n      // 2. The next query handles the LIMIT and OFFSET behavior by getting\n      //    the TOP N rows of the query where the row number is > OFFSET\n      // 3. The innermost query is the actual set we want information from\n\n      const offset = options.offset || 0;\n      const isSubQuery = options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation;\n      let orders = { mainQueryOrder: [] };\n      if (options.order) {\n        orders = this.getQueryOrders(options, model, isSubQuery);\n      }\n\n      if (orders.mainQueryOrder.length === 0) {\n        orders.mainQueryOrder.push(this.quoteIdentifier(model.primaryKeyField));\n      }\n\n      const tmpTable = mainTableAs || 'OffsetTable';\n\n      if (options.include) {\n        const subQuery = options.subQuery === undefined ? options.limit && options.hasMultiAssociation : options.subQuery;\n        const mainTable = {\n          name: mainTableAs,\n          quotedName: null,\n          as: null,\n          model\n        };\n        const topLevelInfo = {\n          names: mainTable,\n          options,\n          subQuery\n        };\n\n        let mainJoinQueries = [];\n        for (const include of options.include) {\n          if (include.separate) {\n            continue;\n          }\n          const joinQueries = this.generateInclude(include, { externalAs: mainTableAs, internalAs: mainTableAs }, topLevelInfo);\n          mainJoinQueries = mainJoinQueries.concat(joinQueries.mainQuery);\n        }\n\n        return Utils.joinSQLFragments([\n          'SELECT TOP 100 PERCENT',\n          attributes.join(', '),\n          'FROM (',\n          [\n            'SELECT',\n            options.limit && `TOP ${options.limit}`,\n            '* FROM (',\n            [\n              'SELECT ROW_NUMBER() OVER (',\n              [\n                'ORDER BY',\n                orders.mainQueryOrder.join(', ')\n              ],\n              `) as row_num, ${tmpTable}.* FROM (`,\n              [\n                'SELECT DISTINCT',\n                `${tmpTable}.* FROM ${tables} AS ${tmpTable}`,\n                mainJoinQueries,\n                where && `WHERE ${where}`\n              ],\n              `) AS ${tmpTable}`\n            ],\n            `) AS ${tmpTable} WHERE row_num > ${offset}`\n          ],\n          `) AS ${tmpTable}`\n        ]);\n      }\n      return Utils.joinSQLFragments([\n        'SELECT TOP 100 PERCENT',\n        attributes.join(', '),\n        'FROM (',\n        [\n          'SELECT',\n          options.limit && `TOP ${options.limit}`,\n          '* FROM (',\n          [\n            'SELECT ROW_NUMBER() OVER (',\n            [\n              'ORDER BY',\n              orders.mainQueryOrder.join(', ')\n            ],\n            `) as row_num, * FROM ${tables} AS ${tmpTable}`,\n            where && `WHERE ${where}`\n          ],\n          `) AS ${tmpTable} WHERE row_num > ${offset}`\n        ],\n        `) AS ${tmpTable}`\n      ]);\n    }\n\n    return Utils.joinSQLFragments([\n      'SELECT',\n      isSQLServer2008 && options.limit && `TOP ${options.limit}`,\n      attributes.join(', '),\n      `FROM ${tables}`,\n      mainTableAs && `AS ${mainTableAs}`,\n      options.tableHint && TableHints[options.tableHint] && `WITH (${TableHints[options.tableHint]})`\n    ]);\n  }\n\n  addLimitAndOffset(options, model) {\n    // Skip handling of limit and offset as postfixes for older SQL Server versions\n    if (semver.valid(this.sequelize.options.databaseVersion) && semver.lt(this.sequelize.options.databaseVersion, '11.0.0')) {\n      return '';\n    }\n\n    const offset = options.offset || 0;\n    const isSubQuery = options.subQuery === undefined\n      ? options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation\n      : options.subQuery;\n\n    let fragment = '';\n    let orders = {};\n\n    if (options.order) {\n      orders = this.getQueryOrders(options, model, isSubQuery);\n    }\n\n    if (options.limit || options.offset) {\n      // TODO: document why this is adding the primary key of the model in ORDER BY\n      //  if options.include is set\n      if (!options.order || options.order.length === 0 || options.include && orders.subQueryOrder.length === 0) {\n        let primaryKey = model.primaryKeyField;\n\n        const tablePkFragment = `${this.quoteTable(options.tableAs || model.name)}.${this.quoteIdentifier(primaryKey)}`;\n        const aliasedAttribute = (options.attributes || []).find(attr => Array.isArray(attr)\n            && attr[1]\n            && (attr[0] === primaryKey || attr[1] === primaryKey));\n\n        if (aliasedAttribute) {\n          const modelName = this.quoteIdentifier(options.tableAs || model.name);\n          const alias = this._getAliasForField(modelName, aliasedAttribute[1], options);\n\n          primaryKey = new Utils.Col(alias || aliasedAttribute[1]);\n        }\n\n        if (!options.order || !options.order.length) {\n          fragment += ` ORDER BY ${tablePkFragment}`;\n        } else {\n          const orderFieldNames = (options.order || []).map(order => {\n            const value = Array.isArray(order) ? order[0] : order;\n\n            if (value instanceof Utils.Col) {\n              return value.col;\n            }\n\n            if (value instanceof Utils.Literal) {\n              return value.val;\n            }\n\n            return value;\n          });\n          const primaryKeyFieldAlreadyPresent = orderFieldNames.some(\n            fieldName => fieldName === (primaryKey.col || primaryKey)\n          );\n\n          if (!primaryKeyFieldAlreadyPresent) {\n            fragment += options.order && !isSubQuery ? ', ' : ' ORDER BY ';\n            fragment += tablePkFragment;\n          }\n        }\n      }\n\n      if (options.offset || options.limit) {\n        fragment += ` OFFSET ${this.escape(offset)} ROWS`;\n      }\n\n      if (options.limit) {\n        fragment += ` FETCH NEXT ${this.escape(options.limit)} ROWS ONLY`;\n      }\n    }\n\n    return fragment;\n  }\n\n  booleanValue(value) {\n    return value ? 1 : 0;\n  }\n\n  /**\n   * Quote identifier in sql clause\n   *\n   * @param {string} identifier\n   * @param {boolean} force\n   *\n   * @returns {string}\n   */\n  quoteIdentifier(identifier, force) {\n    return `[${identifier.replace(/[[\\]']+/g, '')}]`;\n  }\n}\n\n// private methods\nfunction wrapSingleQuote(identifier) {\n  return Utils.addTicks(Utils.removeTicks(identifier, \"'\"), \"'\");\n}\n\nmodule.exports = MSSQLQueryGenerator;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 17915, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 17920, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/mssql/query-interface.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\n\nconst Utils = require('../../utils');\nconst QueryTypes = require('../../query-types');\nconst Op = require('../../operators');\nconst { QueryInterface } = require('../abstract/query-interface');\n\n/**\n * The interface that Sequelize uses to talk with MSSQL database\n */\nclass MSSqlQueryInterface extends QueryInterface {\n  /**\n  * A wrapper that fixes MSSQL's inability to cleanly remove columns from existing tables if they have a default constraint.\n  *\n  * @override\n  */\n  async removeColumn(tableName, attributeName, options) {\n    options = { raw: true, ...options || {} };\n\n    const findConstraintSql = this.queryGenerator.getDefaultConstraintQuery(tableName, attributeName);\n    const [results0] = await this.sequelize.query(findConstraintSql, options);\n    if (results0.length) {\n      // No default constraint found -- we can cleanly remove the column\n      const dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, results0[0].name);\n      await this.sequelize.query(dropConstraintSql, options);\n    }\n    const findForeignKeySql = this.queryGenerator.getForeignKeyQuery(tableName, attributeName);\n    const [results] = await this.sequelize.query(findForeignKeySql, options);\n    if (results.length) {\n      // No foreign key constraints found, so we can remove the column\n      const dropForeignKeySql = this.queryGenerator.dropForeignKeyQuery(tableName, results[0].constraint_name);\n      await this.sequelize.query(dropForeignKeySql, options);\n    }\n    //Check if the current column is a primaryKey\n    const primaryKeyConstraintSql = this.queryGenerator.getPrimaryKeyConstraintQuery(tableName, attributeName);\n    const [result] = await this.sequelize.query(primaryKeyConstraintSql, options);\n    if (result.length) {\n      const dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, result[0].constraintName);\n      await this.sequelize.query(dropConstraintSql, options);\n    }\n    const removeSql = this.queryGenerator.removeColumnQuery(tableName, attributeName);\n    return this.sequelize.query(removeSql, options);\n  }\n\n  /**\n   * @override\n   */\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    const model = options.model;\n    const wheres = [];\n\n    options = { ...options };\n\n    if (!Utils.isWhereEmpty(where)) {\n      wheres.push(where);\n    }\n\n    // Lets combine unique keys and indexes into one\n    let indexes = Object.values(model.uniqueKeys).map(item => item.fields);\n    indexes = indexes.concat(Object.values(model._indexes).filter(item => item.unique).map(item => item.fields));\n\n    const attributes = Object.keys(insertValues);\n    for (const index of indexes) {\n      if (_.intersection(attributes, index).length === index.length) {\n        where = {};\n        for (const field of index) {\n          where[field] = insertValues[field];\n        }\n        wheres.push(where);\n      }\n    }\n\n    where = { [Op.or]: wheres };\n\n    options.type = QueryTypes.UPSERT;\n    options.raw = true;\n\n    const sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);\n    return await this.sequelize.query(sql, options);\n  }\n}\n\nexports.MSSqlQueryInterface = MSSqlQueryInterface;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 17998, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 18003, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/mssql/index.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').mssql;\nconst { MSSqlQueryInterface } = require('./query-interface');\n\nclass MssqlDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new MSSqlQueryInterface(\n      sequelize,\n      this.queryGenerator\n    );\n  }\n}\n\nMssqlDialect.prototype.supports = _.merge(\n  _.cloneDeep(AbstractDialect.prototype.supports),\n  {\n    DEFAULT: true,\n    'DEFAULT VALUES': true,\n    'LIMIT ON UPDATE': true,\n    'ORDER NULLS': false,\n    lock: false,\n    transactions: true,\n    migrations: false,\n    returnValues: {\n      output: true\n    },\n    schemas: true,\n    autoIncrement: {\n      identityInsert: true,\n      defaultValue: false,\n      update: false\n    },\n    constraints: {\n      restrict: false,\n      default: true\n    },\n    index: {\n      collate: false,\n      length: false,\n      parser: false,\n      type: true,\n      using: false,\n      where: true\n    },\n    NUMERIC: true,\n    tmpTableTrigger: true\n  }\n);\n\nMssqlDialect.prototype.defaultVersion = '12.0.2000'; // SQL Server 2014 Express, minimum supported version\nMssqlDialect.prototype.Query = Query;\nMssqlDialect.prototype.name = 'mssql';\nMssqlDialect.prototype.TICK_CHAR = '\"';\nMssqlDialect.prototype.TICK_CHAR_LEFT = '[';\nMssqlDialect.prototype.TICK_CHAR_RIGHT = ']';\nMssqlDialect.prototype.DataTypes = DataTypes;\n\nmodule.exports = MssqlDialect;\n"],"names":[],"mappings":";AAEA,MAAM,IAAI,QAAQ;AAClB,MAAM,kBAAkB,QAAQ;AAChC,MAAM,oBAAoB,QAAQ;AAClC,MAAM,QAAQ,QAAQ;AACtB,MAAM,iBAAiB,QAAQ;AAC/B,MAAM,YAAY,QAAQ,8FAAoB,KAAA;AAC9C,MAAM,EAAE,mBAAA,EAAA,GAAwB,QAAQ;AAExC,MAAA,qBAA2B,gBAAgB;IACzC,YAAY,SAAA,CAAW;QACrB,KAAA;QACA,IAAA,CAAK,SAAA,GAAY;QACjB,IAAA,CAAK,iBAAA,GAAoB,IAAI,kBAAkB,IAAA,EAAM;QACrD,IAAA,CAAK,cAAA,GAAiB,IAAI,eAAe;YACvC,UAAU,IAAA;YACV;QAAA;QAEF,IAAA,CAAK,cAAA,GAAiB,IAAI,oBACxB,WACA,IAAA,CAAK,cAAA;IAAA;AAAA;AAKX,aAAa,SAAA,CAAU,QAAA,GAAW,EAAE,KAAA,CAClC,EAAE,SAAA,CAAU,gBAAgB,SAAA,CAAU,QAAA,GACtC;IACE,SAAS;IACT,kBAAkB;IAClB,mBAAmB;IACnB,eAAe;IACf,MAAM;IACN,cAAc;IACd,YAAY;IACZ,cAAc;QACZ,QAAQ;IAAA;IAEV,SAAS;IACT,eAAe;QACb,gBAAgB;QAChB,cAAc;QACd,QAAQ;IAAA;IAEV,aAAa;QACX,UAAU;QACV,SAAS;IAAA;IAEX,OAAO;QACL,SAAS;QACT,QAAQ;QACR,QAAQ;QACR,MAAM;QACN,OAAO;QACP,OAAO;IAAA;IAET,SAAS;IACT,iBAAiB;AAAA;AAIrB,aAAa,SAAA,CAAU,cAAA,GAAiB;AACxC,aAAa,SAAA,CAAU,KAAA,GAAQ;AAC/B,aAAa,SAAA,CAAU,IAAA,GAAO;AAC9B,aAAa,SAAA,CAAU,SAAA,GAAY;AACnC,aAAa,SAAA,CAAU,cAAA,GAAiB;AACxC,aAAa,SAAA,CAAU,eAAA,GAAkB;AACzC,aAAa,SAAA,CAAU,SAAA,GAAY;AAEnC,OAAO,OAAA,GAAU","ignoreList":[0]}},
    {"offset": {"line": 18063, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 18068, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/mysql/connection-manager.js"],"sourcesContent":["'use strict';\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst SequelizeErrors = require('../../errors');\nconst { logger } = require('../../utils/logger');\nconst DataTypes = require('../../data-types').mysql;\nconst momentTz = require('moment-timezone');\nconst debug = logger.debugContext('connection:mysql');\nconst parserStore = require('../parserStore')('mysql');\nconst { promisify } = require('util');\n\n/**\n * MySQL Connection Manager\n *\n * Get connections, validate and disconnect them.\n * AbstractConnectionManager pooling use it to handle MySQL specific connections\n * Use https://github.com/sidorares/node-mysql2 to connect with MySQL server\n *\n * @private\n */\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 3306;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule('mysql2');\n    this.refreshTypeParser(DataTypes);\n  }\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  static _typecast(field, next) {\n    if (parserStore.get(field.type)) {\n      return parserStore.get(field.type)(field, this.sequelize.options, next);\n    }\n    return next();\n  }\n\n  /**\n   * Connect with MySQL database based on config, Handle any errors in connection\n   * Set the pool handlers on connection.error\n   * Also set proper timezone once connection is connected.\n   *\n   * @param {object} config\n   * @returns {Promise<Connection>}\n   * @private\n   */\n  async connect(config) {\n    const connectionConfig = {\n      host: config.host,\n      port: config.port,\n      user: config.username,\n      flags: '-FOUND_ROWS',\n      password: config.password,\n      database: config.database,\n      timezone: this.sequelize.options.timezone,\n      typeCast: ConnectionManager._typecast.bind(this),\n      bigNumberStrings: false,\n      supportBigNumbers: true,\n      ...config.dialectOptions\n    };\n\n    try {\n      const connection = await new Promise((resolve, reject) => {\n        const connection = this.lib.createConnection(connectionConfig);\n\n        const errorHandler = e => {\n          // clean up connect & error event if there is error\n          connection.removeListener('connect', connectHandler);\n          connection.removeListener('error', connectHandler);\n          reject(e);\n        };\n\n        const connectHandler = () => {\n          // clean up error event if connected\n          connection.removeListener('error', errorHandler);\n          resolve(connection);\n        };\n\n        // don't use connection.once for error event handling here\n        // mysql2 emit error two times in case handshake was failed\n        // first error is protocol_lost and second is timeout\n        // if we will use `once.error` node process will crash on 2nd error emit\n        connection.on('error', errorHandler);\n        connection.once('connect', connectHandler);\n      });\n\n      debug('connection acquired');\n      connection.on('error', error => {\n        switch (error.code) {\n          case 'ESOCKET':\n          case 'ECONNRESET':\n          case 'EPIPE':\n          case 'PROTOCOL_CONNECTION_LOST':\n            this.pool.destroy(connection);\n        }\n      });\n\n      if (!this.sequelize.config.keepDefaultTimezone) {\n        // set timezone for this connection\n        // but named timezone are not directly supported in mysql, so get its offset first\n        let tzOffset = this.sequelize.options.timezone;\n        tzOffset = /\\//.test(tzOffset) ? momentTz.tz(tzOffset).format('Z') : tzOffset;\n        await promisify(cb => connection.query(`SET time_zone = '${tzOffset}'`, cb))();\n      }\n\n      return connection;\n    } catch (err) {\n      switch (err.code) {\n        case 'ECONNREFUSED':\n          throw new SequelizeErrors.ConnectionRefusedError(err);\n        case 'ER_ACCESS_DENIED_ERROR':\n          throw new SequelizeErrors.AccessDeniedError(err);\n        case 'ENOTFOUND':\n          throw new SequelizeErrors.HostNotFoundError(err);\n        case 'EHOSTUNREACH':\n          throw new SequelizeErrors.HostNotReachableError(err);\n        case 'EINVAL':\n          throw new SequelizeErrors.InvalidConnectionError(err);\n        default:\n          throw new SequelizeErrors.ConnectionError(err);\n      }\n    }\n  }\n\n  async disconnect(connection) {\n    // Don't disconnect connections with CLOSED state\n    if (connection._closing) {\n      debug('connection tried to disconnect but was already at CLOSED state');\n      return;\n    }\n\n    return await promisify(callback => connection.end(callback))();\n  }\n\n  validate(connection) {\n    return connection\n      && !connection._fatalError\n      && !connection._protocolError\n      && !connection._closing\n      && !connection.stream.destroyed;\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 18188, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 18193, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/mysql/query.js"],"sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst ER_DUP_ENTRY = 1062;\nconst ER_DEADLOCK = 1213;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\n\nconst debug = logger.debugContext('sql:mysql');\n\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, { showWarnings: false, ...options });\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n    const replacementFunc = (match, key, values_) => {\n      if (values_[key] !== undefined) {\n        bindParam.push(values_[key]);\n        return '?';\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : undefined];\n  }\n\n  async run(sql, parameters) {\n    this.sql = sql;\n    const { connection, options } = this;\n\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    if (parameters) {\n      debug('parameters(%j)', parameters);\n    }\n\n    let results;\n    const errForStack = new Error();\n\n    try {\n      if (parameters && parameters.length) {\n        results = await new Promise((resolve, reject) => {\n          connection\n            .execute(sql, parameters, (error, result) => error ? reject(error) : resolve(result))\n            .setMaxListeners(100);\n        });\n      } else {\n        results = await new Promise((resolve, reject) => {\n          connection\n            .query({ sql }, (error, result) => error ? reject(error) : resolve(result))\n            .setMaxListeners(100);\n        });\n      }\n    } catch (error) {\n      if (options.transaction && error.errno === ER_DEADLOCK) {\n        // MySQL automatically rolls-back transactions in the event of a deadlock.\n        // However, we still initiate a manual rollback to ensure the connection gets released - see #13102.\n        try {\n          await options.transaction.rollback();\n        } catch (error_) {\n          // Ignore errors - since MySQL automatically rolled back, we're\n          // not that worried about this redundant rollback failing.\n        }\n\n        options.transaction.finished = 'rollback';\n      }\n\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error, errForStack.stack);\n    } finally {\n      complete();\n    }\n\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n    return this.formatResults(results);\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        // handle bulkCreate AI primary key\n        if (\n          data.constructor.name === 'ResultSetHeader'\n          && this.model\n          && this.model.autoIncrementAttribute\n          && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute\n          && this.model.rawAttributes[this.model.primaryKeyAttribute]\n        ) {\n          const startId = data[this.getInsertIdField()];\n          result = [];\n          for (let i = startId; i < startId + data.affectedRows; i++) {\n            result.push({ [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i });\n          }\n        } else {\n          result = data[this.getInsertIdField()];\n        }\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        const enumRegex = /^enum/i;\n        result[_result.Field] = {\n          type: enumRegex.test(_result.Type) ? _result.Type.replace(enumRegex, 'ENUM') : _result.Type.toUpperCase(),\n          allowNull: _result.Null === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === 'PRI',\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, 'Extra')\n            && _result.Extra.toLowerCase() === 'auto_increment',\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n      return result;\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n      return data.affectedRows;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n    if (this.isShowConstraintsQuery()) {\n      return data;\n    }\n    if (this.isRawQuery()) {\n      // MySQL returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n      return [data, data];\n    }\n\n    return result;\n  }\n\n  async logWarnings(results) {\n    const warningResults = await this.run('SHOW WARNINGS');\n    const warningMessage = `MySQL Warnings (${this.connection.uuid || 'default'}): `;\n    const messages = [];\n    for (const _warningRow of warningResults) {\n      if (_warningRow === undefined || typeof _warningRow[Symbol.iterator] !== 'function') {\n        continue;\n      }\n      for (const _warningResult of _warningRow) {\n        if (Object.prototype.hasOwnProperty.call(_warningResult, 'Message')) {\n          messages.push(_warningResult.Message);\n        } else {\n          for (const _objectKey of _warningResult.keys()) {\n            messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\n          }\n        }\n      }\n    }\n\n    this.sequelize.log(warningMessage + messages.join('; '), this.options);\n\n    return results;\n  }\n\n  formatError(err, errStack) {\n    const errCode = err.errno || err.code;\n\n    switch (errCode) {\n      case ER_DUP_ENTRY: {\n        const match = err.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?$/);\n        let fields = {};\n        let message = 'Validation error';\n        const values = match ? match[1].split('-') : undefined;\n        const fieldKey = match ? match[2].split('.').pop() : undefined;\n        const fieldVal = match ? match[1] : undefined;\n        const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n        if (uniqueKey) {\n          if (uniqueKey.msg) message = uniqueKey.msg;\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[fieldKey] = fieldVal;\n        }\n\n        const errors = [];\n        _.forOwn(fields, (value, field) => {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field,\n            value,\n            this.instance,\n            'not_unique'\n          ));\n        });\n\n        return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n      }\n\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW: {\n        // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n        const match = err.message.match(\n          /CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/\n        );\n        const quoteChar = match ? match[1] : '`';\n        const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          reltype: String(errCode) === String(ER_ROW_IS_REFERENCED) ? 'parent' : 'child',\n          table: match ? match[4] : undefined,\n          fields,\n          value: fields && fields.length && this.instance && this.instance[fields[0]] || undefined,\n          index: match ? match[2] : undefined,\n          parent: err,\n          stack: errStack\n        });\n      }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n    }\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = data.reduce((acc, item) => {\n      if (!(item.Key_name in acc)) {\n        acc[item.Key_name] = item;\n        item.fields = [];\n      }\n\n      acc[item.Key_name].fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || undefined,\n        order: item.Collation === 'A' ? 'ASC' : undefined\n      };\n      delete item.column_name;\n\n      return acc;\n    }, {});\n\n    return _.map(data, item => ({\n      primary: item.Key_name === 'PRIMARY',\n      fields: item.fields,\n      name: item.Key_name,\n      tableName: item.Table,\n      unique: item.Non_unique !== 1,\n      type: item.Index_type\n    }));\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 18461, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 18466, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/mysql/index.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').mysql;\nconst { MySQLQueryInterface } = require('./query-interface');\n\nclass MysqlDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new MySQLQueryInterface(\n      sequelize,\n      this.queryGenerator\n    );\n  }\n\n  canBackslashEscape() {\n    return true;\n  }\n}\n\nMysqlDialect.prototype.supports = _.merge(\n  _.cloneDeep(AbstractDialect.prototype.supports),\n  {\n    'VALUES ()': true,\n    'LIMIT ON UPDATE': true,\n    lock: true,\n    forShare: 'LOCK IN SHARE MODE',\n    settingIsolationLevelDuringTransaction: false,\n    inserts: {\n      ignoreDuplicates: ' IGNORE',\n      updateOnDuplicate: ' ON DUPLICATE KEY UPDATE'\n    },\n    index: {\n      collate: false,\n      length: true,\n      parser: true,\n      type: true,\n      using: 1\n    },\n    constraints: {\n      dropConstraint: false,\n      check: false\n    },\n    indexViaAlter: true,\n    indexHints: true,\n    NUMERIC: true,\n    GEOMETRY: true,\n    JSON: true,\n    REGEXP: true\n  }\n);\n\nMysqlDialect.prototype.defaultVersion = '5.7.0'; // minimum supported version\nMysqlDialect.prototype.Query = Query;\nMysqlDialect.prototype.QueryGenerator = QueryGenerator;\nMysqlDialect.prototype.DataTypes = DataTypes;\nMysqlDialect.prototype.name = 'mysql';\nMysqlDialect.prototype.TICK_CHAR = '`';\nMysqlDialect.prototype.TICK_CHAR_LEFT = MysqlDialect.prototype.TICK_CHAR;\nMysqlDialect.prototype.TICK_CHAR_RIGHT = MysqlDialect.prototype.TICK_CHAR;\n\nmodule.exports = MysqlDialect;\n"],"names":[],"mappings":";AAEA,MAAM,IAAI,QAAQ;AAClB,MAAM,kBAAkB,QAAQ;AAChC,MAAM,oBAAoB,QAAQ;AAClC,MAAM,QAAQ,QAAQ;AACtB,MAAM,iBAAiB,QAAQ;AAC/B,MAAM,YAAY,QAAQ,8FAAoB,KAAA;AAC9C,MAAM,EAAE,mBAAA,EAAA,GAAwB,QAAQ;AAExC,MAAA,qBAA2B,gBAAgB;IACzC,YAAY,SAAA,CAAW;QACrB,KAAA;QACA,IAAA,CAAK,SAAA,GAAY;QACjB,IAAA,CAAK,iBAAA,GAAoB,IAAI,kBAAkB,IAAA,EAAM;QACrD,IAAA,CAAK,cAAA,GAAiB,IAAI,eAAe;YACvC,UAAU,IAAA;YACV;QAAA;QAEF,IAAA,CAAK,cAAA,GAAiB,IAAI,oBACxB,WACA,IAAA,CAAK,cAAA;IAAA;IAIT,qBAAqB;QACnB,OAAO;IAAA;AAAA;AAIX,aAAa,SAAA,CAAU,QAAA,GAAW,EAAE,KAAA,CAClC,EAAE,SAAA,CAAU,gBAAgB,SAAA,CAAU,QAAA,GACtC;IACE,aAAa;IACb,mBAAmB;IACnB,MAAM;IACN,UAAU;IACV,wCAAwC;IACxC,SAAS;QACP,kBAAkB;QAClB,mBAAmB;IAAA;IAErB,OAAO;QACL,SAAS;QACT,QAAQ;QACR,QAAQ;QACR,MAAM;QACN,OAAO;IAAA;IAET,aAAa;QACX,gBAAgB;QAChB,OAAO;IAAA;IAET,eAAe;IACf,YAAY;IACZ,SAAS;IACT,UAAU;IACV,MAAM;IACN,QAAQ;AAAA;AAIZ,aAAa,SAAA,CAAU,cAAA,GAAiB;AACxC,aAAa,SAAA,CAAU,KAAA,GAAQ;AAC/B,aAAa,SAAA,CAAU,cAAA,GAAiB;AACxC,aAAa,SAAA,CAAU,SAAA,GAAY;AACnC,aAAa,SAAA,CAAU,IAAA,GAAO;AAC9B,aAAa,SAAA,CAAU,SAAA,GAAY;AACnC,aAAa,SAAA,CAAU,cAAA,GAAiB,aAAa,SAAA,CAAU,SAAA;AAC/D,aAAa,SAAA,CAAU,eAAA,GAAkB,aAAa,SAAA,CAAU,SAAA;AAEhE,OAAO,OAAA,GAAU","ignoreList":[0]}},
    {"offset": {"line": 18526, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 18531, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/oracle/connection-manager.js"],"sourcesContent":["// Copyright (c) 2022, Oracle and/or its affiliates. All rights reserved\n\n'use strict';\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst SequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('oracle');\nconst { logger } = require('../../utils/logger');\nconst semver = require('semver');\nconst debug = logger.debugContext('connection:oracle');\nconst DataTypes = require('../../data-types').oracle;\nconst { promisify } = require('util');\n/**\n * Oracle Connection Manager\n *\n * Get connections, validate and disconnect them.\n * AbstractConnectionManager pooling use it to handle Oracle specific connections\n * Use github.com/oracle/node-oracledb to connect with Oracle server\n *\n * @private\n */\nexport class OracleConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    super(dialect, sequelize);\n\n    this.sequelize = sequelize;\n    this.sequelize.config.port = this.sequelize.config.port || 1521;\n    this.lib = this._loadDialectModule('oracledb');\n    this.extendLib();\n    this.refreshTypeParser(DataTypes);\n  }\n\n  /**\n   * Method for initializing the lib\n   *\n   */\n  extendLib() {\n    if (this.sequelize.config && 'dialectOptions' in this.sequelize.config) {\n      const dialectOptions = this.sequelize.config.dialectOptions;\n      if (dialectOptions && 'maxRows' in dialectOptions) {\n        this.lib.maxRows = this.sequelize.config.dialectOptions.maxRows;\n      }\n      if (dialectOptions && 'fetchAsString' in dialectOptions) {\n        this.lib.fetchAsString = this.sequelize.config.dialectOptions.fetchAsString;\n      } else {\n        this.lib.fetchAsString = [this.lib.CLOB];\n      }\n    }\n    // Retrieve BLOB always as Buffer.\n    this.lib.fetchAsBuffer = [this.lib.BLOB];\n  }\n\n  /**\n   * Method for checking the config object passed and generate the full database if not fully passed\n   * With dbName, host and port, it generates a string like this : 'host:port/dbname'\n   *\n   * @param {object} config\n   * @returns {Promise<Connection>}\n   * @private\n   */\n  buildConnectString(config) {\n    if (!config.host || config.host.length === 0)\n      return config.database;\n    let connectString = config.host;\n    if (config.port && config.port > 0) {\n      connectString += `:${config.port}`;\n    } else {\n      connectString += ':1521';\n    }\n    if (config.database && config.database.length > 0) {\n      connectString += `/${config.database}`;\n    }\n    return connectString;\n  }\n\n  // Expose this as a method so that the parsing may be updated when the user has added additional, custom types\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  /**\n   * Connect with Oracle database based on config, Handle any errors in connection\n   * Set the pool handlers on connection.error\n   * Also set proper timezone once connection is connected.\n   *\n   * @param {object} config\n   * @returns {Promise<Connection>}\n   * @private\n   */\n  async connect(config) {\n    const connectionConfig = {\n      user: config.username,\n      password: config.password,\n      externalAuth: config.externalAuth,\n      stmtCacheSize: 0,\n      connectString: this.buildConnectString(config),\n      ...config.dialectOptions\n    };\n\n    try {\n      const connection = await this.lib.getConnection(connectionConfig);\n      // Setting the sequelize database version to Oracle DB server version to remove the roundtrip for DB version query\n      this.sequelize.options.databaseVersion = semver.coerce(connection.oracleServerVersionString).version;\n\n      debug('connection acquired');\n      connection.on('error', error => {\n        switch (error.code) {\n          case 'ESOCKET':\n          case 'ECONNRESET':\n          case 'EPIPE':\n          case 'PROTOCOL_CONNECTION_LOST':\n            this.pool.destroy(connection);\n        }\n      });\n\n      return connection;\n    } catch (err) {\n      // We split to get the error number; it comes as ORA-XXXXX:\n      let errorCode = err.message.split(':');\n      errorCode = errorCode[0];\n\n      switch (errorCode) {\n        case 'ORA-12560': // ORA-12560: TNS: Protocol Adapter Error\n        case 'ORA-12154': // ORA-12154: TNS: Could not resolve the connect identifier specified\n        case 'ORA-12505': // ORA-12505: TNS: Listener does not currently know of SID given in connect descriptor\n        case 'ORA-12514': // ORA-12514: TNS: Listener does not currently know of service requested in connect descriptor\n        case 'NJS-511': // NJS-511: connection refused\n        case 'NJS-516': // NJS-516: No Config Dir\n        case 'NJS-517': // NJS-517: TNS Entry not found\n        case 'NJS-520': // NJS-520: TNS Names File missing  \n          throw new SequelizeErrors.ConnectionRefusedError(err);\n        case 'ORA-28000': // ORA-28000: Account locked\n        case 'ORA-28040': // ORA-28040: No matching authentication protocol\n        case 'ORA-01017': // ORA-01017: invalid username/password; logon denied\n        case 'NJS-506': // NJS-506: TLS Auth Failure\n          throw new SequelizeErrors.AccessDeniedError(err);\n        case 'ORA-12541': // ORA-12541: TNS: No listener\n        case 'NJS-503': // NJS-503: Connection Incomplete\n        case 'NJS-508': // NJS-508: TLS HOST MATCH Failure\n        case 'NJS-507': // NJS-507: TLS DN MATCH Failure\n          throw new SequelizeErrors.HostNotReachableError(err);\n        case 'NJS-512': // NJS-512: Invalid Connect String Parameters\n        case 'NJS-515': // NJS-515: Invalid EZCONNECT Syntax\n        case 'NJS-518': // NJS-518: Invald ServiceName\n        case 'NJS-519': // NJS-519: Invald SID\n          throw new SequelizeErrors.InvalidConnectionError(err);\n        case 'ORA-12170': // ORA-12170: TNS: Connect Timeout occurred\n        case 'NJS-510': // NJS-510: Connect Timeout occurred\n\n          throw new SequelizeErrors.ConnectionTimedOutError(err);\n        default:\n          throw new SequelizeErrors.ConnectionError(err);\n      }\n    }\n  }\n\n  async disconnect(connection) {\n    if (!connection.isHealthy()) {\n      debug('connection tried to disconnect but was already at CLOSED state');\n      return;\n    }\n\n    return await promisify(callback => connection.close(callback))();\n  }\n\n  /**\n   * Checking if the connection object is valid and the connection is healthy\n   *\n   * @param {object} connection\n   * @private\n   */\n  validate(connection) {\n    return connection && connection.isHealthy();\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 18685, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 18690, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/oracle/query.js"],"sourcesContent":["// Copyright (c) 2022, Oracle and/or its affiliates. All rights reserved\n\n'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst SequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('oracle');\nconst _ = require('lodash');\nconst Utils = require('../../utils');\nconst { logger } = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:oracle');\n\nexport class OracleQuery extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, options);\n    this.options = _.extend(\n      {\n        logging: console.log,\n        plain: false,\n        raw: false\n      },\n      options || {}\n    );\n\n    this.checkLoggingOption();\n    this.outFormat = options.outFormat || this.sequelize.connectionManager.lib.OBJECT;\n  }\n\n  getInsertIdField() {\n    return 'id';\n  }\n\n  getExecOptions() {\n    const execOpts = { outFormat: this.outFormat, autoCommit: this.autoCommit };\n\n    // We set the oracledb\n    const oracledb = this.sequelize.connectionManager.lib;\n\n    if (this.model && this.isSelectQuery()) {\n      const fInfo = {};\n      const keys = Object.keys(this.model.tableAttributes);\n      for (const key of keys) {\n        const keyValue = this.model.tableAttributes[key];\n        if (keyValue.type.key === 'DECIMAL') {\n          fInfo[key] = { type: oracledb.STRING };\n        }\n        // Fetching BIGINT as string since, node-oracledb doesn't support JS BIGINT yet\n        if (keyValue.type.key === 'BIGINT') {\n          fInfo[key] = { type: oracledb.STRING };\n        }\n      }\n      if ( fInfo ) {\n        execOpts.fetchInfo = fInfo;\n      }\n    }\n    return execOpts;\n  }\n\n  /**\n   * convert binding values for unsupported\n   * types in connector library\n   *\n   * @param {string} bindingDictionary a string representing the key to scan\n   * @param {object} oracledb native oracle library\n   * @private\n   */\n  _convertBindAttributes(bindingDictionary, oracledb) {\n    if (this.model && this.options[bindingDictionary]) {\n      // check against model if we have some BIGINT\n      const keys = Object.keys(this.model.tableAttributes);\n      for (const key of keys) {\n        const keyValue = this.model.tableAttributes[key];\n        if (keyValue.type.key === 'BIGINT') {\n          const oldBinding = this.options[bindingDictionary][key];\n          if (oldBinding) {\n            this.options[bindingDictionary][key] = {\n              ...oldBinding,\n              type: oracledb.STRING,\n              maxSize: 10000000 //TOTALLY ARBITRARY Number to prevent query failure\n            };\n          }\n        }\n      }\n    }\n  }\n\n  async run(sql, parameters) {\n    // We set the oracledb\n    const oracledb = this.sequelize.connectionManager.lib;\n    const complete = this._logQuery(sql, debug, parameters);\n    const outParameters = [];\n    const bindParameters = [];\n    const bindDef = [];\n\n    if (!sql.match(/END;$/)) {\n      this.sql = sql.replace(/; *$/, '');\n    } else {\n      this.sql = sql;\n    }\n\n    // When this.options.bindAttributes exists then it is an insertQuery/upsertQuery\n    // So we insert the return bind direction and type\n    if (this.options.outBindAttributes && (Array.isArray(parameters) || _.isPlainObject(parameters))) {\n      this._convertBindAttributes('outBindAttributes', oracledb);\n      outParameters.push(...Object.values(this.options.outBindAttributes));\n      // For upsertQuery we need to push the bindDef for isUpdate\n      if (this.isUpsertQuery()) {\n        outParameters.push({ dir: oracledb.BIND_OUT });\n      }\n    }\n\n    this.bindParameters = outParameters;\n    // construct input binds from parameters for single row insert execute call\n    // ex: [3, 4,...]\n    if (Array.isArray(parameters) || _.isPlainObject(parameters)) {\n      if (this.options.executeMany) {\n        // Constructing BindDefs for ExecuteMany call\n        // Building the bindDef for in and out binds\n        this._convertBindAttributes('inbindAttributes', oracledb);\n        bindDef.push(...Object.values(this.options.inbindAttributes));\n        bindDef.push(...outParameters);\n        this.bindParameters = parameters;\n      } else if (this.isRawQuery()) {\n        this.bindParameters = parameters;\n      } else {\n        Object.values(parameters).forEach(value => {\n          bindParameters.push(value);\n        });\n        bindParameters.push(...outParameters);\n        Object.assign(this.bindParameters, bindParameters);\n      }\n    }\n\n    // TRANSACTION SUPPORT\n    if (this.sql.startsWith('BEGIN TRANSACTION')) {\n      this.autocommit = false;\n      return Promise.resolve();\n    }\n    if (this.sql.startsWith('SET AUTOCOMMIT ON')) {\n      this.autocommit = true;\n      return Promise.resolve();\n    }\n    if (this.sql.startsWith('SET AUTOCOMMIT OFF')) {\n      this.autocommit = false;\n      return Promise.resolve();\n    }\n    if (this.sql.startsWith('DECLARE x NUMBER')) {\n      // Calling a stored procedure for bulkInsert with NO attributes, returns nothing\n      if (this.autoCommit === undefined) {\n        if (this.connection.uuid) {\n          this.autoCommit = false;\n        } else {\n          this.autoCommit = true;\n        }\n      }\n\n      try {\n        await this.connection.execute(this.sql, this.bindParameters, { autoCommit: this.autoCommit });\n        return Object.create(null);\n      } catch (error) {\n        throw this.formatError(error);\n      } finally {\n        complete();\n      }\n    }\n    if (this.sql.startsWith('BEGIN')) {\n      // Call to stored procedures - BEGIN TRANSACTION has been treated before\n      if (this.autoCommit === undefined) {\n        if (this.connection.uuid) {\n          this.autoCommit = false;\n        } else {\n          this.autoCommit = true;\n        }\n      }\n\n      try {\n        const result = await this.connection.execute(this.sql, this.bindParameters, {\n          outFormat: this.outFormat,\n          autoCommit: this.autoCommit\n        });\n        if (!Array.isArray(result.outBinds)) {\n          return [result.outBinds];\n        }\n        return result.outBinds;\n      } catch (error) {\n        throw this.formatError(error);\n      } finally {\n        complete();\n      }\n    }\n    if (this.sql.startsWith('COMMIT TRANSACTION')) {\n      try {\n        await this.connection.commit();\n        return Object.create(null);\n      } catch (error) {\n        throw this.formatError(error);\n      } finally {\n        complete();\n      }\n    }\n    if (this.sql.startsWith('ROLLBACK TRANSACTION')) {\n      try {\n        await this.connection.rollback();\n        return Object.create(null);\n      } catch (error) {\n        throw this.formatError(error);\n      } finally {\n        complete();\n      }\n    }\n    if (this.sql.startsWith('SET TRANSACTION')) {\n      try {\n        await this.connection.execute(this.sql, [], { autoCommit: false });\n        return Object.create(null);\n      } catch (error) {\n        throw this.formatError(error);\n      } finally {\n        complete();\n      }\n    }\n    // QUERY SUPPORT\n    // As Oracle does everything in transaction, if autoCommit is not defined, we set it to true\n    if (this.autoCommit === undefined) {\n      if (this.connection.uuid) {\n        this.autoCommit = false;\n      } else {\n        this.autoCommit = true;\n      }\n    }\n\n    // inbind parameters added byname. merge them\n    if ('inputParameters' in this.options && this.options.inputParameters !== null) {\n      Object.assign(this.bindParameters, this.options.inputParameters);\n    }\n    const execOpts = this.getExecOptions();\n    if (this.options.executeMany && bindDef.length > 0) {\n      execOpts.bindDefs = bindDef;\n    }\n    const executePromise = this.options.executeMany ? this.connection.executeMany(this.sql, this.bindParameters, execOpts) : this.connection.execute(this.sql, this.bindParameters, execOpts);\n    try {\n      const result = await executePromise;\n      return this.formatResults(result);\n    } catch (error) {\n      throw this.formatError(error);\n    } finally {\n      complete();\n    }\n  }\n\n  /**\n * The parameters to query.run function are built here\n *\n * @param {string} sql\n * @param {Array} values\n * @param {string} dialect\n */\n  static formatBindParameters(sql, values, dialect) {\n\n    const replacementFunc = (match, key, values) => {\n      if (values[key] !== undefined) {\n        return `:${key}`;\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n\n    return [sql, values];\n  }\n\n  /**\n   * Building the attribute map by matching the column names received\n   * from DB and the one in rawAttributes\n   * to sequelize format\n   *\n   * @param {object} attrsMap\n   * @param {object} rawAttributes\n   * @private\n   */\n  _getAttributeMap(attrsMap, rawAttributes) {\n    attrsMap = Object.assign(attrsMap, _.reduce(rawAttributes, (mp, _, key) => {\n      const catalogKey = this.sequelize.queryInterface.queryGenerator.getCatalogName(key);\n      mp[catalogKey] = key;\n      return mp;\n    }, {}));\n  }\n\n  /**\n   * Process rows received from the DB.\n   * Use parse function to parse the returned value\n   * to sequelize format\n   *\n   * @param {Array} rows\n   * @private\n   */\n  _processRows(rows) {\n    let result = rows;\n    let attrsMap = {};\n\n    // When quoteIdentifiers is false we need to map the DB column names\n    // To the one in attribute list\n    if (this.sequelize.options.quoteIdentifiers === false) {\n      // Building the attribute map from this.options.attributes\n      // Needed in case of an aggregate function\n      attrsMap = _.reduce(this.options.attributes, (mp, v) => {\n        // Aggregate function is of form\n        // Fn {fn: 'min', min}, so we have the name in index one of the object\n        if (typeof v === 'object') {\n          v = v[1];\n        }\n        const catalogv = this.sequelize.queryInterface.queryGenerator.getCatalogName(v);\n        mp[catalogv] = v;\n        return mp;\n      }, {});\n\n\n      // Building the attribute map by matching the column names received\n      // from DB and the one in model.rawAttributes\n      if (this.model) {\n        this._getAttributeMap(attrsMap, this.model.rawAttributes);\n      }\n\n      // If aliasesmapping exists we update the attribute map\n      if (this.options.aliasesMapping) {\n        const obj = Object.fromEntries(this.options.aliasesMapping);\n        rows = rows\n          .map(row => _.toPairs(row)\n            .reduce((acc, [key, value]) => {\n              const mapping = Object.values(obj).find(element => {\n                const catalogElement = this.sequelize.queryInterface.queryGenerator.getCatalogName(element);\n                return catalogElement === key;\n              });\n              if (mapping)\n                acc[mapping || key] = value;\n              return acc;\n            }, {})\n          );\n      }\n\n      // Modify the keys into the format that sequelize expects\n      result = rows.map(row => {\n        return _.mapKeys(row, (value, key) => {\n          const targetAttr = attrsMap[key];\n          if (typeof targetAttr === 'string' && targetAttr !== key) {\n            return targetAttr;\n          }\n          return key;\n        });\n      });\n    }\n\n    // We parse the value received from the DB based on its datatype\n    if (this.model) {\n      result = result.map(row => {\n        return _.mapValues(row, (value, key) => {\n          if (this.model.rawAttributes[key] && this.model.rawAttributes[key].type) {\n            let typeid = this.model.rawAttributes[key].type.toLocaleString();\n            if (this.model.rawAttributes[key].type.key === 'JSON') {\n              value = JSON.parse(value);\n            }\n            // For some types, the \"name\" of the type is returned with the length, we remove it\n            // For Boolean we skip this because BOOLEAN is mapped to CHAR(1) and we dont' want to\n            // remove the (1) for BOOLEAN\n            if (typeid.indexOf('(') > -1 && this.model.rawAttributes[key].type.key !== 'BOOLEAN') {\n              typeid = typeid.substr(0, typeid.indexOf('('));\n            }\n            const parse = parserStore.get(typeid);\n            if (value !== null & !!parse) {\n              value = parse(value);\n            }\n          }\n          return value;\n        });\n      });\n    }\n\n    return result;\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   * Example:\n   * Oracle format :\n   * { rows: //All rows\n     [ [ 'Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production' ],\n       [ 'PL/SQL Release 11.2.0.1.0 - Production' ],\n       [ 'CORE\\t11.2.0.1.0\\tProduction' ],\n       [ 'TNS for 64-bit Windows: Version 11.2.0.1.0 - Production' ],\n       [ 'NLSRTL Version 11.2.0.1.0 - Production' ] ],\n    resultSet: undefined,\n    outBinds: undefined, //Used for dbms_put.line\n    rowsAffected: undefined, //Number of rows affected\n    metaData: [ { name: 'BANNER' } ] }\n  *\n  * @param {Array} data - The result of the query execution.\n  */\n  formatResults(data) {\n    let result = this.instance;\n    if (this.isInsertQuery(data)) {\n      let insertData;\n      if (data.outBinds) {\n        const keys = Object.keys(this.options.outBindAttributes);\n        insertData = data.outBinds;\n        // For one row insert out bind array is 1D array\n        // we convert it to 2D array for uniformity\n        if (this.instance) {\n          insertData = [insertData];\n        }\n        // Mapping the bind parameter to their values\n        const res = insertData.map(row =>{\n          const obj = {};\n          row.forEach((element, index) =>{\n            obj[keys[index]] = element[0];\n          });\n          return obj;\n        });\n        insertData = res;\n        // For bulk insert this.insert is undefined\n        // we map result to res, for one row insert\n        // result needs to be this.instance\n        if (!this.instance) {\n          result = res;\n        }\n      }\n      this.handleInsertQuery(insertData);\n      return [result, data.rowsAffected];\n    }\n    if (this.isShowTablesQuery()) {\n      result = this.handleShowTablesQuery(data.rows);\n    } else if (this.isDescribeQuery()) {\n      result = {};\n      // Getting the table name on which we are doing describe query\n      const table = Object.keys(this.sequelize.models);\n      const modelAttributes = {};\n      // Get the model raw attributes\n      if (this.sequelize.models && table.length > 0) {\n        this._getAttributeMap(modelAttributes, this.sequelize.models[table[0]].rawAttributes);\n      }\n      data.rows.forEach(_result => {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", '')\n            .replace(\"')\", '')\n            .replace(/'/g, ''); /* jshint ignore: line */\n        }\n\n        if (!(modelAttributes[_result.COLUMN_NAME] in result)) {\n          let key = modelAttributes[_result.COLUMN_NAME];\n          if (!key) {\n            key = _result.COLUMN_NAME;\n          }\n\n          result[key] = {\n            type: _result.DATA_TYPE.toUpperCase(),\n            allowNull: _result.NULLABLE === 'N' ? false : true,\n            defaultValue: undefined,\n            primaryKey: _result.CONSTRAINT_TYPE === 'P'\n          };\n        }\n      });\n    } else if (this.isShowIndexesQuery()) {\n      result = this.handleShowIndexesQuery(data.rows);\n    } else if (this.isSelectQuery()) {\n      const rows = data.rows;\n      const result = this._processRows(rows);\n      return this.handleSelectQuery(result);\n    } else if (this.isCallQuery()) {\n      result = data.rows[0];\n    } else if (this.isUpdateQuery()) {\n      result = [result, data.rowsAffected];\n    } else if (this.isBulkUpdateQuery()) {\n      result = data.rowsAffected;\n    } else if (this.isBulkDeleteQuery()) {\n      result = data.rowsAffected;\n    } else if (this.isVersionQuery()) {\n      const version = data.rows[0].VERSION_FULL;\n      if (version) {\n        const versions = version.split('.');\n        result = `${versions[0]}.${versions[1]}.${versions[2]}`;\n      } else {\n        result = '0.0.0';\n      }\n    } else if (this.isForeignKeysQuery()) {\n      result = data.rows;\n    } else if (this.isUpsertQuery()) {\n      // Upsert Query, will return nothing\n      data = data.outBinds;\n      const keys = Object.keys(this.options.outBindAttributes);\n      const obj = {};\n      for (const k in keys) {\n        obj[keys[k]] = data[k];\n      }\n      obj.isUpdate = data[data.length - 1];\n      data = obj;\n      result = [{ isNewRecord: data.isUpdate, value: data }, data.isUpdate == 0];\n    } else if (this.isShowConstraintsQuery()) {\n      result = this.handleShowConstraintsQuery(data);\n    } else if (this.isRawQuery()) {\n      // If data.rows exists then it is a select query\n      // Hence we would have two components\n      // metaData and rows and we return them\n      // as [data.rows, data.metaData]\n      // Else it is result of update/upsert/insert query\n      // and it has no rows so we return [data, data]\n      if (data && data.rows) {\n        return [data.rows, data.metaData];\n      }\n      return [data, data];\n    }\n\n    return result;\n  }\n\n  handleShowConstraintsQuery(data) {\n    // Convert snake_case keys to camelCase as its generated by stored procedure\n    return data.rows.map(result => {\n      const constraint = {};\n      for (const key in result) {\n        constraint[_.camelCase(key)] = result[key].toLowerCase();\n      }\n      return constraint;\n    });\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n\n  formatError(err) {\n    let match;\n    // ORA-00001: unique constraint (USER.XXXXXXX) violated\n    match = err.message.match(/unique constraint ([\\s\\S]*) violated/);\n    if (match && match.length > 1) {\n      match[1] = match[1].replace('(', '').replace(')', '').split('.')[1]; // As we get (SEQUELIZE.UNIQNAME), we replace to have UNIQNAME\n      const errors = [];\n      let fields = [],\n        message = 'Validation error',\n        uniqueKey = null;\n\n      if (this.model) {\n        const uniqueKeys = Object.keys(this.model.uniqueKeys);\n\n        const currKey = uniqueKeys.find(key => {\n          // We check directly AND with quotes -> \"a\"\" === a || \"a\" === \"a\"\n          return key.toUpperCase() === match[1].toUpperCase() || key.toUpperCase() === `\"${match[1].toUpperCase()}\"`;\n        });\n\n        if (currKey) {\n          uniqueKey = this.model.uniqueKeys[currKey];\n          fields = uniqueKey.fields;\n        }\n\n        if (uniqueKey && !!uniqueKey.msg) {\n          message = uniqueKey.msg;\n        }\n\n        fields.forEach(field => {\n          errors.push(\n            new SequelizeErrors.ValidationErrorItem(\n              this.getUniqueConstraintErrorMessage(field),\n              'unique violation',\n              field,\n              null\n            )\n          );\n        });\n      }\n\n      return new SequelizeErrors.UniqueConstraintError({\n        message,\n        errors,\n        err,\n        fields\n      });\n    }\n\n    // ORA-02291: integrity constraint (string.string) violated - parent key not found / ORA-02292: integrity constraint (string.string) violated - child record found\n    match = err.message.match(/ORA-02291/) || err.message.match(/ORA-02292/);\n    if (match && match.length > 0) {\n      return new SequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err\n      });\n    }\n\n    // ORA-02443: Cannot drop constraint  - nonexistent constraint\n    match = err.message.match(/ORA-02443/);\n    if (match && match.length > 0) {\n      return new SequelizeErrors.UnknownConstraintError(match[1]);\n    }\n\n    return new SequelizeErrors.DatabaseError(err);\n  }\n\n  isShowIndexesQuery() {\n    return this.sql.indexOf('SELECT i.index_name,i.table_name, i.column_name, u.uniqueness') > -1;\n  }\n\n  isSelectCountQuery() {\n    return this.sql.toUpperCase().indexOf('SELECT COUNT(') > -1;\n  }\n\n  handleShowIndexesQuery(data) {\n    const acc = [];\n\n    // We first treat the datas\n    data.forEach(indexRecord => {\n      // We create the object\n      if (!acc[indexRecord.INDEX_NAME]) {\n        acc[indexRecord.INDEX_NAME] = {\n          unique: indexRecord.UNIQUENESS === 'UNIQUE' ? true : false,\n          primary: indexRecord.CONSTRAINT_TYPE === 'P',\n          name: indexRecord.INDEX_NAME.toLowerCase(),\n          tableName: indexRecord.TABLE_NAME.toLowerCase(),\n          type: undefined\n        };\n        acc[indexRecord.INDEX_NAME].fields = [];\n      }\n\n      // We create the fields\n      acc[indexRecord.INDEX_NAME].fields.push({\n        attribute: indexRecord.COLUMN_NAME,\n        length: undefined,\n        order: indexRecord.DESCEND,\n        collate: undefined\n      });\n    });\n\n    const returnIndexes = [];\n    const accKeys = Object.keys(acc);\n    for (const accKey of accKeys) {\n      const columns = {};\n      columns.fields = acc[accKey].fields;\n      // We are generating index field name in the format sequelize expects\n      // to avoid creating a unique index on auto-generated index name\n      if (acc[accKey].name.match(/sys_c[0-9]*/)) {\n        acc[accKey].name = Utils.nameIndex(columns, acc[accKey].tableName).name;\n      }\n      returnIndexes.push(acc[accKey]);\n    }\n    return returnIndexes;\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance && results.length > 0) {\n      if ('pkReturnVal' in results[0]) {\n        // The PK of the table is a reserved word (ex : uuid), we have to change the name in the result for the model to find the value correctly\n        results[0][this.model.primaryKeyAttribute] = results[0].pkReturnVal;\n        delete results[0].pkReturnVal;\n      }\n      // add the inserted row id to the instance\n      const autoIncrementField = this.model.autoIncrementAttribute;\n      let autoIncrementFieldAlias = null,\n        id = null;\n\n      if (\n        Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementField) &&\n        this.model.rawAttributes[autoIncrementField].field !== undefined\n      )\n        autoIncrementFieldAlias = this.model.rawAttributes[autoIncrementField].field;\n\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementField];\n      id = id || autoIncrementFieldAlias && results && results[0][autoIncrementFieldAlias];\n\n      this.instance[autoIncrementField] = id;\n    }\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 19248, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 19253, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/oracle/query-generator.js"],"sourcesContent":["// Copyright (c) 2022, Oracle and/or its affiliates. All rights reserved\n\n'use strict';\n\nconst Utils = require('../../utils');\nconst DataTypes = require('../../data-types');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\nconst _ = require('lodash');\nconst util = require('util');\nconst Transaction = require('../../transaction');\n\n/**\n * list of reserved words in Oracle DB 21c\n * source: https://www.oracle.com/pls/topic/lookup?ctx=dblatest&id=GUID-7B72E154-677A-4342-A1EA-C74C1EA928E6\n *\n * @private\n */\nconst ORACLE_RESERVED_WORDS = ['ACCESS', 'ADD', 'ALL', 'ALTER', 'AND', 'ANY', 'ARRAYLEN', 'AS', 'ASC', 'AUDIT', 'BETWEEN', 'BY', 'CHAR', 'CHECK', 'CLUSTER', 'COLUMN', 'COMMENT', 'COMPRESS', 'CONNECT', 'CREATE', 'CURRENT', 'DATE', 'DECIMAL', 'DEFAULT', 'DELETE', 'DESC', 'DISTINCT', 'DROP', 'ELSE', 'EXCLUSIVE', 'EXISTS', 'FILE', 'FLOAT', 'FOR', 'FROM', 'GRANT', 'GROUP', 'HAVING', 'IDENTIFIED', 'IMMEDIATE', 'IN', 'INCREMENT', 'INDEX', 'INITIAL', 'INSERT', 'INTEGER', 'INTERSECT', 'INTO', 'IS', 'LEVEL', 'LIKE', 'LOCK', 'LONG', 'MAXEXTENTS', 'MINUS', 'MODE', 'MODIFY', 'NOAUDIT', 'NOCOMPRESS', 'NOT', 'NOTFOUND', 'NOWAIT', 'NULL', 'NUMBER', 'OF', 'OFFLINE', 'ON', 'ONLINE', 'OPTION', 'OR', 'ORDER', 'PCTFREE', 'PRIOR', 'PRIVILEGES', 'PUBLIC', 'RAW', 'RENAME', 'RESOURCE', 'REVOKE', 'ROW', 'ROWID', 'ROWLABEL', 'ROWNUM', 'ROWS', 'SELECT', 'SESSION', 'SET', 'SHARE', 'SIZE', 'SMALLINT', 'SQLBUF', 'START', 'SUCCESSFUL', 'SYNONYM', 'SYSDATE', 'TABLE', 'THEN', 'TO', 'TRIGGER', 'UID', 'UNION', 'UNIQUE', 'UPDATE', 'USER', 'VALIDATE', 'VALUES', 'VARCHAR', 'VARCHAR2', 'VIEW', 'WHENEVER', 'WHERE', 'WITH'];\nconst JSON_FUNCTION_REGEX = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\nconst JSON_OPERATOR_REGEX = /^\\s*(->>?|@>|<@|\\?[|&]?|\\|{2}|#-)/i;\nconst TOKEN_CAPTURE_REGEX = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n\nexport class OracleQueryGenerator extends AbstractQueryGenerator {\n  constructor(options) {\n    super(options);\n  }\n\n  /**\n   * Returns the value as it is stored in the Oracle DB\n   *\n   * @param {string} value\n   */\n  getCatalogName(value) {\n    if (value) {\n      if (this.options.quoteIdentifiers === false) {\n        const quotedValue = this.quoteIdentifier(value);\n        if (quotedValue === value) {\n          value = value.toUpperCase();\n        }\n      }\n    }\n    return value;\n  }\n\n  /**\n   * Returns the tableName and schemaName as it is stored the Oracle DB\n   *\n   * @param {object|string} table\n   */\n  getSchemaNameAndTableName(table) {\n    const tableName = this.getCatalogName(table.tableName || table);\n    const schemaName = this.getCatalogName(table.schema);\n    return [tableName, schemaName];\n  }\n\n  createSchema(schema) {\n    const quotedSchema = this.quoteIdentifier(schema);\n    return [\n      'DECLARE',\n      'USER_FOUND BOOLEAN := FALSE;',\n      'BEGIN',\n      ' BEGIN',\n      '   EXECUTE IMMEDIATE ',\n      this.escape(`CREATE USER ${quotedSchema} IDENTIFIED BY 12345 DEFAULT TABLESPACE USERS`),\n      ';',\n      '   EXCEPTION WHEN OTHERS THEN',\n      '     IF SQLCODE != -1920 THEN',\n      '       RAISE;',\n      '     ELSE',\n      '       USER_FOUND := TRUE;',\n      '     END IF;',\n      ' END;',\n      ' IF NOT USER_FOUND THEN',\n      '    EXECUTE IMMEDIATE ',\n      this.escape(`GRANT \"CONNECT\" TO ${quotedSchema}`),\n      ';',\n      '    EXECUTE IMMEDIATE ',\n      this.escape(`GRANT CREATE TABLE TO ${quotedSchema}`),\n      ';',\n      '    EXECUTE IMMEDIATE ',\n      this.escape(`GRANT CREATE VIEW TO ${quotedSchema}`),\n      ';',\n      '    EXECUTE IMMEDIATE ',\n      this.escape(`GRANT CREATE ANY TRIGGER TO ${quotedSchema}`),\n      ';',\n      '    EXECUTE IMMEDIATE ',\n      this.escape(`GRANT CREATE ANY PROCEDURE TO ${quotedSchema}`),\n      ';',\n      '    EXECUTE IMMEDIATE ',\n      this.escape(`GRANT CREATE SEQUENCE TO ${quotedSchema}`),\n      ';',\n      '    EXECUTE IMMEDIATE ',\n      this.escape(`GRANT CREATE SYNONYM TO ${quotedSchema}`),\n      ';',\n      '    EXECUTE IMMEDIATE ',\n      this.escape(`ALTER USER ${quotedSchema} QUOTA UNLIMITED ON USERS`),\n      ';',\n      ' END IF;',\n      'END;'\n    ].join(' ');\n  }\n\n  showSchemasQuery() {\n    return 'SELECT USERNAME AS \"schema_name\" FROM ALL_USERS WHERE COMMON = (\\'NO\\') AND USERNAME != user';\n  }\n\n  dropSchema(schema) {\n    return [\n      'BEGIN',\n      'EXECUTE IMMEDIATE ',\n      this.escape(`DROP USER ${this.quoteTable(schema)} CASCADE`),\n      ';',\n      'EXCEPTION WHEN OTHERS THEN',\n      '  IF SQLCODE != -1918 THEN',\n      '    RAISE;',\n      '  END IF;',\n      'END;'\n    ].join(' ');\n  }\n\n  versionQuery() {\n    return \"SELECT VERSION_FULL FROM PRODUCT_COMPONENT_VERSION WHERE PRODUCT LIKE 'Oracle%'\";\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    const primaryKeys = [],\n      foreignKeys = Object.create(null),\n      attrStr = [],\n      checkStr = [];\n\n    const values = {\n      table: this.quoteTable(tableName)\n    };\n\n    // Starting by dealing with all attributes\n    for (let attr in attributes) {\n      if (!Object.prototype.hasOwnProperty.call(attributes, attr)) continue;\n      const dataType = attributes[attr];\n      attr = this.quoteIdentifier(attr);\n\n      // ORACLE doesn't support inline REFERENCES declarations: move to the end\n      if (dataType.includes('PRIMARY KEY')) {\n        // Primary key\n        primaryKeys.push(attr);\n        if (dataType.includes('REFERENCES')) {\n          const match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attrStr.push(`${attr} ${match[1].replace(/PRIMARY KEY/, '')}`);\n\n          // match[2] already has foreignKeys in correct format so we don't need to replace\n          foreignKeys[attr] = match[2];\n        } else {\n          attrStr.push(`${attr} ${dataType.replace(/PRIMARY KEY/, '').trim()}`);\n        }\n      } else if (dataType.includes('REFERENCES')) {\n        // Foreign key\n        const match = dataType.match(/^(.+) (REFERENCES.*)$/);\n        attrStr.push(`${attr} ${match[1]}`);\n\n        // match[2] already has foreignKeys in correct format so we don't need to replace\n        foreignKeys[attr] = match[2];\n      } else {\n        attrStr.push(`${attr} ${dataType}`);\n      }\n    }\n\n    values['attributes'] = attrStr.join(', ');\n\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(', ');\n\n    if (pkString.length > 0) {\n      values.attributes += `,PRIMARY KEY (${pkString})`;\n    }\n\n    // Dealing with FKs\n    for (const fkey in foreignKeys) {\n      if (!Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) continue; \n      // Oracle default response for FK, doesn't support if defined\n      if (foreignKeys[fkey].indexOf('ON DELETE NO ACTION') > -1) {\n        foreignKeys[fkey] = foreignKeys[fkey].replace('ON DELETE NO ACTION', '');\n      }\n      values.attributes += `,FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`;\n    }\n\n    if (checkStr.length > 0) {\n      values.attributes += `, ${checkStr.join(', ')}`;\n    }\n\n    // Specific case for unique indexes with Oracle, we have to set the constraint on the column, if not, no FK will be possible (ORA-02270: no matching unique or primary key for this column-list)\n    if (options && options.indexes && options.indexes.length > 0) {\n      const idxToDelete = [];\n      options.indexes.forEach((index, idx) => {\n        if ('unique' in index && (index.unique === true || index.unique.length > 0 && index.unique !== false)) {\n          // If unique index, transform to unique constraint on column\n          const fields = index.fields.map(field => {\n            if (typeof field === 'string') {\n              return field;\n            } \n            return field.attribute;\n            \n          });\n\n          // Now we have to be sure that the constraint isn't already declared in uniqueKeys\n          let canContinue = true;\n          if (options.uniqueKeys) {\n            const keys = Object.keys(options.uniqueKeys);\n\n            for (let fieldIdx = 0; fieldIdx < keys.length; fieldIdx++) {\n              const currUnique = options.uniqueKeys[keys[fieldIdx]];\n\n              if (currUnique.fields.length === fields.length) {\n                // lengths are the same, possible same constraint\n                for (let i = 0; i < currUnique.fields.length; i++) {\n                  const field = currUnique.fields[i];\n\n                  if (_.includes(fields, field)) {\n                    canContinue = false;\n                  } else {\n                    // We have at least one different column, even if we found the same columns previously, we let the constraint be created\n                    canContinue = true;\n                    break;\n                  }\n                }\n              }\n            }\n\n            if (canContinue) {\n              const indexName = 'name' in index ? index.name : '';\n              const constraintToAdd = {\n                name: indexName,\n                fields\n              };\n              if (!('uniqueKeys' in options)) {\n                options.uniqueKeys = {};\n              }\n\n              options.uniqueKeys[indexName] = constraintToAdd;\n              idxToDelete.push(idx);\n            } else {\n              // The constraint already exists, we remove it from the list\n              idxToDelete.push(idx);\n            }\n          }\n        }\n      });\n      idxToDelete.forEach(idx => {\n        options.indexes.splice(idx, 1);\n      });\n    }\n\n    if (options && !!options.uniqueKeys) {\n      _.each(options.uniqueKeys, (columns, indexName) => {\n        let canBeUniq = false;\n\n        // Check if we can create the unique key\n        primaryKeys.forEach(primaryKey => {\n          // We can create an unique constraint if it's not on the primary key AND if it doesn't have unique in its definition\n          // We replace quotes in primary key with ''\n          // Primary key would be a list with double quotes in it so we remove the double quotes\n          primaryKey = primaryKey.replace(/\"/g, '');\n\n          // We check if the unique indexes are already a part of primary key or not\n          // If it is not then we set canbeuniq to true and add a unique constraint to these fields.\n          // Else we can ignore unique constraint on these\n          if (!_.includes(columns.fields, primaryKey)) {\n            canBeUniq = true;\n          }\n        });\n\n        columns.fields.forEach(field => {\n          let currField = '';\n          if (!_.isString(field)) {\n            currField = field.attribute.replace(/[.,\"\\s]/g, '');\n          } else {\n            currField = field.replace(/[.,\"\\s]/g, '');\n          }\n          if (currField in attributes) {\n            // If canBeUniq is false we need not replace the UNIQUE for the attribute\n            // So we replace UNIQUE with '' only if there exists a primary key\n            if (attributes[currField].toUpperCase().indexOf('UNIQUE') > -1 && canBeUniq) {\n              // We generate the attribute without UNIQUE\n              const attrToReplace = attributes[currField].replace('UNIQUE', '');\n              // We replace in the final string\n              values.attributes = values.attributes.replace(attributes[currField], attrToReplace);\n            }\n          }\n        });\n\n        // Oracle cannot have an unique AND a primary key on the same fields, prior to the primary key\n        if (canBeUniq) {\n          const index = options.uniqueKeys[columns.name];\n          delete options.uniqueKeys[columns.name];\n          indexName = indexName.replace(/[.,\\s]/g, '');\n          columns.name = indexName;\n          options.uniqueKeys[indexName] = index;\n\n          // Autogenerate Constraint name, if no indexName is given\n          if (indexName.length === 0) {\n            values.attributes += `,UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ') })`;\n          } else {\n            values.attributes +=\n              `, CONSTRAINT ${this.quoteIdentifier(indexName)} UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ') })`;\n          }\n        }\n      });\n    }\n\n    // we replace single quotes by two quotes in order for the execute statement to work\n    const query = Utils.joinSQLFragments([\n      'CREATE TABLE',\n      values.table,\n      `(${values.attributes})`\n    ]);\n\n    return Utils.joinSQLFragments([\n      'BEGIN',\n      'EXECUTE IMMEDIATE',\n      `${this.escape(query)};`,\n      'EXCEPTION WHEN OTHERS THEN',\n      'IF SQLCODE != -955 THEN',\n      'RAISE;',\n      'END IF;',\n      'END;'\n    ]);\n  }\n\n  tableExistsQuery(table) {\n    const [tableName, schemaName] = this.getSchemaNameAndTableName(table);\n    return `SELECT TABLE_NAME FROM ALL_TABLES WHERE TABLE_NAME = ${this.escape(tableName)} AND OWNER = ${table.schema ? this.escape(schemaName) : 'USER'}`;\n  }\n  \n  describeTableQuery(tableName, schema) {\n    const currTableName = this.getCatalogName(tableName.tableName || tableName);\n    schema = this.getCatalogName(schema);\n    // name, type, datalength (except number / nvarchar), datalength varchar, datalength number, nullable, default value, primary ?\n    return [\n      'SELECT atc.COLUMN_NAME, atc.DATA_TYPE, atc.DATA_LENGTH, atc.CHAR_LENGTH, atc.DEFAULT_LENGTH, atc.NULLABLE, ucc.constraint_type ',\n      'FROM all_tab_columns atc ',\n      'LEFT OUTER JOIN ',\n      '(SELECT acc.column_name, acc.table_name, ac.constraint_type FROM all_cons_columns acc INNER JOIN all_constraints ac ON acc.constraint_name = ac.constraint_name) ucc ',\n      'ON (atc.table_name = ucc.table_name AND atc.COLUMN_NAME = ucc.COLUMN_NAME) ',\n      schema\n        ? `WHERE (atc.OWNER = ${this.escape(schema)}) `\n        : 'WHERE atc.OWNER = USER ',\n      `AND (atc.TABLE_NAME = ${this.escape(currTableName)})`,\n      'ORDER BY atc.COLUMN_NAME, CONSTRAINT_TYPE DESC'\n    ].join('');\n  }\n\n  renameTableQuery(before, after) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(before),\n      'RENAME TO',\n      this.quoteTable(after)\n    ]);\n  }\n\n  showConstraintsQuery(table) {\n    const tableName = this.getCatalogName(table.tableName || table);\n    return `SELECT CONSTRAINT_NAME constraint_name FROM user_cons_columns WHERE table_name = ${this.escape(tableName)}`;\n  }\n\n  showTablesQuery() {\n    return 'SELECT owner as table_schema, table_name, 0 as lvl FROM all_tables where OWNER IN(SELECT USERNAME AS \"schema_name\" FROM ALL_USERS WHERE ORACLE_MAINTAINED = \\'N\\')';\n  }\n\n  dropTableQuery(tableName) {\n    return Utils.joinSQLFragments([\n      'BEGIN ',\n      'EXECUTE IMMEDIATE \\'DROP TABLE',\n      this.quoteTable(tableName),\n      'CASCADE CONSTRAINTS PURGE\\';',\n      'EXCEPTION WHEN OTHERS THEN',\n      ' IF SQLCODE != -942 THEN',\n      '   RAISE;',\n      ' END IF;',\n      'END;'\n    ]);\n  }\n\n  /*\n    Modifying the indexname so that it is prefixed with the schema name\n    otherwise Oracle tries to add the index to the USER schema\n   @overide\n  */\n  addIndexQuery(tableName, attributes, options, rawTablename) {\n    if (typeof tableName !== 'string' && attributes.name) {\n      attributes.name = `${tableName.schema}.${attributes.name}`;\n    }\n    return super.addIndexQuery(tableName, attributes, options, rawTablename);\n  }\n\n  addConstraintQuery(tableName, options) {\n    options = options || {};\n\n    if (options.onUpdate) {\n      // Oracle does not support ON UPDATE, remove it.\n      delete options.onUpdate;\n    }\n\n    if (options.onDelete && options.onDelete.toUpperCase() === 'NO ACTION') {\n      // 'ON DELETE NO ACTION' is the default option in Oracle, but it is not supported if defined\n      delete options.onDelete;\n    }\n\n    const constraintSnippet = this.getConstraintSnippet(tableName, options);\n\n    tableName = this.quoteTable(tableName);\n    return `ALTER TABLE ${tableName} ADD ${constraintSnippet};`;\n  }\n\n  addColumnQuery(table, key, dataType) {\n    dataType.field = key;\n\n    const attribute = Utils.joinSQLFragments([\n      this.quoteIdentifier(key),\n      this.attributeToSQL(dataType, {\n        attributeName: key,\n        context: 'addColumn'\n      })\n    ]);\n\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(table),\n      'ADD',\n      attribute\n    ]);\n  }\n\n  removeColumnQuery(tableName, attributeName) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP COLUMN',\n      this.quoteIdentifier(attributeName),\n      ';'\n    ]);\n  }\n\n  /**\n   * Function to add new foreign key to the attribute \n   * Block for add and drop foreign key constraint query\n   * taking the assumption that there is a single column foreign key reference always\n   * i.e. we always do - FOREIGN KEY (a) reference B(a) during createTable queryGenerator\n   * so there would be one and only one match for a constraint name for each column\n   * and every foreign keyed column would have a different constraint name\n   * Since sequelize doesn't support multiple column foreign key, added complexity to\n   * add the feature isn't needed\n   *\n   * @param {string} definition The operation that needs to be performed on the attribute\n   * @param {string|object} table The table that needs to be altered\n   * @param {string} attributeName The name of the attribute which would get altered\n   */\n  _alterForeignKeyConstraint(definition, table, attributeName) {\n    const [tableName, schemaName] = this.getSchemaNameAndTableName(table);\n    const attributeNameConstant = this.escape(this.getCatalogName(attributeName));\n    const schemaNameConstant = table.schema ? this.escape(this.getCatalogName(schemaName)) : 'USER';\n    const tableNameConstant = this.escape(this.getCatalogName(tableName));\n    const getConsNameQuery = [\n      'SELECT constraint_name INTO cons_name',\n      'FROM (',\n      '  SELECT DISTINCT cc.owner, cc.table_name, cc.constraint_name, cc.column_name AS cons_columns',\n      '  FROM all_cons_columns cc, all_constraints c',\n      '  WHERE cc.owner = c.owner',\n      '  AND cc.table_name = c.table_name',\n      '  AND cc.constraint_name = c.constraint_name',\n      '  AND c.constraint_type = \\'R\\'',\n      '  GROUP BY cc.owner, cc.table_name, cc.constraint_name, cc.column_name',\n      ')',\n      'WHERE owner =',\n      schemaNameConstant,\n      'AND table_name =',\n      tableNameConstant,\n      'AND cons_columns =',\n      attributeNameConstant,\n      ';'\n    ].join(' ');\n    const secondQuery = Utils.joinSQLFragments([\n      `ALTER TABLE ${this.quoteIdentifier(tableName)}`,\n      'ADD FOREIGN KEY',\n      `(${this.quoteIdentifier(attributeName)})`,\n      definition.replace(/.+?(?=REFERENCES)/, '')\n    ]);\n    return [\n      'BEGIN',\n      getConsNameQuery,\n      'EXCEPTION',\n      'WHEN NO_DATA_FOUND THEN',\n      ' CONS_NAME := NULL;',\n      'END;',\n      'IF CONS_NAME IS NOT NULL THEN',\n      ` EXECUTE IMMEDIATE 'ALTER TABLE ${this.quoteTable(table)} DROP CONSTRAINT \"'||CONS_NAME||'\"';`,\n      'END IF;',\n      `EXECUTE IMMEDIATE ${this.escape(secondQuery)};`\n    ].join(' ');\n  }\n\n  /**\n   * Function to alter table modify\n   *\n   * @param {string} definition The operation that needs to be performed on the attribute\n   * @param {object|string} table The table that needs to be altered\n   * @param {string} attributeName The name of the attribute which would get altered\n   */\n  _modifyQuery(definition, table, attributeName) {\n    const query = Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(table),\n      'MODIFY',\n      this.quoteIdentifier(attributeName),\n      definition\n    ]);\n    const secondQuery = query.replace('NOT NULL', '').replace('NULL', '');\n    return [\n      'BEGIN',\n      `EXECUTE IMMEDIATE ${this.escape(query)};`,\n      'EXCEPTION',\n      'WHEN OTHERS THEN',\n      ' IF SQLCODE = -1442 OR SQLCODE = -1451 THEN',\n      // We execute the statement without the NULL / NOT NULL clause if the first statement failed due to this\n      `   EXECUTE IMMEDIATE ${this.escape(secondQuery)};`,\n      ' ELSE',\n      '   RAISE;',\n      ' END IF;',\n      'END;'\n    ].join(' ');\n  }\n\n  changeColumnQuery(table, attributes) {\n    const sql = [\n      'DECLARE',\n      'CONS_NAME VARCHAR2(200);',\n      'BEGIN'\n    ];\n    for (const attributeName in attributes) {\n      if (!Object.prototype.hasOwnProperty.call(attributes, attributeName)) continue;\n      const definition = attributes[attributeName];\n      if (definition.match(/REFERENCES/)) {\n        sql.push(this._alterForeignKeyConstraint(definition, table, attributeName));\n      } else {\n        // Building the modify query\n        sql.push(this._modifyQuery(definition, table, attributeName));\n      }\n    }\n    sql.push('END;');\n    return sql.join(' ');\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const newName = Object.keys(attributes)[0];\n    return `ALTER TABLE ${this.quoteTable(tableName)} RENAME COLUMN ${this.quoteIdentifier(attrBefore)} TO ${this.quoteIdentifier(newName)}`;\n  }\n\n  /**\n   * Populates the returnAttributes array with outbind bindByPosition values\n   * and also the options.outBindAttributes map with bindDef for outbind of InsertQuery\n   *\n   * @param {Array} returningModelAttributes\n   * @param {Array} returnTypes\n   * @param {number} inbindLength\n   * @param {object} returnAttributes\n   * @param {object} options\n   *\n   * @private\n   */\n  populateInsertQueryReturnIntoBinds(returningModelAttributes, returnTypes, inbindLength, returnAttributes, options) {\n    const oracledb = this.sequelize.connectionManager.lib;\n    const outBindAttributes = Object.create(null);\n    const outbind = [];\n    const outbindParam = this.bindParam(outbind, inbindLength);\n    returningModelAttributes.forEach((element, index) => {\n      // generateReturnValues function quotes identifier based on the quoteIdentifier option\n      // If the identifier starts with a quote we remove it else we use it as is\n      if (element.startsWith('\"')) {\n        element = element.substring(1, element.length - 1);\n      }\n      outBindAttributes[element] = Object.assign(returnTypes[index]._getBindDef(oracledb), { dir: oracledb.BIND_OUT });\n      const returnAttribute = `${this.format(undefined, undefined, { context: 'INSERT' }, outbindParam)}`;\n      returnAttributes.push(returnAttribute);\n    });\n    options.outBindAttributes = outBindAttributes;\n  }\n\n  /**\n   * Override of upsertQuery, Oracle specific\n   * Using PL/SQL for finding the row\n   *\n   * @param {object|string} tableName\n   * @param {Array} insertValues\n   * @param {Array} updateValues\n   * @param {Array} where\n   * @param {object} model\n   * @param {object} options\n   */\n  upsertQuery(tableName, insertValues, updateValues, where, model, options) {\n    const rawAttributes = model.rawAttributes;\n    const updateQuery = this.updateQuery(tableName, updateValues, where, options, rawAttributes);\n    // This bind is passed so that the insert query starts appending to this same bind array\n    options.bind = updateQuery.bind;\n    const insertQuery = this.insertQuery(tableName, insertValues, rawAttributes, options);\n\n    const sql = [\n      'DECLARE ',\n      'BEGIN ',\n      updateQuery.query ? [ \n        updateQuery.query,\n        '; ',\n        ' IF ( SQL%ROWCOUNT = 0 ) THEN ',\n        insertQuery.query,\n        ' :isUpdate := 0; ',\n        'ELSE ',\n        ' :isUpdate := 1; ',\n        ' END IF; '\n      ].join('') : [\n        insertQuery.query,\n        ' :isUpdate := 0; ',\n        // If there is a conflict on insert we ignore\n        'EXCEPTION WHEN OTHERS THEN',\n        ' IF SQLCODE != -1 THEN',\n        '   RAISE;',\n        ' END IF;'\n      ].join(''),\n      'END;'\n    ];\n\n    const query = sql.join('');\n    const result = { query };\n    \n    if (options.bindParam !== false) {\n      result.bind = updateQuery.bind || insertQuery.bind;\n    }\n\n    return result;\n  }\n\n  /**\n   * Returns an insert into command for multiple values.\n   *\n   * @param {string} tableName\n   * @param {object} fieldValueHashes\n   * @param {object} options\n   * @param {object} fieldMappedAttributes\n   *\n   * @private\n   */\n  bulkInsertQuery(tableName, fieldValueHashes, options, fieldMappedAttributes) {\n    options = options || {};\n    options.executeMany = true;\n    fieldMappedAttributes = fieldMappedAttributes || {};\n\n    const tuples = [];\n    const allColumns = {};\n    const inBindBindDefMap = {};\n    const outBindBindDefMap = {};\n    const oracledb = this.sequelize.connectionManager.lib;\n\n    // Generating the allColumns map\n    // The data is provided as an array of objects. \n    // Each object may contain differing numbers of attributes. \n    // A set of the attribute names that are used in all objects must be determined. \n    // The allColumns map contains the column names and indicates whether the value is generated or not\n    // We set allColumns[key] to true if the field is an\n    // auto-increment field and the value given is null and fieldMappedAttributes[key]\n    // is valid for the specific column else it is set to false\n    for (const fieldValueHash of fieldValueHashes) {\n      _.forOwn(fieldValueHash, (value, key) => {\n        allColumns[key] = fieldMappedAttributes[key] && fieldMappedAttributes[key].autoIncrement === true && value === null;\n      });\n    }\n\n    // Building the inbind parameter\n    // A list that would have inbind positions like [:1, :2, :3...] to be used in generating sql string\n    let inBindPosition;\n    // Iterating over each row of the fieldValueHashes\n    for (const fieldValueHash of fieldValueHashes) {\n      // Has each column for a row after coverting it to appropriate format using this.format function\n      // like ['Mick', 'Broadstone', 2022-02-16T05:24:18.949Z, 2022-02-16T05:24:18.949Z],\n      const tuple = [];\n      // A function expression for this.bindParam/options.bindparam function\n      // This function is passed to this.format function which inserts column values to the tuple list\n      // using _bindParam/_stringify function in data-type.js file\n      const inbindParam = options.bindParam === undefined ? this.bindParam(tuple) : options.bindParam;\n      // We are iterating over each col\n      // and pushing the given values to tuple list using this.format function\n      // and also simultaneously generating the bindPosition\n      // tempBindPostions has the inbind positions\n      const tempBindPositions = Object.keys(allColumns).map(key => {\n        if (allColumns[key] === true) {\n          // We had set allAttributes[key] to true since at least one row for an auto increment column was null\n          // If we get any other row that has this specific column as non-null we must raise an error\n          // Since for an auto-increment column, either all row has to be null or all row has to be a non-null\n          if (fieldValueHash[key] !== null) {\n            throw Error('For an auto-increment column either all row must be null or non-null, a mix of null and non-null is not allowed!');\n          }\n          // Return DEFAULT for auto-increment column and if all values for the column is null in each row\n          return 'DEFAULT';\n        }\n        // Sanitizes the values given by the user and pushes it to the tuple list using inBindParam function and\n        // also generates the inbind position for the sql string for example (:1, :2, :3.....) which is a by product of the push\n        return this.format(fieldValueHash[key], fieldMappedAttributes[key], { context: 'INSERT' }, inbindParam);\n      });\n\n      // Even though the bind variable positions are calculated for each row we only retain the values for the first row \n      // since the values will be identical\n      if (!inBindPosition) {\n        inBindPosition = tempBindPositions;\n      }\n      // Adding the row to the array of rows that will be supplied to executeMany()\n      tuples.push(tuple);\n    }\n\n    // The columns that we are expecting to be returned from the DB like [\"id1\", \"id2\"...]\n    const returnColumn = [];\n    // The outbind positions for the returning columns like [:3, :4, :5....]\n    const returnColumnBindPositions = [];\n    // Has the columns name in which data would be inserted like [\"id\", \"name\".....]\n    const insertColumns = [];\n    // Iterating over the allColumns keys to get the bindDef for inbind and outbinds\n    // and also to get the list of insert and return column after applying this.quoteIdentifier\n    for (const key of Object.keys(allColumns)) {\n      // If fieldMappenAttributes[attr] is defined we generate the bindDef \n      // and return clause else we can skip it\n      if (fieldMappedAttributes[key]) {\n        // BindDef for the specific column\n        const bindDef = fieldMappedAttributes[key].type._getBindDef(oracledb);\n        if (allColumns[key]) {\n          // Binddef for outbinds\n          bindDef.dir = oracledb.BIND_OUT;\n          outBindBindDefMap[key] = bindDef;\n\n          // Building the outbind parameter list\n          // ReturnColumn has the column name for example \"id\", \"usedId\", quoting depends on quoteIdentifier option\n          returnColumn.push(this.quoteIdentifier(key));\n          // Pushing the outbind index to the returnColumnPositions to generate (:3, :4, :5)\n          // The start offset depend on the tuple length (bind array size of a particular row)\n          // the outbind position starts after the position where inbind position ends\n          returnColumnBindPositions.push(`:${tuples[0].length + returnColumn.length}`);\n        } else {\n          // Binddef for inbinds\n          bindDef.dir = oracledb.BIND_IN;\n          inBindBindDefMap[key] = bindDef;\n        }\n      }\n      // Quoting and pushing each insert column based on quoteIdentifier option\n      insertColumns.push(this.quoteIdentifier(key));\n    }\n   \n    // Generating the sql query\n    let query = Utils.joinSQLFragments([\n      'INSERT',\n      'INTO',\n      // Table name for the table in which data needs to inserted\n      this.quoteTable(tableName),\n      // Columns names for the columns of the table (example \"a\", \"b\", \"c\" - quoting depends on the quoteidentifier option)\n      `(${insertColumns.join(',')})`,\n      'VALUES',\n      // InBind position for the insert query (for example :1, :2, :3....)\n      `(${inBindPosition})`\n    ]);\n\n    // If returnColumn.length is > 0\n    // then the returning into clause is needed\n    if (returnColumn.length > 0) {\n      options.outBindAttributes = outBindBindDefMap;\n      query = Utils.joinSQLFragments([\n        query,\n        'RETURNING',\n        // List of return column (for example \"id\", \"userId\"....)\n        `${returnColumn.join(',')}`,\n        'INTO',\n        // List of outbindPosition (for example :4, :5, :6....)\n        // Start offset depends on where inbindPosition end\n        `${returnColumnBindPositions}`\n      ]);\n    }\n\n    // Binding the bind variable to result\n    const result = { query };\n    // Binding the bindParam to result\n    // Tuple has each row for the insert query\n    result.bind = tuples;\n    // Setting options.inbindAttribute\n    options.inbindAttributes = inBindBindDefMap;\n    return result;\n  }\n\n  truncateTableQuery(tableName) {\n    return `TRUNCATE TABLE ${this.quoteTable(tableName)}`;\n  }\n\n  deleteQuery(tableName, where, options, model) {\n    options = options || {};\n\n    const table = tableName;\n\n    where = this.getWhereConditions(where, null, model, options);\n    let queryTmpl;\n    // delete with limit <l> and optional condition <e> on Oracle: DELETE FROM <t> WHERE rowid in (SELECT rowid FROM <t> WHERE <e> AND rownum <= <l>)\n    // Note that the condition <e> has to be in the subquery; otherwise, the subquery would select <l> arbitrary rows.\n    if (options.limit) {\n      const whereTmpl = where ? ` AND ${where}` : '';\n      queryTmpl =\n        `DELETE FROM ${this.quoteTable(table)} WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(table)} WHERE rownum <= ${this.escape(options.limit)}${ \n          whereTmpl \n        })`;\n    } else {\n      const whereTmpl = where ? ` WHERE ${where}` : '';\n      queryTmpl = `DELETE FROM ${this.quoteTable(table)}${whereTmpl}`;\n    }\n    return queryTmpl;\n  }\n\n  showIndexesQuery(table) {\n    const [tableName, owner] = this.getSchemaNameAndTableName(table);\n    const sql = [\n      'SELECT i.index_name,i.table_name, i.column_name, u.uniqueness, i.descend, c.constraint_type ',\n      'FROM all_ind_columns i ',\n      'INNER JOIN all_indexes u ',\n      'ON (u.table_name = i.table_name AND u.index_name = i.index_name) ',\n      'LEFT OUTER JOIN all_constraints c ',\n      'ON (c.table_name = i.table_name AND c.index_name = i.index_name) ',\n      `WHERE i.table_name = ${this.escape(tableName)}`,\n      ' AND u.table_owner = ',\n      owner ? this.escape(owner) : 'USER',\n      ' ORDER BY index_name, column_position'\n    ];\n\n    return sql.join('');\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName }_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return `DROP INDEX ${this.quoteIdentifier(indexName)}`;\n  }\n\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    // TODO: Address on update cascade issue whether to throw error or ignore.\n    // Add this to documentation when merging to sequelize-main\n    // ON UPDATE CASCADE IS NOT SUPPORTED BY ORACLE.\n    attribute.onUpdate = '';\n\n    // handle self referential constraints\n    if (attribute.references) {\n      if (attribute.Model && attribute.Model.tableName === attribute.references.model) {\n        this.sequelize.log(\n          'Oracle does not support self referencial constraints, ' +\n            'we will remove it but we recommend restructuring your query'\n        );\n        attribute.onDelete = '';\n      }\n    }\n\n    let template;\n\n    template = attribute.type.toSql ? attribute.type.toSql() : '';\n    if (attribute.type instanceof DataTypes.JSON) {\n      template += ` CHECK (${this.quoteIdentifier(options.attributeName)} IS JSON)`;\n      return template;\n    }\n    if (Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;\n    }\n    if (attribute.allowNull === false) {\n      template += ' NOT NULL';\n    }\n    if (attribute.type instanceof DataTypes.ENUM) {\n      if (attribute.type.values && !attribute.values) attribute.values = attribute.type.values;\n      // enums are a special case\n      template +=\n        ` CHECK (${this.quoteIdentifier(options.attributeName)} IN(${ \n          _.map(attribute.values, value => {\n            return this.escape(value);\n          }).join(', ') \n        }))`;\n      return template;\n    } \n    if (attribute.type instanceof DataTypes.BOOLEAN) {\n      template +=\n        ` CHECK (${this.quoteIdentifier(options.attributeName)} IN('1', '0'))`;\n      return template;\n    } \n    if (attribute.autoIncrement) {\n      template = ' NUMBER(*,0) GENERATED BY DEFAULT ON NULL AS IDENTITY';\n    } else if (attribute.type && attribute.type.key === DataTypes.DOUBLE.key) {\n      template = attribute.type.toSql();\n    } else if (attribute.type) {\n      // setting it to false because oracle doesn't support unsigned int so put a check to make it behave like unsigned int\n      let unsignedTemplate = '';\n      if (attribute.type._unsigned) {\n        attribute.type._unsigned = false;\n        unsignedTemplate += ` check(${this.quoteIdentifier(options.attributeName)} >= 0)`;\n      }\n      template = attribute.type.toString();\n\n      // Blobs/texts cannot have a defaultValue\n      if (\n        attribute.type &&\n        attribute.type !== 'TEXT' &&\n        attribute.type._binary !== true &&\n        Utils.defaultValueSchemable(attribute.defaultValue)\n      ) {\n        template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;\n      }\n\n      if (!attribute.autoIncrement) {\n        // If autoincrement, not null is set automatically\n        if (attribute.allowNull === false) {\n          template += ' NOT NULL';\n        } else if (!attribute.primaryKey && !Utils.defaultValueSchemable(attribute.defaultValue)) {\n          template += ' NULL';\n        }\n      }\n      template += unsignedTemplate;\n    } else {\n      template = '';\n    }\n\n    if (attribute.unique === true && !attribute.primaryKey) {\n      template += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      template += ' PRIMARY KEY';\n    }\n\n    if ((!options || !options.withoutForeignKeyConstraints) && attribute.references) {\n      template += ` REFERENCES ${this.quoteTable(attribute.references.model)}`;\n\n      if (attribute.references.key) {\n        template += ` (${this.quoteIdentifier(attribute.references.key) })`;\n      } else {\n        template += ` (${this.quoteIdentifier('id') })`;\n      }\n\n      if (attribute.onDelete && attribute.onDelete.toUpperCase() !== 'NO ACTION') {\n        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n    }\n\n    return template;\n  }\n  attributesToSQL(attributes, options) {\n    const result = {};\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      const attributeName = attribute.field || key;\n      result[attributeName] = this.attributeToSQL(attribute, { attributeName, ...options });\n    }\n\n    return result;\n  }\n\n  createTrigger() {\n    throwMethodUndefined('createTrigger');\n  }\n\n  dropTrigger() {\n    throwMethodUndefined('dropTrigger');\n  }\n\n  renameTrigger() {\n    throwMethodUndefined('renameTrigger');\n  }\n\n  createFunction() {\n    throwMethodUndefined('createFunction');\n  }\n\n  dropFunction() {\n    throwMethodUndefined('dropFunction');\n  }\n\n  renameFunction() {\n    throwMethodUndefined('renameFunction');\n  }\n\n  getConstraintsOnColumn(table, column) {\n    const [tableName, schemaName] = this.getSchemaNameAndTableName(table);\n    column = this.getCatalogName(column);\n    const sql = [\n      'SELECT CONSTRAINT_NAME FROM user_cons_columns WHERE TABLE_NAME = ',\n      this.escape(tableName),\n      ' and OWNER = ',\n      table.schema ? this.escape(schemaName) : 'USER',\n      ' and COLUMN_NAME = ',\n      this.escape(column),\n      ' AND POSITION IS NOT NULL ORDER BY POSITION'\n    ].join('');\n\n    return sql;\n  }\n\n  getForeignKeysQuery(table) {\n    // We don't call quoteTable as we don't want the schema in the table name, Oracle seperates it on another field\n    const [tableName, schemaName] = this.getSchemaNameAndTableName(table);\n    const sql = [\n      'SELECT DISTINCT  a.table_name \"tableName\", a.constraint_name \"constraintName\", a.owner \"owner\",  a.column_name \"columnName\",', \n      ' b.table_name \"referencedTableName\", b.column_name \"referencedColumnName\"',\n      ' FROM all_cons_columns a',\n      ' JOIN all_constraints c ON a.owner = c.owner AND a.constraint_name = c.constraint_name',\n      ' JOIN all_cons_columns b ON c.owner = b.owner AND c.r_constraint_name = b.constraint_name',\n      \" WHERE c.constraint_type  = 'R'\",\n      ' AND a.table_name = ',\n      this.escape(tableName),\n      ' AND a.owner = ',\n      table.schema ? this.escape(schemaName) : 'USER',\n      ' ORDER BY a.table_name, a.constraint_name'\n    ].join('');\n\n    return sql;\n  }\n\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return this.dropConstraintQuery(tableName, foreignKey);\n  }\n\n  getPrimaryKeyConstraintQuery(table) {\n    const [tableName, schemaName] = this.getSchemaNameAndTableName(table);\n    const sql = [\n      'SELECT cols.column_name, atc.identity_column ',\n      'FROM all_constraints cons, all_cons_columns cols ',\n      'INNER JOIN all_tab_columns atc ON(atc.table_name = cols.table_name AND atc.COLUMN_NAME = cols.COLUMN_NAME )',\n      'WHERE cols.table_name = ',\n      this.escape(tableName),\n      'AND cols.owner = ',\n      table.schema ? this.escape(schemaName) : 'USER ',\n      \"AND cons.constraint_type = 'P' \",\n      'AND cons.constraint_name = cols.constraint_name ',\n      'AND cons.owner = cols.owner ',\n      'ORDER BY cols.table_name, cols.position'\n    ].join('');\n\n    return sql;\n  }\n\n  dropConstraintQuery(tableName, constraintName) {\n    return `ALTER TABLE ${this.quoteTable(tableName)} DROP CONSTRAINT ${constraintName}`;\n  }\n\n  setIsolationLevelQuery(value, options) {\n    if (options.parent) {\n      return;\n    }\n\n    switch (value) {\n      case Transaction.ISOLATION_LEVELS.READ_UNCOMMITTED:\n      case Transaction.ISOLATION_LEVELS.READ_COMMITTED:\n        return 'SET TRANSACTION ISOLATION LEVEL READ COMMITTED;';\n      case Transaction.ISOLATION_LEVELS.REPEATABLE_READ:\n        // Serializable mode is equal to Snapshot Isolation (SI) \n        // defined in ANSI std.\n        return 'SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;';\n      default:\n        throw new Error(`isolation level \"${value}\" is not supported`);\n    }\n  }\n\n  getAliasToken() {\n    return '';\n  }\n\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `SAVEPOINT ${this.quoteIdentifier(transaction.name)}`;\n    }\n\n    return 'BEGIN TRANSACTION';\n  }\n\n  commitTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return;\n    }\n\n    return 'COMMIT TRANSACTION';\n  }\n\n  rollbackTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `ROLLBACK TO SAVEPOINT ${this.quoteIdentifier(transaction.name)}`;\n    }\n\n    return 'ROLLBACK TRANSACTION';\n  }\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    let str;\n    if (smth instanceof Utils.Json) {\n      // Parse nested object\n      if (smth.conditions) {\n        const conditions = this.parseConditionObject(smth.conditions).map(condition =>\n          `${this.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path))} = '${condition.value}'`\n        );\n\n        return conditions.join(' AND ');\n      }\n      if (smth.path) {\n\n        // Allow specifying conditions using the sqlite json functions\n        if (this._checkValidJsonStatement(smth.path)) {\n          str = smth.path;\n        } else {\n          // Also support json property accessors\n          const paths = _.toPath(smth.path);\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n        if (smth.value) {\n          str += util.format(' = %s', this.escape(smth.value));\n        }\n\n        return str;\n      }\n    }\n    if (smth instanceof Utils.Cast) {\n      if (smth.val instanceof Utils.SequelizeMethod) {\n        str = this.handleSequelizeMethod(smth.val, tableName, factory, options, prepend);\n        if (smth.type === 'boolean') {\n          str = `(CASE WHEN ${str}='true' THEN 1 ELSE 0 END)`;\n          return `CAST(${str} AS NUMBER)`;\n        } if (smth.type === 'timestamptz' && /json_value\\(/.test(str)) {\n          str = str.slice(0, -1);\n          return `${str} RETURNING TIMESTAMP WITH TIME ZONE)`;\n        }\n      }\n    }\n    return super.handleSequelizeMethod(smth, tableName, factory, options, prepend);\n  }\n\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== 'string') {\n      return false;\n    }\n\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = JSON_FUNCTION_REGEX.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf('(');\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const operatorMatches = JSON_OPERATOR_REGEX.exec(string);\n      if (operatorMatches) {\n        currentIndex += operatorMatches[0].length;\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = TOKEN_CAPTURE_REGEX.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === '(') {\n          openingBrackets++;\n        } else if (capturedToken === ')') {\n          closingBrackets++;\n        } else if (capturedToken === ';') {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    // Check invalid json statement\n    if (hasJsonFunction && (hasInvalidToken || openingBrackets !== closingBrackets)) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n\n    // return true if the statement has valid json function\n    return hasJsonFunction;\n  }\n\n  jsonPathExtractionQuery(column, path) {\n    let paths = _.toPath(path);\n    const quotedColumn = this.isIdentifierQuoted(column) ? column : this.quoteIdentifier(column);\n\n    paths = paths.map(subPath => {\n      return /\\D/.test(subPath) ? Utils.addTicks(subPath, '\"') : subPath;\n    });\n\n    const pathStr = this.escape(['$'].concat(paths).join('.').replace(/\\.(\\d+)(?:(?=\\.)|$)/g, (__, digit) => `[${digit}]`));\n\n    return `json_value(${quotedColumn},${pathStr})`;\n  }\n\n  addLimitAndOffset(options, model) {\n    let fragment = '';\n    const offset = options.offset || 0,\n      isSubQuery = options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation;\n\n    let orders = {};\n    if (options.order) {\n      orders = this.getQueryOrders(options, model, isSubQuery);\n    }\n\n    if (options.limit || options.offset) {\n      // Add needed order by clause only when it is not provided\n      if (!orders.mainQueryOrder || !orders.mainQueryOrder.length || isSubQuery && (!orders.subQueryOrder || !orders.subQueryOrder.length)) {\n        const tablePkFragment = `${this.quoteTable(options.tableAs || model.name)}.${this.quoteIdentifier(model.primaryKeyField)}`;\n        fragment += ` ORDER BY ${tablePkFragment}`;\n      }\n\n      if (options.offset || options.limit) {\n        fragment += ` OFFSET ${this.escape(offset)} ROWS`;\n      }\n\n      if (options.limit) {\n        fragment += ` FETCH NEXT ${this.escape(options.limit)} ROWS ONLY`;\n      }\n    }\n\n    return fragment;\n  }\n\n  booleanValue(value) {\n    return value ? 1 : 0;\n  }\n\n  quoteIdentifier(identifier, force = false) {\n    const optForceQuote = force;\n    const optQuoteIdentifiers = this.options.quoteIdentifiers !== false;\n    const rawIdentifier = Utils.removeTicks(identifier, '\"');\n    const regExp = /^(([\\w][\\w\\d_]*))$/g;\n\n    if (\n      optForceQuote !== true &&\n      optQuoteIdentifiers === false &&\n      regExp.test(rawIdentifier) &&\n      !ORACLE_RESERVED_WORDS.includes(rawIdentifier.toUpperCase())\n    ) {\n      // In Oracle, if tables, attributes or alias are created double-quoted,\n      // they are always case sensitive. If they contain any lowercase\n      // characters, they must always be double-quoted otherwise it\n      // would get uppercased by the DB.\n      // Here, we strip quotes if we don't want case sensitivity.\n      return rawIdentifier;\n    }\n    return Utils.addTicks(rawIdentifier, '\"');\n  }\n\n  /**\n * It causes bindbyPosition like :1, :2, :3\n * We pass the val parameter so that the outBind indexes\n * starts after the inBind indexes end\n *\n * @param {Array} bind\n * @param {number} posOffset\n */\n  bindParam(bind, posOffset = 0) {\n    return value => {\n      bind.push(value);\n      return `:${bind.length + posOffset}`;\n    };\n  }\n\n  /**\n   * Returns the authenticate test query string\n   */\n  authTestQuery() {\n    return 'SELECT 1+1 AS result FROM DUAL';\n  }\n}\n\n/* istanbul ignore next */\nfunction throwMethodUndefined(methodName) {\n  throw new Error(`The method \"${methodName}\" is not defined! Please add it to your sql dialect.`);\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 20321, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 20326, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/oracle/query-interface.js"],"sourcesContent":["// Copyright (c) 2022, Oracle and/or its affiliates. All rights reserved\n\n'use strict';\nconst { QueryInterface } = require('../abstract/query-interface');\nconst QueryTypes = require('../../query-types');\n\nconst _ = require('lodash');\n/**\n * The interface that Sequelize uses to talk with Oracle database\n */\nexport class OracleQueryInterface extends QueryInterface {\n\n  /**\n   * Upsert\n   *\n   * @param {string} tableName    table to upsert on\n   * @param {object} insertValues values to be inserted, mapped to field name\n   * @param {object} updateValues values to be updated, mapped to field name\n   * @param {object} where        where conditions, which can be used for UPDATE part when INSERT fails\n   * @param {object} options      query options\n   *\n   * @returns {Promise<boolean,?number>} Resolves an array with <created, primaryKey>\n   */\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = { ...options };\n\n    const model = options.model;\n    const primaryKeys = Object.values(model.primaryKeys).map(item => item.field);\n    const uniqueKeys = Object.values(model.uniqueKeys).filter(c => c.fields.length > 0).map(c => c.fields);\n    const indexKeys = Object.values(model._indexes).filter(c => c.unique && c.fields.length > 0).map(c => c.fields);\n\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n    options.upsertKeys = [];\n\n    // For fields in updateValues, try to find a constraint or unique index\n    // that includes given field. Only first matching upsert key is used.\n    for (const field of options.updateOnDuplicate) {\n      const uniqueKey = uniqueKeys.find(fields => fields.includes(field));\n      if (uniqueKey) {\n        options.upsertKeys = uniqueKey;\n        break;\n      }\n\n      const indexKey = indexKeys.find(fields => fields.includes(field));\n      if (indexKey) {\n        options.upsertKeys = indexKey;\n        break;\n      }\n    }\n\n    // Always use PK, if no constraint available OR update data contains PK\n    if (\n      options.upsertKeys.length === 0\n      || _.intersection(options.updateOnDuplicate, primaryKeys).length\n    ) {\n      options.upsertKeys = primaryKeys;\n    }\n\n    options.upsertKeys = _.uniq(options.upsertKeys);\n\n    let whereHasNull = false;\n\n    primaryKeys.forEach(element => {\n      if (where[element] === null) {\n        whereHasNull = true;\n      }\n    });\n\n    if (whereHasNull === true) {\n      where = options.upsertKeys.reduce((result, attribute) => {\n        result[attribute] = insertValues[attribute];\n        return result;\n      }, {}); \n    }\n\n    const sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);\n    // we need set this to undefined otherwise sequelize would raise an error\n    // Error: Both `sql.bind` and `options.bind` cannot be set at the same time\n    if (sql.bind) {\n      options.bind = undefined;\n    }\n    return await this.sequelize.query(sql, options);\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA;IAAA,sBAAA,IAAA;AAAA;AAGA,MAAM,EAAE,cAAA,EAAA,GAAmB,QAAQ;AACnC,MAAM,aAAa,QAAQ;AAE3B,MAAM,IAAI,QAAQ;AAIX,MAAA,6BAAmC,eAAe;IAAA,MAajD,OAAO,SAAA,EAAW,YAAA,EAAc,YAAA,EAAc,KAAA,EAAO,OAAA,EAAS;QAClE,UAAU,eAAA,CAAA,GAAK;QAEf,MAAM,QAAQ,QAAQ,KAAA;QACtB,MAAM,cAAc,OAAO,MAAA,CAAO,MAAM,WAAA,EAAa,GAAA,CAAI,CAAA,OAAQ,KAAK,KAAA;QACtE,MAAM,aAAa,OAAO,MAAA,CAAO,MAAM,UAAA,EAAY,MAAA,CAAO,CAAA,IAAK,EAAE,MAAA,CAAO,MAAA,GAAS,GAAG,GAAA,CAAI,CAAA,IAAK,EAAE,MAAA;QAC/F,MAAM,YAAY,OAAO,MAAA,CAAO,MAAM,QAAA,EAAU,MAAA,CAAO,CAAA,IAAK,EAAE,MAAA,IAAU,EAAE,MAAA,CAAO,MAAA,GAAS,GAAG,GAAA,CAAI,CAAA,IAAK,EAAE,MAAA;QAExG,QAAQ,IAAA,GAAO,WAAW,MAAA;QAC1B,QAAQ,iBAAA,GAAoB,OAAO,IAAA,CAAK;QACxC,QAAQ,UAAA,GAAa,EAAA;QAIrB,KAAA,MAAW,SAAS,QAAQ,iBAAA,CAAmB;YAC7C,MAAM,YAAY,WAAW,IAAA,CAAK,CAAA,SAAU,OAAO,QAAA,CAAS;YAC5D,IAAI,WAAW;gBACb,QAAQ,UAAA,GAAa;gBACrB;YAAA;YAGF,MAAM,WAAW,UAAU,IAAA,CAAK,CAAA,SAAU,OAAO,QAAA,CAAS;YAC1D,IAAI,UAAU;gBACZ,QAAQ,UAAA,GAAa;gBACrB;YAAA;QAAA;QAKJ,IACE,QAAQ,UAAA,CAAW,MAAA,KAAW,KAC3B,EAAE,YAAA,CAAa,QAAQ,iBAAA,EAAmB,aAAa,MAAA,EAC1D;YACA,QAAQ,UAAA,GAAa;QAAA;QAGvB,QAAQ,UAAA,GAAa,EAAE,IAAA,CAAK,QAAQ,UAAA;QAEpC,IAAI,eAAe;QAEnB,YAAY,OAAA,CAAQ,CAAA,YAAW;YAC7B,IAAI,KAAA,CAAM,QAAA,KAAa,MAAM;gBAC3B,eAAe;YAAA;QAAA;QAInB,IAAI,iBAAiB,MAAM;YACzB,QAAQ,QAAQ,UAAA,CAAW,MAAA,CAAO,CAAC,QAAQ,cAAc;gBACvD,MAAA,CAAO,UAAA,GAAa,YAAA,CAAa,UAAA;gBACjC,OAAO;YAAA,GACN,CAAA;QAAA;QAGL,MAAM,MAAM,IAAA,CAAK,cAAA,CAAe,WAAA,CAAY,WAAW,cAAc,cAAc,OAAO,OAAO;QAGjG,IAAI,IAAI,IAAA,EAAM;YACZ,QAAQ,IAAA,GAAO,KAAA;QAAA;QAEjB,OAAO,MAAM,IAAA,CAAK,SAAA,CAAU,KAAA,CAAM,KAAK;IAAA;AAAA","ignoreList":[0]}},
    {"offset": {"line": 20405, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 20410, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/oracle/index.js"],"sourcesContent":["// Copyright (c) 2022, Oracle and/or its affiliates. All rights reserved\n\n'use strict';\n\nconst _ = require('lodash');\nconst { AbstractDialect } = require('../abstract');\nconst { OracleConnectionManager } = require('./connection-manager');\nconst { OracleQuery } = require('./query');\nconst { OracleQueryGenerator } = require('./query-generator');\nconst DataTypes = require('../../data-types').oracle;\nconst { OracleQueryInterface } = require('./query-interface');\n\nclass OracleDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new OracleConnectionManager(this, sequelize);\n    this.connectionManager.initPools();\n    this.queryGenerator = new OracleQueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new OracleQueryInterface(sequelize, this.queryGenerator);\n  }\n}\n\nOracleDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  'VALUES ()': true,\n  'LIMIT ON UPDATE': true,\n  IGNORE: ' IGNORE',\n  lock: true,\n  lockOuterJoinFailure: true,\n  forShare: 'FOR UPDATE',\n  skipLocked: true,\n  index: {\n    collate: false,\n    length: false,\n    parser: false,\n    type: false,\n    using: false\n  },\n  constraints: {\n    restrict: false\n  },\n  returnValues: false,\n  returnIntoValues: true,\n  'ORDER NULLS': true,\n  schemas: true,\n  updateOnDuplicate: false,\n  indexViaAlter: false,\n  NUMERIC: true,\n  JSON: true,\n  upserts: true,\n  bulkDefault: true,\n  topLevelOrderByRequired: true,\n  GEOMETRY: false\n});\n\nOracleDialect.prototype.defaultVersion = '18.0.0';\nOracleDialect.prototype.Query = OracleQuery;\nOracleDialect.prototype.queryGenerator = OracleQueryGenerator;\nOracleDialect.prototype.DataTypes = DataTypes;\nOracleDialect.prototype.name = 'oracle';\nOracleDialect.prototype.TICK_CHAR = '\"';\nOracleDialect.prototype.TICK_CHAR_LEFT = OracleDialect.prototype.TICK_CHAR;\nOracleDialect.prototype.TICK_CHAR_RIGHT = OracleDialect.prototype.TICK_CHAR;\n\nmodule.exports = OracleDialect;\n"],"names":[],"mappings":";AAIA,MAAM,IAAI,QAAQ;AAClB,MAAM,EAAE,eAAA,EAAA,GAAoB,QAAQ;AACpC,MAAM,EAAE,uBAAA,EAAA,GAA4B,QAAQ;AAC5C,MAAM,EAAE,WAAA,EAAA,GAAgB,QAAQ;AAChC,MAAM,EAAE,oBAAA,EAAA,GAAyB,QAAQ;AACzC,MAAM,YAAY,QAAQ,8FAAoB,MAAA;AAC9C,MAAM,EAAE,oBAAA,EAAA,GAAyB,QAAQ;AAEzC,MAAA,sBAA4B,gBAAgB;IAC1C,YAAY,SAAA,CAAW;QACrB,KAAA;QACA,IAAA,CAAK,SAAA,GAAY;QACjB,IAAA,CAAK,iBAAA,GAAoB,IAAI,wBAAwB,IAAA,EAAM;QAC3D,IAAA,CAAK,iBAAA,CAAkB,SAAA;QACvB,IAAA,CAAK,cAAA,GAAiB,IAAI,qBAAqB;YAC7C,UAAU,IAAA;YACV;QAAA;QAEF,IAAA,CAAK,cAAA,GAAiB,IAAI,qBAAqB,WAAW,IAAA,CAAK,cAAA;IAAA;AAAA;AAInE,cAAc,SAAA,CAAU,QAAA,GAAW,EAAE,KAAA,CAAM,EAAE,SAAA,CAAU,gBAAgB,SAAA,CAAU,QAAA,GAAW;IAC1F,aAAa;IACb,mBAAmB;IACnB,QAAQ;IACR,MAAM;IACN,sBAAsB;IACtB,UAAU;IACV,YAAY;IACZ,OAAO;QACL,SAAS;QACT,QAAQ;QACR,QAAQ;QACR,MAAM;QACN,OAAO;IAAA;IAET,aAAa;QACX,UAAU;IAAA;IAEZ,cAAc;IACd,kBAAkB;IAClB,eAAe;IACf,SAAS;IACT,mBAAmB;IACnB,eAAe;IACf,SAAS;IACT,MAAM;IACN,SAAS;IACT,aAAa;IACb,yBAAyB;IACzB,UAAU;AAAA;AAGZ,cAAc,SAAA,CAAU,cAAA,GAAiB;AACzC,cAAc,SAAA,CAAU,KAAA,GAAQ;AAChC,cAAc,SAAA,CAAU,cAAA,GAAiB;AACzC,cAAc,SAAA,CAAU,SAAA,GAAY;AACpC,cAAc,SAAA,CAAU,IAAA,GAAO;AAC/B,cAAc,SAAA,CAAU,SAAA,GAAY;AACpC,cAAc,SAAA,CAAU,cAAA,GAAiB,cAAc,SAAA,CAAU,SAAA;AACjE,cAAc,SAAA,CAAU,eAAA,GAAkB,cAAc,SAAA,CAAU,SAAA;AAElE,OAAO,OAAA,GAAU","ignoreList":[0]}},
    {"offset": {"line": 20471, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 20476, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/postgres/connection-manager.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst { logger } = require('../../utils/logger');\nconst debug = logger.debugContext('connection:pg');\nconst sequelizeErrors = require('../../errors');\nconst semver = require('semver');\nconst dataTypes = require('../../data-types');\nconst momentTz = require('moment-timezone');\nconst { promisify } = require('util');\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 5432;\n    super(dialect, sequelize);\n\n    const pgLib = this._loadDialectModule('pg');\n    this.lib = this.sequelize.config.native ? pgLib.native : pgLib;\n\n    this._clearDynamicOIDs();\n    this._clearTypeParser();\n    this.refreshTypeParser(dataTypes.postgres);\n  }\n\n  // Expose this as a method so that the parsing may be updated when the user has added additional, custom types\n  _refreshTypeParser(dataType) {\n    const arrayParserBuilder = parser => {\n      return value => this.lib.types.arrayParser.create(value, parser).parse();\n    };\n    const rangeParserBuilder = parser => {\n      return value => dataType.parse(value, { parser });\n    };\n\n    // Set range parsers\n    if (dataType.key.toLowerCase() === 'range') {\n      for (const name in this.nameOidMap) {\n        const entry = this.nameOidMap[name];\n        if (! entry.rangeOid) continue;\n\n        const rangeParser = rangeParserBuilder(this.getTypeParser(entry.oid));\n        const arrayRangeParser = arrayParserBuilder(rangeParser);\n\n        this.oidParserMap.set(entry.rangeOid, rangeParser);\n        if (! entry.arrayRangeOid) continue;\n        this.oidParserMap.set(entry.arrayRangeOid, arrayRangeParser);\n      }\n      return;\n    }\n\n    // Create parsers for normal or enum data types\n    const parser = value => dataType.parse(value);\n    const arrayParser = arrayParserBuilder(parser);\n\n    // Set enum parsers\n    if (dataType.key.toLowerCase() === 'enum') {\n      this.enumOids.oids.forEach(oid => {\n        this.oidParserMap.set(oid, parser);\n      });\n      this.enumOids.arrayOids.forEach(arrayOid => {\n        this.oidParserMap.set(arrayOid, arrayParser);\n      });\n      return;\n    }\n\n    // Set parsers for normal data types\n    dataType.types.postgres.forEach(name => {\n      if (! this.nameOidMap[name]) return;\n      this.oidParserMap.set(this.nameOidMap[name].oid, parser);\n\n      if (! this.nameOidMap[name].arrayOid) return;\n      this.oidParserMap.set(this.nameOidMap[name].arrayOid, arrayParser);\n    });\n  }\n\n  _clearTypeParser() {\n    this.oidParserMap = new Map();\n  }\n\n  getTypeParser(oid, ...args) {\n    if (this.oidParserMap.get(oid)) return this.oidParserMap.get(oid);\n\n    return this.lib.types.getTypeParser(oid, ...args);\n  }\n\n  async connect(config) {\n    config.user = config.username;\n    const connectionConfig = _.pick(config, [\n      'user', 'password', 'host', 'database', 'port'\n    ]);\n\n    connectionConfig.types = {\n      getTypeParser: ConnectionManager.prototype.getTypeParser.bind(this)\n    };\n\n    if (config.dialectOptions) {\n      _.merge(connectionConfig,\n        _.pick(config.dialectOptions, [\n        // see [http://www.postgresql.org/docs/9.3/static/runtime-config-logging.html#GUC-APPLICATION-NAME]\n          'application_name',\n          // choose the SSL mode with the PGSSLMODE environment variable\n          // object format: [https://github.com/brianc/node-postgres/blob/ee19e74ffa6309c9c5e8e01746261a8f651661f8/lib/connection.js#L79]\n          // see also [http://www.postgresql.org/docs/9.3/static/libpq-ssl.html]\n          'ssl',\n          // In addition to the values accepted by the corresponding server,\n          // you can use \"auto\" to determine the right encoding from the\n          // current locale in the client (LC_CTYPE environment variable on Unix systems)\n          'client_encoding',\n          // !! DO NOT SET THIS TO TRUE !!\n          // (unless you know what you're doing)\n          // see [http://www.postgresql.org/message-id/flat/bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com#bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com]\n          'binary',\n          // This should help with backends incorrectly considering idle clients to be dead and prematurely disconnecting them.\n          // this feature has been added in pg module v6.0.0, check pg/CHANGELOG.md\n          'keepAlive',\n          // Times out queries after a set time in milliseconds in the database end. Added in pg v7.3\n          'statement_timeout',\n          // Times out queries after a set time in milliseconds in client end, query would be still running in database end.\n          'query_timeout',\n          // Number of milliseconds to wait for connection, default is no timeout.\n          'connectionTimeoutMillis',\n          // Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds. Added in pg v7.17.0 only supported in postgres >= 10\n          'idle_in_transaction_session_timeout',\n          // Maximum wait time for lock requests in milliseconds. Added in pg v8.8.0.\n          'lock_timeout',\n          // Postgres allows additional session variables to be configured in the connection string in the `options` param.\n          // see [https://www.postgresql.org/docs/14/libpq-connect.html#LIBPQ-CONNECT-OPTIONS]\n          'options',\n          // The stream acts as a user-defined socket factory for postgres. In particular, it enables IAM autentication\n          // with Google Cloud SQL. see: https://github.com/sequelize/sequelize/issues/16001#issuecomment-1561136388\n          'stream'\n        ]));\n    }\n\n    const connection = await new Promise((resolve, reject) => {\n      let responded = false;\n\n      const connection = new this.lib.Client(connectionConfig);\n\n      const parameterHandler = message => {\n        switch (message.parameterName) {\n          case 'server_version':\n            if (this.sequelize.options.databaseVersion === 0) {\n              const version = semver.coerce(message.parameterValue).version;\n              this.sequelize.options.databaseVersion = semver.valid(version)\n                ? version\n                : this.dialect.defaultVersion;\n            }\n            break;\n          case 'standard_conforming_strings':\n            connection['standard_conforming_strings'] = message.parameterValue;\n            break;\n        }\n      };\n\n      const endHandler = () => {\n        debug('connection timeout');\n        if (!responded) {\n          reject(new sequelizeErrors.ConnectionTimedOutError(new Error('Connection timed out')));\n        }\n      };\n\n      // If we didn't ever hear from the client.connect() callback the connection timeout\n      // node-postgres does not treat this as an error since no active query was ever emitted\n      connection.once('end', endHandler);\n\n      if (!this.sequelize.config.native) {\n        // Receive various server parameters for further configuration\n        connection.connection.on('parameterStatus', parameterHandler);\n      }\n\n      connection.connect(err => {\n        responded = true;\n\n        if (!this.sequelize.config.native) {\n          // remove parameter handler\n          connection.connection.removeListener('parameterStatus', parameterHandler);\n        }\n\n        if (err) {\n          if (err.code) {\n            switch (err.code) {\n              case 'ECONNREFUSED':\n                reject(new sequelizeErrors.ConnectionRefusedError(err));\n                break;\n              case 'ENOTFOUND':\n                reject(new sequelizeErrors.HostNotFoundError(err));\n                break;\n              case 'EHOSTUNREACH':\n                reject(new sequelizeErrors.HostNotReachableError(err));\n                break;\n              case 'EINVAL':\n                reject(new sequelizeErrors.InvalidConnectionError(err));\n                break;\n              default:\n                reject(new sequelizeErrors.ConnectionError(err));\n                break;\n            }\n          } else {\n            reject(new sequelizeErrors.ConnectionError(err));\n          }\n        } else {\n          debug('connection acquired');\n          connection.removeListener('end', endHandler);\n          resolve(connection);\n        }\n      });\n    });\n\n    // Don't let a Postgres restart (or error) to take down the whole app\n    connection.on('error', error => {\n      connection._invalid = true;\n      debug(`connection error ${error.code || error.message}`);\n      this.pool.destroy(connection);\n    });\n\n    let query = '';\n\n    if (this.sequelize.options.standardConformingStrings !== false && connection['standard_conforming_strings'] !== 'on') {\n      // Disable escape characters in strings\n      // see https://github.com/sequelize/sequelize/issues/3545 (security issue)\n      // see https://www.postgresql.org/docs/current/static/runtime-config-compatible.html#GUC-STANDARD-CONFORMING-STRINGS\n      query += 'SET standard_conforming_strings=on;';\n    }\n\n    if (this.sequelize.options.clientMinMessages !== undefined) {\n      console.warn('Usage of \"options.clientMinMessages\" is deprecated and will be removed in v7.');\n      console.warn('Please use the sequelize option \"dialectOptions.clientMinMessages\" instead.');\n    }\n\n    // Redshift dosen't support client_min_messages, use 'ignore' to skip this settings.\n    // If no option, the default value in sequelize is 'warning'\n    if ( !( config.dialectOptions && config.dialectOptions.clientMinMessages && config.dialectOptions.clientMinMessages.toLowerCase() === 'ignore' ||\n            this.sequelize.options.clientMinMessages === false ) ) {\n      const clientMinMessages = config.dialectOptions && config.dialectOptions.clientMinMessages || this.sequelize.options.clientMinMessages || 'warning';\n      query += `SET client_min_messages TO ${clientMinMessages};`;\n\n    }\n\n    if (!this.sequelize.config.keepDefaultTimezone) {\n      const isZone = !!momentTz.tz.zone(this.sequelize.options.timezone);\n      if (isZone) {\n        query += `SET TIME ZONE '${this.sequelize.options.timezone}';`;\n      } else {\n        query += `SET TIME ZONE INTERVAL '${this.sequelize.options.timezone}' HOUR TO MINUTE;`;\n      }\n    }\n\n    if (query) {\n      await connection.query(query);\n    }\n    if (Object.keys(this.nameOidMap).length === 0 &&\n      this.enumOids.oids.length === 0 &&\n      this.enumOids.arrayOids.length === 0) {\n      await this._refreshDynamicOIDs(connection);\n    }\n\n    return connection;\n  }\n\n  async disconnect(connection) {\n    if (connection._ending) {\n      debug('connection tried to disconnect but was already at ENDING state');\n      return;\n    }\n\n    return await promisify(callback => connection.end(callback))();\n  }\n\n  validate(connection) {\n    return !connection._invalid && !connection._ending;\n  }\n\n  async _refreshDynamicOIDs(connection) {\n    const databaseVersion = this.sequelize.options.databaseVersion;\n    const supportedVersion = '8.3.0';\n\n    // Check for supported version\n    if ( (databaseVersion && semver.gte(databaseVersion, supportedVersion)) === false) {\n      return;\n    }\n\n    const results = await (connection || this.sequelize).query(\n      'WITH ranges AS (' +\n      '  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,' +\n      '         pg_type.typarray AS rngtyparray, pg_range.rngsubtype' +\n      '    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid' +\n      ')' +\n      'SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,' +\n      '       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray' +\n      '  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype' +\n      ' WHERE (pg_type.typtype IN(\\'b\\', \\'e\\'));'\n    );\n\n    let result = Array.isArray(results) ? results.pop() : results;\n\n    // When searchPath is prepended then two statements are executed and the result is\n    // an array of those two statements. First one is the SET search_path and second is\n    // the SELECT query result.\n    if (Array.isArray(result)) {\n      if (result[0].command === 'SET') {\n        result = result.pop();\n      }\n    }\n\n    const newNameOidMap = {};\n    const newEnumOids = { oids: [], arrayOids: [] };\n\n    for (const row of result.rows) {\n      // Mapping enums, handled separatedly\n      if (row.typtype === 'e') {\n        newEnumOids.oids.push(row.oid);\n        if (row.typarray) newEnumOids.arrayOids.push(row.typarray);\n        continue;\n      }\n\n      // Mapping base types and their arrays\n      newNameOidMap[row.typname] = { oid: row.oid };\n      if (row.typarray) newNameOidMap[row.typname].arrayOid = row.typarray;\n\n      // Mapping ranges(of base types) and their arrays\n      if (row.rngtypid) {\n        newNameOidMap[row.typname].rangeOid = row.rngtypid;\n        if (row.rngtyparray) newNameOidMap[row.typname].arrayRangeOid = row.rngtyparray;\n      }\n    }\n\n    // Replace all OID mappings. Avoids temporary empty OID mappings.\n    this.nameOidMap = newNameOidMap;\n    this.enumOids = newEnumOids;\n\n    this.refreshTypeParser(dataTypes.postgres);\n  }\n\n  _clearDynamicOIDs() {\n    this.nameOidMap = {};\n    this.enumOids = { oids: [], arrayOids: [] };\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 20721, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 20726, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/postgres/query.js"],"sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst QueryTypes = require('../../query-types');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:pg');\n\n\nclass Query extends AbstractQuery {\n  /**\n   * Rewrite query with parameters.\n   *\n   * @param {string} sql\n   * @param {Array|object} values\n   * @param {string} dialect\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect) {\n    const stringReplaceFunc = value => typeof value === 'string' ? value.replace(/\\0/g, '\\\\0') : value;\n\n    let bindParam;\n    if (Array.isArray(values)) {\n      bindParam = values.map(stringReplaceFunc);\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];\n    } else {\n      bindParam = [];\n      let i = 0;\n      const seen = {};\n      const replacementFunc = (match, key, values) => {\n        if (seen[key] !== undefined) {\n          return seen[key];\n        }\n        if (values[key] !== undefined) {\n          i = i + 1;\n          bindParam.push(stringReplaceFunc(values[key]));\n          seen[key] = `$${i}`;\n          return `$${i}`;\n        }\n        return undefined;\n      };\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    }\n    return [sql, bindParam];\n  }\n\n  async run(sql, parameters) {\n    const { connection } = this;\n\n    if (!_.isEmpty(this.options.searchPath)) {\n      sql = this.sequelize.getQueryInterface().queryGenerator.setSearchPath(this.options.searchPath) + sql;\n    }\n\n    if (this.sequelize.options.minifyAliases && this.options.includeAliases) {\n      _.toPairs(this.options.includeAliases)\n        // Sorting to replace the longest aliases first to prevent alias collision\n        .sort((a, b) => b[1].length - a[1].length)\n        .forEach(([alias, original]) => {\n          const reg = new RegExp(_.escapeRegExp(original), 'g');\n\n          sql = sql.replace(reg, alias);\n        });\n    }\n\n    this.sql = sql;\n\n    const query = parameters && parameters.length\n      ? new Promise((resolve, reject) => connection.query(sql, parameters, (error, result) => error ? reject(error) : resolve(result)))\n      : new Promise((resolve, reject) => connection.query(sql, (error, result) => error ? reject(error) : resolve(result)));\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    let queryResult;\n    const errForStack = new Error();\n\n    try {\n      queryResult = await query;\n    } catch (error) {\n      // set the client so that it will be reaped if the connection resets while executing\n      if (error.code === 'ECONNRESET'\n        // https://github.com/sequelize/sequelize/pull/14090\n        // pg-native throws custom exception or libpq formatted errors\n        || /Unable to set non-blocking to true/i.test(error)\n        || /SSL SYSCALL error: EOF detected/i.test(error)\n        || /Local: Authentication failure/i.test(error)\n        // https://github.com/sequelize/sequelize/pull/15144\n        || error.message === 'Query read timeout'\n      ) {\n        connection._invalid = true;\n      }\n\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error, errForStack.stack);\n    }\n\n    complete();\n\n    let rows = Array.isArray(queryResult)\n      ? queryResult.reduce((allRows, r) => allRows.concat(r.rows || []), [])\n      : queryResult.rows;\n    const rowCount = Array.isArray(queryResult)\n      ? queryResult.reduce(\n        (count, r) => Number.isFinite(r.rowCount) ? count + r.rowCount : count,\n        0\n      )\n      : queryResult.rowCount || 0;\n\n    if (this.sequelize.options.minifyAliases && this.options.aliasesMapping) {\n      rows = rows\n        .map(row => _.toPairs(row)\n          .reduce((acc, [key, value]) => {\n            const mapping = this.options.aliasesMapping.get(key);\n            acc[mapping || key] = value;\n            return acc;\n          }, {})\n        );\n    }\n\n    const isTableNameQuery = sql.startsWith('SELECT table_name FROM information_schema.tables');\n    const isRelNameQuery = sql.startsWith('SELECT relname FROM pg_class WHERE oid IN');\n\n    if (isRelNameQuery) {\n      return rows.map(row => ({\n        name: row.relname,\n        tableName: row.relname.split('_')[0]\n      }));\n    }\n    if (isTableNameQuery) {\n      return rows.map(row => Object.values(row));\n    }\n\n    if (rows[0] && rows[0].sequelize_caught_exception !== undefined) {\n      if (rows[0].sequelize_caught_exception !== null) {\n        throw this.formatError({\n          sql,\n          parameters,\n          code: '23505',\n          detail: rows[0].sequelize_caught_exception\n        });\n      }\n      for (const row of rows) {\n        delete row.sequelize_caught_exception;\n      }\n    }\n\n    if (this.isShowIndexesQuery()) {\n      for (const row of rows) {\n        const attributes = /ON .*? (?:USING .*?\\s)?\\(([^]*)\\)/gi.exec(row.definition)[1].split(',');\n\n        // Map column index in table to column name\n        const columns = _.zipObject(\n          row.column_indexes,\n          this.sequelize.getQueryInterface().queryGenerator.fromArray(row.column_names)\n        );\n        delete row.column_indexes;\n        delete row.column_names;\n\n        let field;\n        let attribute;\n\n        // Indkey is the order of attributes in the index, specified by a string of attribute indexes\n        row.fields = row.indkey.split(' ').map((indKey, index) => {\n          field = columns[indKey];\n          // for functional indices indKey = 0\n          if (!field) {\n            return null;\n          }\n          attribute = attributes[index];\n          return {\n            attribute: field,\n            collate: attribute.match(/COLLATE \"(.*?)\"/) ? /COLLATE \"(.*?)\"/.exec(attribute)[1] : undefined,\n            order: attribute.includes('DESC') ? 'DESC' : attribute.includes('ASC') ? 'ASC' : undefined,\n            length: undefined\n          };\n        }).filter(n => n !== null);\n        delete row.columns;\n      }\n      return rows;\n    }\n    if (this.isForeignKeysQuery()) {\n      const result = [];\n      for (const row of rows) {\n        let defParts;\n        if (row.condef !== undefined && (defParts = row.condef.match(/FOREIGN KEY \\((.+)\\) REFERENCES (.+)\\((.+)\\)( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?/))) {\n          row.id = row.constraint_name;\n          row.table = defParts[2];\n          row.from = defParts[1];\n          row.to = defParts[3];\n          let i;\n          for (i = 5; i <= 8; i += 3) {\n            if (/(UPDATE|DELETE)/.test(defParts[i])) {\n              row[`on_${defParts[i].toLowerCase()}`] = defParts[i + 1];\n            }\n          }\n        }\n        result.push(row);\n      }\n      return result;\n    }\n    if (this.isSelectQuery()) {\n      let result = rows;\n      // Postgres will treat tables as case-insensitive, so fix the case\n      // of the returned values to match attributes\n      if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n        const attrsMap = _.reduce(this.model.rawAttributes, (m, v, k) => {\n          m[k.toLowerCase()] = k;\n          return m;\n        }, {});\n        result = rows.map(row => {\n          return _.mapKeys(row, (value, key) => {\n            const targetAttr = attrsMap[key];\n            if (typeof targetAttr === 'string' && targetAttr !== key) {\n              return targetAttr;\n            }\n            return key;\n          });\n        });\n      }\n      return this.handleSelectQuery(result);\n    }\n    if (QueryTypes.DESCRIBE === this.options.type) {\n      const result = {};\n\n      for (const row of rows) {\n        result[row.Field] = {\n          type: row.Type.toUpperCase(),\n          allowNull: row.Null === 'YES',\n          defaultValue: row.Default,\n          comment: row.Comment,\n          special: row.special ? this.sequelize.getQueryInterface().queryGenerator.fromArray(row.special) : [],\n          primaryKey: row.Constraint === 'PRIMARY KEY'\n        };\n\n        if (result[row.Field].type === 'BOOLEAN') {\n          result[row.Field].defaultValue = { 'false': false, 'true': true }[result[row.Field].defaultValue];\n\n          if (result[row.Field].defaultValue === undefined) {\n            result[row.Field].defaultValue = null;\n          }\n        }\n\n        if (typeof result[row.Field].defaultValue === 'string') {\n          result[row.Field].defaultValue = result[row.Field].defaultValue.replace(/'/g, '');\n\n          if (result[row.Field].defaultValue.includes('::')) {\n            const split = result[row.Field].defaultValue.split('::');\n            if (split[1].toLowerCase() !== 'regclass)') {\n              result[row.Field].defaultValue = split[0];\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n    if (this.isVersionQuery()) {\n      return rows[0].server_version;\n    }\n    if (this.isShowOrDescribeQuery()) {\n      return rows;\n    }\n    if (QueryTypes.BULKUPDATE === this.options.type) {\n      if (!this.options.returning) {\n        return parseInt(rowCount, 10);\n      }\n      return this.handleSelectQuery(rows);\n    }\n    if (QueryTypes.BULKDELETE === this.options.type) {\n      return parseInt(rowCount, 10);\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery()) {\n      if (this.instance && this.instance.dataValues) {\n        // If we are creating an instance, and we get no rows, the create failed but did not throw.\n        // This probably means a conflict happened and was ignored, to avoid breaking a transaction.\n        if (this.isInsertQuery() && !this.isUpsertQuery() && rowCount === 0) {\n          throw new sequelizeErrors.EmptyResultError();\n        }\n\n        for (const key in rows[0]) {\n          if (Object.prototype.hasOwnProperty.call(rows[0], key)) {\n            const record = rows[0][key];\n\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n\n      if (this.isUpsertQuery()) {\n        return [\n          this.instance,\n          null\n        ];\n      }\n\n      return [\n        this.instance || rows && (this.options.plain && rows[0] || rows) || undefined,\n        rowCount\n      ];\n    }\n    if (this.isRawQuery()) {\n      return [rows, queryResult];\n    }\n    return rows;\n  }\n\n  formatError(err, errStack) {\n    let match;\n    let table;\n    let index;\n    let fields;\n    let errors;\n    let message;\n\n    const code = err.code || err.sqlState;\n    const errMessage = err.message || err.messagePrimary;\n    const errDetail = err.detail || err.messageDetail;\n\n    switch (code) {\n      case '23503':\n        index = errMessage.match(/violates foreign key constraint \"(.+?)\"/);\n        index = index ? index[1] : undefined;\n        table = errMessage.match(/on table \"(.+?)\"/);\n        table = table ? table[1] : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          message: errMessage,\n          fields: null,\n          index,\n          table,\n          parent: err,\n          stack: errStack\n        });\n      case '23505':\n        // there are multiple different formats of error messages for this error code\n        // this regex should check at least two\n        if (errDetail && (match = errDetail.replace(/\"/g, '').match(/Key \\((.*?)\\)=\\((.*?)\\)/))) {\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\n          errors = [];\n          message = 'Validation error';\n\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(\n              this.getUniqueConstraintErrorMessage(field),\n              'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n              field,\n              value,\n              this.instance,\n              'not_unique'\n            ));\n          });\n\n          if (this.model && this.model.uniqueKeys) {\n            _.forOwn(this.model.uniqueKeys, constraint => {\n              if (_.isEqual(constraint.fields, Object.keys(fields)) && !!constraint.msg) {\n                message = constraint.msg;\n                return false;\n              }\n            });\n          }\n\n          return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n        }\n\n        return new sequelizeErrors.UniqueConstraintError({\n          message: errMessage,\n          parent: err,\n          stack: errStack\n        });\n\n      case '23P01':\n        match = errDetail.match(/Key \\((.*?)\\)=\\((.*?)\\)/);\n\n        if (match) {\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\n        }\n        message = 'Exclusion constraint error';\n\n        return new sequelizeErrors.ExclusionConstraintError({\n          message,\n          constraint: err.constraint,\n          fields,\n          table: err.table,\n          parent: err,\n          stack: errStack\n        });\n\n      case '42704':\n        if (err.sql && /(CONSTRAINT|INDEX)/gi.test(err.sql)) {\n          message = 'Unknown constraint error';\n          index = errMessage.match(/(?:constraint|index) \"(.+?)\"/i);\n          index = index ? index[1] : undefined;\n          table = errMessage.match(/relation \"(.+?)\"/i);\n          table = table ? table[1] : undefined;\n\n          throw new sequelizeErrors.UnknownConstraintError({\n            message,\n            constraint: index,\n            fields,\n            table,\n            parent: err,\n            stack: errStack\n          });\n        }\n      // falls through\n      default:\n        return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n    }\n  }\n\n  isForeignKeysQuery() {\n    return /SELECT conname as constraint_name, pg_catalog\\.pg_get_constraintdef\\(r\\.oid, true\\) as condef FROM pg_catalog\\.pg_constraint r WHERE r\\.conrelid = \\(SELECT oid FROM pg_class WHERE relname = '.*' LIMIT 1\\) AND r\\.contype = 'f' ORDER BY 1;/.test(this.sql);\n  }\n\n  getInsertIdField() {\n    return 'id';\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 21067, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 21072, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/postgres/query-generator.js"],"sourcesContent":["'use strict';\n\nconst Utils = require('../../utils');\nconst util = require('util');\nconst DataTypes = require('../../data-types');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\nconst semver = require('semver');\nconst _ = require('lodash');\n\n/**\n * list of reserved words in PostgreSQL 10\n * source: https://www.postgresql.org/docs/10/static/sql-keywords-appendix.html\n *\n * @private\n */\nconst POSTGRES_RESERVED_WORDS = 'all,analyse,analyze,and,any,array,as,asc,asymmetric,authorization,binary,both,case,cast,check,collate,collation,column,concurrently,constraint,create,cross,current_catalog,current_date,current_role,current_schema,current_time,current_timestamp,current_user,default,deferrable,desc,distinct,do,else,end,except,false,fetch,for,foreign,freeze,from,full,grant,group,having,ilike,in,initially,inner,intersect,into,is,isnull,join,lateral,leading,left,like,limit,localtime,localtimestamp,natural,not,notnull,null,offset,on,only,or,order,outer,overlaps,placing,primary,references,returning,right,select,session_user,similar,some,symmetric,table,tablesample,then,to,trailing,true,union,unique,user,using,variadic,verbose,when,where,window,with'.split(',');\n\nclass PostgresQueryGenerator extends AbstractQueryGenerator {\n  setSearchPath(searchPath) {\n    return `SET search_path to ${searchPath};`;\n  }\n\n  createDatabaseQuery(databaseName, options) {\n    options = {\n      encoding: null,\n      collate: null,\n      ...options\n    };\n\n    const values = {\n      database: this.quoteTable(databaseName),\n      encoding: options.encoding ? ` ENCODING = ${this.escape(options.encoding)}` : '',\n      collation: options.collate ? ` LC_COLLATE = ${this.escape(options.collate)}` : '',\n      ctype: options.ctype ? ` LC_CTYPE = ${this.escape(options.ctype)}` : '',\n      template: options.template ? ` TEMPLATE = ${this.escape(options.template)}` : ''\n    };\n\n    return `CREATE DATABASE ${values.database}${values.encoding}${values.collation}${values.ctype}${values.template};`;\n  }\n\n  dropDatabaseQuery(databaseName) {\n    return `DROP DATABASE IF EXISTS ${this.quoteTable(databaseName)};`;\n  }\n\n  createSchema(schema) {\n    const databaseVersion = _.get(this, 'sequelize.options.databaseVersion', 0);\n\n    if (databaseVersion && semver.gte(databaseVersion, '9.2.0')) {\n      return `CREATE SCHEMA IF NOT EXISTS ${this.quoteIdentifier(schema)};`;\n    }\n\n    return `CREATE SCHEMA ${this.quoteIdentifier(schema)};`;\n  }\n\n  dropSchema(schema) {\n    return `DROP SCHEMA IF EXISTS ${this.quoteIdentifier(schema)} CASCADE;`;\n  }\n\n  showSchemasQuery() {\n    return \"SELECT schema_name FROM information_schema.schemata WHERE schema_name <> 'information_schema' AND schema_name != 'public' AND schema_name !~ E'^pg_';\";\n  }\n\n  versionQuery() {\n    return 'SHOW SERVER_VERSION';\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    options = { ...options };\n\n    //Postgres 9.0 does not support CREATE TABLE IF NOT EXISTS, 9.1 and above do\n    const databaseVersion = _.get(this, 'sequelize.options.databaseVersion', 0);\n    const attrStr = [];\n    let comments = '';\n    let columnComments = '';\n\n    const quotedTable = this.quoteTable(tableName);\n\n    if (options.comment && typeof options.comment === 'string') {\n      comments += `; COMMENT ON TABLE ${quotedTable} IS ${this.escape(options.comment)}`;\n    }\n\n    for (const attr in attributes) {\n      const quotedAttr = this.quoteIdentifier(attr);\n      const i = attributes[attr].indexOf('COMMENT ');\n      if (i !== -1) {\n        // Move comment to a separate query\n        const escapedCommentText = this.escape(attributes[attr].substring(i + 8));\n        columnComments += `; COMMENT ON COLUMN ${quotedTable}.${quotedAttr} IS ${escapedCommentText}`;\n        attributes[attr] = attributes[attr].substring(0, i);\n      }\n\n      const dataType = this.dataTypeMapping(tableName, attr, attributes[attr]);\n      attrStr.push(`${quotedAttr} ${dataType}`);\n    }\n\n\n    let attributesClause = attrStr.join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, columns => {\n        if (columns.customIndex) {\n          attributesClause += `, UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n        }\n      });\n    }\n\n    const pks = _.reduce(attributes, (acc, attribute, key) => {\n      if (attribute.includes('PRIMARY KEY')) {\n        acc.push(this.quoteIdentifier(key));\n      }\n      return acc;\n    }, []).join(',');\n\n    if (pks.length > 0) {\n      attributesClause += `, PRIMARY KEY (${pks})`;\n    }\n\n    return `CREATE TABLE ${databaseVersion === 0 || semver.gte(databaseVersion, '9.1.0') ? 'IF NOT EXISTS ' : ''}${quotedTable} (${attributesClause})${comments}${columnComments};`;\n  }\n\n  dropTableQuery(tableName, options) {\n    options = options || {};\n    return `DROP TABLE IF EXISTS ${this.quoteTable(tableName)}${options.cascade ? ' CASCADE' : ''};`;\n  }\n\n  showTablesQuery() {\n    const schema = this.options.schema || 'public';\n\n    return `SELECT table_name FROM information_schema.tables WHERE table_schema = ${this.escape(schema)} AND table_type LIKE '%TABLE' AND table_name != 'spatial_ref_sys';`;\n  }\n\n  tableExistsQuery(tableName) {\n    const table = tableName.tableName || tableName;\n    const schema = tableName.schema || 'public';\n\n    return `SELECT table_name FROM information_schema.tables WHERE table_schema = ${this.escape(schema)} AND table_name = ${this.escape(table)}`;\n  }\n\n  describeTableQuery(tableName, schema) {\n    schema = schema || this.options.schema || 'public';\n\n    return 'SELECT ' +\n      'pk.constraint_type as \"Constraint\",' +\n      'c.column_name as \"Field\", ' +\n      'c.column_default as \"Default\",' +\n      'c.is_nullable as \"Null\", ' +\n      '(CASE WHEN c.udt_name = \\'hstore\\' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN \\'(\\' || c.character_maximum_length || \\')\\' ELSE \\'\\' END) as \"Type\", ' +\n      '(SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", ' +\n      '(SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" ' +\n      'FROM information_schema.columns c ' +\n      'LEFT JOIN (SELECT tc.table_schema, tc.table_name, ' +\n      'cu.column_name, tc.constraint_type ' +\n      'FROM information_schema.TABLE_CONSTRAINTS tc ' +\n      'JOIN information_schema.KEY_COLUMN_USAGE  cu ' +\n      'ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name ' +\n      'and tc.constraint_name=cu.constraint_name ' +\n      'and tc.constraint_type=\\'PRIMARY KEY\\') pk ' +\n      'ON pk.table_schema=c.table_schema ' +\n      'AND pk.table_name=c.table_name ' +\n      'AND pk.column_name=c.column_name ' +\n      `WHERE c.table_name = ${this.escape(tableName)} AND c.table_schema = ${this.escape(schema)}`;\n  }\n\n  /**\n   * Check whether the statmement is json function or simple path\n   *\n   * @param   {string}  stmt  The statement to validate\n   * @returns {boolean}       true if the given statement is json function\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\n   */\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== 'string') {\n      return false;\n    }\n\n    // https://www.postgresql.org/docs/current/static/functions-json.html\n    const jsonFunctionRegex = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n    const jsonOperatorRegex = /^\\s*(->>?|#>>?|@>|<@|\\?[|&]?|\\|{2}|#-)/i;\n    const tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = jsonFunctionRegex.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf('(');\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const operatorMatches = jsonOperatorRegex.exec(string);\n      if (operatorMatches) {\n        currentIndex += operatorMatches[0].length;\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = tokenCaptureRegex.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === '(') {\n          openingBrackets++;\n        } else if (capturedToken === ')') {\n          closingBrackets++;\n        } else if (capturedToken === ';') {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    // Check invalid json statement\n    hasInvalidToken |= openingBrackets !== closingBrackets;\n    if (hasJsonFunction && hasInvalidToken) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n\n    // return true if the statement has valid json function\n    return hasJsonFunction;\n  }\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      // Parse nested object\n      if (smth.conditions) {\n        const conditions = this.parseConditionObject(smth.conditions).map(condition =>\n          `${this.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path))} = '${condition.value}'`\n        );\n\n        return conditions.join(' AND ');\n      }\n      if (smth.path) {\n        let str;\n\n        // Allow specifying conditions using the postgres json syntax\n        if (this._checkValidJsonStatement(smth.path)) {\n          str = smth.path;\n        } else {\n          // Also support json property accessors\n          const paths = _.toPath(smth.path);\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n\n        if (smth.value) {\n          str += util.format(' = %s', this.escape(smth.value));\n        }\n\n        return str;\n      }\n    }\n    return super.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n  }\n\n  addColumnQuery(table, key, attribute) {\n    const dbDataType = this.attributeToSQL(attribute, { context: 'addColumn', table, key });\n    const dataType = attribute.type || attribute;\n    const definition = this.dataTypeMapping(table, key, dbDataType);\n    const quotedKey = this.quoteIdentifier(key);\n    const quotedTable = this.quoteTable(this.extractTableDetails(table));\n\n    let query = `ALTER TABLE ${quotedTable} ADD COLUMN ${quotedKey} ${definition};`;\n\n    if (dataType instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType) + query;\n    } else if (dataType.type && dataType.type instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType.type) + query;\n    }\n\n    return query;\n  }\n\n  removeColumnQuery(tableName, attributeName) {\n    const quotedTableName = this.quoteTable(this.extractTableDetails(tableName));\n    const quotedAttributeName = this.quoteIdentifier(attributeName);\n    return `ALTER TABLE ${quotedTableName} DROP COLUMN ${quotedAttributeName};`;\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const query = subQuery => `ALTER TABLE ${this.quoteTable(tableName)} ALTER COLUMN ${subQuery};`;\n    const sql = [];\n    for (const attributeName in attributes) {\n      let definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);\n      let attrSql = '';\n\n      if (definition.includes('NOT NULL')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} SET NOT NULL`);\n\n        definition = definition.replace('NOT NULL', '').trim();\n      } else if (!definition.includes('REFERENCES')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} DROP NOT NULL`);\n      }\n\n      if (definition.includes('DEFAULT')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} SET DEFAULT ${definition.match(/DEFAULT ([^;]+)/)[1]}`);\n\n        definition = definition.replace(/(DEFAULT[^;]+)/, '').trim();\n      } else if (!definition.includes('REFERENCES')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} DROP DEFAULT`);\n      }\n\n      if (attributes[attributeName].startsWith('ENUM(')) {\n        attrSql += this.pgEnum(tableName, attributeName, attributes[attributeName]);\n        definition = definition.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attributeName, { schema: false }));\n        definition += ` USING (${this.quoteIdentifier(attributeName)}::${this.pgEnumName(tableName, attributeName)})`;\n      }\n\n      if (definition.match(/UNIQUE;*$/)) {\n        definition = definition.replace(/UNIQUE;*$/, '');\n        attrSql += query(`ADD UNIQUE (${this.quoteIdentifier(attributeName)})`).replace('ALTER COLUMN', '');\n      }\n\n      if (definition.includes('REFERENCES')) {\n        definition = definition.replace(/.+?(?=REFERENCES)/, '');\n        attrSql += query(`ADD FOREIGN KEY (${this.quoteIdentifier(attributeName)}) ${definition}`).replace('ALTER COLUMN', '');\n      } else {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} TYPE ${definition}`);\n      }\n\n      sql.push(attrSql);\n    }\n\n    return sql.join('');\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n\n    const attrString = [];\n\n    for (const attributeName in attributes) {\n      attrString.push(`${this.quoteIdentifier(attrBefore)} TO ${this.quoteIdentifier(attributeName)}`);\n    }\n\n    return `ALTER TABLE ${this.quoteTable(tableName)} RENAME COLUMN ${attrString.join(', ')};`;\n  }\n\n  fn(fnName, tableName, parameters, body, returns, language) {\n    fnName = fnName || 'testfunc';\n    language = language || 'plpgsql';\n    returns = returns ? `RETURNS ${returns}` : '';\n    parameters = parameters || '';\n\n    return `CREATE OR REPLACE FUNCTION pg_temp.${fnName}(${parameters}) ${returns} AS $func$ BEGIN ${body} END; $func$ LANGUAGE ${language}; SELECT * FROM pg_temp.${fnName}();`;\n  }\n\n  truncateTableQuery(tableName, options = {}) {\n    return [\n      `TRUNCATE ${this.quoteTable(tableName)}`,\n      options.restartIdentity ? ' RESTART IDENTITY' : '',\n      options.cascade ? ' CASCADE' : ''\n    ].join('');\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    const table = this.quoteTable(tableName);\n    let whereClause = this.getWhereConditions(where, null, model, options);\n    const limit = options.limit ? ` LIMIT ${this.escape(options.limit)}` : '';\n    let primaryKeys = '';\n    let primaryKeysSelection = '';\n\n    if (whereClause) {\n      whereClause = ` WHERE ${whereClause}`;\n    }\n\n    if (options.limit) {\n      if (!model) {\n        throw new Error('Cannot LIMIT delete without a model.');\n      }\n\n      const pks = Object.values(model.primaryKeys).map(pk => this.quoteIdentifier(pk.field)).join(',');\n\n      primaryKeys = model.primaryKeyAttributes.length > 1 ? `(${pks})` : pks;\n      primaryKeysSelection = pks;\n\n      return `DELETE FROM ${table} WHERE ${primaryKeys} IN (SELECT ${primaryKeysSelection} FROM ${table}${whereClause}${limit})`;\n    }\n    return `DELETE FROM ${table}${whereClause}`;\n  }\n\n  showIndexesQuery(tableName) {\n    let schemaJoin = '';\n    let schemaWhere = '';\n    if (typeof tableName !== 'string') {\n      schemaJoin = ', pg_namespace s';\n      schemaWhere = ` AND s.oid = t.relnamespace AND s.nspname = '${tableName.schema}'`;\n      tableName = tableName.tableName;\n    }\n\n    // This is ARCANE!\n    return 'SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, ' +\n      'array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) ' +\n      `AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a${schemaJoin} ` +\n      'WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND ' +\n      `t.relkind = 'r' and t.relname = '${tableName}'${schemaWhere} ` +\n      'GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;';\n  }\n\n  showConstraintsQuery(tableName) {\n    //Postgres converts camelCased alias to lowercase unless quoted\n    return [\n      'SELECT constraint_catalog AS \"constraintCatalog\",',\n      'constraint_schema AS \"constraintSchema\",',\n      'constraint_name AS \"constraintName\",',\n      'table_catalog AS \"tableCatalog\",',\n      'table_schema AS \"tableSchema\",',\n      'table_name AS \"tableName\",',\n      'constraint_type AS \"constraintType\",',\n      'is_deferrable AS \"isDeferrable\",',\n      'initially_deferred AS \"initiallyDeferred\"',\n      'from INFORMATION_SCHEMA.table_constraints',\n      `WHERE table_name='${tableName}';`\n    ].join(' ');\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes, options) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return [\n      'DROP INDEX',\n      options && options.concurrently && 'CONCURRENTLY',\n      `IF EXISTS ${this.quoteIdentifiers(indexName)}`\n    ].filter(Boolean).join(' ');\n  }\n\n  addLimitAndOffset(options) {\n    let fragment = '';\n    /* eslint-disable */\n    if (options.limit != null) {\n      fragment += ' LIMIT ' + this.escape(options.limit);\n    }\n    if (options.offset != null) {\n      fragment += ' OFFSET ' + this.escape(options.offset);\n    }\n    /* eslint-enable */\n\n    return fragment;\n  }\n\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    let type;\n    if (\n      attribute.type instanceof DataTypes.ENUM ||\n      attribute.type instanceof DataTypes.ARRAY && attribute.type.type instanceof DataTypes.ENUM\n    ) {\n      const enumType = attribute.type.type || attribute.type;\n      let values = attribute.values;\n\n      if (enumType.values && !attribute.values) {\n        values = enumType.values;\n      }\n\n      if (Array.isArray(values) && values.length > 0) {\n        type = `ENUM(${values.map(value => this.escape(value)).join(', ')})`;\n\n        if (attribute.type instanceof DataTypes.ARRAY) {\n          type += '[]';\n        }\n\n      } else {\n        throw new Error(\"Values for ENUM haven't been defined.\");\n      }\n    }\n\n    if (!type) {\n      type = attribute.type;\n    }\n\n    let sql = type.toString();\n\n    if (Object.prototype.hasOwnProperty.call(attribute, 'allowNull') && !attribute.allowNull) {\n      sql += ' NOT NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      if (attribute.autoIncrementIdentity) {\n        sql += ' GENERATED BY DEFAULT AS IDENTITY';\n      } else {\n        sql += ' SERIAL';\n      }\n    }\n\n    if (Utils.defaultValueSchemable(attribute.defaultValue)) {\n      sql += ` DEFAULT ${this.escape(attribute.defaultValue, attribute)}`;\n    }\n\n    if (attribute.unique === true) {\n      sql += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      sql += ' PRIMARY KEY';\n    }\n\n    if (attribute.references) {\n      let referencesTable = this.quoteTable(attribute.references.model);\n      let schema;\n\n      if (options.schema) {\n        schema = options.schema;\n      } else if (\n        (!attribute.references.model || typeof attribute.references.model == 'string')\n        && options.table\n        && options.table.schema\n      ) {\n        schema = options.table.schema;\n      }\n\n      if (schema) {\n        referencesTable = this.quoteTable(this.addSchema({\n          tableName: referencesTable,\n          _schema: schema\n        }));\n      }\n\n      let referencesKey;\n\n      if (!options.withoutForeignKeyConstraints) {\n        if (attribute.references.key) {\n          referencesKey = this.quoteIdentifiers(attribute.references.key);\n        } else {\n          referencesKey = this.quoteIdentifier('id');\n        }\n\n        sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\n\n        if (attribute.onDelete) {\n          sql += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n        }\n\n        if (attribute.onUpdate) {\n          sql += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n        }\n\n        if (attribute.references.deferrable) {\n          sql += ` ${attribute.references.deferrable.toString(this)}`;\n        }\n      }\n    }\n\n    if (attribute.comment && typeof attribute.comment === 'string') {\n      if (options && ['addColumn', 'changeColumn'].includes(options.context)) {\n        const quotedAttr = this.quoteIdentifier(options.key);\n        const escapedCommentText = this.escape(attribute.comment);\n        sql += `; COMMENT ON COLUMN ${this.quoteTable(options.table)}.${quotedAttr} IS ${escapedCommentText}`;\n      } else {\n        // for createTable event which does it's own parsing\n        // TODO: centralize creation of comment statements here\n        sql += ` COMMENT ${attribute.comment}`;\n      }\n    }\n\n    return sql;\n  }\n\n  deferConstraintsQuery(options) {\n    return options.deferrable.toString(this);\n  }\n\n  setConstraintQuery(columns, type) {\n    let columnFragment = 'ALL';\n\n    if (columns) {\n      columnFragment = columns.map(column => this.quoteIdentifier(column)).join(', ');\n    }\n\n    return `SET CONSTRAINTS ${columnFragment} ${type}`;\n  }\n\n  setDeferredQuery(columns) {\n    return this.setConstraintQuery(columns, 'DEFERRED');\n  }\n\n  setImmediateQuery(columns) {\n    return this.setConstraintQuery(columns, 'IMMEDIATE');\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {};\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, { key, ...options });\n    }\n\n    return result;\n  }\n\n  createTrigger(tableName, triggerName, eventType, fireOnSpec, functionName, functionParams, optionsArray) {\n    const decodedEventType = this.decodeTriggerEventType(eventType);\n    const eventSpec = this.expandTriggerEventSpec(fireOnSpec);\n    const expandedOptions = this.expandOptions(optionsArray);\n    const paramList = this._expandFunctionParamList(functionParams);\n\n    return `CREATE ${this.triggerEventTypeIsConstraint(eventType)}TRIGGER ${this.quoteIdentifier(triggerName)} ${decodedEventType} ${\n      eventSpec} ON ${this.quoteTable(tableName)}${expandedOptions ? ` ${expandedOptions}` : ''} EXECUTE PROCEDURE ${functionName}(${paramList});`;\n  }\n\n  dropTrigger(tableName, triggerName) {\n    return `DROP TRIGGER ${this.quoteIdentifier(triggerName)} ON ${this.quoteTable(tableName)} RESTRICT;`;\n  }\n\n  renameTrigger(tableName, oldTriggerName, newTriggerName) {\n    return `ALTER TRIGGER ${this.quoteIdentifier(oldTriggerName)} ON ${this.quoteTable(tableName)} RENAME TO ${this.quoteIdentifier(newTriggerName)};`;\n  }\n\n  createFunction(functionName, params, returnType, language, body, optionsArray, options) {\n    if (!functionName || !returnType || !language || !body) throw new Error('createFunction missing some parameters. Did you pass functionName, returnType, language and body?');\n\n    const paramList = this._expandFunctionParamList(params);\n    const variableList = options && options.variables ? this._expandFunctionVariableList(options.variables) : '';\n    const expandedOptionsArray = this.expandOptions(optionsArray);\n\n    const statement = options && options.force ? 'CREATE OR REPLACE FUNCTION' : 'CREATE FUNCTION';\n\n    return `${statement} ${functionName}(${paramList}) RETURNS ${returnType} AS $func$ ${variableList} BEGIN ${body} END; $func$ language '${language}'${expandedOptionsArray};`;\n  }\n\n  dropFunction(functionName, params) {\n    if (!functionName) throw new Error('requires functionName');\n    // RESTRICT is (currently, as of 9.2) default but we'll be explicit\n    const paramList = this._expandFunctionParamList(params);\n    return `DROP FUNCTION ${functionName}(${paramList}) RESTRICT;`;\n  }\n\n  renameFunction(oldFunctionName, params, newFunctionName) {\n    const paramList = this._expandFunctionParamList(params);\n    return `ALTER FUNCTION ${oldFunctionName}(${paramList}) RENAME TO ${newFunctionName};`;\n  }\n\n  pgEscapeAndQuote(val) {\n    return this.quoteIdentifier(Utils.removeTicks(this.escape(val), \"'\"));\n  }\n\n  _expandFunctionParamList(params) {\n    if (params === undefined || !Array.isArray(params)) {\n      throw new Error('_expandFunctionParamList: function parameters array required, including an empty one for no arguments');\n    }\n\n    const paramList = [];\n    params.forEach(curParam => {\n      const paramDef = [];\n      if (curParam.type) {\n        if (curParam.direction) { paramDef.push(curParam.direction); }\n        if (curParam.name) { paramDef.push(curParam.name); }\n        paramDef.push(curParam.type);\n      } else {\n        throw new Error('function or trigger used with a parameter without any type');\n      }\n\n      const joined = paramDef.join(' ');\n      if (joined) paramList.push(joined);\n\n    });\n\n    return paramList.join(', ');\n  }\n\n  _expandFunctionVariableList(variables) {\n    if (!Array.isArray(variables)) {\n      throw new Error('_expandFunctionVariableList: function variables must be an array');\n    }\n    const variableDefinitions = [];\n    variables.forEach(variable => {\n      if (!variable.name || !variable.type) {\n        throw new Error('function variable must have a name and type');\n      }\n      let variableDefinition = `DECLARE ${variable.name} ${variable.type}`;\n      if (variable.default) {\n        variableDefinition += ` := ${variable.default}`;\n      }\n      variableDefinition += ';';\n      variableDefinitions.push(variableDefinition);\n    });\n    return variableDefinitions.join(' ');\n  }\n\n  expandOptions(options) {\n    return options === undefined || _.isEmpty(options) ?\n      '' : options.join(' ');\n  }\n\n  decodeTriggerEventType(eventSpecifier) {\n    const EVENT_DECODER = {\n      'after': 'AFTER',\n      'before': 'BEFORE',\n      'instead_of': 'INSTEAD OF',\n      'after_constraint': 'AFTER'\n    };\n\n    if (!EVENT_DECODER[eventSpecifier]) {\n      throw new Error(`Invalid trigger event specified: ${eventSpecifier}`);\n    }\n\n    return EVENT_DECODER[eventSpecifier];\n  }\n\n  triggerEventTypeIsConstraint(eventSpecifier) {\n    return eventSpecifier === 'after_constraint' ? 'CONSTRAINT ' : '';\n  }\n\n  expandTriggerEventSpec(fireOnSpec) {\n    if (_.isEmpty(fireOnSpec)) {\n      throw new Error('no table change events specified to trigger on');\n    }\n\n    return _.map(fireOnSpec, (fireValue, fireKey) => {\n      const EVENT_MAP = {\n        'insert': 'INSERT',\n        'update': 'UPDATE',\n        'delete': 'DELETE',\n        'truncate': 'TRUNCATE'\n      };\n\n      if (!EVENT_MAP[fireValue]) {\n        throw new Error(`parseTriggerEventSpec: undefined trigger event ${fireKey}`);\n      }\n\n      let eventSpec = EVENT_MAP[fireValue];\n      if (eventSpec === 'UPDATE') {\n        if (Array.isArray(fireValue) && fireValue.length > 0) {\n          eventSpec += ` OF ${fireValue.join(', ')}`;\n        }\n      }\n\n      return eventSpec;\n    }).join(' OR ');\n  }\n\n  pgEnumName(tableName, attr, options) {\n    options = options || {};\n\n    const tableDetails = this.extractTableDetails(tableName, options);\n    let enumName = Utils.addTicks(Utils.generateEnumName(tableDetails.tableName, attr), '\"');\n\n    // pgListEnums requires the enum name only, without the schema\n    if (options.schema !== false && tableDetails.schema) {\n      enumName = this.quoteIdentifier(tableDetails.schema) + tableDetails.delimiter + enumName;\n    }\n\n    return enumName;\n  }\n\n  pgListEnums(tableName, attrName, options) {\n    let enumName = '';\n    const tableDetails = this.extractTableDetails(tableName, options);\n\n    if (tableDetails.tableName && attrName) {\n      enumName = ` AND t.typname=${this.pgEnumName(tableDetails.tableName, attrName, { schema: false }).replace(/\"/g, \"'\")}`;\n    }\n\n    return 'SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t ' +\n      'JOIN pg_enum e ON t.oid = e.enumtypid ' +\n      'JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace ' +\n      `WHERE n.nspname = '${tableDetails.schema}'${enumName} GROUP BY 1`;\n  }\n\n  pgEnum(tableName, attr, dataType, options) {\n    const enumName = this.pgEnumName(tableName, attr, options);\n    let values;\n\n    if (dataType.values) {\n      values = `ENUM(${dataType.values.map(value => this.escape(value)).join(', ')})`;\n    } else {\n      values = dataType.toString().match(/^ENUM\\(.+\\)/)[0];\n    }\n\n    let sql = `DO ${this.escape(`BEGIN CREATE TYPE ${enumName} AS ${values}; EXCEPTION WHEN duplicate_object THEN null; END`)};`;\n    if (!!options && options.force === true) {\n      sql = this.pgEnumDrop(tableName, attr) + sql;\n    }\n    return sql;\n  }\n\n  pgEnumAdd(tableName, attr, value, options) {\n    const enumName = this.pgEnumName(tableName, attr);\n    let sql = `ALTER TYPE ${enumName} ADD VALUE `;\n\n    if (semver.gte(this.sequelize.options.databaseVersion, '9.3.0')) {\n      sql += 'IF NOT EXISTS ';\n    }\n    sql += this.escape(value);\n\n    if (options.before) {\n      sql += ` BEFORE ${this.escape(options.before)}`;\n    } else if (options.after) {\n      sql += ` AFTER ${this.escape(options.after)}`;\n    }\n\n    return sql;\n  }\n\n  pgEnumDrop(tableName, attr, enumName) {\n    enumName = enumName || this.pgEnumName(tableName, attr);\n    return `DROP TYPE IF EXISTS ${enumName}; `;\n  }\n\n  fromArray(text) {\n    text = text.replace(/^{/, '').replace(/}$/, '');\n    let matches = text.match(/(\"(?:\\\\.|[^\"\\\\\\\\])*\"|[^,]*)(?:\\s*,\\s*|\\s*$)/ig);\n\n    if (matches.length < 1) {\n      return [];\n    }\n\n    matches = matches.map(m => m.replace(/\",$/, '').replace(/,$/, '').replace(/(^\"|\"$)/g, ''));\n\n    return matches.slice(0, -1);\n  }\n\n  dataTypeMapping(tableName, attr, dataType) {\n    if (dataType.includes('PRIMARY KEY')) {\n      dataType = dataType.replace('PRIMARY KEY', '');\n    }\n\n    if (dataType.includes('SERIAL')) {\n      if (dataType.includes('BIGINT')) {\n        dataType = dataType.replace('SERIAL', 'BIGSERIAL');\n        dataType = dataType.replace('BIGINT', '');\n      } else if (dataType.includes('SMALLINT')) {\n        dataType = dataType.replace('SERIAL', 'SMALLSERIAL');\n        dataType = dataType.replace('SMALLINT', '');\n      } else {\n        dataType = dataType.replace('INTEGER', '');\n      }\n      dataType = dataType.replace('NOT NULL', '');\n    }\n\n    if (dataType.startsWith('ENUM(')) {\n      dataType = dataType.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attr));\n    }\n\n    return dataType;\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  getForeignKeysQuery(tableName) {\n    return 'SELECT conname as constraint_name, pg_catalog.pg_get_constraintdef(r.oid, true) as condef FROM pg_catalog.pg_constraint r ' +\n      `WHERE r.conrelid = (SELECT oid FROM pg_class WHERE relname = '${tableName}' LIMIT 1) AND r.contype = 'f' ORDER BY 1;`;\n  }\n\n  /**\n   * Generate common SQL prefix for getForeignKeyReferencesQuery.\n   *\n   * @returns {string}\n   */\n  _getForeignKeyReferencesQueryPrefix() {\n    return 'SELECT ' +\n      'DISTINCT tc.constraint_name as constraint_name, ' +\n      'tc.constraint_schema as constraint_schema, ' +\n      'tc.constraint_catalog as constraint_catalog, ' +\n      'tc.table_name as table_name,' +\n      'tc.table_schema as table_schema,' +\n      'tc.table_catalog as table_catalog,' +\n      'tc.initially_deferred as initially_deferred,' +\n      'tc.is_deferrable as is_deferrable,' +\n      'kcu.column_name as column_name,' +\n      'ccu.table_schema  AS referenced_table_schema,' +\n      'ccu.table_catalog  AS referenced_table_catalog,' +\n      'ccu.table_name  AS referenced_table_name,' +\n      'ccu.column_name AS referenced_column_name ' +\n      'FROM information_schema.table_constraints AS tc ' +\n      'JOIN information_schema.key_column_usage AS kcu ' +\n      'ON tc.constraint_name = kcu.constraint_name ' +\n      'JOIN information_schema.constraint_column_usage AS ccu ' +\n      'ON ccu.constraint_name = tc.constraint_name ';\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys details of a table.\n   *\n   * As for getForeignKeysQuery is not compatible with getForeignKeyReferencesQuery, so add a new function.\n   *\n   * @param {string} tableName\n   * @param {string} catalogName\n   * @param {string} schemaName\n   */\n  getForeignKeyReferencesQuery(tableName, catalogName, schemaName) {\n    return `${this._getForeignKeyReferencesQueryPrefix()\n    }WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = '${tableName}'${\n      catalogName ? ` AND tc.table_catalog = '${catalogName}'` : ''\n    }${schemaName ? ` AND tc.table_schema = '${schemaName}'` : ''}`;\n  }\n\n  getForeignKeyReferenceQuery(table, columnName) {\n    const tableName = table.tableName || table;\n    const schema = table.schema;\n    return `${this._getForeignKeyReferencesQueryPrefix()\n    }WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name='${tableName}' AND  kcu.column_name = '${columnName}'${\n      schema ? ` AND tc.table_schema = '${schema}'` : ''}`;\n  }\n\n  /**\n   * Generates an SQL query that removes a foreign key from a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @param  {string} foreignKey The name of the foreign key constraint.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return `ALTER TABLE ${this.quoteTable(tableName)} DROP CONSTRAINT ${this.quoteIdentifier(foreignKey)};`;\n  }\n\n  /**\n   * Quote identifier in sql clause\n   *\n   * @param {string} identifier\n   * @param {boolean} force\n   *\n   * @returns {string}\n   */\n  quoteIdentifier(identifier, force) {\n    const optForceQuote = force || false;\n    const optQuoteIdentifiers = this.options.quoteIdentifiers !== false;\n    const rawIdentifier = Utils.removeTicks(identifier, '\"');\n\n    if (\n      optForceQuote === true ||\n      optQuoteIdentifiers !== false ||\n      identifier.includes('.') ||\n      identifier.includes('->') ||\n      POSTGRES_RESERVED_WORDS.includes(rawIdentifier.toLowerCase())\n    ) {\n      // In Postgres if tables or attributes are created double-quoted,\n      // they are also case sensitive. If they contain any uppercase\n      // characters, they must always be double-quoted. This makes it\n      // impossible to write queries in portable SQL if tables are created in\n      // this way. Hence, we strip quotes if we don't want case sensitivity.\n      return Utils.addTicks(rawIdentifier, '\"');\n    }\n    return rawIdentifier;\n  }\n}\n\nmodule.exports = PostgresQueryGenerator;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 21753, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 21758, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/postgres/query-interface.js"],"sourcesContent":["'use strict';\n\nconst DataTypes = require('../../data-types');\nconst QueryTypes = require('../../query-types');\nconst { QueryInterface } = require('../abstract/query-interface');\nconst Utils = require('../../utils');\nconst Deferrable = require('../../deferrable');\n\n/**\n * The interface that Sequelize uses to talk with Postgres database\n */\nclass PostgresQueryInterface extends QueryInterface {\n  /**\n   * Ensure enum and their values.\n   *\n   * @param {string} tableName  Name of table to create\n   * @param {object} attributes Object representing a list of normalized table attributes\n   * @param {object} [options]\n   * @param {Model}  [model]\n   *\n   * @protected\n   */\n  async ensureEnums(tableName, attributes, options, model) {\n    const keys = Object.keys(attributes);\n    const keyLen = keys.length;\n\n    let sql = '';\n    let promises = [];\n    let i = 0;\n\n    for (i = 0; i < keyLen; i++) {\n      const attribute = attributes[keys[i]];\n      const type = attribute.type;\n\n      if (\n        type instanceof DataTypes.ENUM ||\n        type instanceof DataTypes.ARRAY && type.type instanceof DataTypes.ENUM //ARRAY sub type is ENUM\n      ) {\n        sql = this.queryGenerator.pgListEnums(tableName, attribute.field || keys[i], options);\n        promises.push(this.sequelize.query(\n          sql,\n          { ...options, plain: true, raw: true, type: QueryTypes.SELECT }\n        ));\n      }\n    }\n\n    const results = await Promise.all(promises);\n    promises = [];\n    let enumIdx = 0;\n\n    // This little function allows us to re-use the same code that prepends or appends new value to enum array\n    const addEnumValue = (field, value, relativeValue, position = 'before', spliceStart = promises.length) => {\n      const valueOptions = { ...options };\n      valueOptions.before = null;\n      valueOptions.after = null;\n\n      switch (position) {\n        case 'after':\n          valueOptions.after = relativeValue;\n          break;\n        case 'before':\n        default:\n          valueOptions.before = relativeValue;\n          break;\n      }\n\n      promises.splice(spliceStart, 0, () => {\n        return this.sequelize.query(this.queryGenerator.pgEnumAdd(\n          tableName, field, value, valueOptions\n        ), valueOptions);\n      });\n    };\n\n    for (i = 0; i < keyLen; i++) {\n      const attribute = attributes[keys[i]];\n      const type = attribute.type;\n      const enumType = type.type || type;\n      const field = attribute.field || keys[i];\n\n      if (\n        type instanceof DataTypes.ENUM ||\n        type instanceof DataTypes.ARRAY && enumType instanceof DataTypes.ENUM //ARRAY sub type is ENUM\n      ) {\n        // If the enum type doesn't exist then create it\n        if (!results[enumIdx]) {\n          promises.push(() => {\n            return this.sequelize.query(this.queryGenerator.pgEnum(tableName, field, enumType, options), { ...options, raw: true });\n          });\n        } else if (!!results[enumIdx] && !!model) {\n          const enumVals = this.queryGenerator.fromArray(results[enumIdx].enum_value);\n          const vals = enumType.values;\n\n          // Going through already existing values allows us to make queries that depend on those values\n          // We will prepend all new values between the old ones, but keep in mind - we can't change order of already existing values\n          // Then we append the rest of new values AFTER the latest already existing value\n          // E.g.: [1,2] -> [0,2,1] ==> [1,0,2]\n          // E.g.: [1,2,3] -> [2,1,3,4] ==> [1,2,3,4]\n          // E.g.: [1] -> [0,2,3] ==> [1,0,2,3]\n          let lastOldEnumValue;\n          let rightestPosition = -1;\n          for (let oldIndex = 0; oldIndex < enumVals.length; oldIndex++) {\n            const enumVal = enumVals[oldIndex];\n            const newIdx = vals.indexOf(enumVal);\n            lastOldEnumValue = enumVal;\n\n            if (newIdx === -1) {\n              continue;\n            }\n\n            const newValuesBefore = vals.slice(0, newIdx);\n            const promisesLength = promises.length;\n            // we go in reverse order so we could stop when we meet old value\n            for (let reverseIdx = newValuesBefore.length - 1; reverseIdx >= 0; reverseIdx--) {\n              if (~enumVals.indexOf(newValuesBefore[reverseIdx])) {\n                break;\n              }\n\n              addEnumValue(field, newValuesBefore[reverseIdx], lastOldEnumValue, 'before', promisesLength);\n            }\n\n            // we detect the most 'right' position of old value in new enum array so we can append new values to it\n            if (newIdx > rightestPosition) {\n              rightestPosition = newIdx;\n            }\n          }\n\n          if (lastOldEnumValue && rightestPosition < vals.length - 1) {\n            const remainingEnumValues = vals.slice(rightestPosition + 1);\n            for (let reverseIdx = remainingEnumValues.length - 1; reverseIdx >= 0; reverseIdx--) {\n              addEnumValue(field, remainingEnumValues[reverseIdx], lastOldEnumValue, 'after');\n            }\n          }\n\n          enumIdx++;\n        }\n      }\n    }\n\n    const result = await promises\n      .reduce(async (promise, asyncFunction) => await asyncFunction(await promise), Promise.resolve());\n\n    // If ENUM processed, then refresh OIDs\n    if (promises.length) {\n      await this.sequelize.dialect.connectionManager._refreshDynamicOIDs();\n    }\n    return result;\n  }\n\n  /**\n   * @override\n   */\n  async getForeignKeyReferencesForTable(table, options) {\n    const queryOptions = {\n      ...options,\n      type: QueryTypes.FOREIGNKEYS\n    };\n\n    // postgres needs some special treatment as those field names returned are all lowercase\n    // in order to keep same result with other dialects.\n    const query = this.queryGenerator.getForeignKeyReferencesQuery(table.tableName || table, this.sequelize.config.database, table.schema);\n    const result = await this.sequelize.query(query, queryOptions);\n\n    return result.map(fkMeta => {\n      const { initiallyDeferred, isDeferrable, ...remaining } = Utils.camelizeObjectKeys(fkMeta);\n\n      return {\n        ...remaining,\n        deferrable: isDeferrable === 'NO' ? Deferrable.NOT\n          : initiallyDeferred === 'NO' ? Deferrable.INITIALLY_IMMEDIATE\n            : Deferrable.INITIALLY_DEFERRED\n      };\n    });\n  }\n\n  /**\n   * Drop specified enum from database (Postgres only)\n   *\n   * @param {string} [enumName]  Enum name to drop\n   * @param {object} options Query options\n   *\n   * @returns {Promise}\n   */\n  async dropEnum(enumName, options) {\n    options = options || {};\n\n    return this.sequelize.query(\n      this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(enumName)),\n      { ...options, raw: true }\n    );\n  }\n\n  /**\n   * Drop all enums from database (Postgres only)\n   *\n   * @param {object} options Query options\n   *\n   * @returns {Promise}\n   */\n  async dropAllEnums(options) {\n    options = options || {};\n\n    const enums = await this.pgListEnums(null, options);\n\n    return await Promise.all(enums.map(result => this.sequelize.query(\n      this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(result.enum_name)),\n      { ...options, raw: true }\n    )));\n  }\n\n  /**\n   * List all enums (Postgres only)\n   *\n   * @param {string} [tableName]  Table whose enum to list\n   * @param {object} [options]    Query options\n   *\n   * @returns {Promise}\n   */\n  async pgListEnums(tableName, options) {\n    options = options || {};\n    const sql = this.queryGenerator.pgListEnums(tableName);\n    return this.sequelize.query(sql, { ...options, plain: false, raw: true, type: QueryTypes.SELECT });\n  }\n\n  /**\n   * Since postgres has a special case for enums, we should drop the related\n   * enum type within the table and attribute\n   *\n   * @override\n   */\n  async dropTable(tableName, options) {\n    await super.dropTable(tableName, options);\n    const promises = [];\n    const instanceTable = this.sequelize.modelManager.getModel(tableName, { attribute: 'tableName' });\n\n    if (!instanceTable) {\n      // Do nothing when model is not available\n      return;\n    }\n\n    const getTableName = (!options || !options.schema || options.schema === 'public' ? '' : `${options.schema}_`) + tableName;\n\n    const keys = Object.keys(instanceTable.rawAttributes);\n    const keyLen = keys.length;\n\n    for (let i = 0; i < keyLen; i++) {\n      if (instanceTable.rawAttributes[keys[i]].type instanceof DataTypes.ENUM) {\n        const sql = this.queryGenerator.pgEnumDrop(getTableName, keys[i]);\n        options.supportsSearchPath = false;\n        promises.push(this.sequelize.query(sql, { ...options, raw: true }));\n      }\n    }\n\n    await Promise.all(promises);\n  }\n}\n\nexports.PostgresQueryInterface = PostgresQueryInterface;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 21946, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 21951, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/postgres/index.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').postgres;\nconst { PostgresQueryInterface } = require('./query-interface');\n\nclass PostgresDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new PostgresQueryInterface(\n      sequelize,\n      this.queryGenerator\n    );\n  }\n\n  canBackslashEscape() {\n    // postgres can use \\ to escape if one of these is true:\n    // - standard_conforming_strings is off\n    // - the string is prefixed with E (out of scope for this method)\n\n    return !this.sequelize.options.standardConformingStrings;\n  }\n}\n\nPostgresDialect.prototype.supports = _.merge(\n  _.cloneDeep(AbstractDialect.prototype.supports),\n  {\n    'DEFAULT VALUES': true,\n    EXCEPTION: true,\n    'ON DUPLICATE KEY': false,\n    'ORDER NULLS': true,\n    returnValues: {\n      returning: true\n    },\n    bulkDefault: true,\n    schemas: true,\n    lock: true,\n    lockOf: true,\n    lockKey: true,\n    lockOuterJoinFailure: true,\n    skipLocked: true,\n    forShare: 'FOR SHARE',\n    index: {\n      concurrently: true,\n      using: 2,\n      where: true,\n      functionBased: true,\n      operator: true\n    },\n    inserts: {\n      onConflictDoNothing: ' ON CONFLICT DO NOTHING',\n      updateOnDuplicate: ' ON CONFLICT DO UPDATE SET',\n      conflictFields: true,\n      onConflictWhere: true\n    },\n    NUMERIC: true,\n    ARRAY: true,\n    RANGE: true,\n    GEOMETRY: true,\n    REGEXP: true,\n    GEOGRAPHY: true,\n    JSON: true,\n    JSONB: true,\n    HSTORE: true,\n    TSVECTOR: true,\n    deferrableConstraints: true,\n    searchPath: true,\n    escapeStringConstants: true\n  }\n);\n\nPostgresDialect.prototype.defaultVersion = '9.5.0'; // minimum supported version\nPostgresDialect.prototype.Query = Query;\nPostgresDialect.prototype.DataTypes = DataTypes;\nPostgresDialect.prototype.name = 'postgres';\nPostgresDialect.prototype.TICK_CHAR = '\"';\nPostgresDialect.prototype.TICK_CHAR_LEFT = PostgresDialect.prototype.TICK_CHAR;\nPostgresDialect.prototype.TICK_CHAR_RIGHT = PostgresDialect.prototype.TICK_CHAR;\n\nmodule.exports = PostgresDialect;\nmodule.exports.default = PostgresDialect;\nmodule.exports.PostgresDialect = PostgresDialect;\n"],"names":[],"mappings":";AAEA,MAAM,IAAI,QAAQ;AAClB,MAAM,kBAAkB,QAAQ;AAChC,MAAM,oBAAoB,QAAQ;AAClC,MAAM,QAAQ,QAAQ;AACtB,MAAM,iBAAiB,QAAQ;AAC/B,MAAM,YAAY,QAAQ,8FAAoB,QAAA;AAC9C,MAAM,EAAE,sBAAA,EAAA,GAA2B,QAAQ;AAE3C,MAAA,wBAA8B,gBAAgB;IAC5C,YAAY,SAAA,CAAW;QACrB,KAAA;QACA,IAAA,CAAK,SAAA,GAAY;QACjB,IAAA,CAAK,iBAAA,GAAoB,IAAI,kBAAkB,IAAA,EAAM;QACrD,IAAA,CAAK,cAAA,GAAiB,IAAI,eAAe;YACvC,UAAU,IAAA;YACV;QAAA;QAEF,IAAA,CAAK,cAAA,GAAiB,IAAI,uBACxB,WACA,IAAA,CAAK,cAAA;IAAA;IAIT,qBAAqB;QAKnB,OAAO,CAAC,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ,yBAAA;IAAA;AAAA;AAInC,gBAAgB,SAAA,CAAU,QAAA,GAAW,EAAE,KAAA,CACrC,EAAE,SAAA,CAAU,gBAAgB,SAAA,CAAU,QAAA,GACtC;IACE,kBAAkB;IAClB,WAAW;IACX,oBAAoB;IACpB,eAAe;IACf,cAAc;QACZ,WAAW;IAAA;IAEb,aAAa;IACb,SAAS;IACT,MAAM;IACN,QAAQ;IACR,SAAS;IACT,sBAAsB;IACtB,YAAY;IACZ,UAAU;IACV,OAAO;QACL,cAAc;QACd,OAAO;QACP,OAAO;QACP,eAAe;QACf,UAAU;IAAA;IAEZ,SAAS;QACP,qBAAqB;QACrB,mBAAmB;QACnB,gBAAgB;QAChB,iBAAiB;IAAA;IAEnB,SAAS;IACT,OAAO;IACP,OAAO;IACP,UAAU;IACV,QAAQ;IACR,WAAW;IACX,MAAM;IACN,OAAO;IACP,QAAQ;IACR,UAAU;IACV,uBAAuB;IACvB,YAAY;IACZ,uBAAuB;AAAA;AAI3B,gBAAgB,SAAA,CAAU,cAAA,GAAiB;AAC3C,gBAAgB,SAAA,CAAU,KAAA,GAAQ;AAClC,gBAAgB,SAAA,CAAU,SAAA,GAAY;AACtC,gBAAgB,SAAA,CAAU,IAAA,GAAO;AACjC,gBAAgB,SAAA,CAAU,SAAA,GAAY;AACtC,gBAAgB,SAAA,CAAU,cAAA,GAAiB,gBAAgB,SAAA,CAAU,SAAA;AACrE,gBAAgB,SAAA,CAAU,eAAA,GAAkB,gBAAgB,SAAA,CAAU,SAAA;AAEtE,OAAO,OAAA,GAAU;AACjB,OAAO,OAAA,CAAQ,OAAA,GAAU;AACzB,OAAO,OAAA,CAAQ,eAAA,GAAkB","ignoreList":[0]}},
    {"offset": {"line": 22027, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 22032, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/sqlite/connection-manager.js"],"sourcesContent":["'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst { logger } = require('../../utils/logger');\nconst debug = logger.debugContext('connection:sqlite');\nconst dataTypes = require('../../data-types').sqlite;\nconst sequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('sqlite');\nconst { promisify } = require('util');\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    super(dialect, sequelize);\n\n    // We attempt to parse file location from a connection uri\n    // but we shouldn't match sequelize default host.\n    if (this.sequelize.options.host === 'localhost') {\n      delete this.sequelize.options.host;\n    }\n\n    this.connections = {};\n    this.lib = this._loadDialectModule('sqlite3');\n    this.refreshTypeParser(dataTypes);\n  }\n\n  async _onProcessExit() {\n    await Promise.all(\n      Object.getOwnPropertyNames(this.connections)\n        .map(connection => promisify(callback => this.connections[connection].close(callback))())\n    );\n    return super._onProcessExit.call(this);\n  }\n\n  // Expose this as a method so that the parsing may be updated when the user has added additional, custom types\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  async getConnection(options) {\n    options = options || {};\n    options.uuid = options.uuid || 'default';\n\n    if (!!this.sequelize.options.storage !== null && this.sequelize.options.storage !== undefined) {\n      // Check explicitely for the storage option to not be set since an empty string signals\n      // SQLite will create a temporary disk-based database in that case.\n      options.storage = this.sequelize.options.storage;\n    } else {\n      options.storage = this.sequelize.options.host || ':memory:';\n    }\n\n    options.inMemory = options.storage === ':memory:' ? 1 : 0;\n\n    const dialectOptions = this.sequelize.options.dialectOptions;\n    const defaultReadWriteMode = this.lib.OPEN_READWRITE | this.lib.OPEN_CREATE;\n\n    options.readWriteMode = dialectOptions && dialectOptions.mode || defaultReadWriteMode;\n\n    if (this.connections[options.inMemory || options.uuid]) {\n      return this.connections[options.inMemory || options.uuid];\n    }\n\n    if (!options.inMemory && (options.readWriteMode & this.lib.OPEN_CREATE) !== 0) {\n      // automatic path provision for `options.storage`\n      fs.mkdirSync(path.dirname(options.storage), { recursive: true });\n    }\n\n    const connection = await new Promise((resolve, reject) => {\n      this.connections[options.inMemory || options.uuid] = new this.lib.Database(\n        options.storage,\n        options.readWriteMode,\n        err => {\n          if (err) return reject(new sequelizeErrors.ConnectionError(err));\n          debug(`connection acquired ${options.uuid}`);\n          resolve(this.connections[options.inMemory || options.uuid]);\n        }\n      );\n    });\n\n    if (this.sequelize.config.password) {\n      // Make it possible to define and use password for sqlite encryption plugin like sqlcipher\n      connection.run(`PRAGMA KEY=${this.sequelize.escape(this.sequelize.config.password)}`);\n    }\n    if (this.sequelize.options.foreignKeys !== false) {\n      // Make it possible to define and use foreign key constraints unless\n      // explicitly disallowed. It's still opt-in per relation\n      connection.run('PRAGMA FOREIGN_KEYS=ON');\n    }\n\n    return connection;\n  }\n\n  releaseConnection(connection, force) {\n    if (connection.filename === ':memory:' && force !== true) return;\n\n    if (connection.uuid) {\n      connection.close();\n      debug(`connection released ${connection.uuid}`);\n      delete this.connections[connection.uuid];\n    }\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 22113, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 22118, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/sqlite/query.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Utils = require('../../utils');\nconst AbstractQuery = require('../abstract/query');\nconst QueryTypes = require('../../query-types');\nconst sequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('sqlite');\nconst { logger } = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:sqlite');\n\n// sqlite3 currently ignores bigint values, so we have to translate to string for now\n// There's a WIP here: https://github.com/TryGhost/node-sqlite3/pull/1501\nfunction stringifyIfBigint(value) {\n  if (typeof value === 'bigint') {\n    return value.toString();\n  }\n\n  return value;\n}\n\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return 'lastID';\n  }\n\n  /**\n   * rewrite query with parameters.\n   *\n   * @param {string} sql\n   * @param {Array|object} values\n   * @param {string} dialect\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect) {\n    let bindParam;\n    if (Array.isArray(values)) {\n      bindParam = {};\n      values.forEach((v, i) => {\n        bindParam[`$${i + 1}`] = v;\n      });\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];\n    } else {\n      bindParam = {};\n      if (typeof values === 'object') {\n        for (const k of Object.keys(values)) {\n          bindParam[`$${k}`] = values[k];\n        }\n      }\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];\n    }\n    return [sql, bindParam];\n  }\n\n  _collectModels(include, prefix) {\n    const ret = {};\n\n    if (include) {\n      for (const _include of include) {\n        let key;\n        if (!prefix) {\n          key = _include.as;\n        } else {\n          key = `${prefix}.${_include.as}`;\n        }\n        ret[key] = _include.model;\n\n        if (_include.include) {\n          _.merge(ret, this._collectModels(_include.include, key));\n        }\n      }\n    }\n\n    return ret;\n  }\n\n  _handleQueryResponse(metaData, columnTypes, err, results, errStack) {\n    if (err) {\n      err.sql = this.sql;\n      throw this.formatError(err, errStack);\n    }\n    let result = this.instance;\n\n    // add the inserted row id to the instance\n    if (this.isInsertQuery(results, metaData) || this.isUpsertQuery()) {\n      this.handleInsertQuery(results, metaData);\n      if (!this.instance) {\n        // handle bulkCreate AI primary key\n        if (\n          metaData.constructor.name === 'Statement'\n          && this.model\n          && this.model.autoIncrementAttribute\n          && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute\n          && this.model.rawAttributes[this.model.primaryKeyAttribute]\n        ) {\n          const startId = metaData[this.getInsertIdField()] - metaData.changes + 1;\n          result = [];\n          for (let i = startId; i < startId + metaData.changes; i++) {\n            result.push({ [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i });\n          }\n        } else {\n          result = metaData[this.getInsertIdField()];\n        }\n      }\n    }\n\n    if (this.isShowTablesQuery()) {\n      return results.map(row => row.name);\n    }\n    if (this.isShowConstraintsQuery()) {\n      result = results;\n      if (results && results[0] && results[0].sql) {\n        result = this.parseConstraintsFromSql(results[0].sql);\n      }\n      return result;\n    }\n    if (this.isSelectQuery()) {\n      if (this.options.raw) {\n        return this.handleSelectQuery(results);\n      }\n      // This is a map of prefix strings to models, e.g. user.projects -> Project model\n      const prefixes = this._collectModels(this.options.include);\n\n      results = results.map(result => {\n        return _.mapValues(result, (value, name) => {\n          let model;\n          if (name.includes('.')) {\n            const lastind = name.lastIndexOf('.');\n\n            model = prefixes[name.substr(0, lastind)];\n\n            name = name.substr(lastind + 1);\n          } else {\n            model = this.options.model;\n          }\n\n          const tableName = model.getTableName().toString().replace(/`/g, '');\n          const tableTypes = columnTypes[tableName] || {};\n\n          if (tableTypes && !(name in tableTypes)) {\n            // The column is aliased\n            _.forOwn(model.rawAttributes, (attribute, key) => {\n              if (name === key && attribute.field) {\n                name = attribute.field;\n                return false;\n              }\n            });\n          }\n\n          return Object.prototype.hasOwnProperty.call(tableTypes, name)\n            ? this.applyParsers(tableTypes[name], value)\n            : value;\n        });\n      });\n\n      return this.handleSelectQuery(results);\n    }\n    if (this.isShowOrDescribeQuery()) {\n      return results;\n    }\n    if (this.sql.includes('PRAGMA INDEX_LIST')) {\n      return this.handleShowIndexesQuery(results);\n    }\n    if (this.sql.includes('PRAGMA INDEX_INFO')) {\n      return results;\n    }\n    if (this.sql.includes('PRAGMA TABLE_INFO')) {\n      // this is the sqlite way of getting the metadata of a table\n      result = {};\n\n      let defaultValue;\n      for (const _result of results) {\n        if (_result.dflt_value === null) {\n          // Column schema omits any \"DEFAULT ...\"\n          defaultValue = undefined;\n        } else if (_result.dflt_value === 'NULL') {\n          // Column schema is a \"DEFAULT NULL\"\n          defaultValue = null;\n        } else {\n          defaultValue = _result.dflt_value;\n        }\n\n        result[_result.name] = {\n          type: _result.type,\n          allowNull: _result.notnull === 0,\n          defaultValue,\n          primaryKey: _result.pk !== 0\n        };\n\n        if (result[_result.name].type === 'TINYINT(1)') {\n          result[_result.name].defaultValue = { '0': false, '1': true }[result[_result.name].defaultValue];\n        }\n\n        if (typeof result[_result.name].defaultValue === 'string') {\n          result[_result.name].defaultValue = result[_result.name].defaultValue.replace(/'/g, '');\n        }\n      }\n      return result;\n    }\n    if (this.sql.includes('PRAGMA foreign_keys;')) {\n      return results[0];\n    }\n    if (this.sql.includes('PRAGMA foreign_keys')) {\n      return results;\n    }\n    if (this.sql.includes('PRAGMA foreign_key_list')) {\n      return results;\n    }\n    if ([QueryTypes.BULKUPDATE, QueryTypes.BULKDELETE].includes(this.options.type)) {\n      return metaData.changes;\n    }\n    if (this.options.type === QueryTypes.VERSION) {\n      return results[0].version;\n    }\n    if (this.options.type === QueryTypes.RAW) {\n      return [results, metaData];\n    }\n    if (this.isUpsertQuery()) {\n      return [result, null];\n    }\n    if (this.isUpdateQuery() || this.isInsertQuery()) {\n      return [result, metaData.changes];\n    }\n    return result;\n  }\n\n  async run(sql, parameters) {\n    const conn = this.connection;\n    this.sql = sql;\n    const method = this.getDatabaseMethod();\n    const complete = this._logQuery(sql, debug, parameters);\n\n    return new Promise((resolve, reject) => conn.serialize(async () => {\n      const columnTypes = {};\n      const errForStack = new Error();\n      const executeSql = () => {\n        if (sql.startsWith('-- ')) {\n          return resolve();\n        }\n        const query = this;\n        // cannot use arrow function here because the function is bound to the statement\n        function afterExecute(executionError, results) {\n          try {\n            complete();\n            // `this` is passed from sqlite, we have no control over this.\n            // eslint-disable-next-line no-invalid-this\n            resolve(query._handleQueryResponse(this, columnTypes, executionError, results, errForStack.stack));\n            return;\n          } catch (error) {\n            reject(error);\n          }\n        }\n\n        if (!parameters) parameters = [];\n\n        if (_.isPlainObject(parameters)) {\n          const newParameters = Object.create(null);\n          for (const key of Object.keys(parameters)) {\n            newParameters[`${key}`] = stringifyIfBigint(parameters[key]);\n          }\n          parameters = newParameters;\n        } else {\n          parameters = parameters.map(stringifyIfBigint);\n        }\n\n        conn[method](sql, parameters, afterExecute);\n\n        return null;\n      };\n\n      if (this.getDatabaseMethod() === 'all') {\n        let tableNames = [];\n        if (this.options && this.options.tableNames) {\n          tableNames = this.options.tableNames;\n        } else if (/FROM `(.*?)`/i.exec(this.sql)) {\n          tableNames.push(/FROM `(.*?)`/i.exec(this.sql)[1]);\n        }\n\n        // If we already have the metadata for the table, there's no need to ask for it again\n        tableNames = tableNames.filter(tableName => !(tableName in columnTypes) && tableName !== 'sqlite_master');\n\n        if (!tableNames.length) {\n          return executeSql();\n        }\n        await Promise.all(tableNames.map(tableName =>\n          new Promise(resolve => {\n            tableName = tableName.replace(/`/g, '');\n            columnTypes[tableName] = {};\n\n            conn.all(`PRAGMA table_info(\\`${tableName}\\`)`, (err, results) => {\n              if (!err) {\n                for (const result of results) {\n                  columnTypes[tableName][result.name] = result.type;\n                }\n              }\n              resolve();\n            });\n          })));\n      }\n      return executeSql();\n    }));\n  }\n\n  parseConstraintsFromSql(sql) {\n    let constraints = sql.split('CONSTRAINT ');\n    let referenceTableName, referenceTableKeys, updateAction, deleteAction;\n    constraints.splice(0, 1);\n    constraints = constraints.map(constraintSql => {\n      //Parse foreign key snippets\n      if (constraintSql.includes('REFERENCES')) {\n        //Parse out the constraint condition form sql string\n        updateAction = constraintSql.match(/ON UPDATE (CASCADE|SET NULL|RESTRICT|NO ACTION|SET DEFAULT){1}/);\n        deleteAction = constraintSql.match(/ON DELETE (CASCADE|SET NULL|RESTRICT|NO ACTION|SET DEFAULT){1}/);\n\n        if (updateAction) {\n          updateAction = updateAction[1];\n        }\n\n        if (deleteAction) {\n          deleteAction = deleteAction[1];\n        }\n\n        const referencesRegex = /REFERENCES.+\\((?:[^)(]+|\\((?:[^)(]+|\\([^)(]*\\))*\\))*\\)/;\n        const referenceConditions = constraintSql.match(referencesRegex)[0].split(' ');\n        referenceTableName = Utils.removeTicks(referenceConditions[1]);\n        let columnNames = referenceConditions[2];\n        columnNames = columnNames.replace(/\\(|\\)/g, '').split(', ');\n        referenceTableKeys = columnNames.map(column => Utils.removeTicks(column));\n      }\n\n      const constraintCondition = constraintSql.match(/\\((?:[^)(]+|\\((?:[^)(]+|\\([^)(]*\\))*\\))*\\)/)[0];\n      constraintSql = constraintSql.replace(/\\(.+\\)/, '');\n      const constraint = constraintSql.split(' ');\n\n      if (['PRIMARY', 'FOREIGN'].includes(constraint[1])) {\n        constraint[1] += ' KEY';\n      }\n\n      return {\n        constraintName: Utils.removeTicks(constraint[0]),\n        constraintType: constraint[1],\n        updateAction,\n        deleteAction,\n        sql: sql.replace(/\"/g, '`'), //Sqlite returns double quotes for table name\n        constraintCondition,\n        referenceTableName,\n        referenceTableKeys\n      };\n    });\n\n    return constraints;\n  }\n\n  applyParsers(type, value) {\n    if (type.includes('(')) {\n      // Remove the length part\n      type = type.substr(0, type.indexOf('('));\n    }\n    type = type.replace('UNSIGNED', '').replace('ZEROFILL', '');\n    type = type.trim().toUpperCase();\n    const parse = parserStore.get(type);\n\n    if (value !== null && parse) {\n      return parse(value, { timezone: this.sequelize.options.timezone });\n    }\n    return value;\n  }\n\n  formatError(err, errStack) {\n\n    switch (err.code) {\n      case 'SQLITE_CONSTRAINT_UNIQUE':\n      case 'SQLITE_CONSTRAINT_PRIMARYKEY':\n      case 'SQLITE_CONSTRAINT_TRIGGER':\n      case 'SQLITE_CONSTRAINT_FOREIGNKEY':\n      case 'SQLITE_CONSTRAINT': {\n        if (err.message.includes('FOREIGN KEY constraint failed')) {\n          return new sequelizeErrors.ForeignKeyConstraintError({\n            parent: err,\n            stack: errStack\n          });\n        }\n\n        let fields = [];\n\n        // Sqlite pre 2.2 behavior - Error: SQLITE_CONSTRAINT: columns x, y are not unique\n        let match = err.message.match(/columns (.*?) are/);\n        if (match !== null && match.length >= 2) {\n          fields = match[1].split(', ');\n        } else {\n\n          // Sqlite post 2.2 behavior - Error: SQLITE_CONSTRAINT: UNIQUE constraint failed: table.x, table.y\n          match = err.message.match(/UNIQUE constraint failed: (.*)/);\n          if (match !== null && match.length >= 2) {\n            fields = match[1].split(', ').map(columnWithTable => columnWithTable.split('.')[1]);\n          }\n        }\n\n        const errors = [];\n        let message = 'Validation error';\n\n        for (const field of fields) {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field,\n            this.instance && this.instance[field],\n            this.instance,\n            'not_unique'\n          ));\n        }\n\n        if (this.model) {\n          _.forOwn(this.model.uniqueKeys, constraint => {\n            if (_.isEqual(constraint.fields, fields) && !!constraint.msg) {\n              message = constraint.msg;\n              return false;\n            }\n          });\n        }\n\n        return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n      }\n      case 'SQLITE_BUSY':\n        return new sequelizeErrors.TimeoutError(err, { stack: errStack });\n\n      default:\n        return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n    }\n  }\n\n  async handleShowIndexesQuery(data) {\n    // Sqlite returns indexes so the one that was defined last is returned first. Lets reverse that!\n    return Promise.all(data.reverse().map(async item => {\n      item.fields = [];\n      item.primary = false;\n      item.unique = !!item.unique;\n      item.constraintName = item.name;\n      const columns = await this.run(`PRAGMA INDEX_INFO(\\`${item.name}\\`)`);\n      for (const column of columns) {\n        item.fields[column.seqno] = {\n          attribute: column.name,\n          length: undefined,\n          order: undefined\n        };\n      }\n\n      return item;\n    }));\n  }\n\n  getDatabaseMethod() {\n    if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery() || this.isBulkUpdateQuery() || this.sql.toLowerCase().includes('CREATE TEMPORARY TABLE'.toLowerCase()) || this.options.type === QueryTypes.BULKDELETE) {\n      return 'run';\n    }\n    return 'all';\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 22520, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 22525, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/sqlite/query-generator.js"],"sourcesContent":["'use strict';\n\nconst Utils = require('../../utils');\nconst Transaction = require('../../transaction');\nconst _ = require('lodash');\nconst MySqlQueryGenerator = require('../mysql/query-generator');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\n\nclass SQLiteQueryGenerator extends MySqlQueryGenerator {\n  createSchema() {\n    return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n  }\n\n  showSchemasQuery() {\n    return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n  }\n\n  versionQuery() {\n    return 'SELECT sqlite_version() as `version`';\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    options = options || {};\n\n    const primaryKeys = [];\n    const needsMultiplePrimaryKeys = Object.values(attributes).filter(definition => definition.includes('PRIMARY KEY')).length > 1;\n    const attrArray = [];\n\n    for (const attr in attributes) {\n      if (Object.prototype.hasOwnProperty.call(attributes, attr)) {\n        const dataType = attributes[attr];\n        const containsAutoIncrement = dataType.includes('AUTOINCREMENT');\n\n        let dataTypeString = dataType;\n        if (dataType.includes('PRIMARY KEY')) {\n          if (dataType.includes('INT')) {\n            // Only INTEGER is allowed for primary key, see https://github.com/sequelize/sequelize/issues/969 (no lenght, unsigned etc)\n            dataTypeString = containsAutoIncrement ? 'INTEGER PRIMARY KEY AUTOINCREMENT' : 'INTEGER PRIMARY KEY';\n\n            if (dataType.includes(' REFERENCES')) {\n              dataTypeString += dataType.substr(dataType.indexOf(' REFERENCES'));\n            }\n          }\n\n          if (needsMultiplePrimaryKeys) {\n            primaryKeys.push(attr);\n            if (dataType.includes('NOT NULL')) {\n              dataTypeString = dataType.replace(' PRIMARY KEY', '');\n            } else {\n              dataTypeString = dataType.replace('PRIMARY KEY', 'NOT NULL');\n            }\n          }\n        }\n        attrArray.push(`${this.quoteIdentifier(attr)} ${dataTypeString}`);\n      }\n    }\n\n    const table = this.quoteTable(tableName);\n    let attrStr = attrArray.join(', ');\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, columns => {\n        if (columns.customIndex) {\n          attrStr += `, UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n        }\n      });\n    }\n\n    if (pkString.length > 0) {\n      attrStr += `, PRIMARY KEY (${pkString})`;\n    }\n\n    const sql = `CREATE TABLE IF NOT EXISTS ${table} (${attrStr});`;\n    return this.replaceBooleanDefaults(sql);\n  }\n\n  booleanValue(value) {\n    return value ? 1 : 0;\n  }\n\n  /**\n   * Check whether the statmement is json function or simple path\n   *\n   * @param   {string}  stmt  The statement to validate\n   * @returns {boolean}       true if the given statement is json function\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\n   */\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== 'string') {\n      return false;\n    }\n\n    // https://sqlite.org/json1.html\n    const jsonFunctionRegex = /^\\s*(json(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n    const tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = jsonFunctionRegex.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf('(');\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = tokenCaptureRegex.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === '(') {\n          openingBrackets++;\n        } else if (capturedToken === ')') {\n          closingBrackets++;\n        } else if (capturedToken === ';') {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    // Check invalid json statement\n    hasInvalidToken |= openingBrackets !== closingBrackets;\n    if (hasJsonFunction && hasInvalidToken) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n\n    // return true if the statement has valid json function\n    return hasJsonFunction;\n  }\n\n  //sqlite can't cast to datetime so we need to convert date values to their ISO strings\n  _toJSONValue(value) {\n    if (value instanceof Date) {\n      return value.toISOString();\n    }\n    if (Array.isArray(value) && value[0] instanceof Date) {\n      return value.map(val => val.toISOString());\n    }\n    return value;\n  }\n\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      return super.handleSequelizeMethod(smth, tableName, factory, options, prepend);\n    }\n\n    if (smth instanceof Utils.Cast) {\n      if (/timestamp/i.test(smth.type)) {\n        smth.type = 'datetime';\n      }\n    }\n\n    return AbstractQueryGenerator.prototype.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n  }\n\n  addColumnQuery(table, key, dataType) {\n    const attributes = {};\n    attributes[key] = dataType;\n    const fields = this.attributesToSQL(attributes, { context: 'addColumn' });\n    const attribute = `${this.quoteIdentifier(key)} ${fields[key]}`;\n\n    const sql = `ALTER TABLE ${this.quoteTable(table)} ADD ${attribute};`;\n\n    return this.replaceBooleanDefaults(sql);\n  }\n\n  showTablesQuery() {\n    return 'SELECT name FROM `sqlite_master` WHERE type=\\'table\\' and name!=\\'sqlite_sequence\\';';\n  }\n\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    options = options || {};\n    _.defaults(options, this.options);\n\n    attrValueHash = Utils.removeNullValuesFromHash(attrValueHash, options.omitNull, options);\n\n    const modelAttributeMap = {};\n    const values = [];\n    const bind = [];\n    const bindParam = options.bindParam || this.bindParam(bind);\n\n    if (attributes) {\n      _.each(attributes, (attribute, key) => {\n        modelAttributeMap[key] = attribute;\n        if (attribute.field) {\n          modelAttributeMap[attribute.field] = attribute;\n        }\n      });\n    }\n\n    for (const key in attrValueHash) {\n      const value = attrValueHash[key];\n\n      if (value instanceof Utils.SequelizeMethod || options.bindParam === false) {\n        values.push(`${this.quoteIdentifier(key)}=${this.escape(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'UPDATE' })}`);\n      } else {\n        values.push(`${this.quoteIdentifier(key)}=${this.format(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'UPDATE' }, bindParam)}`);\n      }\n    }\n\n    let query;\n    const whereOptions = { ...options, bindParam };\n\n    if (options.limit) {\n      query = `UPDATE ${this.quoteTable(tableName)} SET ${values.join(',')} WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(tableName)} ${this.whereQuery(where, whereOptions)} LIMIT ${this.escape(options.limit)})`;\n    } else {\n      query = `UPDATE ${this.quoteTable(tableName)} SET ${values.join(',')} ${this.whereQuery(where, whereOptions)}`;\n    }\n\n    return { query, bind };\n  }\n\n  truncateTableQuery(tableName, options = {}) {\n    return [\n      `DELETE FROM ${this.quoteTable(tableName)}`,\n      options.restartIdentity ? `; DELETE FROM ${this.quoteTable('sqlite_sequence')} WHERE ${this.quoteIdentifier('name')} = ${Utils.addTicks(Utils.removeTicks(this.quoteTable(tableName), '`'), \"'\")};` : ''\n    ].join('');\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    _.defaults(options, this.options);\n\n    let whereClause = this.getWhereConditions(where, null, model, options);\n\n    if (whereClause) {\n      whereClause = `WHERE ${whereClause}`;\n    }\n\n    if (options.limit) {\n      whereClause = `WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(tableName)} ${whereClause} LIMIT ${this.escape(options.limit)})`;\n    }\n\n    return `DELETE FROM ${this.quoteTable(tableName)} ${whereClause}`;\n  }\n\n  attributesToSQL(attributes) {\n    const result = {};\n    for (const name in attributes) {\n      const dataType = attributes[name];\n      const fieldName = dataType.field || name;\n\n      if (_.isObject(dataType)) {\n        let sql = dataType.type.toString();\n\n        if (Object.prototype.hasOwnProperty.call(dataType, 'allowNull') && !dataType.allowNull) {\n          sql += ' NOT NULL';\n        }\n\n        if (Utils.defaultValueSchemable(dataType.defaultValue)) {\n          // TODO thoroughly check that DataTypes.NOW will properly\n          // get populated on all databases as DEFAULT value\n          // i.e. mysql requires: DEFAULT CURRENT_TIMESTAMP\n          sql += ` DEFAULT ${this.escape(dataType.defaultValue, dataType)}`;\n        }\n\n        if (dataType.unique === true) {\n          sql += ' UNIQUE';\n        }\n\n        if (dataType.primaryKey) {\n          sql += ' PRIMARY KEY';\n\n          if (dataType.autoIncrement) {\n            sql += ' AUTOINCREMENT';\n          }\n        }\n\n        if (dataType.references) {\n          const referencesTable = this.quoteTable(dataType.references.model);\n\n          let referencesKey;\n          if (dataType.references.key) {\n            referencesKey = this.quoteIdentifier(dataType.references.key);\n          } else {\n            referencesKey = this.quoteIdentifier('id');\n          }\n\n          sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\n\n          if (dataType.onDelete) {\n            sql += ` ON DELETE ${dataType.onDelete.toUpperCase()}`;\n          }\n\n          if (dataType.onUpdate) {\n            sql += ` ON UPDATE ${dataType.onUpdate.toUpperCase()}`;\n          }\n\n        }\n\n        result[fieldName] = sql;\n      } else {\n        result[fieldName] = dataType;\n      }\n    }\n\n    return result;\n  }\n\n  showIndexesQuery(tableName) {\n    return `PRAGMA INDEX_LIST(${this.quoteTable(tableName)})`;\n  }\n\n  showConstraintsQuery(tableName, constraintName) {\n    let sql = `SELECT sql FROM sqlite_master WHERE tbl_name='${tableName}'`;\n\n    if (constraintName) {\n      sql += ` AND sql LIKE '%${constraintName}%'`;\n    }\n\n    return `${sql};`;\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return `DROP INDEX IF EXISTS ${this.quoteIdentifier(indexName)}`;\n  }\n\n  describeTableQuery(tableName, schema, schemaDelimiter) {\n    const table = {\n      _schema: schema,\n      _schemaDelimiter: schemaDelimiter,\n      tableName\n    };\n    return `PRAGMA TABLE_INFO(${this.quoteTable(this.addSchema(table))});`;\n  }\n\n  describeCreateTableQuery(tableName) {\n    return `SELECT sql FROM sqlite_master WHERE tbl_name='${tableName}';`;\n  }\n\n  removeColumnQuery(tableName, attributes) {\n\n    attributes = this.attributesToSQL(attributes);\n\n    let backupTableName;\n    if (typeof tableName === 'object') {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNames = Object.keys(attributes).map(attr => this.quoteIdentifier(attr)).join(', ');\n\n    // Temporary table cannot work for foreign keys.\n    return `${this.createTableQuery(backupTableName, attributes)\n    }INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};`\n      + `DROP TABLE ${quotedTableName};${\n        this.createTableQuery(tableName, attributes)\n      }INSERT INTO ${quotedTableName} SELECT ${attributeNames} FROM ${quotedBackupTableName};`\n      + `DROP TABLE ${quotedBackupTableName};`;\n  }\n\n  _alterConstraintQuery(tableName, attributes, createTableSql) {\n    let backupTableName;\n\n    attributes = this.attributesToSQL(attributes);\n\n    if (typeof tableName === 'object') {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNames = Object.keys(attributes).map(attr => this.quoteIdentifier(attr)).join(', ');\n\n    return `${createTableSql\n      .replace(`CREATE TABLE ${quotedTableName}`, `CREATE TABLE ${quotedBackupTableName}`)\n      .replace(`CREATE TABLE ${quotedTableName.replace(/`/g, '\"')}`, `CREATE TABLE ${quotedBackupTableName}`)\n    }INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};`\n      + `DROP TABLE ${quotedTableName};`\n      + `ALTER TABLE ${quotedBackupTableName} RENAME TO ${quotedTableName};`;\n  }\n\n  renameColumnQuery(tableName, attrNameBefore, attrNameAfter, attributes) {\n\n    let backupTableName;\n\n    attributes = this.attributesToSQL(attributes);\n\n    if (typeof tableName === 'object') {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNamesImport = Object.keys(attributes).map(attr =>\n      attrNameAfter === attr ? `${this.quoteIdentifier(attrNameBefore)} AS ${this.quoteIdentifier(attr)}` : this.quoteIdentifier(attr)\n    ).join(', ');\n    const attributeNamesExport = Object.keys(attributes).map(attr => this.quoteIdentifier(attr)).join(', ');\n\n    // Temporary tables don't support foreign keys, so creating a temporary table will not allow foreign keys to be preserved\n    return `${this.createTableQuery(backupTableName, attributes)\n    }INSERT INTO ${quotedBackupTableName} SELECT ${attributeNamesImport} FROM ${quotedTableName};`\n      + `DROP TABLE ${quotedTableName};${\n        this.createTableQuery(tableName, attributes)\n      }INSERT INTO ${quotedTableName} SELECT ${attributeNamesExport} FROM ${quotedBackupTableName};`\n      + `DROP TABLE ${quotedBackupTableName};`;\n  }\n\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `SAVEPOINT ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return `BEGIN ${transaction.options.type} TRANSACTION;`;\n  }\n\n  setIsolationLevelQuery(value) {\n    switch (value) {\n      case Transaction.ISOLATION_LEVELS.REPEATABLE_READ:\n        return '-- SQLite is not able to choose the isolation level REPEATABLE READ.';\n      case Transaction.ISOLATION_LEVELS.READ_UNCOMMITTED:\n        return 'PRAGMA read_uncommitted = ON;';\n      case Transaction.ISOLATION_LEVELS.READ_COMMITTED:\n        return 'PRAGMA read_uncommitted = OFF;';\n      case Transaction.ISOLATION_LEVELS.SERIALIZABLE:\n        return '-- SQLite\\'s default isolation level is SERIALIZABLE. Nothing to do.';\n      default:\n        throw new Error(`Unknown isolation level: ${value}`);\n    }\n  }\n\n  replaceBooleanDefaults(sql) {\n    return sql.replace(/DEFAULT '?false'?/g, 'DEFAULT 0').replace(/DEFAULT '?true'?/g, 'DEFAULT 1');\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {TableName} tableName  The name of the table.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  getForeignKeysQuery(tableName) {\n    return `PRAGMA foreign_key_list(${this.quoteTable(this.addSchema(tableName))})`;\n  }\n\n  tableExistsQuery(tableName) {\n    return `SELECT name FROM sqlite_master WHERE type='table' AND name=${this.escape(this.addSchema(tableName))};`;\n  }\n\n  /**\n   * Quote identifier in sql clause\n   *\n   * @param {string} identifier\n   * @param {boolean} force\n   *\n   * @returns {string}\n   */\n  quoteIdentifier(identifier, force) {\n    return Utils.addTicks(Utils.removeTicks(identifier, '`'), '`');\n  }\n\n}\n\nmodule.exports = SQLiteQueryGenerator;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 22898, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 22903, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/sqlite/query-interface.js"],"sourcesContent":["'use strict';\n\nconst sequelizeErrors = require('../../errors');\nconst QueryTypes = require('../../query-types');\nconst { QueryInterface } = require('../abstract/query-interface');\nconst { cloneDeep } = require('../../utils');\nconst _ = require('lodash');\n\n/**\n * The interface that Sequelize uses to talk with SQLite database\n */\nclass SQLiteQueryInterface extends QueryInterface {\n  /**\n   * A wrapper that fixes SQLite's inability to remove columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but without the obsolete column.\n   *\n   * @override\n   */\n  async removeColumn(tableName, attributeName, options) {\n    options = options || {};\n\n    const fields = await this.describeTable(tableName, options);\n    delete fields[attributeName];\n\n    const sql = this.queryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * A wrapper that fixes SQLite's inability to change columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but with a modified version of the respective column.\n   *\n   * @override\n   */\n  async changeColumn(tableName, attributeName, dataTypeOrOptions, options) {\n    options = options || {};\n\n    const fields = await this.describeTable(tableName, options);\n    Object.assign(fields[attributeName], this.normalizeAttribute(dataTypeOrOptions));\n\n    const sql = this.queryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * A wrapper that fixes SQLite's inability to rename columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but with a renamed version of the respective column.\n   *\n   * @override\n   */\n  async renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\n    options = options || {};\n    const fields = await this.assertTableHasColumn(tableName, attrNameBefore, options);\n\n    fields[attrNameAfter] = { ...fields[attrNameBefore] };\n    delete fields[attrNameBefore];\n\n    const sql = this.queryGenerator.renameColumnQuery(tableName, attrNameBefore, attrNameAfter, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * @override\n   */\n  async removeConstraint(tableName, constraintName, options) {\n    let createTableSql;\n\n    const constraints = await this.showConstraint(tableName, constraintName);\n    // sqlite can't show only one constraint, so we find here the one to remove\n    const constraint = constraints.find(constaint => constaint.constraintName === constraintName);\n\n    if (!constraint) {\n      throw new sequelizeErrors.UnknownConstraintError({\n        message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n        constraint: constraintName,\n        table: tableName\n      });\n    }\n    createTableSql = constraint.sql;\n    constraint.constraintName = this.queryGenerator.quoteIdentifier(constraint.constraintName);\n    let constraintSnippet = `, CONSTRAINT ${constraint.constraintName} ${constraint.constraintType} ${constraint.constraintCondition}`;\n\n    if (constraint.constraintType === 'FOREIGN KEY') {\n      const referenceTableName = this.queryGenerator.quoteTable(constraint.referenceTableName);\n      constraint.referenceTableKeys = constraint.referenceTableKeys.map(columnName => this.queryGenerator.quoteIdentifier(columnName));\n      const referenceTableKeys = constraint.referenceTableKeys.join(', ');\n      constraintSnippet += ` REFERENCES ${referenceTableName} (${referenceTableKeys})`;\n      constraintSnippet += ` ON UPDATE ${constraint.updateAction}`;\n      constraintSnippet += ` ON DELETE ${constraint.deleteAction}`;\n    }\n\n    createTableSql = createTableSql.replace(constraintSnippet, '');\n    createTableSql += ';';\n\n    const fields = await this.describeTable(tableName, options);\n\n    const sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * @override\n   */\n  async addConstraint(tableName, options) {\n    if (!options.fields) {\n      throw new Error('Fields must be specified through options.fields');\n    }\n\n    if (!options.type) {\n      throw new Error('Constraint type must be specified through options.type');\n    }\n\n    options = cloneDeep(options);\n\n    const constraintSnippet = this.queryGenerator.getConstraintSnippet(tableName, options);\n    const describeCreateTableSql = this.queryGenerator.describeCreateTableQuery(tableName);\n\n    const constraints = await this.sequelize.query(describeCreateTableSql, { ...options, type: QueryTypes.SELECT, raw: true });\n    let sql = constraints[0].sql;\n    const index = sql.length - 1;\n    //Replace ending ')' with constraint snippet - Simulates String.replaceAt\n    //http://stackoverflow.com/questions/1431094\n    const createTableSql = `${sql.substr(0, index)}, ${constraintSnippet})${sql.substr(index + 1)};`;\n\n    const fields = await this.describeTable(tableName, options);\n    sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * @override\n   */\n  async getForeignKeyReferencesForTable(tableName, options) {\n    const database = this.sequelize.config.database;\n    const query = this.queryGenerator.getForeignKeysQuery(tableName, database);\n    const result = await this.sequelize.query(query, options);\n    return result.map(row => ({\n      tableName,\n      columnName: row.from,\n      referencedTableName: row.table,\n      referencedColumnName: row.to,\n      tableCatalog: database,\n      referencedTableCatalog: database\n    }));\n  }\n\n  /**\n   * @override\n   */\n  async dropAllTables(options) {\n    options = options || {};\n    const skip = options.skip || [];\n\n    const tableNames = await this.showAllTables(options);\n    await this.sequelize.query('PRAGMA foreign_keys = OFF', options);\n    await this._dropAllTables(tableNames, skip, options);\n    await this.sequelize.query('PRAGMA foreign_keys = ON', options);\n  }\n\n  /**\n   * @override\n   */\n  async describeTable(tableName, options) {\n    let schema = null;\n    let schemaDelimiter = null;\n\n    if (typeof options === 'string') {\n      schema = options;\n    } else if (typeof options === 'object' && options !== null) {\n      schema = options.schema || null;\n      schemaDelimiter = options.schemaDelimiter || null;\n    }\n\n    if (typeof tableName === 'object' && tableName !== null) {\n      schema = tableName.schema;\n      tableName = tableName.tableName;\n    }\n\n    const sql = this.queryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);\n    options = { ...options, type: QueryTypes.DESCRIBE };\n    const sqlIndexes = this.queryGenerator.showIndexesQuery(tableName);\n\n    try {\n      const data = await this.sequelize.query(sql, options);\n      /*\n       * If no data is returned from the query, then the table name may be wrong.\n       * Query generators that use information_schema for retrieving table info will just return an empty result set,\n       * it will not throw an error like built-ins do (e.g. DESCRIBE on MySql).\n       */\n      if (_.isEmpty(data)) {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      const indexes = await this.sequelize.query(sqlIndexes, options);\n      for (const prop in data) {\n        data[prop].unique = false;\n      }\n      for (const index of indexes) {\n        for (const field of index.fields) {\n          if (index.unique !== undefined) {\n            data[field.attribute].unique = index.unique;\n          }\n        }\n      }\n\n      const foreignKeys = await this.getForeignKeyReferencesForTable(tableName, options);\n      for (const foreignKey of foreignKeys) {\n        data[foreignKey.columnName].references = {\n          model: foreignKey.referencedTableName,\n          key: foreignKey.referencedColumnName\n        };\n      }\n\n      return data;\n    } catch (e) {\n      if (e.original && e.original.code === 'ER_NO_SUCH_TABLE') {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      throw e;\n    }\n  }\n}\n\nexports.SQLiteQueryInterface = SQLiteQueryInterface;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 23088, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 23093, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/sqlite/index.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').sqlite;\nconst { SQLiteQueryInterface } = require('./query-interface');\n\nclass SqliteDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n\n    this.queryInterface = new SQLiteQueryInterface(\n      sequelize,\n      this.queryGenerator\n    );\n  }\n}\n\nSqliteDialect.prototype.supports = _.merge(\n  _.cloneDeep(AbstractDialect.prototype.supports),\n  {\n    DEFAULT: false,\n    'DEFAULT VALUES': true,\n    'UNION ALL': false,\n    'RIGHT JOIN': false,\n    inserts: {\n      ignoreDuplicates: ' OR IGNORE',\n      updateOnDuplicate: ' ON CONFLICT DO UPDATE SET',\n      conflictFields: true,\n      onConflictWhere: true\n    },\n    index: {\n      using: false,\n      where: true,\n      functionBased: true\n    },\n    transactionOptions: {\n      type: true\n    },\n    constraints: {\n      addConstraint: false,\n      dropConstraint: false\n    },\n    groupedLimit: false,\n    JSON: true\n  }\n);\n\nSqliteDialect.prototype.defaultVersion = '3.8.0'; // minimum supported version\nSqliteDialect.prototype.Query = Query;\nSqliteDialect.prototype.DataTypes = DataTypes;\nSqliteDialect.prototype.name = 'sqlite';\nSqliteDialect.prototype.TICK_CHAR = '`';\nSqliteDialect.prototype.TICK_CHAR_LEFT = SqliteDialect.prototype.TICK_CHAR;\nSqliteDialect.prototype.TICK_CHAR_RIGHT = SqliteDialect.prototype.TICK_CHAR;\n\nmodule.exports = SqliteDialect;\nmodule.exports.SqliteDialect = SqliteDialect;\nmodule.exports.default = SqliteDialect;\n"],"names":[],"mappings":";AAEA,MAAM,IAAI,QAAQ;AAClB,MAAM,kBAAkB,QAAQ;AAChC,MAAM,oBAAoB,QAAQ;AAClC,MAAM,QAAQ,QAAQ;AACtB,MAAM,iBAAiB,QAAQ;AAC/B,MAAM,YAAY,QAAQ,8FAAoB,MAAA;AAC9C,MAAM,EAAE,oBAAA,EAAA,GAAyB,QAAQ;AAEzC,MAAA,sBAA4B,gBAAgB;IAC1C,YAAY,SAAA,CAAW;QACrB,KAAA;QACA,IAAA,CAAK,SAAA,GAAY;QACjB,IAAA,CAAK,iBAAA,GAAoB,IAAI,kBAAkB,IAAA,EAAM;QACrD,IAAA,CAAK,cAAA,GAAiB,IAAI,eAAe;YACvC,UAAU,IAAA;YACV;QAAA;QAGF,IAAA,CAAK,cAAA,GAAiB,IAAI,qBACxB,WACA,IAAA,CAAK,cAAA;IAAA;AAAA;AAKX,cAAc,SAAA,CAAU,QAAA,GAAW,EAAE,KAAA,CACnC,EAAE,SAAA,CAAU,gBAAgB,SAAA,CAAU,QAAA,GACtC;IACE,SAAS;IACT,kBAAkB;IAClB,aAAa;IACb,cAAc;IACd,SAAS;QACP,kBAAkB;QAClB,mBAAmB;QACnB,gBAAgB;QAChB,iBAAiB;IAAA;IAEnB,OAAO;QACL,OAAO;QACP,OAAO;QACP,eAAe;IAAA;IAEjB,oBAAoB;QAClB,MAAM;IAAA;IAER,aAAa;QACX,eAAe;QACf,gBAAgB;IAAA;IAElB,cAAc;IACd,MAAM;AAAA;AAIV,cAAc,SAAA,CAAU,cAAA,GAAiB;AACzC,cAAc,SAAA,CAAU,KAAA,GAAQ;AAChC,cAAc,SAAA,CAAU,SAAA,GAAY;AACpC,cAAc,SAAA,CAAU,IAAA,GAAO;AAC/B,cAAc,SAAA,CAAU,SAAA,GAAY;AACpC,cAAc,SAAA,CAAU,cAAA,GAAiB,cAAc,SAAA,CAAU,SAAA;AACjE,cAAc,SAAA,CAAU,eAAA,GAAkB,cAAc,SAAA,CAAU,SAAA;AAElE,OAAO,OAAA,GAAU;AACjB,OAAO,OAAA,CAAQ,aAAA,GAAgB;AAC/B,OAAO,OAAA,CAAQ,OAAA,GAAU","ignoreList":[0]}},
    {"offset": {"line": 23149, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 23154, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/db2/connection-manager.js"],"sourcesContent":["'use strict';\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst sequelizeErrors = require('../../errors');\nconst { logger } = require('../../utils/logger');\nconst DataTypes = require('../../data-types').db2;\nconst debug = logger.debugContext('connection:db2');\nconst parserStore = require('../parserStore')('db2');\n\n/**\n * DB2 Connection Manager\n *\n * Get connections, validate and disconnect them.\n * AbstractConnectionManager pooling use it to handle DB2 specific connections\n * Use https://github.com/ibmdb/node-ibm_db to connect with DB2 server\n *\n * @private\n */\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 3306;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule('ibm_db');\n    this.refreshTypeParser(DataTypes);\n  }\n\n  static _typecast(field, next) {\n    if (parserStore.get(field.type)) {\n      return parserStore.get(field.type)(field, this.sequelize.options, next);\n    }\n    return next();\n  }\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  /**\n   * Connect with DB2 database based on config, Handle any errors in connection\n   * Set the pool handlers on connection.error\n   * Also set proper timezone once connection is connected.\n   *\n   * @param {object} config\n   * @returns {Promise<Connection>}\n   * @private\n   */\n  async connect(config) {\n    const connectionConfig = {\n      database: config.database,\n      hostname: config.host,\n      port: config.port,\n      uid: config.username,\n      pwd: config.password\n    };\n\n    if (config.ssl) {\n      connectionConfig['security'] = config.ssl;\n    }\n    if (config.sslcertificate) {\n      connectionConfig['SSLServerCertificate'] = config.sslcertificate;\n    }\n    if (config.dialectOptions) {\n      for (const key of Object.keys(config.dialectOptions)) {\n        connectionConfig[key] = config.dialectOptions[key];\n      }\n    }\n\n    try {\n      const connection = await new Promise((resolve, reject) => {\n        const connection = new this.lib.Database();\n        connection.lib = this.lib;\n        connection.open(connectionConfig, error => {\n          if (error) {\n            if (error.message && error.message.includes('SQL30081N')) {\n              return reject(new sequelizeErrors.ConnectionRefusedError(error));\n            }\n            return reject(new sequelizeErrors.ConnectionError(error));\n          }\n          return resolve(connection);\n        });\n      });\n      return connection;\n    } catch (err) {\n      throw new sequelizeErrors.ConnectionError(err);\n    }\n  }\n\n  disconnect(connection) {\n    // Don't disconnect a connection that is already disconnected\n    if (connection.connected) {\n      connection.close(error => {\n        if (error) { debug(error); }\n        else { debug('connection closed'); }\n      });\n    }\n    return Promise.resolve();\n  }\n\n  validate(connection) {\n    return connection && connection.connected;\n  }\n\n  /**\n   * Call dialect library to disconnect a connection\n   *\n   * @param {Connection} connection\n   * @private\n   * @returns {Promise}\n   */\n  _disconnect(connection) {\n    return this.dialect.connectionManager.disconnect(connection);\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"],"names":[],"mappings":";AAEA,MAAM,4BAA4B,QAAQ;AAC1C,MAAM,kBAAkB,QAAQ;AAChC,MAAM,EAAE,MAAA,EAAA,GAAW,QAAQ;AAC3B,MAAM,YAAY,QAAQ,8FAAoB,GAAA;AAC9C,MAAM,QAAQ,OAAO,YAAA,CAAa;AAClC,MAAM,cAAc,QAAQ,wGAAkB;AAW9C,MAAA,0BAAgC,0BAA0B;IACxD,YAAY,OAAA,EAAS,SAAA,CAAW;QAC9B,UAAU,MAAA,CAAO,IAAA,GAAO,UAAU,MAAA,CAAO,IAAA,IAAQ;QACjD,KAAA,CAAM,SAAS;QACf,IAAA,CAAK,GAAA,GAAM,IAAA,CAAK,kBAAA,CAAmB;QACnC,IAAA,CAAK,iBAAA,CAAkB;IAAA;IAAA,OAGlB,UAAU,KAAA,EAAO,IAAA,EAAM;QAC5B,IAAI,YAAY,GAAA,CAAI,MAAM,IAAA,GAAO;YAC/B,OAAO,YAAY,GAAA,CAAI,MAAM,IAAA,EAAM,OAAO,IAAA,CAAK,SAAA,CAAU,OAAA,EAAS;QAAA;QAEpE,OAAO;IAAA;IAGT,mBAAmB,QAAA,EAAU;QAC3B,YAAY,OAAA,CAAQ;IAAA;IAGtB,mBAAmB;QACjB,YAAY,KAAA;IAAA;IAAA,MAYR,QAAQ,MAAA,EAAQ;QACpB,MAAM,mBAAmB;YACvB,UAAU,OAAO,QAAA;YACjB,UAAU,OAAO,IAAA;YACjB,MAAM,OAAO,IAAA;YACb,KAAK,OAAO,QAAA;YACZ,KAAK,OAAO,QAAA;QAAA;QAGd,IAAI,OAAO,GAAA,EAAK;YACd,gBAAA,CAAiB,WAAA,GAAc,OAAO,GAAA;QAAA;QAExC,IAAI,OAAO,cAAA,EAAgB;YACzB,gBAAA,CAAiB,uBAAA,GAA0B,OAAO,cAAA;QAAA;QAEpD,IAAI,OAAO,cAAA,EAAgB;YACzB,KAAA,MAAW,OAAO,OAAO,IAAA,CAAK,OAAO,cAAA,EAAiB;gBACpD,gBAAA,CAAiB,IAAA,GAAO,OAAO,cAAA,CAAe,IAAA;YAAA;QAAA;QAIlD,IAAI;YACF,MAAM,aAAa,MAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;gBACxD,MAAM,cAAa,IAAI,IAAA,CAAK,GAAA,CAAI,QAAA;gBAChC,YAAW,GAAA,GAAM,IAAA,CAAK,GAAA;gBACtB,YAAW,IAAA,CAAK,kBAAkB,CAAA,UAAS;oBACzC,IAAI,OAAO;wBACT,IAAI,MAAM,OAAA,IAAW,MAAM,OAAA,CAAQ,QAAA,CAAS,cAAc;4BACxD,OAAO,OAAO,IAAI,gBAAgB,sBAAA,CAAuB;wBAAA;wBAE3D,OAAO,OAAO,IAAI,gBAAgB,eAAA,CAAgB;oBAAA;oBAEpD,OAAO,QAAQ;gBAAA;YAAA;YAGnB,OAAO;QAAA,EAAA,OACA,KAAP;YACA,MAAM,IAAI,gBAAgB,eAAA,CAAgB;QAAA;IAAA;IAI9C,WAAW,UAAA,EAAY;QAErB,IAAI,WAAW,SAAA,EAAW;YACxB,WAAW,KAAA,CAAM,CAAA,UAAS;gBACxB,IAAI,OAAO;oBAAE,MAAM;gBAAA,OACd;oBAAE,MAAM;gBAAA;YAAA;QAAA;QAGjB,OAAO,QAAQ,OAAA;IAAA;IAGjB,SAAS,UAAA,EAAY;QACnB,OAAO,cAAc,WAAW,SAAA;IAAA;IAUlC,YAAY,UAAA,EAAY;QACtB,OAAO,IAAA,CAAK,OAAA,CAAQ,iBAAA,CAAkB,UAAA,CAAW;IAAA;AAAA;AAIrD,OAAO,OAAA,GAAU;AACjB,OAAO,OAAA,CAAQ,iBAAA,GAAoB;AACnC,OAAO,OAAA,CAAQ,OAAA,GAAU","ignoreList":[0]}},
    {"offset": {"line": 23240, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 23245, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/db2/query.js"],"sourcesContent":["'use strict';\n\nconst util = require('util');\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('db2');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\nconst moment = require('moment');\nconst debug = logger.debugContext('sql:db2');\n\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return 'id';\n  }\n\n  getSQLTypeFromJsType(value) {\n    if (Buffer.isBuffer(value)) {\n      return { ParamType: 'INPUT', DataType: 'BLOB', Data: value };\n    }\n\n    if (typeof value === 'bigint') {\n      // The ibm_db module does not handle bigint, send as a string instead:\n      return value.toString();\n    }\n\n    return value;\n  }\n\n  async _run(connection, sql, parameters) {\n    this.sql = sql;\n    const benchmark = this.sequelize.options.benchmark || this.options.benchmark;\n    let queryBegin;\n    if (benchmark) {\n      queryBegin = Date.now();\n    } else {\n      this.sequelize.log(`Executing (${ this.connection.uuid || 'default' }): ${ this.sql}`, this.options);\n    }\n\n    const errStack = new Error().stack;\n\n    return new Promise((resolve, reject) => {\n      // TRANSACTION SUPPORT\n      if (_.startsWith(this.sql, 'BEGIN TRANSACTION')) {\n        connection.beginTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, 'COMMIT TRANSACTION')) {\n        connection.commitTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, 'ROLLBACK TRANSACTION')) {\n        connection.rollbackTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, 'SAVE TRANSACTION')) {\n        connection.commitTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            connection.beginTransaction(err => {\n              if (err) {\n                reject(this.formatError(err, errStack));\n              } else {\n                resolve(this.formatResults());\n              }\n            });\n          }\n        }, this.options.transaction.name);\n      } else {\n        const params = [];\n        if (parameters) {\n          _.forOwn(parameters, (value, key) => {\n            const param = this.getSQLTypeFromJsType(value, key);\n            params.push(param);\n          });\n        }\n        const SQL = this.sql.toUpperCase();\n        let newSql = this.sql;\n        if ((this.isSelectQuery() || _.startsWith(SQL, 'SELECT ')) &&\n            SQL.indexOf(' FROM ', 8) === -1 ) {\n          if (this.sql.charAt(this.sql.length - 1) === ';') {\n            newSql = this.sql.slice(0, this.sql.length - 1);\n          }\n          newSql += ' FROM SYSIBM.SYSDUMMY1;';\n        }\n\n        connection.prepare(newSql, (err, stmt) => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          }\n\n          stmt.execute(params, (err, result, outparams) => {\n            debug(`executed(${this.connection.uuid || 'default'}):${newSql} ${parameters ? util.inspect(parameters, { compact: true, breakLength: Infinity }) : ''}`);\n\n            if (benchmark) {\n              this.sequelize.log(`Executed (${this.connection.uuid || 'default'}): ${newSql} ${parameters ? util.inspect(parameters, { compact: true, breakLength: Infinity }) : ''}`, Date.now() - queryBegin, this.options);\n            }\n\n            if (err && err.message) {\n              err = this.filterSQLError(err, this.sql, connection);\n              if (err === null) {\n                stmt.closeSync();\n                resolve(this.formatResults([], 0));\n              }\n            }\n            if (err) {\n              err.sql = sql;\n              stmt.closeSync();\n              reject(this.formatError(err, errStack, connection, parameters));\n            } else {\n              let data = [];\n              let metadata = [];\n              let affectedRows = 0;\n              if (typeof result === 'object') {\n                if (_.startsWith(this.sql, 'DELETE FROM ')) {\n                  affectedRows = result.getAffectedRowsSync();\n                } else {\n                  data = result.fetchAllSync();\n                  metadata = result.getColumnMetadataSync();\n                }\n                result.closeSync();\n              }\n              stmt.closeSync();\n              const datalen = data.length;\n              if (datalen > 0) {\n                const coltypes = {};\n                for (let i = 0; i < metadata.length; i++) {\n                  coltypes[metadata[i].SQL_DESC_NAME] =\n                      metadata[i].SQL_DESC_TYPE_NAME;\n                }\n                for (let i = 0; i < datalen; i++) {\n                  for (const column in data[i]) {\n                    const parse = parserStore.get(coltypes[column]);\n                    const value = data[i][column];\n                    if (value !== null) {\n                      if (parse) {\n                        data[i][column] = parse(value);\n                      } else if (coltypes[column] === 'TIMESTAMP') {\n                        data[i][column] = new Date(moment.utc(value));\n                      } else if (coltypes[column] === 'BLOB') {\n                        data[i][column] = new Buffer.from(value);\n                      } else if (coltypes[column].indexOf('FOR BIT DATA') > 0) {\n                        data[i][column] = new Buffer.from(value, 'hex');\n                      }\n                    }\n                  }\n                }\n                if (outparams && outparams.length) {\n                  data.unshift(outparams);\n                }\n                resolve(this.formatResults(data, datalen, metadata, connection));\n              } else {\n                resolve(this.formatResults(data, affectedRows));\n              }\n            }\n          });\n        });\n      }\n    });\n  }\n\n  async run(sql, parameters) {\n    return await this._run(this.connection, sql, parameters);\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    let bindParam = {};\n    const replacementFunc = (match, key, values) => {\n      if (values[key] !== undefined) {\n        bindParam[key] = values[key];\n        return '?';\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    if (Array.isArray(values) && typeof values[0] === 'object') {\n      bindParam = values;\n    }\n\n    return [sql, bindParam];\n  }\n\n  filterSQLError(err, sql, connection) {\n    if (err.message.search('SQL0204N') != -1 && _.startsWith(sql, 'DROP ')) {\n      err = null; // Ignore table not found error for drop table.\n    } else if (err.message.search('SQL0443N') != -1) {\n      if (this.isDropSchemaQuery()) {\n        // Delete ERRORSCHEMA.ERRORTABLE if it exist.\n        connection.querySync('DROP TABLE ERRORSCHEMA.ERRORTABLE;');\n        // Retry deleting the schema\n        connection.querySync(this.sql);\n      }\n      err = null; // Ignore drop schema error.\n    } else if (err.message.search('SQL0601N') != -1) {\n      const match = err.message.match(/SQL0601N {2}The name of the object to be created is identical to the existing name \"(.*)\" of type \"(.*)\"./);\n      if (match && match.length > 1 && match[2] === 'TABLE') {\n        let table;\n        const mtarray = match[1].split('.');\n        if (mtarray[1]) {\n          table = `\"${mtarray[0]}\".\"${mtarray[1]}\"`;\n        } else {\n          table = `\"${mtarray[0]}\"`;\n        }\n        if (connection.dropTable !== false) {\n          connection.querySync(`DROP TABLE ${table}`);\n          err = connection.querySync(sql);\n        }\n        else {\n          err = null;\n        }\n      } else {\n        err = null; // Ignore create schema error.\n      }\n    } else if (err.message.search('SQL0911N') != -1) {\n      if (err.message.search('Reason code \"2\"') != -1) {\n        err = null; // Ignore deadlock error due to program logic.\n      }\n    } else if (err.message.search('SQL0605W') != -1) {\n      err = null; // Ignore warning.\n    } else if (err.message.search('SQL0668N') != -1 &&\n      _.startsWith(sql, 'ALTER TABLE ')) {\n      connection.querySync(`CALL SYSPROC.ADMIN_CMD('REORG TABLE ${sql.substring(12).split(' ')[0]}')`);\n      err = connection.querySync(sql);\n    }\n    if (err && err.length === 0) { err = null; }\n    return err;\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @param {Integer} rowCount - The number of affected rows.\n   * @param {Array} metadata - Metadata of the returned result set.\n   * @param {object} conn - The connection object.\n   * @private\n   */\n  formatResults(data, rowCount, metadata, conn) {\n    let result = this.instance;\n    if (this.isInsertQuery(data, metadata)) {\n      this.handleInsertQuery(data, metadata);\n\n      if (!this.instance) {\n        if (this.options.plain) {\n          const record = data[0];\n          result = record[Object.keys(record)[0]];\n        } else {\n          result = data;\n        }\n      }\n    }\n\n    if (this.isShowTablesQuery()) {\n      result = data;\n    } else if (this.isDescribeQuery()) {\n      result = {};\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", '').replace(\"')\", '').replace(/'/g, '');\n        }\n\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === 'Y' ? true : false,\n          defaultValue: _result.Default,\n          primaryKey: _result.KeySeq > 0,\n          autoIncrement: _result.IsIdentity === 'Y' ? true : false,\n          comment: _result.Comment\n        };\n      }\n    } else if (this.isShowIndexesQuery()) {\n      result = this.handleShowIndexesQuery(data);\n    } else if (this.isSelectQuery()) {\n      result = this.handleSelectQuery(data);\n    } else if (this.isUpsertQuery()) {\n      result = data;\n    } else if (this.isDropSchemaQuery()) {\n      result = data[0];\n      if (conn) {\n        const query = 'DROP TABLE ERRORSCHEMA.ERRORTABLE';\n        conn.querySync(query);\n      }\n    } else if (this.isCallQuery()) {\n      result = data;\n    } else if (this.isBulkUpdateQuery()) {\n      result = data.length;\n    } else if (this.isBulkDeleteQuery()) {\n      result = rowCount;\n    } else if (this.isVersionQuery()) {\n      result = data[0].VERSION;\n    } else if (this.isForeignKeysQuery()) {\n      result = data;\n    } else if (this.isInsertQuery() || this.isUpdateQuery()) {\n      result = [result, rowCount];\n    } else if (this.isShowConstraintsQuery()) {\n      result = this.handleShowConstraintsQuery(data);\n    } else if (this.isRawQuery()) {\n      // Db2 returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n      result = [data, metadata];\n    } else {\n      result = data;\n    }\n\n    return result;\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n\n  handleShowConstraintsQuery(data) {\n    // Remove SQL Contraints from constraints list.\n    return _.remove(data, constraint => {\n      return !_.startsWith(constraint.constraintName, 'SQL');\n    });\n  }\n\n  formatError(err, errStack, conn, parameters) {\n    let match;\n\n    if (!(err && err.message)) {\n      err['message'] = 'No error message found.';\n    }\n\n    match = err.message.match(/SQL0803N {2}One or more values in the INSERT statement, UPDATE statement, or foreign key update caused by a DELETE statement are not valid because the primary key, unique constraint or unique index identified by \"(\\d)+\" constrains table \"(.*)\\.(.*)\" from having duplicate values for the index key./);\n    if (match && match.length > 0) {\n      let uniqueIndexName = '';\n      let uniqueKey = '';\n      const fields = {};\n      let message = err.message;\n      const query = `SELECT INDNAME FROM SYSCAT.INDEXES  WHERE IID = ${match[1]} AND TABSCHEMA = '${match[2]}' AND TABNAME = '${match[3]}'`;\n\n      if (!!conn && match.length > 3) {\n        uniqueIndexName = conn.querySync(query);\n        uniqueIndexName = uniqueIndexName[0]['INDNAME'];\n      }\n\n      if (this.model && !!uniqueIndexName) {\n        uniqueKey = this.model.uniqueKeys[uniqueIndexName];\n      }\n\n      if (!uniqueKey && this.options.fields) {\n        uniqueKey = this.options.fields[match[1] - 1];\n      }\n\n      if (uniqueKey) {\n        if (this.options.where &&\n          this.options.where[uniqueKey.column] !== undefined) {\n          fields[uniqueKey.column] = this.options.where[uniqueKey.column];\n        } else if (this.options.instance && this.options.instance.dataValues &&\n          this.options.instance.dataValues[uniqueKey.column]) {\n          fields[uniqueKey.column] = this.options.instance.dataValues[uniqueKey.column];\n        } else if (parameters) {\n          fields[uniqueKey.column] = parameters['0'];\n        }\n      }\n\n      if (uniqueKey && !!uniqueKey.msg) {\n        message = uniqueKey.msg;\n      }\n\n      const errors = [];\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(\n          this.getUniqueConstraintErrorMessage(field),\n          'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n          field,\n          value,\n          this.instance,\n          'not_unique'\n        ));\n      });\n\n      return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n    }\n\n    match = err.message.match(/SQL0532N {2}A parent row cannot be deleted because the relationship \"(.*)\" restricts the deletion/) ||\n      err.message.match(/SQL0530N/) ||\n      err.message.match(/SQL0531N/);\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    match = err.message.match(/SQL0204N {2}\"(.*)\" is an undefined name./);\n    if (match && match.length > 1) {\n      const constraint = match[1];\n      let table = err.sql.match(/table \"(.+?)\"/i);\n      table = table ? table[1] : undefined;\n\n      return new sequelizeErrors.UnknownConstraintError({\n        message: match[0],\n        constraint,\n        table,\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n  }\n\n\n  isDropSchemaQuery() {\n    let result = false;\n\n    if (_.startsWith(this.sql, 'CALL SYSPROC.ADMIN_DROP_SCHEMA')) {\n      result = true;\n    }\n    return result;\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\");\n    result = result || this.sql.toLowerCase().startsWith('select tablename = t.name, name = ind.name,');\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n\n    return result;\n  }\n  isShowIndexesQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n    result = result || this.sql.startsWith('SELECT NAME AS \"name\", TBNAME AS \"tableName\", UNIQUERULE AS \"keyType\", COLNAMES, INDEXTYPE AS \"type\" FROM SYSIBM.SYSINDEXES');\n    return result;\n  }\n\n  handleShowIndexesQuery(data) {\n    let currItem;\n    const result = [];\n    data.forEach(item => {\n      if (!currItem || currItem.name !== item.Key_name) {\n        currItem = {\n          primary: item.keyType === 'P',\n          fields: [],\n          name: item.name,\n          tableName: item.tableName,\n          unique: item.keyType === 'U',\n          type: item.type\n        };\n\n        _.forEach(item.COLNAMES.replace(/\\+|-/g, x => { return ` ${ x}`; }).split(' '), column => {\n          let columnName = column.trim();\n          if ( columnName ) {\n            columnName = columnName.replace(/\\+|-/, '');\n            currItem.fields.push({\n              attribute: columnName,\n              length: undefined,\n              order: column.indexOf('-') === -1 ? 'ASC' : 'DESC',\n              collate: undefined\n            });\n          }\n        });\n        result.push(currItem);\n      }\n    });\n    return result;\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) &&\n          this.model.rawAttributes[autoIncrementAttribute].field !== undefined)\n        autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 23700, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 23705, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/db2/query-generator.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Utils = require('../../utils');\nconst DataTypes = require('../../data-types');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\nconst randomBytes = require('crypto').randomBytes;\nconst Op = require('../../operators');\n\n/* istanbul ignore next */\nconst throwMethodUndefined = function(methodName) {\n  throw new Error(`The method \"${methodName}\" is not defined! Please add it to your sql dialect.`);\n};\n\nclass Db2QueryGenerator extends AbstractQueryGenerator {\n  constructor(options) {\n    super(options);\n\n    this.OperatorMap = { ...this.OperatorMap, [Op.regexp]: 'REGEXP_LIKE',\n      [Op.notRegexp]: 'NOT REGEXP_LIKE' };\n    this.autoGenValue = 1;\n  }\n\n  createSchema(schema) {\n    return [\n      'CREATE SCHEMA',\n      this.quoteIdentifier(schema),\n      ';'\n    ].join(' ');\n  }\n\n  dropSchema(schema) {\n    // DROP SCHEMA Can't drop schema if it is not empty.\n    // DROP SCHEMA Can't drop objects belonging to the schema\n    // So, call the admin procedure to drop schema.\n    const query = `CALL SYSPROC.ADMIN_DROP_SCHEMA(${ wrapSingleQuote(schema.trim()) }, NULL, ? , ?)`;\n    const sql = { query };\n    sql.bind = [{ ParamType: 'INOUT', Data: 'ERRORSCHEMA' },\n      { ParamType: 'INOUT', Data: 'ERRORTABLE' }];\n    return sql;\n  }\n\n  showSchemasQuery() {\n    return 'SELECT SCHEMANAME AS \"schema_name\" FROM SYSCAT.SCHEMATA WHERE ' +\n      \"(SCHEMANAME NOT LIKE 'SYS%') AND SCHEMANAME NOT IN ('NULLID', 'SQLJ', 'ERRORSCHEMA')\";\n  }\n\n\n\n  versionQuery() {\n    return 'select service_level as VERSION from TABLE (sysproc.env_get_inst_info()) as A';\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    const query = 'CREATE TABLE <%= table %> (<%= attributes %>)',\n      primaryKeys = [],\n      foreignKeys = {},\n      attrStr = [],\n      commentTemplate = ' -- <%= comment %>, ' +\n          'TableName = <%= table %>, ColumnName = <%= column %>;';\n\n    let commentStr = '';\n\n    for (const attr in attributes) {\n      if (Object.prototype.hasOwnProperty.call(attributes, attr)) {\n        let dataType = attributes[attr];\n        let match;\n\n        if (dataType.includes('COMMENT ')) {\n          const commentMatch = dataType.match(/^(.+) (COMMENT.*)$/);\n          if (commentMatch && commentMatch.length > 2) {\n            const commentText = commentMatch[2].replace(/COMMENT/, '').trim();\n            commentStr += _.template(commentTemplate, this._templateSettings)({\n              table: this.quoteIdentifier(tableName),\n              comment: this.escape(commentText),\n              column: this.quoteIdentifier(attr)\n            });\n            // remove comment related substring from dataType\n            dataType = commentMatch[1];\n          }\n        }\n\n        if (_.includes(dataType, 'PRIMARY KEY')) {\n          primaryKeys.push(attr);\n\n          if (_.includes(dataType, 'REFERENCES')) {\n            // Db2 doesn't support inline REFERENCES declarations: move to the end\n            match = dataType.match(/^(.+) (REFERENCES.*)$/);\n            attrStr.push(`${ this.quoteIdentifier(attr) } ${ match[1].replace(/PRIMARY KEY/, '') }`);\n            foreignKeys[attr] = match[2];\n          } else {\n            attrStr.push(`${ this.quoteIdentifier(attr) } ${ dataType.replace(/PRIMARY KEY/, '') }`);\n          }\n        } else if (_.includes(dataType, 'REFERENCES')) {\n          // Db2 doesn't support inline REFERENCES declarations: move to the end\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attrStr.push(`${this.quoteIdentifier(attr)} ${match[1]}`);\n          foreignKeys[attr] = match[2];\n        } else {\n          if (options && options.uniqueKeys) {\n            for (const ukey in options.uniqueKeys) {\n              if (options.uniqueKeys[ukey].fields.includes(attr) &&\n                  ! _.includes(dataType, 'NOT NULL'))\n              {\n                dataType += ' NOT NULL';\n                break;\n              }\n            }\n          }\n          attrStr.push(`${this.quoteIdentifier(attr)} ${dataType}`);\n        }\n\n      }\n    }\n\n    const values = {\n        table: this.quoteTable(tableName),\n        attributes: attrStr.join(', ')\n      },\n      pkString = primaryKeys.map(pk => { return this.quoteIdentifier(pk); }).join(', ');\n\n    if (options && options.uniqueKeys) {\n      _.each(options.uniqueKeys, (columns, indexName) => {\n        if (columns.customIndex) {\n          if (!_.isString(indexName)) {\n            indexName = `uniq_${ tableName }_${ columns.fields.join('_')}`;\n          }\n          values.attributes += `, CONSTRAINT ${this.quoteIdentifier(indexName)} UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n        }\n      });\n    }\n\n    if (pkString.length > 0) {\n      values.attributes += `, PRIMARY KEY (${pkString})`;\n    }\n\n    for (const fkey in foreignKeys) {\n      if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {\n        values.attributes += `, FOREIGN KEY (${ this.quoteIdentifier(fkey) }) ${ foreignKeys[fkey] }`;\n      }\n    }\n    return `${_.template(query, this._templateSettings)(values).trim() };${ commentStr}`;\n  }\n\n\n  describeTableQuery(tableName, schema) {\n    let sql = [\n      'SELECT NAME AS \"Name\", TBNAME AS \"Table\", TBCREATOR AS \"Schema\",',\n      'TRIM(COLTYPE) AS \"Type\", LENGTH AS \"Length\", SCALE AS \"Scale\",',\n      'NULLS AS \"IsNull\", DEFAULT AS \"Default\", COLNO AS \"Colno\",',\n      'IDENTITY AS \"IsIdentity\", KEYSEQ AS \"KeySeq\", REMARKS AS \"Comment\"',\n      'FROM',\n      'SYSIBM.SYSCOLUMNS',\n      'WHERE TBNAME =', wrapSingleQuote(tableName)\n    ].join(' ');\n\n    if (schema) {\n      sql += ` AND TBCREATOR =${wrapSingleQuote(schema)}`;\n    } else {\n      sql += ' AND TBCREATOR = USER';\n    }\n\n    return `${sql};`;\n  }\n\n  renameTableQuery(before, after) {\n    const query = 'RENAME TABLE <%= before %> TO <%= after %>;';\n    return _.template(query, this._templateSettings)({\n      before: this.quoteTable(before),\n      after: this.quoteTable(after)\n    });\n  }\n\n  showTablesQuery() {\n    return \"SELECT TABNAME AS \\\"tableName\\\", TRIM(TABSCHEMA) AS \\\"tableSchema\\\" FROM SYSCAT.TABLES WHERE TABSCHEMA = USER AND TYPE = 'T' ORDER BY TABSCHEMA, TABNAME\";\n  }\n\n  tableExistsQuery(table) {\n    const tableName = table.tableName || table;\n    // The default schema is the authorization ID of the owner of the plan or package.\n    // https://www.ibm.com/docs/en/db2-for-zos/12?topic=concepts-db2-schemas-schema-qualifiers\n    const schemaName = table.schema || this.sequelize.config.username.toUpperCase();\n\n    // https://www.ibm.com/docs/en/db2-for-zos/11?topic=tables-systables\n    return `SELECT name FROM sysibm.systables WHERE NAME = ${wrapSingleQuote(tableName)} AND CREATOR = ${wrapSingleQuote(schemaName)}`;\n  }\n\n  dropTableQuery(tableName) {\n    const query = 'DROP TABLE <%= table %>';\n    const values = {\n      table: this.quoteTable(tableName)\n    };\n\n    return `${_.template(query, this._templateSettings)(values).trim()};`;\n  }\n\n  addColumnQuery(table, key, dataType) {\n    dataType.field = key;\n\n    const query = 'ALTER TABLE <%= table %> ADD <%= attribute %>;',\n      attribute = _.template('<%= key %> <%= definition %>', this._templateSettings)({\n        key: this.quoteIdentifier(key),\n        definition: this.attributeToSQL(dataType, {\n          context: 'addColumn'\n        })\n      });\n\n    return _.template(query, this._templateSettings)({\n      table: this.quoteTable(table),\n      attribute\n    });\n  }\n\n  removeColumnQuery(tableName, attributeName) {\n    const query = 'ALTER TABLE <%= tableName %> DROP COLUMN <%= attributeName %>;';\n    return _.template(query, this._templateSettings)({\n      tableName: this.quoteTable(tableName),\n      attributeName: this.quoteIdentifier(attributeName)\n    });\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const query = 'ALTER TABLE <%= tableName %> <%= query %>;';\n    const attrString = [],\n      constraintString = [];\n\n    for (const attributeName in attributes) {\n      const attrValue = attributes[attributeName];\n      let defs = [attrValue];\n      if (Array.isArray(attrValue)) {\n        defs = attrValue;\n      }\n      for (let i = 0; i < defs.length; i++) {\n        const definition = defs[i];\n        if (definition.match(/REFERENCES/)) {\n          constraintString.push(_.template('<%= fkName %> FOREIGN KEY (<%= attrName %>) <%= definition %>', this._templateSettings)({\n            fkName: this.quoteIdentifier(`${attributeName}_foreign_idx`),\n            attrName: this.quoteIdentifier(attributeName),\n            definition: definition.replace(/.+?(?=REFERENCES)/, '')\n          }));\n        } else if (_.startsWith(definition, 'DROP ')) {\n          attrString.push(_.template('<%= attrName %> <%= definition %>', this._templateSettings)({\n            attrName: this.quoteIdentifier(attributeName),\n            definition\n          }));\n        } else {\n          attrString.push(_.template('<%= attrName %> SET <%= definition %>', this._templateSettings)({\n            attrName: this.quoteIdentifier(attributeName),\n            definition\n          }));\n        }\n      }\n    }\n\n    let finalQuery = '';\n    if (attrString.length) {\n      finalQuery += `ALTER COLUMN ${attrString.join(' ALTER COLUMN ')}`;\n      finalQuery += constraintString.length ? ' ' : '';\n    }\n    if (constraintString.length) {\n      finalQuery += `ADD CONSTRAINT ${constraintString.join(' ADD CONSTRAINT ')}`;\n    }\n\n    return _.template(query, this._templateSettings)({\n      tableName: this.quoteTable(tableName),\n      query: finalQuery\n    });\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const query = 'ALTER TABLE <%= tableName %> RENAME COLUMN <%= before %> TO <%= after %>;',\n      newName = Object.keys(attributes)[0];\n\n    return _.template(query, this._templateSettings)({\n      tableName: this.quoteTable(tableName),\n      before: this.quoteIdentifier(attrBefore),\n      after: this.quoteIdentifier(newName)\n    });\n  }\n\n  addConstraintQuery(tableName, options) {\n    options = options || {};\n    if (options.onUpdate && options.onUpdate.toUpperCase() === 'CASCADE') {\n      // Db2 does not support ON UPDATE CASCADE, remove it.\n      delete options.onUpdate;\n    }\n    const constraintSnippet = this.getConstraintSnippet(tableName, options);\n\n    if (typeof tableName === 'string') {\n      tableName = this.quoteIdentifiers(tableName);\n    } else {\n      tableName = this.quoteTable(tableName);\n    }\n\n    return `ALTER TABLE ${tableName} ADD ${constraintSnippet};`;\n  }\n\n  bulkInsertQuery(tableName, attrValueHashes, options, attributes) {\n    options = options || {};\n    attributes = attributes || {};\n    let query = 'INSERT INTO <%= table %> (<%= attributes %>)<%= output %> VALUES <%= tuples %>;';\n    if (options.returning) {\n      query = 'SELECT * FROM FINAL TABLE( INSERT INTO <%= table %> (<%= attributes %>)<%= output %> VALUES <%= tuples %>);';\n    }\n    const emptyQuery = 'INSERT INTO <%= table %>',\n      tuples = [],\n      allAttributes = [],\n      allQueries = [];\n\n    let outputFragment;\n    const valuesForEmptyQuery = [];\n\n    if (options.returning) {\n      outputFragment = '';\n    }\n    _.forEach(attrValueHashes, attrValueHash => {\n      // special case for empty objects with primary keys\n      const fields = Object.keys(attrValueHash);\n      const firstAttr = attributes[fields[0]];\n      if (fields.length === 1 && firstAttr && firstAttr.autoIncrement && attrValueHash[fields[0]] === null) {\n        valuesForEmptyQuery.push(`(${ this.autoGenValue++ })`);\n        return;\n      }\n\n      // normal case\n      _.forOwn(attrValueHash, (value, key) => {\n        if (allAttributes.indexOf(key) === -1) {\n          if (value === null && attributes[key] && attributes[key].autoIncrement)\n            return;\n\n          allAttributes.push(key);\n        }\n      });\n    });\n    if (valuesForEmptyQuery.length > 0) {\n      allQueries.push(`${emptyQuery } VALUES ${ valuesForEmptyQuery.join(',')}`);\n    }\n\t\n    if (allAttributes.length > 0) {\n      _.forEach(attrValueHashes, attrValueHash => {\n        tuples.push(`(${\n          allAttributes.map(key =>\n            this.escape(attrValueHash[key]), undefined, { context: 'INSERT' }).join(',')})`);\n      });\n      allQueries.push(query);\n    }\n    const replacements = {\n      table: this.quoteTable(tableName),\n      attributes: allAttributes.map(attr =>\n        this.quoteIdentifier(attr)).join(','),\n      tuples,\n      output: outputFragment\n    };\n\n    const generatedQuery = _.template(allQueries.join(';'), this._templateSettings)(replacements);\n    return generatedQuery;\n  }\n\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    const sql = super.updateQuery(tableName, attrValueHash, where, options, attributes);\n    options = options || {};\n    _.defaults(options, this.options);\n    if ( ! options.limit ) {\n      sql.query = `SELECT * FROM FINAL TABLE (${ sql.query });`;\n      return sql;\n    }\n\n    attrValueHash = Utils.removeNullValuesFromHash(attrValueHash, options.omitNull, options);\n\n    const modelAttributeMap = {};\n    const values = [];\n    const bind = [];\n    const bindParam = options.bindParam || this.bindParam(bind);\n\n    if (attributes) {\n      _.each(attributes, (attribute, key) => {\n        modelAttributeMap[key] = attribute;\n        if (attribute.field) {\n          modelAttributeMap[attribute.field] = attribute;\n        }\n      });\n    }\n\n    for (const key in attrValueHash) {\n      const value = attrValueHash[key];\n\n      if (value instanceof Utils.SequelizeMethod || options.bindParam === false)\n      {\n        values.push(`${this.quoteIdentifier(key) }=${ this.escape(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'UPDATE' })}`);\n      } else {\n        values.push(`${this.quoteIdentifier(key) }=${ this.format(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'UPDATE' }, bindParam)}`);\n      }\n    }\n\n    let query;\n    const whereOptions = _.defaults({ bindParam }, options);\n\n    query = `UPDATE (SELECT * FROM ${this.quoteTable(tableName)} ${this.whereQuery(where, whereOptions)} FETCH NEXT ${this.escape(options.limit)} ROWS ONLY) SET ${values.join(',')}`;\n    query = `SELECT * FROM FINAL TABLE (${ query });`;\n    return { query, bind };\n  }\n\n  upsertQuery(tableName, insertValues, updateValues, where, model) {\n    const targetTableAlias = this.quoteTable(`${tableName}_target`);\n    const sourceTableAlias = this.quoteTable(`${tableName}_source`);\n    const primaryKeysAttrs = [];\n    const identityAttrs = [];\n    const uniqueAttrs = [];\n    const tableNameQuoted = this.quoteTable(tableName);\n\n    //Obtain primaryKeys, uniquekeys and identity attrs from rawAttributes as model is not passed\n    for (const key in model.rawAttributes) {\n      if (model.rawAttributes[key].primaryKey) {\n        primaryKeysAttrs.push(model.rawAttributes[key].field || key);\n      }\n      if (model.rawAttributes[key].unique) {\n        uniqueAttrs.push(model.rawAttributes[key].field || key);\n      }\n      if (model.rawAttributes[key].autoIncrement) {\n        identityAttrs.push(model.rawAttributes[key].field || key);\n      }\n    }\n\n    //Add unique indexes defined by indexes option to uniqueAttrs\n    for (const index of model._indexes) {\n      if (index.unique && index.fields) {\n        for (const field of index.fields) {\n          const fieldName = typeof field === 'string' ? field : field.name || field.attribute;\n          if (uniqueAttrs.indexOf(fieldName) === -1 && model.rawAttributes[fieldName]) {\n            uniqueAttrs.push(fieldName);\n          }\n        }\n      }\n    }\n\n    const updateKeys = Object.keys(updateValues);\n    const insertKeys = Object.keys(insertValues);\n    const insertKeysQuoted = insertKeys.map(key => this.quoteIdentifier(key)).join(', ');\n    const insertValuesEscaped = insertKeys.map(key => this.escape(insertValues[key])).join(', ');\n    const sourceTableQuery = `VALUES(${insertValuesEscaped})`; //Virtual Table\n    let joinCondition;\n\n    //Filter NULL Clauses\n    const clauses = where[Op.or].filter(clause => {\n      let valid = true;\n      /*\n       * Exclude NULL Composite PK/UK. Partial Composite clauses should also be excluded as it doesn't guarantee a single row\n       */\n      for (const key in clause) {\n        if (!clause[key]) {\n          valid = false;\n          break;\n        }\n      }\n      return valid;\n    });\n\n    /*\n     * Generate ON condition using PK(s).\n     * If not, generate using UK(s). Else throw error\n     */\n    const getJoinSnippet = array => {\n      return array.map(key => {\n        key = this.quoteIdentifier(key);\n        return `${targetTableAlias}.${key} = ${sourceTableAlias}.${key}`;\n      });\n    };\n\n    if (clauses.length === 0) {\n      throw new Error('Primary Key or Unique key should be passed to upsert query');\n    } else {\n      // Search for primary key attribute in clauses -- Model can have two separate unique keys\n      for (const key in clauses) {\n        const keys = Object.keys(clauses[key]);\n        if (primaryKeysAttrs.indexOf(keys[0]) !== -1) {\n          joinCondition = getJoinSnippet(primaryKeysAttrs).join(' AND ');\n          break;\n        }\n      }\n      if (!joinCondition) {\n        joinCondition = getJoinSnippet(uniqueAttrs).join(' AND ');\n      }\n    }\n\n    // Remove the IDENTITY_INSERT Column from update\n    const filteredUpdateClauses = updateKeys.filter(key => {\n      if (identityAttrs.indexOf(key) === -1) {\n        return true;\n      }\n      return false;\n    })\n      .map(key => {\n        const value = this.escape(updateValues[key]);\n        key = this.quoteIdentifier(key);\n        return `${targetTableAlias}.${key} = ${value}`;\n      }).join(', ');\n    const updateSnippet = filteredUpdateClauses.length > 0 ? `WHEN MATCHED THEN UPDATE SET ${filteredUpdateClauses}` : '';\n\t\n    const insertSnippet = `(${insertKeysQuoted}) VALUES(${insertValuesEscaped})`;\n\t\n    let query = `MERGE INTO ${tableNameQuoted} AS ${targetTableAlias} USING (${sourceTableQuery}) AS ${sourceTableAlias}(${insertKeysQuoted}) ON ${joinCondition}`;\n    query += ` ${updateSnippet} WHEN NOT MATCHED THEN INSERT ${insertSnippet};`;\n    return query;\n  }\n\n  truncateTableQuery(tableName) {\n    return `TRUNCATE TABLE ${this.quoteTable(tableName)} IMMEDIATE`;\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    const table = this.quoteTable(tableName);\n    const query = 'DELETE FROM <%= table %><%= where %><%= limit %>';\n\n    where = this.getWhereConditions(where, null, model, options);\n\n    let limit = '';\n\n    if (options.offset > 0) {\n      limit = ` OFFSET ${ this.escape(options.offset) } ROWS`;\n    }\n    if (options.limit) {\n      limit += ` FETCH NEXT ${ this.escape(options.limit) } ROWS ONLY`;\n    }\n\n    const replacements = {\n      limit,\n      table,\n      where\n    };\n\n    if (replacements.where) {\n      replacements.where = ` WHERE ${replacements.where}`;\n    }\n\n    return _.template(query, this._templateSettings)(replacements);\n  }\n\n  showIndexesQuery(tableName) {\n    let sql = 'SELECT NAME AS \"name\", TBNAME AS \"tableName\", UNIQUERULE AS \"keyType\", COLNAMES, INDEXTYPE AS \"type\" FROM SYSIBM.SYSINDEXES WHERE TBNAME = <%= tableName %>';\n    let schema = undefined;\n    if (_.isObject(tableName)) {\n      schema = tableName.schema;\n      tableName = tableName.tableName;\n    }\n    if (schema) {\n      sql = `${sql} AND TBCREATOR = <%= schemaName %>`;\n    }\n    sql = `${sql} ORDER BY NAME;`;\n    return _.template(sql, this._templateSettings)({\n      tableName: wrapSingleQuote(tableName),\n      schemaName: wrapSingleQuote(schema)\n    });\n  }\n\n  showConstraintsQuery(tableName, constraintName) {\n    let sql = `SELECT CONSTNAME AS \"constraintName\", TRIM(TABSCHEMA) AS \"schemaName\", TABNAME AS \"tableName\" FROM SYSCAT.TABCONST WHERE TABNAME = '${tableName}'`;\n\n    if (constraintName) {\n      sql += ` AND CONSTNAME LIKE '%${constraintName}%'`;\n    }\n\n    return `${sql } ORDER BY CONSTNAME;`;\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    const sql = 'DROP INDEX <%= indexName %>';\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    const values = {\n      tableName: this.quoteIdentifiers(tableName),\n      indexName: this.quoteIdentifiers(indexName)\n    };\n\n    return _.template(sql, this._templateSettings)(values);\n  }\n\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    let template;\n    let changeNull = 1;\n\n    if (attribute.type instanceof DataTypes.ENUM) {\n      if (attribute.type.values && !attribute.values) attribute.values = attribute.type.values;\n\n      // enums are a special case\n      template = attribute.type.toSql();\n      template += ` CHECK (${this.quoteIdentifier(attribute.field)} IN(${attribute.values.map(value => {\n        return this.escape(value);\n      }).join(', ') }))`;\n    } else {\n      template = attribute.type.toString();\n    }\n\n    if (options && options.context === 'changeColumn' && attribute.type) {\n      template = `DATA TYPE ${template}`;\n    }\n    else if (attribute.allowNull === false || attribute.primaryKey === true ||\n             attribute.unique) {\n      template += ' NOT NULL';\n      changeNull = 0;\n    }\n\n    if (attribute.autoIncrement) {\n      let initialValue = 1;\n      if (attribute.initialAutoIncrement) {\n        initialValue = attribute.initialAutoIncrement;\n      }\n      template += ` GENERATED BY DEFAULT AS IDENTITY(START WITH ${initialValue}, INCREMENT BY 1)`;\n    }\n\n    // Blobs/texts cannot have a defaultValue\n    if (attribute.type !== 'TEXT' && attribute.type._binary !== true &&\n        Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;\n    }\n\n    if (attribute.unique === true) {\n      template += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      template += ' PRIMARY KEY';\n    }\n\n    if ((!options || !options.withoutForeignKeyConstraints) && attribute.references) {\n      if (options && options.context === 'addColumn' && options.foreignKey) {\n        const attrName = this.quoteIdentifier(options.foreignKey);\n        const fkName = `${options.tableName }_${ attrName }_fidx`;\n        template += `, CONSTRAINT ${ fkName } FOREIGN KEY (${ attrName })`;\n      }\n      template += ` REFERENCES ${this.quoteTable(attribute.references.model)}`;\n\n      if (attribute.references.key) {\n        template += ` (${ this.quoteIdentifier(attribute.references.key) })`;\n      } else {\n        template += ` (${ this.quoteIdentifier('id') })`;\n      }\n\n      if (attribute.onDelete) {\n        template += ` ON DELETE ${ attribute.onDelete.toUpperCase()}`;\n      }\n\n      if (attribute.onUpdate && attribute.onUpdate.toUpperCase() != 'CASCADE') {\n        // Db2 do not support CASCADE option for ON UPDATE clause.\n        template += ` ON UPDATE ${ attribute.onUpdate.toUpperCase()}`;\n      }\n    }\n\n    if (options && options.context === 'changeColumn' && changeNull === 1 &&\n        attribute.allowNull !== undefined) {\n      template = [template];\n      if (attribute.allowNull) {\n        template.push('DROP NOT NULL');\n      } else {\n        template.push('NOT NULL');\n      }\n    }\n\n    if (attribute.comment && typeof attribute.comment === 'string') {\n      template += ` COMMENT ${attribute.comment}`;\n    }\n\n    return template;\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {},\n      existingConstraints = [];\n    let key,\n      attribute;\n\n    for (key in attributes) {\n      attribute = attributes[key];\n\n      if (attribute.references) {\n\n        if (existingConstraints.indexOf(attribute.references.model.toString()) !== -1) {\n          // no cascading constraints to a table more than once\n          attribute.onDelete = '';\n          attribute.onUpdate = '';\n        } else if (attribute.unique && attribute.unique === true) {\n          attribute.onDelete = '';\n          attribute.onUpdate = '';\n        } else {\n          existingConstraints.push(attribute.references.model.toString());\n        }\n      }\n\n      if (key && !attribute.field && typeof attribute === 'object') attribute.field = key;\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n\n    return result;\n  }\n\n  createTrigger() {\n    throwMethodUndefined('createTrigger');\n  }\n\n  dropTrigger() {\n    throwMethodUndefined('dropTrigger');\n  }\n\n  renameTrigger() {\n    throwMethodUndefined('renameTrigger');\n  }\n\n  createFunction() {\n    throwMethodUndefined('createFunction');\n  }\n\n  dropFunction() {\n    throwMethodUndefined('dropFunction');\n  }\n\n  renameFunction() {\n    throwMethodUndefined('renameFunction');\n  }\n\n  /**\n   * Generate SQL for ForeignKeysQuery.\n   *\n   * @param {string} condition   The condition string for query.\n   * @returns {string}\n   */\n  _getForeignKeysQuerySQL(condition) {\n    return 'SELECT R.CONSTNAME AS \"constraintName\", ' +\n        'TRIM(R.TABSCHEMA) AS \"constraintSchema\", ' +\n        'R.TABNAME AS \"tableName\", ' +\n        'TRIM(R.TABSCHEMA) AS \"tableSchema\", LISTAGG(C.COLNAME,\\', \\') ' +\n        'WITHIN GROUP (ORDER BY C.COLNAME) AS \"columnName\", ' +\n        'TRIM(R.REFTABSCHEMA) AS \"referencedTableSchema\", ' +\n        'R.REFTABNAME AS \"referencedTableName\", ' +\n        'TRIM(R.PK_COLNAMES) AS \"referencedColumnName\" ' +\n        'FROM SYSCAT.REFERENCES R, SYSCAT.KEYCOLUSE C ' +\n        'WHERE R.CONSTNAME = C.CONSTNAME AND R.TABSCHEMA = C.TABSCHEMA ' +\n        `AND R.TABNAME = C.TABNAME${ condition } GROUP BY R.REFTABSCHEMA, ` +\n        'R.REFTABNAME, R.TABSCHEMA, R.TABNAME, R.CONSTNAME, R.PK_COLNAMES';\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param {Stirng|object} table The name of the table.\n   * @param {string} schemaName   The name of the schema. \n   * @returns {string}            The generated sql query.\n   */\n  getForeignKeysQuery(table, schemaName) {\n    const tableName = table.tableName || table;\n    schemaName = table.schema || schemaName;\n    let sql = '';\n    if (tableName) {\n      sql = ` AND R.TABNAME = ${wrapSingleQuote(tableName)}`;\n    }\n    if (schemaName) {\n      sql += ` AND R.TABSCHEMA = ${wrapSingleQuote(schemaName)}`;\n    }\n    return this._getForeignKeysQuerySQL(sql);\n  }\n\n  getForeignKeyQuery(table, columnName) {\n    const tableName = table.tableName || table;\n    const schemaName = table.schema;\n    let sql = '';\n    if (tableName) {\n      sql = ` AND R.TABNAME = ${wrapSingleQuote(tableName)}`;\n    }\n    if (schemaName) {\n      sql += ` AND R.TABSCHEMA = ${wrapSingleQuote(schemaName)}`;\n    }\n    if (columnName) {\n      sql += ` AND C.COLNAME = ${wrapSingleQuote(columnName)}`;\n    }\n    return this._getForeignKeysQuerySQL(sql);\n  }\n\n  getPrimaryKeyConstraintQuery(table, attributeName) {\n    const tableName = wrapSingleQuote(table.tableName || table);\n    return [\n      'SELECT TABNAME AS \"tableName\",',\n      'COLNAME AS \"columnName\",',\n      'CONSTNAME AS \"constraintName\"',\n      'FROM SYSCAT.KEYCOLUSE WHERE CONSTNAME LIKE \\'PK_%\\'',\n      `AND COLNAME = ${wrapSingleQuote(attributeName)}`,\n      `AND TABNAME = ${tableName};`\n    ].join(' ');\n  }\n\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return _.template('ALTER TABLE <%= table %> DROP <%= key %>', this._templateSettings)({\n      table: this.quoteTable(tableName),\n      key: this.quoteIdentifier(foreignKey)\n    });\n  }\n\n  dropConstraintQuery(tableName, constraintName) {\n    const sql = 'ALTER TABLE <%= table %> DROP CONSTRAINT <%= constraint %>;';\n    return _.template(sql, this._templateSettings)({\n      table: this.quoteTable(tableName),\n      constraint: this.quoteIdentifier(constraintName)\n    });\n  }\n\n  setAutocommitQuery() {\n    return '';\n  }\n\n  setIsolationLevelQuery() {\n\n  }\n\n  generateTransactionId() {\n    return randomBytes(10).toString('hex');\n  }\n\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `SAVE TRANSACTION ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return 'BEGIN TRANSACTION;';\n  }\n\n  commitTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return;\n    }\n\n    return 'COMMIT TRANSACTION;';\n  }\n\n  rollbackTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `ROLLBACK TRANSACTION ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return 'ROLLBACK TRANSACTION;';\n  }\n\n  addLimitAndOffset(options) {\n    const offset = options.offset || 0;\n    let fragment = '';\n\n    if (offset > 0) {\n      fragment += ` OFFSET ${ this.escape(offset) } ROWS`;\n    }\n\n    if (options.limit) {\n      fragment += ` FETCH NEXT ${ this.escape(options.limit) } ROWS ONLY`;\n    }\n\n    return fragment;\n  }\n\n  booleanValue(value) {\n    return value ? 1 : 0;\n  }\n\n  addUniqueFields(dataValues, rawAttributes, uniqno) {\n    uniqno = uniqno === undefined ? 1 : uniqno;\n    for (const key in rawAttributes) {\n      if (rawAttributes[key].unique && dataValues[key] === undefined) {\n        if (rawAttributes[key].type instanceof DataTypes.DATE) {\n          dataValues[key] = Utils.now('db2');\n        } else if (rawAttributes[key].type instanceof DataTypes.STRING) {\n          dataValues[key] = `unique${uniqno++}`;\n        } else if (rawAttributes[key].type instanceof DataTypes.INTEGER) {\n          dataValues[key] = uniqno++;\n        } else if (rawAttributes[key].type instanceof DataTypes.BOOLEAN) {\n          dataValues[key] = new DataTypes.BOOLEAN(false);\n        }\n      }\n    }\n    return uniqno;\n  }\n\n  /**\n   * Quote identifier in sql clause\n   *\n   * @param {string} identifier\n   * @param {boolean} force\n   *\n   * @returns {string}\n   */\n  quoteIdentifier(identifier, force) {\n    return Utils.addTicks(Utils.removeTicks(identifier, '\"'), '\"');\n  }\n\n}\n\n// private methods\nfunction wrapSingleQuote(identifier) {\n  if (identifier) {\n    return `'${ identifier }'`;\n    //return Utils.addTicks(\"'\"); // It removes quote from center too.\n  }\n  return '';\n}\n\nmodule.exports = Db2QueryGenerator;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 24434, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 24439, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/db2/query-interface.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Utils = require('../../utils');\nconst Op = require('../../operators');\nconst { QueryInterface } = require('../abstract/query-interface');\nconst QueryTypes = require('../../query-types');\n\n/**\n * The interface that Sequelize uses to talk with Db2 database\n */\nclass Db2QueryInterface extends QueryInterface {\n  async getForeignKeyReferencesForTable(tableName, options) {\n    const queryOptions = {\n      ...options,\n      type: QueryTypes.FOREIGNKEYS\n    };\n    const query = this.queryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.username.toUpperCase());\n    return this.sequelize.query(query, queryOptions);\n  }\n\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = { ...options };\n\n    const model = options.model;\n    const wheres = [];\n    const attributes = Object.keys(insertValues);\n    let indexes = [];\n    let indexFields;\n\n    options = _.clone(options);\n\n    if (!Utils.isWhereEmpty(where)) {\n      wheres.push(where);\n    }\n\n    // Lets combine unique keys and indexes into one\n    indexes = _.map(model.uniqueKeys, value => {\n      return value.fields;\n    });\n\n    model._indexes.forEach(value => {\n      if (value.unique) {\n        // fields in the index may both the strings or objects with an attribute property - lets sanitize that\n        indexFields = value.fields.map(field => {\n          if (_.isPlainObject(field)) {\n            return field.attribute;\n          }\n          return field;\n        });\n        indexes.push(indexFields);\n      }\n    });\n\n    for (const index of indexes) {\n      if (_.intersection(attributes, index).length === index.length) {\n        where = {};\n        for (const field of index) {\n          where[field] = insertValues[field];\n        }\n        wheres.push(where);\n      }\n    }\n\n    where = { [Op.or]: wheres };\n\n    options.type = QueryTypes.UPSERT;\n    options.raw = true;\n\n    const sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);\n    const result = await this.sequelize.query(sql, options);\n    return [result, undefined];\n  }\n\n  async createTable(tableName, attributes, options, model) {\n    let sql = '';\n\n    options = { ...options };\n\n    if (options && options.uniqueKeys) {\n      _.forOwn(options.uniqueKeys, uniqueKey => {\n        if (uniqueKey.customIndex === undefined) {\n          uniqueKey.customIndex = true;\n        }\n      });\n    }\n\n    if (model) {\n      options.uniqueKeys = options.uniqueKeys || model.uniqueKeys;\n    }\n    attributes = _.mapValues(\n      attributes,\n      attribute => this.sequelize.normalizeAttribute(attribute)\n    );  \n    if (options.indexes) {\n      options.indexes.forEach(fields=>{\n        const fieldArr = fields.fields;\n        if (fieldArr.length === 1) {\n          fieldArr.forEach(field=>{       \n            for (const property in attributes) {\n              if (field === attributes[property].field) {\n                attributes[property].unique = true;\n              }\n            }\n          });\n        }\n      });\n    }\n    if (options.alter) {\n      if (options.indexes) {\n        options.indexes.forEach(fields=>{\n          const fieldArr = fields.fields;\n          if (fieldArr.length === 1) {\n            fieldArr.forEach(field=>{       \n              for (const property in attributes) {\n                if (field === attributes[property].field && attributes[property].unique) {\n                  attributes[property].unique = false;\n                }\n              }\n            });\n          }\n        });\n      }\n    }\n\n    if (\n      !tableName.schema &&\n      (options.schema || !!model && model._schema)\n    ) {\n      tableName = this.queryGenerator.addSchema({\n        tableName,\n        _schema: !!model && model._schema || options.schema\n      });\n    }\n\n    attributes = this.queryGenerator.attributesToSQL(attributes, { table: tableName, context: 'createTable', withoutForeignKeyConstraints: options.withoutForeignKeyConstraints });\n    sql = this.queryGenerator.createTableQuery(tableName, attributes, options);\n\n    return await this.sequelize.query(sql, options);\n  }\n\n}\n\nexports.Db2QueryInterface = Db2QueryInterface;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 24579, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 24584, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/db2/index.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').db2;\nconst { Db2QueryInterface } = require('./query-interface');\n\nclass Db2Dialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new Db2QueryInterface(sequelize, this.queryGenerator);\n  }\n}\n\nDb2Dialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  'DEFAULT': true,\n  'DEFAULT VALUES': false,\n  'VALUES ()': false,\n  'LIMIT ON UPDATE': false,\n  'ORDER NULLS': false,\n  lock: false,\n  transactions: true,\n  migrations: false,\n  returnValues: false,\n  schemas: true,\n  finalTable: true,\n  autoIncrement: {\n    identityInsert: false,\n    defaultValue: false,\n    update: true\n  },\n  constraints: {\n    restrict: true,\n    default: false\n  },\n  index: {\n    collate: false,\n    length: false,\n    parser: false,\n    type: false,\n    using: false,\n    where: true\n  },\n  NUMERIC: true,\n  tmpTableTrigger: true\n});\n\nDb2Dialect.prototype.defaultVersion = '1.0.0'; // Db2 supported version comes here\nDb2Dialect.prototype.Query = Query;\nDb2Dialect.prototype.name = 'db2';\nDb2Dialect.prototype.TICK_CHAR = '\"';\nDb2Dialect.prototype.TICK_CHAR_LEFT = '\"';\nDb2Dialect.prototype.TICK_CHAR_RIGHT = '\"';\nDb2Dialect.prototype.DataTypes = DataTypes;\n\nmodule.exports = Db2Dialect;\n"],"names":[],"mappings":";AAEA,MAAM,IAAI,QAAQ;AAClB,MAAM,kBAAkB,QAAQ;AAChC,MAAM,oBAAoB,QAAQ;AAClC,MAAM,QAAQ,QAAQ;AACtB,MAAM,iBAAiB,QAAQ;AAC/B,MAAM,YAAY,QAAQ,8FAAoB,GAAA;AAC9C,MAAM,EAAE,iBAAA,EAAA,GAAsB,QAAQ;AAEtC,MAAA,mBAAyB,gBAAgB;IACvC,YAAY,SAAA,CAAW;QACrB,KAAA;QACA,IAAA,CAAK,SAAA,GAAY;QACjB,IAAA,CAAK,iBAAA,GAAoB,IAAI,kBAAkB,IAAA,EAAM;QACrD,IAAA,CAAK,cAAA,GAAiB,IAAI,eAAe;YACvC,UAAU,IAAA;YACV;QAAA;QAEF,IAAA,CAAK,cAAA,GAAiB,IAAI,kBAAkB,WAAW,IAAA,CAAK,cAAA;IAAA;AAAA;AAIhE,WAAW,SAAA,CAAU,QAAA,GAAW,EAAE,KAAA,CAAM,EAAE,SAAA,CAAU,gBAAgB,SAAA,CAAU,QAAA,GAAW;IACvF,WAAW;IACX,kBAAkB;IAClB,aAAa;IACb,mBAAmB;IACnB,eAAe;IACf,MAAM;IACN,cAAc;IACd,YAAY;IACZ,cAAc;IACd,SAAS;IACT,YAAY;IACZ,eAAe;QACb,gBAAgB;QAChB,cAAc;QACd,QAAQ;IAAA;IAEV,aAAa;QACX,UAAU;QACV,SAAS;IAAA;IAEX,OAAO;QACL,SAAS;QACT,QAAQ;QACR,QAAQ;QACR,MAAM;QACN,OAAO;QACP,OAAO;IAAA;IAET,SAAS;IACT,iBAAiB;AAAA;AAGnB,WAAW,SAAA,CAAU,cAAA,GAAiB;AACtC,WAAW,SAAA,CAAU,KAAA,GAAQ;AAC7B,WAAW,SAAA,CAAU,IAAA,GAAO;AAC5B,WAAW,SAAA,CAAU,SAAA,GAAY;AACjC,WAAW,SAAA,CAAU,cAAA,GAAiB;AACtC,WAAW,SAAA,CAAU,eAAA,GAAkB;AACvC,WAAW,SAAA,CAAU,SAAA,GAAY;AAEjC,OAAO,OAAA,GAAU","ignoreList":[0]}},
    {"offset": {"line": 24644, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 24649, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/snowflake/connection-manager.js"],"sourcesContent":["'use strict';\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst SequelizeErrors = require('../../errors');\nconst { logger } = require('../../utils/logger');\nconst DataTypes = require('../../data-types').snowflake;\nconst debug = logger.debugContext('connection:snowflake');\nconst parserStore = require('../parserStore')('snowflake');\n\n/**\n * Snowflake Connection Manager\n *\n * Get connections, validate and disconnect them.\n *\n * @private\n */\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 3306;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule('snowflake-sdk');\n    this.refreshTypeParser(DataTypes);\n  }\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  static _typecast(field, next) {\n    if (parserStore.get(field.type)) {\n      return parserStore.get(field.type)(field, this.sequelize.options, next);\n    }\n    return next();\n  }\n\n  /**\n   * Connect with a snowflake database based on config, Handle any errors in connection\n   * Set the pool handlers on connection.error\n   * Also set proper timezone once connection is connected.\n   *\n   * @param {object} config\n   * @returns {Promise<Connection>}\n   * @private\n   */\n  async connect(config) {\n    const connectionConfig = {\n      account: config.host,\n      username: config.username,\n      password: config.password,\n      database: config.database,\n      warehouse: config.warehouse,\n      role: config.role,\n      /*\n      flags: '-FOUND_ROWS',\n      timezone: this.sequelize.options.timezone,\n      typeCast: ConnectionManager._typecast.bind(this),\n      bigNumberStrings: false,\n      supportBigNumbers: true,\n      */\n      ...config.dialectOptions\n    };\n\n    try {\n\n      const connection = await new Promise((resolve, reject) => {\n        this.lib.createConnection(connectionConfig).connect((err, conn) => {\n          if (err) {\n            console.log(err);\n            reject(err);\n          } else {\n            resolve(conn);\n          }\n        });\n      });\n\n      debug('connection acquired');\n\n      if (!this.sequelize.config.keepDefaultTimezone) {\n        // default value is '+00:00', put a quick workaround for it.\n        const tzOffset = this.sequelize.options.timezone === '+00:00' ? 'Etc/UTC' : this.sequelize.options.timezone;\n        const isNamedTzOffset = /\\//.test(tzOffset);\n        if ( isNamedTzOffset ) {\n          await new Promise((resolve, reject) => {\n            connection.execute({\n              sqlText: `ALTER SESSION SET timezone = '${tzOffset}'`,\n              complete(err) {\n                if (err) {\n                  console.log(err);\n                  reject(err);\n                } else {\n                  resolve();\n                }\n              }\n            });\n          });\n        } else {\n          throw Error('only support time zone name for snowflake!');\n        }\n      }\n\n      return connection;\n    } catch (err) {\n      switch (err.code) {\n        case 'ECONNREFUSED':\n          throw new SequelizeErrors.ConnectionRefusedError(err);\n        case 'ER_ACCESS_DENIED_ERROR':\n          throw new SequelizeErrors.AccessDeniedError(err);\n        case 'ENOTFOUND':\n          throw new SequelizeErrors.HostNotFoundError(err);\n        case 'EHOSTUNREACH':\n          throw new SequelizeErrors.HostNotReachableError(err);\n        case 'EINVAL':\n          throw new SequelizeErrors.InvalidConnectionError(err);\n        default:\n          throw new SequelizeErrors.ConnectionError(err);\n      }\n    }\n  }\n\n  async disconnect(connection) {\n    // Don't disconnect connections with CLOSED state\n    if (!connection.isUp()) {\n      debug('connection tried to disconnect but was already at CLOSED state');\n      return;\n    }\n\n    return new Promise((resolve, reject) => {\n      connection.destroy(err => {\n        if (err) {\n          console.error(`Unable to disconnect: ${err.message}`);\n          reject(err);\n        } else {\n          console.log(`Disconnected connection with id: ${connection.getId()}`);\n          resolve(connection.getId());\n        }\n      });\n    });\n  }\n\n  validate(connection) {\n    return connection.isUp();\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAEA,MAAM,4BAA4B,QAAQ;AAC1C,MAAM,kBAAkB,QAAQ;AAChC,MAAM,EAAE,MAAA,EAAA,GAAW,QAAQ;AAC3B,MAAM,YAAY,QAAQ,8FAAoB,SAAA;AAC9C,MAAM,QAAQ,OAAO,YAAA,CAAa;AAClC,MAAM,cAAc,QAAQ,wGAAkB;AAS9C,MAAA,0BAAgC,0BAA0B;IACxD,YAAY,OAAA,EAAS,SAAA,CAAW;QAC9B,UAAU,MAAA,CAAO,IAAA,GAAO,UAAU,MAAA,CAAO,IAAA,IAAQ;QACjD,KAAA,CAAM,SAAS;QACf,IAAA,CAAK,GAAA,GAAM,IAAA,CAAK,kBAAA,CAAmB;QACnC,IAAA,CAAK,iBAAA,CAAkB;IAAA;IAGzB,mBAAmB,QAAA,EAAU;QAC3B,YAAY,OAAA,CAAQ;IAAA;IAGtB,mBAAmB;QACjB,YAAY,KAAA;IAAA;IAAA,OAGP,UAAU,KAAA,EAAO,IAAA,EAAM;QAC5B,IAAI,YAAY,GAAA,CAAI,MAAM,IAAA,GAAO;YAC/B,OAAO,YAAY,GAAA,CAAI,MAAM,IAAA,EAAM,OAAO,IAAA,CAAK,SAAA,CAAU,OAAA,EAAS;QAAA;QAEpE,OAAO;IAAA;IAAA,MAYH,QAAQ,MAAA,EAAQ;QACpB,MAAM,mBAAmB,eAAA;YACvB,SAAS,OAAO,IAAA;YAChB,UAAU,OAAO,QAAA;YACjB,UAAU,OAAO,QAAA;YACjB,UAAU,OAAO,QAAA;YACjB,WAAW,OAAO,SAAA;YAClB,MAAM,OAAO,IAAA;QAAA,GAQV,OAAO,cAAA;QAGZ,IAAI;YAEF,MAAM,aAAa,MAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;gBACxD,IAAA,CAAK,GAAA,CAAI,gBAAA,CAAiB,kBAAkB,OAAA,CAAQ,CAAC,KAAK,SAAS;oBACjE,IAAI,KAAK;wBACP,QAAQ,GAAA,CAAI;wBACZ,OAAO;oBAAA,OACF;wBACL,QAAQ;oBAAA;gBAAA;YAAA;YAKd,MAAM;YAEN,IAAI,CAAC,IAAA,CAAK,SAAA,CAAU,MAAA,CAAO,mBAAA,EAAqB;gBAE9C,MAAM,WAAW,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ,QAAA,KAAa,WAAW,YAAY,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ,QAAA;gBACnG,MAAM,kBAAkB,KAAK,IAAA,CAAK;gBAClC,IAAK,iBAAkB;oBACrB,MAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;wBACrC,WAAW,OAAA,CAAQ;4BACjB,SAAS,CAAA,8BAAA,EAAiC,SAAA,CAAA,CAAA;4BAC1C,UAAS,GAAA,EAAK;gCACZ,IAAI,KAAK;oCACP,QAAQ,GAAA,CAAI;oCACZ,OAAO;gCAAA,OACF;oCACL;gCAAA;4BAAA;wBAAA;oBAAA;gBAAA,OAKH;oBACL,MAAM,MAAM;gBAAA;YAAA;YAIhB,OAAO;QAAA,EAAA,OACA,KAAP;YACA,OAAQ,IAAI,IAAA;gBAAA,KACL;oBACH,MAAM,IAAI,gBAAgB,sBAAA,CAAuB;gBAAA,KAC9C;oBACH,MAAM,IAAI,gBAAgB,iBAAA,CAAkB;gBAAA,KACzC;oBACH,MAAM,IAAI,gBAAgB,iBAAA,CAAkB;gBAAA,KACzC;oBACH,MAAM,IAAI,gBAAgB,qBAAA,CAAsB;gBAAA,KAC7C;oBACH,MAAM,IAAI,gBAAgB,sBAAA,CAAuB;gBAAA;oBAEjD,MAAM,IAAI,gBAAgB,eAAA,CAAgB;YAAA;QAAA;IAAA;IAAA,MAK5C,WAAW,UAAA,EAAY;QAE3B,IAAI,CAAC,WAAW,IAAA,IAAQ;YACtB,MAAM;YACN;QAAA;QAGF,OAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;YACtC,WAAW,OAAA,CAAQ,CAAA,QAAO;gBACxB,IAAI,KAAK;oBACP,QAAQ,KAAA,CAAM,CAAA,sBAAA,EAAyB,IAAI,OAAA,EAAA;oBAC3C,OAAO;gBAAA,OACF;oBACL,QAAQ,GAAA,CAAI,CAAA,iCAAA,EAAoC,WAAW,KAAA,IAAA;oBAC3D,QAAQ,WAAW,KAAA;gBAAA;YAAA;QAAA;IAAA;IAM3B,SAAS,UAAA,EAAY;QACnB,OAAO,WAAW,IAAA;IAAA;AAAA;AAItB,OAAO,OAAA,GAAU;AACjB,OAAO,OAAA,CAAQ,iBAAA,GAAoB;AACnC,OAAO,OAAA,CAAQ,OAAA,GAAU","ignoreList":[0]}},
    {"offset": {"line": 24776, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 24781, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/snowflake/query.js"],"sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst ER_DUP_ENTRY = 1062;\nconst ER_DEADLOCK = 1213;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\n\nconst debug = logger.debugContext('sql:snowflake');\n\nclass Query extends AbstractQuery {\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n    const replacementFunc = (_match, key, values_) => {\n      if (values_[key] !== undefined) {\n        bindParam.push(values_[key]);\n        return '?';\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : undefined];\n  }\n\n  async run(sql, parameters) {\n    this.sql = sql;\n    const { connection, options } = this;\n\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    if (parameters) {\n      debug('parameters(%j)', parameters);\n    }\n\n    let results;\n\n    try {\n      results = await new Promise((resolve, reject) => {\n        connection.execute({\n          sqlText: sql,\n          binds: parameters,\n          complete(err, _stmt, rows) {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(rows);\n            }\n          }\n        });\n      });\n    } catch (error) {\n      if (options.transaction && error.errno === ER_DEADLOCK) {\n        try {\n          await options.transaction.rollback();\n        } catch (error_) {\n          // ignore errors\n        }\n\n        options.transaction.finished = 'rollback';\n      }\n\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error);\n    } finally {\n      complete();\n    }\n\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n    return this.formatResults(results);\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        // handle bulkCreate AI primary key\n        if (\n          data.constructor.name === 'ResultSetHeader'\n          && this.model\n          && this.model.autoIncrementAttribute\n          && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute\n          && this.model.rawAttributes[this.model.primaryKeyAttribute]\n        ) {\n          const startId = data[this.getInsertIdField()];\n          result = [];\n          for (let i = startId; i < startId + data.affectedRows; i++) {\n            result.push({ [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i });\n          }\n        } else {\n          result = data[this.getInsertIdField()];\n        }\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      // Snowflake will treat tables as case-insensitive, so fix the case\n      // of the returned values to match attributes\n      if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n        const sfAttrMap = _.reduce(this.model.rawAttributes, (m, v, k) => {\n          m[k.toUpperCase()] = k;\n          return m;\n        }, {});\n\n        data = data.map(data => _.reduce(data, (prev, value, key) => {\n          if ( value !== undefined && sfAttrMap[key] ) {\n            prev[sfAttrMap[key]] = value;\n            delete prev[key];\n          }\n          return prev;\n        }, data));\n      }\n\n      this.options.fieldMap = _.mapKeys(this.options.fieldMap, (v, k) => { return k.toUpperCase(); });\n\n      return this.handleSelectQuery(data);\n    }\n\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        result[_result.Field] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.Null === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === 'PRI',\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, 'Extra')\n            && _result.Extra.toLowerCase() === 'auto_increment',\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n      return result;\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n      return data[0]['number of rows updated'];\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n    if (this.isShowConstraintsQuery()) {\n      return data;\n    }\n    if (this.isRawQuery()) {\n      return [data, data];\n    }\n\n    return result;\n  }\n\n  async logWarnings(results) {\n    const warningResults = await this.run('SHOW WARNINGS');\n    const warningMessage = `Snowflake Warnings (${this.connection.uuid || 'default'}): `;\n    const messages = [];\n    for (const _warningRow of warningResults) {\n      if (_warningRow === undefined || typeof _warningRow[Symbol.iterator] !== 'function') {\n        continue;\n      }\n      for (const _warningResult of _warningRow) {\n        if (Object.prototype.hasOwnProperty.call(_warningResult, 'Message')) {\n          messages.push(_warningResult.Message);\n        } else {\n          for (const _objectKey of _warningResult.keys()) {\n            messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\n          }\n        }\n      }\n    }\n\n    this.sequelize.log(warningMessage + messages.join('; '), this.options);\n\n    return results;\n  }\n\n  formatError(err) {\n    const errCode = err.errno || err.code;\n\n    switch (errCode) {\n      case ER_DUP_ENTRY: {\n        const match = err.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?$/);\n        let fields = {};\n        let message = 'Validation error';\n        const values = match ? match[1].split('-') : undefined;\n        const fieldKey = match ? match[2] : undefined;\n        const fieldVal = match ? match[1] : undefined;\n        const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n        if (uniqueKey) {\n          if (uniqueKey.msg) message = uniqueKey.msg;\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[fieldKey] = fieldVal;\n        }\n\n        const errors = [];\n        _.forOwn(fields, (value, field) => {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field,\n            value,\n            this.instance,\n            'not_unique'\n          ));\n        });\n\n        return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields });\n      }\n\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW: {\n        // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n        const match = err.message.match(\n          /CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/\n        );\n        const quoteChar = match ? match[1] : '`';\n        const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          reltype: String(errCode) === String(ER_ROW_IS_REFERENCED) ? 'parent' : 'child',\n          table: match ? match[4] : undefined,\n          fields,\n          value: fields && fields.length && this.instance && this.instance[fields[0]] || undefined,\n          index: match ? match[2] : undefined,\n          parent: err\n        });\n      }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = data.reduce((acc, item) => {\n      if (!(item.Key_name in acc)) {\n        acc[item.Key_name] = item;\n        item.fields = [];\n      }\n\n      acc[item.Key_name].fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || undefined,\n        order: item.Collation === 'A' ? 'ASC' : undefined\n      };\n      delete item.column_name;\n\n      return acc;\n    }, {});\n\n    return _.map(data, item => ({\n      primary: item.Key_name === 'PRIMARY',\n      fields: item.fields,\n      name: item.Key_name,\n      tableName: item.Table,\n      unique: item.Non_unique !== 1,\n      type: item.Index_type\n    }));\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 25039, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 25044, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/snowflake/query-generator.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Utils = require('../../utils');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\nconst util = require('util');\nconst Op = require('../../operators');\n\n\nconst JSON_FUNCTION_REGEX = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\nconst JSON_OPERATOR_REGEX = /^\\s*(->>?|@>|<@|\\?[|&]?|\\|{2}|#-)/i;\nconst TOKEN_CAPTURE_REGEX = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\nconst FOREIGN_KEY_FIELDS = [\n  'CONSTRAINT_NAME as constraint_name',\n  'CONSTRAINT_NAME as constraintName',\n  'CONSTRAINT_SCHEMA as constraintSchema',\n  'CONSTRAINT_SCHEMA as constraintCatalog',\n  'TABLE_NAME as tableName',\n  'TABLE_SCHEMA as tableSchema',\n  'TABLE_SCHEMA as tableCatalog',\n  'COLUMN_NAME as columnName',\n  'REFERENCED_TABLE_SCHEMA as referencedTableSchema',\n  'REFERENCED_TABLE_SCHEMA as referencedTableCatalog',\n  'REFERENCED_TABLE_NAME as referencedTableName',\n  'REFERENCED_COLUMN_NAME as referencedColumnName'\n].join(',');\n\n/**\n * list of reserved words in Snowflake\n * source: https://docs.snowflake.com/en/sql-reference/reserved-keywords.html\n *\n * @private\n */\nconst SNOWFLAKE_RESERVED_WORDS = 'account,all,alter,and,any,as,between,by,case,cast,check,column,connect,connections,constraint,create,cross,current,current_date,current_time,current_timestamp,current_user,database,delete,distinct,drop,else,exists,false,following,for,from,full,grant,group,gscluster,having,ilike,in,increment,inner,insert,intersect,into,is,issue,join,lateral,left,like,localtime,localtimestamp,minus,natural,not,null,of,on,or,order,organization,qualify,regexp,revoke,right,rlike,row,rows,sample,schema,select,set,some,start,table,tablesample,then,to,trigger,true,try_cast,union,unique,update,using,values,view,when,whenever,where,with'.split(',');\n\nconst typeWithoutDefault = new Set(['BLOB', 'TEXT', 'GEOMETRY', 'JSON']);\n\nclass SnowflakeQueryGenerator extends AbstractQueryGenerator {\n  constructor(options) {\n    super(options);\n\n    this.OperatorMap = {\n      ...this.OperatorMap,\n      [Op.regexp]: 'REGEXP',\n      [Op.notRegexp]: 'NOT REGEXP'\n    };\n  }\n\n  createDatabaseQuery(databaseName, options) {\n    options = {\n      charset: null,\n      collate: null,\n      ...options\n    };\n\n    return Utils.joinSQLFragments([\n      'CREATE DATABASE IF NOT EXISTS',\n      this.quoteIdentifier(databaseName),\n      options.charset && `DEFAULT CHARACTER SET ${this.escape(options.charset)}`,\n      options.collate && `DEFAULT COLLATE ${this.escape(options.collate)}`,\n      ';'\n    ]);\n  }\n\n  dropDatabaseQuery(databaseName) {\n    return `DROP DATABASE IF EXISTS ${this.quoteIdentifier(databaseName)};`;\n  }\n\n  createSchema() {\n    return 'SHOW TABLES';\n  }\n\n  showSchemasQuery() {\n    return 'SHOW TABLES';\n  }\n\n  versionQuery() {\n    return 'SELECT CURRENT_VERSION()';\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    options = {\n      charset: null,\n      rowFormat: null,\n      ...options\n    };\n\n    const primaryKeys = [];\n    const foreignKeys = {};\n    const attrStr = [];\n\n    for (const attr in attributes) {\n      if (!Object.prototype.hasOwnProperty.call(attributes, attr)) continue;\n      const dataType = attributes[attr];\n      let match;\n\n      if (dataType.includes('PRIMARY KEY')) {\n        primaryKeys.push(attr);\n\n        if (dataType.includes('REFERENCES')) {\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attrStr.push(`${this.quoteIdentifier(attr)} ${match[1].replace('PRIMARY KEY', '')}`);\n          foreignKeys[attr] = match[2];\n        } else {\n          attrStr.push(`${this.quoteIdentifier(attr)} ${dataType.replace('PRIMARY KEY', '')}`);\n        }\n      } else if (dataType.includes('REFERENCES')) {\n        match = dataType.match(/^(.+) (REFERENCES.*)$/);\n        attrStr.push(`${this.quoteIdentifier(attr)} ${match[1]}`);\n        foreignKeys[attr] = match[2];\n      } else {\n        attrStr.push(`${this.quoteIdentifier(attr)} ${dataType}`);\n      }\n    }\n\n    const table = this.quoteTable(tableName);\n    let attributesClause = attrStr.join(', ');\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, (columns, indexName) => {\n        if (columns.customIndex) {\n          if (typeof indexName !== 'string') {\n            indexName = `uniq_${tableName}_${columns.fields.join('_')}`;\n          }\n          attributesClause += `, UNIQUE ${this.quoteIdentifier(indexName)} (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n        }\n      });\n    }\n\n    if (pkString.length > 0) {\n      attributesClause += `, PRIMARY KEY (${pkString})`;\n    }\n\n    for (const fkey in foreignKeys) {\n      if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {\n        attributesClause += `, FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`;\n      }\n    }\n\n    return Utils.joinSQLFragments([\n      'CREATE TABLE IF NOT EXISTS',\n      table,\n      `(${attributesClause})`,\n      options.comment && typeof options.comment === 'string' && `COMMENT ${this.escape(options.comment)}`,\n      options.charset && `DEFAULT CHARSET=${options.charset}`,\n      options.collate && `COLLATE ${options.collate}`,\n      options.rowFormat && `ROW_FORMAT=${options.rowFormat}`,\n      ';'\n    ]);\n  }\n\n  describeTableQuery(tableName, schema, schemaDelimiter) {\n    const table = this.quoteTable(\n      this.addSchema({\n        tableName,\n        _schema: schema,\n        _schemaDelimiter: schemaDelimiter\n      })\n    );\n\n    return `SHOW FULL COLUMNS FROM ${table};`;\n  }\n\n  showTablesQuery(database) {\n    return Utils.joinSQLFragments([\n      'SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = \\'BASE TABLE\\'',\n      database ? `AND TABLE_SCHEMA = ${this.escape(database)}` : 'AND TABLE_SCHEMA NOT IN ( \\'INFORMATION_SCHEMA\\', \\'PERFORMANCE_SCHEMA\\', \\'SYS\\')',\n      ';'\n    ]);\n  }\n\n  tableExistsQuery(table) {\n    const tableName = table.tableName || table;\n    const schema = table.schema;\n\n    return Utils.joinSQLFragments([\n      'SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = \\'BASE TABLE\\'',\n      `AND TABLE_SCHEMA = ${schema !== undefined ? this.escape(schema) : 'CURRENT_SCHEMA()'}`,\n      `AND TABLE_NAME = ${this.escape(tableName)}`,\n      ';'\n    ]);\n  }\n\n  addColumnQuery(table, key, dataType) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(table),\n      'ADD',\n      this.quoteIdentifier(key),\n      this.attributeToSQL(dataType, {\n        context: 'addColumn',\n        tableName: table,\n        foreignKey: key\n      }),\n      ';'\n    ]);\n  }\n\n  removeColumnQuery(tableName, attributeName) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP',\n      this.quoteIdentifier(attributeName),\n      ';'\n    ]);\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const query = (...subQuerys) => Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'ALTER COLUMN',\n      ...subQuerys,\n      ';'\n    ]);\n    const sql = [];\n    for (const attributeName in attributes) {\n      let definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);\n      const attrSql = [];\n\n      if (definition.includes('NOT NULL')) {\n        attrSql.push(query(this.quoteIdentifier(attributeName), 'SET NOT NULL'));\n\n        definition = definition.replace('NOT NULL', '').trim();\n      } else if (!definition.includes('REFERENCES')) {\n        attrSql.push(query(this.quoteIdentifier(attributeName), 'DROP NOT NULL'));\n      }\n\n      if (definition.includes('DEFAULT')) {\n        attrSql.push(query(this.quoteIdentifier(attributeName), 'SET DEFAULT', definition.match(/DEFAULT ([^;]+)/)[1]));\n\n        definition = definition.replace(/(DEFAULT[^;]+)/, '').trim();\n      } else if (!definition.includes('REFERENCES')) {\n        attrSql.push(query(this.quoteIdentifier(attributeName), 'DROP DEFAULT'));\n      }\n\n      if (definition.match(/UNIQUE;*$/)) {\n        definition = definition.replace(/UNIQUE;*$/, '');\n        attrSql.push(query('ADD UNIQUE (', this.quoteIdentifier(attributeName), ')').replace('ALTER COLUMN', ''));\n      }\n\n      if (definition.includes('REFERENCES')) {\n        definition = definition.replace(/.+?(?=REFERENCES)/, '');\n        attrSql.push(query('ADD FOREIGN KEY (', this.quoteIdentifier(attributeName), ')', definition).replace('ALTER COLUMN', ''));\n      } else {\n        attrSql.push(query(this.quoteIdentifier(attributeName), 'TYPE', definition));\n      }\n\n      sql.push(attrSql.join(''));\n    }\n\n    return sql.join('');\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const attrString = [];\n\n    for (const attrName in attributes) {\n      const definition = attributes[attrName];\n      attrString.push(`'${attrBefore}' '${attrName}' ${definition}`);\n    }\n\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'RENAME COLUMN',\n      attrString.join(' to '),\n      ';'\n    ]);\n  }\n\n  handleSequelizeMethod(attr, tableName, factory, options, prepend) {\n    if (attr instanceof Utils.Json) {\n      // Parse nested object\n      if (attr.conditions) {\n        const conditions = this.parseConditionObject(attr.conditions).map(condition =>\n          `${this.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path))} = '${condition.value}'`\n        );\n\n        return conditions.join(' AND ');\n      }\n      if (attr.path) {\n        let str;\n\n        // Allow specifying conditions using the sqlite json functions\n        if (this._checkValidJsonStatement(attr.path)) {\n          str = attr.path;\n        } else {\n          // Also support json property accessors\n          const paths = _.toPath(attr.path);\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n\n        if (attr.value) {\n          str += util.format(' = %s', this.escape(attr.value));\n        }\n\n        return str;\n      }\n    } else if (attr instanceof Utils.Cast) {\n      if (/timestamp/i.test(attr.type)) {\n        attr.type = 'datetime';\n      } else if (attr.json && /boolean/i.test(attr.type)) {\n        // true or false cannot be casted as booleans within a JSON structure\n        attr.type = 'char';\n      } else if (/double precision/i.test(attr.type) || /boolean/i.test(attr.type) || /integer/i.test(attr.type)) {\n        attr.type = 'decimal';\n      } else if (/text/i.test(attr.type)) {\n        attr.type = 'char';\n      }\n    }\n\n    return super.handleSequelizeMethod(attr, tableName, factory, options, prepend);\n  }\n\n  truncateTableQuery(tableName) {\n    return Utils.joinSQLFragments([\n      'TRUNCATE',\n      this.quoteTable(tableName)\n    ]);\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    const table = this.quoteTable(tableName);\n    let whereClause = this.getWhereConditions(where, null, model, options);\n    const limit = options.limit && ` LIMIT ${this.escape(options.limit)}`;\n    let primaryKeys = '';\n    let primaryKeysSelection = '';\n\n    if (whereClause) {\n      whereClause = `WHERE ${whereClause}`;\n    }\n\n    if (limit) {\n      if (!model) {\n        throw new Error('Cannot LIMIT delete without a model.');\n      }\n\n      const pks = Object.values(model.primaryKeys).map(pk => this.quoteIdentifier(pk.field)).join(',');\n\n      primaryKeys = model.primaryKeyAttributes.length > 1 ? `(${pks})` : pks;\n      primaryKeysSelection = pks;\n\n      return Utils.joinSQLFragments([\n        'DELETE FROM',\n        table,\n        'WHERE',\n        primaryKeys,\n        'IN (SELECT',\n        primaryKeysSelection,\n        'FROM',\n        table,\n        whereClause,\n        limit,\n        ')',\n        ';'\n      ]);\n    }\n    return Utils.joinSQLFragments([\n      'DELETE FROM',\n      table,\n      whereClause,\n      ';'\n    ]);\n  }\n\n  showIndexesQuery() {\n    return 'SELECT \\'\\' FROM DUAL';\n  }\n\n  showConstraintsQuery(table, constraintName) {\n    const tableName = table.tableName || table;\n    const schemaName = table.schema;\n\n    return Utils.joinSQLFragments([\n      'SELECT CONSTRAINT_CATALOG AS constraintCatalog,',\n      'CONSTRAINT_NAME AS constraintName,',\n      'CONSTRAINT_SCHEMA AS constraintSchema,',\n      'CONSTRAINT_TYPE AS constraintType,',\n      'TABLE_NAME AS tableName,',\n      'TABLE_SCHEMA AS tableSchema',\n      'from INFORMATION_SCHEMA.TABLE_CONSTRAINTS',\n      `WHERE table_name='${tableName}'`,\n      constraintName && `AND constraint_name = '${constraintName}'`,\n      schemaName && `AND TABLE_SCHEMA = '${schemaName}'`,\n      ';'\n    ]);\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return Utils.joinSQLFragments([\n      'DROP INDEX',\n      this.quoteIdentifier(indexName),\n      'ON',\n      this.quoteTable(tableName),\n      ';'\n    ]);\n  }\n\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    const attributeString = attribute.type.toString({ escape: this.escape.bind(this) });\n    let template = attributeString;\n\n    if (attribute.allowNull === false) {\n      template += ' NOT NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      template += ' AUTOINCREMENT';\n    }\n\n    // BLOB/TEXT/GEOMETRY/JSON cannot have a default value\n    if (!typeWithoutDefault.has(attributeString)\n      && attribute.type._binary !== true\n      && Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;\n    }\n\n    if (attribute.unique === true) {\n      template += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      template += ' PRIMARY KEY';\n    }\n\n    if (attribute.comment) {\n      template += ` COMMENT ${this.escape(attribute.comment)}`;\n    }\n\n    if (attribute.first) {\n      template += ' FIRST';\n    }\n    if (attribute.after) {\n      template += ` AFTER ${this.quoteIdentifier(attribute.after)}`;\n    }\n\n    if (attribute.references) {\n      if (options && options.context === 'addColumn' && options.foreignKey) {\n        const attrName = this.quoteIdentifier(options.foreignKey);\n        const fkName = this.quoteIdentifier(`${options.tableName}_${attrName}_foreign_idx`);\n\n        template += `, ADD CONSTRAINT ${fkName} FOREIGN KEY (${attrName})`;\n      }\n\n      template += ` REFERENCES ${this.quoteTable(attribute.references.model)}`;\n\n      if (attribute.references.key) {\n        template += ` (${this.quoteIdentifier(attribute.references.key)})`;\n      } else {\n        template += ` (${this.quoteIdentifier('id')})`;\n      }\n\n      if (attribute.onDelete) {\n        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n\n      if (attribute.onUpdate) {\n        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n    }\n\n    return template;\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {};\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n\n    return result;\n  }\n\n  /**\n   * Check whether the statmement is json function or simple path\n   *\n   * @param   {string}  stmt  The statement to validate\n   * @returns {boolean}       true if the given statement is json function\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\n   * @private\n   */\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== 'string') {\n      return false;\n    }\n\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = JSON_FUNCTION_REGEX.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf('(');\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const operatorMatches = JSON_OPERATOR_REGEX.exec(string);\n      if (operatorMatches) {\n        currentIndex += operatorMatches[0].length;\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = TOKEN_CAPTURE_REGEX.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === '(') {\n          openingBrackets++;\n        } else if (capturedToken === ')') {\n          closingBrackets++;\n        } else if (capturedToken === ';') {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    // Check invalid json statement\n    if (hasJsonFunction && (hasInvalidToken || openingBrackets !== closingBrackets)) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n\n    // return true if the statement has valid json function\n    return hasJsonFunction;\n  }\n\n  dataTypeMapping(tableName, attr, dataType) {\n    if (dataType.includes('PRIMARY KEY')) {\n      dataType = dataType.replace('PRIMARY KEY', '');\n    }\n\n    if (dataType.includes('SERIAL')) {\n      if (dataType.includes('BIGINT')) {\n        dataType = dataType.replace('SERIAL', 'BIGSERIAL');\n        dataType = dataType.replace('BIGINT', '');\n      } else if (dataType.includes('SMALLINT')) {\n        dataType = dataType.replace('SERIAL', 'SMALLSERIAL');\n        dataType = dataType.replace('SMALLINT', '');\n      } else {\n        dataType = dataType.replace('INTEGER', '');\n      }\n      dataType = dataType.replace('NOT NULL', '');\n    }\n\n    return dataType;\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {object} table  The table.\n   * @param  {string} schemaName The name of the schema.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  getForeignKeysQuery(table, schemaName) {\n    const tableName = table.tableName || table;\n    return Utils.joinSQLFragments([\n      'SELECT',\n      FOREIGN_KEY_FIELDS,\n      `FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = '${tableName}'`,\n      `AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='${schemaName}'`,\n      'AND REFERENCED_TABLE_NAME IS NOT NULL',\n      ';'\n    ]);\n  }\n\n  /**\n   * Generates an SQL query that returns the foreign key constraint of a given column.\n   *\n   * @param  {object} table  The table.\n   * @param  {string} columnName The name of the column.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  getForeignKeyQuery(table, columnName) {\n    const quotedSchemaName = table.schema ? wrapSingleQuote(table.schema) : '';\n    const quotedTableName = wrapSingleQuote(table.tableName || table);\n    const quotedColumnName = wrapSingleQuote(columnName);\n\n    return Utils.joinSQLFragments([\n      'SELECT',\n      FOREIGN_KEY_FIELDS,\n      'FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE',\n      'WHERE (',\n      [\n        `REFERENCED_TABLE_NAME = ${quotedTableName}`,\n        table.schema && `AND REFERENCED_TABLE_SCHEMA = ${quotedSchemaName}`,\n        `AND REFERENCED_COLUMN_NAME = ${quotedColumnName}`\n      ],\n      ') OR (',\n      [\n        `TABLE_NAME = ${quotedTableName}`,\n        table.schema && `AND TABLE_SCHEMA = ${quotedSchemaName}`,\n        `AND COLUMN_NAME = ${quotedColumnName}`,\n        'AND REFERENCED_TABLE_NAME IS NOT NULL'\n      ],\n      ')'\n    ]);\n  }\n\n  /**\n   * Generates an SQL query that removes a foreign key from a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @param  {string} foreignKey The name of the foreign key constraint.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP FOREIGN KEY',\n      this.quoteIdentifier(foreignKey),\n      ';'\n    ]);\n  }\n\n  addLimitAndOffset(options) {\n    let fragment = [];\n    if (options.offset !== null && options.offset !== undefined && options.offset !== 0) {\n      fragment = fragment.concat([' LIMIT ', this.escape(options.limit), ' OFFSET ', this.escape(options.offset)]);\n    } else if ( options.limit !== null && options.limit !== undefined ) {\n      fragment = [' LIMIT ', this.escape(options.limit)];\n    }\n    return fragment.join('');\n  }\n\n  /**\n   * Quote identifier in sql clause\n   *\n   * @param {string} identifier\n   * @param {boolean} force\n   *\n   * @returns {string}\n   */\n  quoteIdentifier(identifier, force) {\n    const optForceQuote = force || false;\n    const optQuoteIdentifiers = this.options.quoteIdentifiers !== false;\n    const rawIdentifier = Utils.removeTicks(identifier, '\"');\n\n    if (\n      optForceQuote === true ||\n      optQuoteIdentifiers !== false ||\n      identifier.includes('.') ||\n      identifier.includes('->') ||\n      SNOWFLAKE_RESERVED_WORDS.includes(rawIdentifier.toLowerCase())\n    ) {\n      // In Snowflake if tables or attributes are created double-quoted,\n      // they are also case sensitive. If they contain any uppercase\n      // characters, they must always be double-quoted. This makes it\n      // impossible to write queries in portable SQL if tables are created in\n      // this way. Hence, we strip quotes if we don't want case sensitivity.\n      return Utils.addTicks(rawIdentifier, '\"');\n    }\n    return rawIdentifier;\n  }\n}\n\n// private methods\nfunction wrapSingleQuote(identifier) {\n  return Utils.addTicks(identifier, '\\'');\n}\n\nmodule.exports = SnowflakeQueryGenerator;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 25598, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 25603, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/snowflake/query-interface.js"],"sourcesContent":["'use strict';\n\nconst sequelizeErrors = require('../../errors');\nconst { QueryInterface } = require('../abstract/query-interface');\nconst QueryTypes = require('../../query-types');\n\n/**\n * The interface that Sequelize uses to talk with Snowflake database\n */\nclass SnowflakeQueryInterface extends QueryInterface {\n  /**\n   * A wrapper that fixes Snowflake's inability to cleanly remove columns from existing tables if they have a foreign key constraint.\n   *\n   * @override\n   */\n  async removeColumn(tableName, columnName, options) {\n    options = options || {};\n\n    const [results] = await this.sequelize.query(\n      this.queryGenerator.getForeignKeyQuery(tableName.tableName ? tableName : {\n        tableName,\n        schema: this.sequelize.config.database\n      }, columnName),\n      { raw: true, ...options }\n    );\n\n    //Exclude primary key constraint\n    if (results.length && results[0].constraint_name !== 'PRIMARY') {\n      await Promise.all(results.map(constraint => this.sequelize.query(\n        this.queryGenerator.dropForeignKeyQuery(tableName, constraint.constraint_name),\n        { raw: true, ...options }\n      )));\n    }\n\n    return await this.sequelize.query(\n      this.queryGenerator.removeColumnQuery(tableName, columnName),\n      { raw: true, ...options }\n    );\n  }\n\n  /** @override */\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = { ...options };\n\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n\n    const model = options.model;\n    const sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /** @override */\n  async removeConstraint(tableName, constraintName, options) {\n    const sql = this.queryGenerator.showConstraintsQuery(\n      tableName.tableName ? tableName : {\n        tableName,\n        schema: this.sequelize.config.database\n      }, constraintName);\n\n    const constraints = await this.sequelize.query(sql, { ...options,\n      type: this.sequelize.QueryTypes.SHOWCONSTRAINTS });\n\n    const constraint = constraints[0];\n    let query;\n    if (!constraint || !constraint.constraintType) {\n      throw new sequelizeErrors.UnknownConstraintError(\n        {\n          message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n          constraint: constraintName,\n          table: tableName\n        });\n    }\n\n    if (constraint.constraintType === 'FOREIGN KEY') {\n      query = this.queryGenerator.dropForeignKeyQuery(tableName, constraintName);\n    } else {\n      query = this.queryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);\n    }\n\n    return await this.sequelize.query(query, options);\n  }\n}\n\nexports.SnowflakeQueryInterface = SnowflakeQueryInterface;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAEA,MAAM,kBAAkB,QAAQ;AAChC,MAAM,EAAE,cAAA,EAAA,GAAmB,QAAQ;AACnC,MAAM,aAAa,QAAQ;AAK3B,MAAA,gCAAsC,eAAe;IAAA,MAM7C,aAAa,SAAA,EAAW,UAAA,EAAY,OAAA,EAAS;QACjD,UAAU,WAAW,CAAA;QAErB,MAAM,CAAC,QAAA,GAAW,MAAM,IAAA,CAAK,SAAA,CAAU,KAAA,CACrC,IAAA,CAAK,cAAA,CAAe,kBAAA,CAAmB,UAAU,SAAA,GAAY,YAAY;YACvE;YACA,QAAQ,IAAA,CAAK,SAAA,CAAU,MAAA,CAAO,QAAA;QAAA,GAC7B,aACH,eAAA;YAAE,KAAK;QAAA,GAAS;QAIlB,IAAI,QAAQ,MAAA,IAAU,OAAA,CAAQ,EAAA,CAAG,eAAA,KAAoB,WAAW;YAC9D,MAAM,QAAQ,GAAA,CAAI,QAAQ,GAAA,CAAI,CAAA,aAAc,IAAA,CAAK,SAAA,CAAU,KAAA,CACzD,IAAA,CAAK,cAAA,CAAe,mBAAA,CAAoB,WAAW,WAAW,eAAA,GAC9D,eAAA;oBAAE,KAAK;gBAAA,GAAS;QAAA;QAIpB,OAAO,MAAM,IAAA,CAAK,SAAA,CAAU,KAAA,CAC1B,IAAA,CAAK,cAAA,CAAe,iBAAA,CAAkB,WAAW,aACjD,eAAA;YAAE,KAAK;QAAA,GAAS;IAAA;IAAA,MAKd,OAAO,SAAA,EAAW,YAAA,EAAc,YAAA,EAAc,KAAA,EAAO,OAAA,EAAS;QAClE,UAAU,eAAA,CAAA,GAAK;QAEf,QAAQ,IAAA,GAAO,WAAW,MAAA;QAC1B,QAAQ,iBAAA,GAAoB,OAAO,IAAA,CAAK;QAExC,MAAM,QAAQ,QAAQ,KAAA;QACtB,MAAM,MAAM,IAAA,CAAK,cAAA,CAAe,WAAA,CAAY,WAAW,cAAc,MAAM,aAAA,EAAe;QAC1F,OAAO,MAAM,IAAA,CAAK,SAAA,CAAU,KAAA,CAAM,KAAK;IAAA;IAAA,MAInC,iBAAiB,SAAA,EAAW,cAAA,EAAgB,OAAA,EAAS;QACzD,MAAM,MAAM,IAAA,CAAK,cAAA,CAAe,oBAAA,CAC9B,UAAU,SAAA,GAAY,YAAY;YAChC;YACA,QAAQ,IAAA,CAAK,SAAA,CAAU,MAAA,CAAO,QAAA;QAAA,GAC7B;QAEL,MAAM,cAAc,MAAM,IAAA,CAAK,SAAA,CAAU,KAAA,CAAM,KAAK,cAAA,eAAA,CAAA,GAAK,UAAL;YAClD,MAAM,IAAA,CAAK,SAAA,CAAU,UAAA,CAAW,eAAA;QAAA;QAElC,MAAM,aAAa,WAAA,CAAY,EAAA;QAC/B,IAAI;QACJ,IAAI,CAAC,cAAc,CAAC,WAAW,cAAA,EAAgB;YAC7C,MAAM,IAAI,gBAAgB,sBAAA,CACxB;gBACE,SAAS,CAAA,WAAA,EAAc,eAAA,UAAA,EAA2B,UAAA,eAAA,CAAA;gBAClD,YAAY;gBACZ,OAAO;YAAA;QAAA;QAIb,IAAI,WAAW,cAAA,KAAmB,eAAe;YAC/C,QAAQ,IAAA,CAAK,cAAA,CAAe,mBAAA,CAAoB,WAAW;QAAA,OACtD;YACL,QAAQ,IAAA,CAAK,cAAA,CAAe,gBAAA,CAAiB,WAAW,SAAA,EAAW,WAAW,cAAA;QAAA;QAGhF,OAAO,MAAM,IAAA,CAAK,SAAA,CAAU,KAAA,CAAM,OAAO;IAAA;AAAA;AAI7C,QAAQ,uBAAA,GAA0B","ignoreList":[0]}},
    {"offset": {"line": 25679, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 25684, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/dialects/snowflake/index.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').snowflake;\nconst { SnowflakeQueryInterface } = require('./query-interface');\n\nclass SnowflakeDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new SnowflakeQueryInterface(sequelize, this.queryGenerator);\n  }\n}\n\nSnowflakeDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  'VALUES ()': true,\n  'LIMIT ON UPDATE': true,\n  lock: true,\n  forShare: 'LOCK IN SHARE MODE',\n  settingIsolationLevelDuringTransaction: false,\n  inserts: {\n    ignoreDuplicates: ' IGNORE',\n    // disable for now, but could be enable by approach below\n    // https://stackoverflow.com/questions/54828745/how-to-migrate-on-conflict-do-nothing-from-postgresql-to-snowflake\n    updateOnDuplicate: false\n  },\n  index: {\n    collate: false,\n    length: true,\n    parser: true,\n    type: true,\n    using: 1\n  },\n  constraints: {\n    dropConstraint: false,\n    check: false\n  },\n  indexViaAlter: true,\n  indexHints: true,\n  NUMERIC: true,\n  // disable for now, need more work to enable the GEOGRAPHY MAPPING\n  GEOMETRY: false,\n  JSON: false,\n  REGEXP: true,\n  schemas: true\n});\n\nSnowflakeDialect.prototype.defaultVersion = '5.7.0';\nSnowflakeDialect.prototype.Query = Query;\nSnowflakeDialect.prototype.QueryGenerator = QueryGenerator;\nSnowflakeDialect.prototype.DataTypes = DataTypes;\nSnowflakeDialect.prototype.name = 'snowflake';\nSnowflakeDialect.prototype.TICK_CHAR = '\"';\nSnowflakeDialect.prototype.TICK_CHAR_LEFT = SnowflakeDialect.prototype.TICK_CHAR;\nSnowflakeDialect.prototype.TICK_CHAR_RIGHT = SnowflakeDialect.prototype.TICK_CHAR;\n\nmodule.exports = SnowflakeDialect;\n"],"names":[],"mappings":";AAEA,MAAM,IAAI,QAAQ;AAClB,MAAM,kBAAkB,QAAQ;AAChC,MAAM,oBAAoB,QAAQ;AAClC,MAAM,QAAQ,QAAQ;AACtB,MAAM,iBAAiB,QAAQ;AAC/B,MAAM,YAAY,QAAQ,8FAAoB,SAAA;AAC9C,MAAM,EAAE,uBAAA,EAAA,GAA4B,QAAQ;AAE5C,MAAA,yBAA+B,gBAAgB;IAC7C,YAAY,SAAA,CAAW;QACrB,KAAA;QACA,IAAA,CAAK,SAAA,GAAY;QACjB,IAAA,CAAK,iBAAA,GAAoB,IAAI,kBAAkB,IAAA,EAAM;QACrD,IAAA,CAAK,cAAA,GAAiB,IAAI,eAAe;YACvC,UAAU,IAAA;YACV;QAAA;QAEF,IAAA,CAAK,cAAA,GAAiB,IAAI,wBAAwB,WAAW,IAAA,CAAK,cAAA;IAAA;AAAA;AAItE,iBAAiB,SAAA,CAAU,QAAA,GAAW,EAAE,KAAA,CAAM,EAAE,SAAA,CAAU,gBAAgB,SAAA,CAAU,QAAA,GAAW;IAC7F,aAAa;IACb,mBAAmB;IACnB,MAAM;IACN,UAAU;IACV,wCAAwC;IACxC,SAAS;QACP,kBAAkB;QAGlB,mBAAmB;IAAA;IAErB,OAAO;QACL,SAAS;QACT,QAAQ;QACR,QAAQ;QACR,MAAM;QACN,OAAO;IAAA;IAET,aAAa;QACX,gBAAgB;QAChB,OAAO;IAAA;IAET,eAAe;IACf,YAAY;IACZ,SAAS;IAET,UAAU;IACV,MAAM;IACN,QAAQ;IACR,SAAS;AAAA;AAGX,iBAAiB,SAAA,CAAU,cAAA,GAAiB;AAC5C,iBAAiB,SAAA,CAAU,KAAA,GAAQ;AACnC,iBAAiB,SAAA,CAAU,cAAA,GAAiB;AAC5C,iBAAiB,SAAA,CAAU,SAAA,GAAY;AACvC,iBAAiB,SAAA,CAAU,IAAA,GAAO;AAClC,iBAAiB,SAAA,CAAU,SAAA,GAAY;AACvC,iBAAiB,SAAA,CAAU,cAAA,GAAiB,iBAAiB,SAAA,CAAU,SAAA;AACvE,iBAAiB,SAAA,CAAU,eAAA,GAAkB,iBAAiB,SAAA,CAAU,SAAA;AAExE,OAAO,OAAA,GAAU","ignoreList":[0]}},
    {"offset": {"line": 25742, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 25752, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/sequelize.js"],"sourcesContent":["'use strict';\n\nconst url = require('url');\nconst path = require('path');\nconst pgConnectionString = require('pg-connection-string');\nconst retry = require('retry-as-promised').default;\nconst _ = require('lodash');\n\nconst Utils = require('./utils');\nconst Model = require('./model');\nconst DataTypes = require('./data-types');\nconst Deferrable = require('./deferrable');\nconst ModelManager = require('./model-manager');\nconst Transaction = require('./transaction');\nconst QueryTypes = require('./query-types');\nconst TableHints = require('./table-hints');\nconst IndexHints = require('./index-hints');\nconst sequelizeErrors = require('./errors');\nconst Hooks = require('./hooks');\nconst Association = require('./associations/index');\nconst Validator = require('./utils/validator-extras').validator;\nconst Op = require('./operators');\nconst deprecations = require('./utils/deprecations');\nconst { QueryInterface } = require('./dialects/abstract/query-interface');\nconst { BelongsTo } = require('./associations/belongs-to');\nconst HasOne = require('./associations/has-one');\nconst { BelongsToMany } = require('./associations/belongs-to-many');\nconst { HasMany } = require('./associations/has-many');\nconst { withSqliteForeignKeysOff } = require('./dialects/sqlite/sqlite-utils');\nconst { injectReplacements } = require('./utils/sql');\n\n/**\n * This is the main class, the entry point to sequelize.\n */\nclass Sequelize {\n  /**\n   * Instantiate sequelize with name of database, username and password.\n   *\n   * @example\n   * // without password / with blank password\n   * const sequelize = new Sequelize('database', 'username', null, {\n   *   dialect: 'mysql'\n   * })\n   *\n   * // with password and options\n   * const sequelize = new Sequelize('my_database', 'john', 'doe', {\n   *   dialect: 'postgres'\n   * })\n   *\n   * // with database, username, and password in the options object\n   * const sequelize = new Sequelize({ database, username, password, dialect: 'mssql' });\n   *\n   * // with uri\n   * const sequelize = new Sequelize('mysql://localhost:3306/database', {})\n   *\n   * // option examples\n   * const sequelize = new Sequelize('database', 'username', 'password', {\n   *   // the sql dialect of the database\n   *   // currently supported: 'mysql', 'sqlite', 'postgres', 'mssql'\n   *   dialect: 'mysql',\n   *\n   *   // custom host; default: localhost\n   *   host: 'my.server.tld',\n   *   // for postgres, you can also specify an absolute path to a directory\n   *   // containing a UNIX socket to connect over\n   *   // host: '/sockets/psql_sockets'.\n   *\n   *   // custom port; default: dialect default\n   *   port: 12345,\n   *\n   *   // custom protocol; default: 'tcp'\n   *   // postgres only, useful for Heroku\n   *   protocol: null,\n   *\n   *   // disable logging or provide a custom logging function; default: console.log\n   *   logging: false,\n   *\n   *   // you can also pass any dialect options to the underlying dialect library\n   *   // - default is empty\n   *   // - currently supported: 'mysql', 'postgres', 'mssql'\n   *   dialectOptions: {\n   *     socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock',\n   *     supportBigNumbers: true,\n   *     bigNumberStrings: true\n   *   },\n   *\n   *   // the storage engine for sqlite\n   *   // - default ':memory:'\n   *   storage: 'path/to/database.sqlite',\n   *\n   *   // disable inserting undefined values as NULL\n   *   // - default: false\n   *   omitNull: true,\n   *\n   *   // a flag for using a native library or not.\n   *   // in the case of 'pg' -- set this to true will allow SSL support\n   *   // - default: false\n   *   native: true,\n   *\n   *   // A flag that defines if connection should be over ssl or not\n   *   // - default: undefined\n   *   ssl: true,\n   *\n   *   // Specify options, which are used when sequelize.define is called.\n   *   // The following example:\n   *   //   define: { timestamps: false }\n   *   // is basically the same as:\n   *   //   Model.init(attributes, { timestamps: false });\n   *   //   sequelize.define(name, attributes, { timestamps: false });\n   *   // so defining the timestamps for each model will be not necessary\n   *   define: {\n   *     underscored: false,\n   *     freezeTableName: false,\n   *     charset: 'utf8',\n   *     dialectOptions: {\n   *       collate: 'utf8_general_ci'\n   *     },\n   *     timestamps: true\n   *   },\n   *\n   *   // similar for sync: you can define this to always force sync for models\n   *   sync: { force: true },\n   *\n   *   // pool configuration used to pool database connections\n   *   pool: {\n   *     max: 5,\n   *     idle: 30000,\n   *     acquire: 60000,\n   *   },\n   *\n   *   // isolation level of each transaction\n   *   // defaults to dialect default\n   *   isolationLevel: Transaction.ISOLATION_LEVELS.REPEATABLE_READ\n   * })\n   *\n   * @param {string}   [database] The name of the database\n   * @param {string}   [username=null] The username which is used to authenticate against the database.\n   * @param {string}   [password=null] The password which is used to authenticate against the database. Supports SQLCipher encryption for SQLite.\n   * @param {object}   [options={}] An object with options.\n   * @param {string}   [options.host='localhost'] The host of the relational database.\n   * @param {number}   [options.port] The port of the relational database.\n   * @param {string}   [options.username=null] The username which is used to authenticate against the database.\n   * @param {string}   [options.password=null] The password which is used to authenticate against the database.\n   * @param {string}   [options.database=null] The name of the database.\n   * @param {string}   [options.dialect] The dialect of the database you are connecting to. One of mysql, postgres, sqlite, db2, mariadb and mssql.\n   * @param {string}   [options.dialectModule=null] If specified, use this dialect library. For example, if you want to use pg.js instead of pg when connecting to a pg database, you should specify 'require(\"pg.js\")' here\n   * @param {string}   [options.dialectModulePath=null] If specified, load the dialect library from this path. For example, if you want to use pg.js instead of pg when connecting to a pg database, you should specify '/path/to/pg.js' here\n   * @param {object}   [options.dialectOptions] An object of additional options, which are passed directly to the connection library\n   * @param {string}   [options.storage] Only used by sqlite. Defaults to ':memory:'\n   * @param {string}   [options.protocol='tcp'] The protocol of the relational database.\n   * @param {object}   [options.define={}] Default options for model definitions. See {@link Model.init}.\n   * @param {object}   [options.query={}] Default options for sequelize.query\n   * @param {string}   [options.schema=null] A schema to use\n   * @param {object}   [options.set={}] Default options for sequelize.set\n   * @param {object}   [options.sync={}] Default options for sequelize.sync\n   * @param {string}   [options.timezone='+00:00'] The timezone used when converting a date from the database into a JavaScript date. The timezone is also used to SET TIMEZONE when connecting to the server, to ensure that the result of NOW, CURRENT_TIMESTAMP and other time related functions have in the right timezone. For best cross platform performance use the format +/-HH:MM. Will also accept string versions of timezones used by moment.js (e.g. 'America/Los_Angeles'); this is useful to capture daylight savings time changes.\n   * @param {string|boolean} [options.clientMinMessages='warning'] (Deprecated) The PostgreSQL `client_min_messages` session parameter. Set to `false` to not override the database's default.\n   * @param {boolean}  [options.standardConformingStrings=true] The PostgreSQL `standard_conforming_strings` session parameter. Set to `false` to not set the option. WARNING: Setting this to false may expose vulnerabilities and is not recommended!\n   * @param {Function} [options.logging=console.log] A function that gets executed every time Sequelize would log something. Function may receive multiple parameters but only first one is printed by `console.log`. To print all values use `(...msg) => console.log(msg)`\n   * @param {boolean}  [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).\n   * @param {boolean}  [options.omitNull=false] A flag that defines if null values should be passed as values to CREATE/UPDATE SQL queries or not.\n   * @param {boolean}  [options.native=false] A flag that defines if native library shall be used or not. Currently only has an effect for postgres\n   * @param {boolean}  [options.ssl=undefined] A flag that defines if connection should be over ssl or not\n   * @param {boolean}  [options.replication=false] Use read / write replication. To enable replication, pass an object, with two properties, read and write. Write should be an object (a single server for handling writes), and read an array of object (several servers to handle reads). Each read/write server can have the following properties: `host`, `port`, `username`, `password`, `database`\n   * @param {object}   [options.pool] sequelize connection pool configuration\n   * @param {number}   [options.pool.max=5] Maximum number of connection in pool\n   * @param {number}   [options.pool.min=0] Minimum number of connection in pool\n   * @param {number}   [options.pool.idle=10000] The maximum time, in milliseconds, that a connection can be idle before being released.\n   * @param {number}   [options.pool.acquire=60000] The maximum time, in milliseconds, that pool will try to get connection before throwing error\n   * @param {number}   [options.pool.evict=1000] The time interval, in milliseconds, after which sequelize-pool will remove idle connections.\n   * @param {Function} [options.pool.validate] A function that validates a connection. Called with client. The default function checks that client is an object, and that its state is not disconnected\n   * @param {number}   [options.pool.maxUses=Infinity] The number of times a connection can be used before discarding it for a replacement, [`used for eventual cluster rebalancing`](https://github.com/sequelize/sequelize-pool).\n   * @param {boolean}  [options.quoteIdentifiers=true] Set to `false` to make table names and attributes case-insensitive on Postgres and skip double quoting of them.  WARNING: Setting this to false may expose vulnerabilities and is not recommended!\n   * @param {string}   [options.transactionType='DEFERRED'] Set the default transaction type. See `Sequelize.Transaction.TYPES` for possible options. Sqlite only.\n   * @param {string}   [options.isolationLevel] Set the default transaction isolation level. See `Sequelize.Transaction.ISOLATION_LEVELS` for possible options.\n   * @param {object}   [options.retry] Set of flags that control when a query is automatically retried. Accepts all options for [`retry-as-promised`](https://github.com/mickhansen/retry-as-promised).\n   * @param {Array}    [options.retry.match] Only retry a query if the error matches one of these strings.\n   * @param {number}   [options.retry.max] How many times a failing query is automatically retried.  Set to 0 to disable retrying on SQL_BUSY error.\n   * @param {boolean}  [options.typeValidation=false] Run built-in type validators on insert and update, and select with where clause, e.g. validate that arguments passed to integer fields are integer-like.\n   * @param {object}   [options.operatorsAliases] String based operator alias. Pass object to limit set of aliased operators.\n   * @param {object}   [options.hooks] An object of global hook functions that are called before and after certain lifecycle events. Global hooks will run after any model-specific hooks defined for the same event (See `Sequelize.Model.init()` for a list).  Additionally, `beforeConnect()`, `afterConnect()`, `beforeDisconnect()`, and `afterDisconnect()` hooks may be defined here.\n   * @param {boolean}  [options.minifyAliases=false] A flag that defines if aliases should be minified (mostly useful to avoid Postgres alias character limit of 64)\n   * @param {boolean}  [options.logQueryParameters=false] A flag that defines if show bind parameters in log.\n   */\n  constructor(database, username, password, options) {\n    let config;\n\n    if (arguments.length === 1 && typeof database === 'object') {\n      // new Sequelize({ ... options })\n      options = database;\n      config = _.pick(options, 'host', 'port', 'database', 'username', 'password');\n    } else if (arguments.length === 1 && typeof database === 'string' || arguments.length === 2 && typeof username === 'object') {\n      // new Sequelize(URI, { ... options })\n\n      config = {};\n      options = username || {};\n\n      const urlParts = url.parse(arguments[0], true);\n\n      options.dialect = urlParts.protocol.replace(/:$/, '');\n      options.host = urlParts.hostname;\n\n      if (options.dialect === 'sqlite' && urlParts.pathname && !urlParts.pathname.startsWith('/:memory')) {\n        const storagePath = path.join(options.host, urlParts.pathname);\n        options.storage = path.resolve(options.storage || storagePath);\n      }\n\n      if (urlParts.pathname) {\n        config.database = urlParts.pathname.replace(/^\\//, '');\n      }\n\n      if (urlParts.port) {\n        options.port = urlParts.port;\n      }\n\n      if (urlParts.auth) {\n        const authParts = urlParts.auth.split(':');\n\n        config.username = authParts[0];\n\n        if (authParts.length > 1)\n          config.password = authParts.slice(1).join(':');\n      }\n\n      if (urlParts.query) {\n        // Allow host query argument to override the url host.\n        // Enables specifying domain socket hosts which cannot be specified via the typical\n        // host part of a url.\n        if (urlParts.query.host) {\n          options.host = urlParts.query.host;\n        }\n\n        if (options.dialectOptions) {\n          Object.assign(options.dialectOptions, urlParts.query);\n        } else {\n          options.dialectOptions = urlParts.query;\n          if (urlParts.query.options) {\n            try {\n              const o = JSON.parse(urlParts.query.options);\n              options.dialectOptions.options = o;\n            } catch (e) {\n              // Nothing to do, string is not a valid JSON\n              // an thus does not need any further processing\n            }\n          }\n        }\n      }\n\n      // For postgres, we can use this helper to load certs directly from the\n      // connection string.\n      if (['postgres', 'postgresql'].includes(options.dialect)) {\n        Object.assign(options.dialectOptions, pgConnectionString.parse(arguments[0]));\n      }\n    } else {\n      // new Sequelize(database, username, password, { ... options })\n      options = options || {};\n      config = { database, username, password };\n    }\n\n    Sequelize.runHooks('beforeInit', config, options);\n\n    this.options = {\n      dialect: null,\n      dialectModule: null,\n      dialectModulePath: null,\n      host: 'localhost',\n      protocol: 'tcp',\n      define: {},\n      query: {},\n      sync: {},\n      timezone: '+00:00',\n      standardConformingStrings: true,\n      // eslint-disable-next-line no-console\n      logging: console.log,\n      omitNull: false,\n      native: false,\n      replication: false,\n      ssl: undefined,\n      pool: {},\n      quoteIdentifiers: true,\n      hooks: {},\n      retry: {\n        max: 5,\n        match: [\n          'SQLITE_BUSY: database is locked'\n        ]\n      },\n      transactionType: Transaction.TYPES.DEFERRED,\n      isolationLevel: null,\n      databaseVersion: 0,\n      typeValidation: false,\n      benchmark: false,\n      minifyAliases: false,\n      logQueryParameters: false,\n      attributeBehavior: 'throw',\n      ...options\n    };\n\n    if (!this.options.dialect) {\n      throw new Error('Dialect needs to be explicitly supplied as of v4.0.0');\n    }\n\n    if (this.options.dialect === 'postgresql') {\n      this.options.dialect = 'postgres';\n    }\n\n    if (this.options.dialect === 'sqlite' && this.options.timezone !== '+00:00') {\n      throw new Error('Setting a custom timezone is not supported by SQLite, dates are always returned as UTC. Please remove the custom timezone parameter.');\n    }\n\n    if (this.options.logging === true) {\n      deprecations.noTrueLogging();\n      // eslint-disable-next-line no-console\n      this.options.logging = console.log;\n    }\n\n    this._setupHooks(options.hooks);\n\n    this.config = {\n      database: config.database || this.options.database,\n      username: config.username || this.options.username,\n      password: config.password || this.options.password || null,\n      host: config.host || this.options.host,\n      port: config.port || this.options.port,\n      pool: this.options.pool,\n      protocol: this.options.protocol,\n      native: this.options.native,\n      ssl: this.options.ssl,\n      replication: this.options.replication,\n      dialectModule: this.options.dialectModule,\n      dialectModulePath: this.options.dialectModulePath,\n      keepDefaultTimezone: this.options.keepDefaultTimezone,\n      dialectOptions: this.options.dialectOptions\n    };\n\n    let Dialect;\n    // Requiring the dialect in a switch-case to keep the\n    // require calls static. (Browserify fix)\n    switch (this.getDialect()) {\n      case 'mariadb':\n        Dialect = require('./dialects/mariadb');\n        break;\n      case 'mssql':\n        Dialect = require('./dialects/mssql');\n        break;\n      case 'mysql':\n        Dialect = require('./dialects/mysql');\n        break;\n      case 'oracle':\n        Dialect = require('./dialects/oracle');\n        break;\n      case 'postgres':\n        Dialect = require('./dialects/postgres');\n        break;\n      case 'sqlite':\n        Dialect = require('./dialects/sqlite');\n        break;\n      case 'db2':\n        Dialect = require('./dialects/db2');\n        break;\n      case 'snowflake':\n        Dialect = require('./dialects/snowflake');\n        break;\n      default:\n        throw new Error(`The dialect ${this.getDialect()} is not supported. Supported dialects: mssql, mariadb, mysql, oracle, postgres, db2 and sqlite.`);\n    }\n\n    this.dialect = new Dialect(this);\n    this.dialect.queryGenerator.typeValidation = options.typeValidation;\n\n    if (_.isPlainObject(this.options.operatorsAliases)) {\n      deprecations.noStringOperators();\n      this.dialect.queryGenerator.setOperatorsAliases(this.options.operatorsAliases);\n    } else if (typeof this.options.operatorsAliases === 'boolean') {\n      deprecations.noBoolOperatorAliases();\n    }\n\n    this.queryInterface = this.dialect.queryInterface;\n\n    /**\n     * Models are stored here under the name given to `sequelize.define`\n     */\n    this.models = {};\n    this.modelManager = new ModelManager(this);\n    this.connectionManager = this.dialect.connectionManager;\n\n    Sequelize.runHooks('afterInit', this);\n  }\n\n  /**\n   * Refresh data types and parsers.\n   *\n   * @private\n   */\n  refreshTypes() {\n    this.connectionManager.refreshTypeParser(DataTypes);\n  }\n\n  /**\n   * Returns the specified dialect.\n   *\n   * @returns {string} The specified dialect.\n   */\n  getDialect() {\n    return this.options.dialect;\n  }\n\n  /**\n   * Returns the database name.\n   *\n   * @returns {string} The database name.\n   */\n  getDatabaseName() {\n    return this.config.database;\n  }\n\n  /**\n   * Returns an instance of QueryInterface.\n   *\n   * @returns {QueryInterface} An instance (singleton) of QueryInterface.\n   */\n  getQueryInterface() {\n    return this.queryInterface;\n  }\n\n  /**\n   * Define a new model, representing a table in the database.\n   *\n   * The table columns are defined by the object that is given as the second argument. Each key of the object represents a column\n   *\n   * @param {string} modelName The name of the model. The model will be stored in `sequelize.models` under this name\n   * @param {object} attributes An object, where each attribute is a column of the table. See {@link Model.init}\n   * @param {object} [options] These options are merged with the default define options provided to the Sequelize constructor and passed to Model.init()\n   *\n   * @see\n   * {@link Model.init} for a more comprehensive specification of the `options` and `attributes` objects.\n   * @see\n   * <a href=\"/master/manual/model-basics.html\">Model Basics</a> guide\n   *\n   * @returns {Model} Newly defined model\n   *\n   * @example\n   * sequelize.define('modelName', {\n   *   columnA: {\n   *       type: Sequelize.BOOLEAN,\n   *       validate: {\n   *         is: [\"[a-z]\",'i'],        // will only allow letters\n   *         max: 23,                  // only allow values <= 23\n   *         isIn: {\n   *           args: [['en', 'zh']],\n   *           msg: \"Must be English or Chinese\"\n   *         }\n   *       },\n   *       field: 'column_a'\n   *   },\n   *   columnB: Sequelize.STRING,\n   *   columnC: 'MY VERY OWN COLUMN TYPE'\n   * });\n   *\n   * sequelize.models.modelName // The model will now be available in models under the name given to define\n   */\n  define(modelName, attributes, options = {}) {\n    options.modelName = modelName;\n    options.sequelize = this;\n\n    const model = class extends Model {};\n\n    model.init(attributes, options);\n\n    return model;\n  }\n\n  /**\n   * Fetch a Model which is already defined\n   *\n   * @param {string} modelName The name of a model defined with Sequelize.define\n   *\n   * @throws Will throw an error if the model is not defined (that is, if sequelize#isDefined returns false)\n   * @returns {Model} Specified model\n   */\n  model(modelName) {\n    if (!this.isDefined(modelName)) {\n      throw new Error(`${modelName} has not been defined`);\n    }\n\n    return this.modelManager.getModel(modelName);\n  }\n\n  /**\n   * Checks whether a model with the given name is defined\n   *\n   * @param {string} modelName The name of a model defined with Sequelize.define\n   *\n   * @returns {boolean} Returns true if model is already defined, otherwise false\n   */\n  isDefined(modelName) {\n    return !!this.modelManager.models.find(model => model.name === modelName);\n  }\n\n  /**\n   * Execute a query on the DB, optionally bypassing all the Sequelize goodness.\n   *\n   * By default, the function will return two arguments: an array of results, and a metadata object, containing number of affected rows etc.\n   *\n   * If you are running a type of query where you don't need the metadata, for example a `SELECT` query, you can pass in a query type to make sequelize format the results:\n   *\n   * ```js\n   * const [results, metadata] = await sequelize.query('SELECT...'); // Raw query - use array destructuring\n   *\n   * const results = await sequelize.query('SELECT...', { type: sequelize.QueryTypes.SELECT }); // SELECT query - no destructuring\n   * ```\n   *\n   * @param {string}          sql\n   * @param {object}          [options={}] Query options.\n   * @param {boolean}         [options.raw] If true, sequelize will not try to format the results of the query, or build an instance of a model from the result\n   * @param {Transaction}     [options.transaction=null] The transaction that the query should be executed under\n   * @param {QueryTypes}      [options.type='RAW'] The type of query you are executing. The query type affects how results are formatted before they are passed back. The type is a string, but `Sequelize.QueryTypes` is provided as convenience shortcuts.\n   * @param {boolean}         [options.nest=false] If true, transforms objects with `.` separated property names into nested objects using [dottie.js](https://github.com/mickhansen/dottie.js). For example { 'user.username': 'john' } becomes { user: { username: 'john' }}. When `nest` is true, the query type is assumed to be `'SELECT'`, unless otherwise specified\n   * @param {boolean}         [options.plain=false] Sets the query type to `SELECT` and return a single row\n   * @param {object|Array}    [options.replacements] Either an object of named parameter replacements in the format `:param` or an array of unnamed replacements to replace `?` in your SQL.\n   * @param {object|Array}    [options.bind] Either an object of named bind parameter in the format `_param` or an array of unnamed bind parameter to replace `$1, $2, ...` in your SQL.\n   * @param {boolean}         [options.useMaster=false] Force the query to use the write pool, regardless of the query type.\n   * @param {Function}        [options.logging=false] A function that gets executed while running the query to log the sql.\n   * @param {Model}           [options.instance] A sequelize model instance whose Model is to be used to build the query result\n   * @param {typeof Model}    [options.model] A sequelize model used to build the returned model instances\n   * @param {object}          [options.retry] Set of flags that control when a query is automatically retried. Accepts all options for [`retry-as-promised`](https://github.com/mickhansen/retry-as-promised).\n   * @param {Array}           [options.retry.match] Only retry a query if the error matches one of these strings.\n   * @param {Integer}         [options.retry.max] How many times a failing query is automatically retried.\n   * @param {string}          [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)\n   * @param {boolean}         [options.supportsSearchPath] If false do not prepend the query with the search_path (Postgres only)\n   * @param {boolean}         [options.mapToModel=false] Map returned fields to model's fields if `options.model` or `options.instance` is present. Mapping will occur before building the model instance.\n   * @param {object}          [options.fieldMap] Map returned fields to arbitrary names for `SELECT` query type.\n   * @param {boolean}         [options.rawErrors=false] Set to `true` to cause errors coming from the underlying connection/database library to be propagated unmodified and unformatted. Else, the default behavior (=false) is to reinterpret errors as sequelize.errors.BaseError objects.\n   *\n   * @returns {Promise}\n   *\n   * @see {@link Model.build} for more information about instance option.\n   */\n\n  async query(sql, options) {\n    options = { ...this.options.query, ...options };\n\n    if (options.instance && !options.model) {\n      options.model = options.instance.constructor;\n    }\n\n    if (!options.instance && !options.model) {\n      options.raw = true;\n    }\n\n    // map raw fields to model attributes\n    if (options.mapToModel) {\n      options.fieldMap = _.get(options, 'model.fieldAttributeMap', {});\n    }\n\n    options = _.defaults(options, {\n      // eslint-disable-next-line no-console\n      logging: Object.prototype.hasOwnProperty.call(this.options, 'logging') ? this.options.logging : console.log,\n      searchPath: Object.prototype.hasOwnProperty.call(this.options, 'searchPath') ? this.options.searchPath : 'DEFAULT'\n    });\n\n    if (!options.type) {\n      if (options.model || options.nest || options.plain) {\n        options.type = QueryTypes.SELECT;\n      } else {\n        options.type = QueryTypes.RAW;\n      }\n    }\n\n    //if dialect doesn't support search_path or dialect option\n    //to prepend searchPath is not true delete the searchPath option\n    if (\n      !this.dialect.supports.searchPath ||\n      !this.options.dialectOptions ||\n      !this.options.dialectOptions.prependSearchPath ||\n      options.supportsSearchPath === false\n    ) {\n      delete options.searchPath;\n    } else if (!options.searchPath) {\n      //if user wants to always prepend searchPath (dialectOptions.preprendSearchPath = true)\n      //then set to DEFAULT if none is provided\n      options.searchPath = 'DEFAULT';\n    }\n\n    if (typeof sql === 'object') {\n      if (sql.values !== undefined) {\n        if (options.replacements !== undefined) {\n          throw new Error('Both `sql.values` and `options.replacements` cannot be set at the same time');\n        }\n        options.replacements = sql.values;\n      }\n\n      if (sql.bind !== undefined) {\n        if (options.bind !== undefined) {\n          throw new Error('Both `sql.bind` and `options.bind` cannot be set at the same time');\n        }\n        options.bind = sql.bind;\n      }\n\n      if (sql.query !== undefined) {\n        sql = sql.query;\n      }\n    }\n\n    sql = sql.trim();\n\n    if (options.replacements && options.bind) {\n      throw new Error('Both `replacements` and `bind` cannot be set at the same time');\n    }\n\n    if (options.replacements) {\n      sql = injectReplacements(sql, this.dialect, options.replacements);\n    }\n\n    let bindParameters;\n\n    if (options.bind) {\n      [sql, bindParameters] = this.dialect.Query.formatBindParameters(sql, options.bind, this.options.dialect);\n    }\n\n    const checkTransaction = () => {\n      if (options.transaction && options.transaction.finished && !options.completesTransaction) {\n        const error = new Error(`${options.transaction.finished} has been called on this transaction(${options.transaction.id}), you can no longer use it. (The rejected query is attached as the 'sql' property of this error)`);\n        error.sql = sql;\n        throw error;\n      }\n    };\n\n    const retryOptions = { ...this.options.retry, ...options.retry };\n\n    return retry(async () => {\n      if (options.transaction === undefined && Sequelize._cls) {\n        options.transaction = Sequelize._cls.get('transaction');\n      }\n\n      checkTransaction();\n\n      const connection = await (options.transaction ? options.transaction.connection : this.connectionManager.getConnection(options));\n\n      if (this.options.dialect === 'db2' && options.alter) {\n        if (options.alter.drop === false) {\n          connection.dropTable = false;\n        }\n      }\n      const query = new this.dialect.Query(connection, this, options);\n\n      try {\n        await this.runHooks('beforeQuery', options, query);\n        checkTransaction();\n        return await query.run(sql, bindParameters);\n      } finally {\n        await this.runHooks('afterQuery', options, query);\n        if (!options.transaction) {\n          this.connectionManager.releaseConnection(connection);\n        }\n      }\n    }, retryOptions);\n  }\n\n  /**\n   * Execute a query which would set an environment or user variable. The variables are set per connection, so this function needs a transaction.\n   * Only works for MySQL or MariaDB.\n   *\n   * @param {object}        variables Object with multiple variables.\n   * @param {object}        [options] query options.\n   * @param {Transaction}   [options.transaction] The transaction that the query should be executed under\n   *\n   * @memberof Sequelize\n   *\n   * @returns {Promise}\n   */\n  async set(variables, options) {\n\n    // Prepare options\n    options = { ...this.options.set, ...typeof options === 'object' && options };\n\n    if (!['mysql', 'mariadb'].includes(this.options.dialect)) {\n      throw new Error('sequelize.set is only supported for mysql or mariadb');\n    }\n    if (!options.transaction || !(options.transaction instanceof Transaction) ) {\n      throw new TypeError('options.transaction is required');\n    }\n\n    // Override some options, since this isn't a SELECT\n    options.raw = true;\n    options.plain = true;\n    options.type = 'SET';\n\n    // Generate SQL Query\n    const query =\n      `SET ${\n        _.map(variables, (v, k) => `@${k} := ${typeof v === 'string' ? `\"${v}\"` : v}`).join(', ')}`;\n\n    return await this.query(query, options);\n  }\n\n  /**\n   * Escape value.\n   *\n   * @param {string} value string value to escape\n   *\n   * @returns {string}\n   */\n  escape(value) {\n    return this.dialect.queryGenerator.escape(value);\n  }\n\n  /**\n   * Create a new database schema.\n   *\n   * **Note:** this is a schema in the [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),\n   * not a database table. In mysql and sqlite, this command will do nothing.\n   *\n   * @see\n   * {@link Model.schema}\n   *\n   * @param {string} schema Name of the schema\n   * @param {object} [options={}] query options\n   * @param {boolean|Function} [options.logging] A function that logs sql queries, or false for no logging\n   *\n   * @returns {Promise}\n   */\n  async createSchema(schema, options) {\n    return await this.getQueryInterface().createSchema(schema, options);\n  }\n\n  /**\n   * Show all defined schemas\n   *\n   * **Note:** this is a schema in the [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),\n   * not a database table. In mysql and sqlite, this will show all tables.\n   *\n   * @param {object} [options={}] query options\n   * @param {boolean|Function} [options.logging] A function that logs sql queries, or false for no logging\n   *\n   * @returns {Promise}\n   */\n  async showAllSchemas(options) {\n    return await this.getQueryInterface().showAllSchemas(options);\n  }\n\n  /**\n   * Drop a single schema\n   *\n   * **Note:** this is a schema in the [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),\n   * not a database table. In mysql and sqlite, this drop a table matching the schema name\n   *\n   * @param {string} schema Name of the schema\n   * @param {object} [options={}] query options\n   * @param {boolean|Function} [options.logging] A function that logs sql queries, or false for no logging\n   *\n   * @returns {Promise}\n   */\n  async dropSchema(schema, options) {\n    return await this.getQueryInterface().dropSchema(schema, options);\n  }\n\n  /**\n   * Drop all schemas.\n   *\n   * **Note:** this is a schema in the [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),\n   * not a database table. In mysql and sqlite, this is the equivalent of drop all tables.\n   *\n   * @param {object} [options={}] query options\n   * @param {boolean|Function} [options.logging] A function that logs sql queries, or false for no logging\n   *\n   * @returns {Promise}\n   */\n  async dropAllSchemas(options) {\n    return await this.getQueryInterface().dropAllSchemas(options);\n  }\n\n  /**\n   * Sync all defined models to the DB.\n   *\n   * @param {object} [options={}] sync options\n   * @param {boolean} [options.force=false] If force is true, each Model will run `DROP TABLE IF EXISTS`, before it tries to create its own table\n   * @param {RegExp} [options.match] Match a regex against the database name before syncing, a safety check for cases where force: true is used in tests but not live code\n   * @param {boolean|Function} [options.logging=console.log] A function that logs sql queries, or false for no logging\n   * @param {string} [options.schema='public'] The schema that the tables should be created in. This can be overridden for each table in sequelize.define\n   * @param {string} [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)\n   * @param {boolean} [options.hooks=true] If hooks is true then beforeSync, afterSync, beforeBulkSync, afterBulkSync hooks will be called\n   * @param {boolean|object} [options.alter=false] Alters tables to fit models. Provide an object for additional configuration. Not recommended for production use. If not further configured deletes data in columns that were removed or had their type changed in the model.\n   * @param {boolean} [options.alter.drop=true] Prevents any drop statements while altering a table when set to `false`\n   *\n   * @returns {Promise}\n   */\n  async sync(options) {\n    options = {\n      ...this.options,\n      ...this.options.sync,\n      ...options,\n      hooks: options ? options.hooks !== false : true\n    };\n\n    if (options.match) {\n      if (!options.match.test(this.config.database)) {\n        throw new Error(`Database \"${this.config.database}\" does not match sync match parameter \"${options.match}\"`);\n      }\n    }\n\n    if (options.hooks) {\n      await this.runHooks('beforeBulkSync', options);\n    }\n\n    if (options.force) {\n      await this.drop(options);\n    }\n\n    // no models defined, just authenticate\n    if (this.modelManager.models.length === 0) {\n      await this.authenticate(options);\n    } else {\n      const models = this.modelManager.getModelsTopoSortedByForeignKey();\n      if (models == null) {\n        return this._syncModelsWithCyclicReferences(options);\n      }\n\n      // reverse to start with the one model that does not depend on anything\n      models.reverse();\n\n      // Topologically sort by foreign key constraints to give us an appropriate\n      // creation order\n      for (const model of models) {\n        await model.sync(options);\n      }\n    }\n\n    if (options.hooks) {\n      await this.runHooks('afterBulkSync', options);\n    }\n\n    return this;\n  }\n\n  /**\n   * Used instead of sync() when two models reference each-other, so their foreign keys cannot be created immediately.\n   *\n   * @param {object} options - sync options\n   * @private\n   */\n  async _syncModelsWithCyclicReferences(options) {\n    if (this.dialect.name === 'sqlite') {\n      // Optimisation: no need to do this in two passes in SQLite because we can temporarily disable foreign keys\n      await withSqliteForeignKeysOff(this, options, async () => {\n        for (const model of this.modelManager.models) {\n          await model.sync(options);\n        }\n      });\n\n      return;\n    }\n\n    // create all tables, but don't create foreign key constraints\n    for (const model of this.modelManager.models) {\n      await model.sync({ ...options, withoutForeignKeyConstraints: true });\n    }\n\n    // add foreign key constraints\n    for (const model of this.modelManager.models) {\n      await model.sync({ ...options, force: false, alter: true });\n    }\n  }\n\n  /**\n   * Truncate all tables defined through the sequelize models.\n   * This is done by calling `Model.truncate()` on each model.\n   *\n   * @param {object} [options] The options passed to Model.destroy in addition to truncate\n   * @param {boolean|Function} [options.logging] A function that logs sql queries, or false for no logging\n   * @returns {Promise}\n   *\n   * @see\n   * {@link Model.truncate} for more information\n   */\n  async truncate(options) {\n    const sortedModels = this.modelManager.getModelsTopoSortedByForeignKey();\n    const models = sortedModels || this.modelManager.models;\n    const hasCyclicDependencies = sortedModels == null;\n\n    // we have cyclic dependencies, cascade must be enabled.\n    if (hasCyclicDependencies && (!options || !options.cascade)) {\n      throw new Error('Sequelize#truncate: Some of your models have cyclic references (foreign keys). You need to use the \"cascade\" option to be able to delete rows from models that have cyclic references.');\n    }\n\n    // TODO [>=7]: throw if options.cascade is specified but unsupported in the given dialect.\n    if (hasCyclicDependencies && this.dialect.name === 'sqlite') {\n      // Workaround: SQLite does not support options.cascade, but we can disable its foreign key constraints while we\n      // truncate all tables.\n      return withSqliteForeignKeysOff(this, options, async () => {\n        await Promise.all(models.map(model => model.truncate(options)));\n      });\n    }\n\n    if (options && options.cascade) {\n      for (const model of models) await model.truncate(options);\n    } else {\n      await Promise.all(models.map(model => model.truncate(options)));\n    }\n  }\n\n  /**\n   * Drop all tables defined through this sequelize instance.\n   * This is done by calling Model.drop on each model.\n   *\n   * @see\n   * {@link Model.drop} for options\n   *\n   * @param {object} [options] The options passed to each call to Model.drop\n   * @param {boolean|Function} [options.logging] A function that logs sql queries, or false for no logging\n   *\n   * @returns {Promise}\n   */\n  async drop(options) {\n    // if 'cascade' is specified, we don't have to worry about cyclic dependencies.\n    if (options && options.cascade) {\n      for (const model of this.modelManager.models) {\n        await model.drop(options);\n      }\n    }\n\n    const sortedModels = this.modelManager.getModelsTopoSortedByForeignKey();\n\n    // no cyclic dependency between models, we can delete them in an order that will not cause an error.\n    if (sortedModels) {\n      for (const model of sortedModels) {\n        await model.drop(options);\n      }\n    }\n\n    if (this.dialect.name === 'sqlite') {\n      // Optimisation: no need to do this in two passes in SQLite because we can temporarily disable foreign keys\n      await withSqliteForeignKeysOff(this, options, async () => {\n        for (const model of this.modelManager.models) {\n          await model.drop(options);\n        }\n      });\n\n      return;\n    }\n\n    // has cyclic dependency: we first remove each foreign key, then delete each model.\n    for (const model of this.modelManager.models) {\n      const tableName = model.getTableName();\n      const foreignKeys = await this.queryInterface.getForeignKeyReferencesForTable(tableName, options);\n\n      await Promise.all(foreignKeys.map(foreignKey => {\n        return this.queryInterface.removeConstraint(tableName, foreignKey.constraintName, options);\n      }));\n    }\n\n    for (const model of this.modelManager.models) {\n      await model.drop(options);\n    }\n  }\n\n  /**\n   * Test the connection by trying to authenticate. It runs `SELECT 1+1 AS result` query.\n   *\n   * @param {object} [options={}] query options\n   *\n   * @returns {Promise}\n   */\n  async authenticate(options) {\n    options = {\n      raw: true,\n      plain: true,\n      type: QueryTypes.SELECT,\n      ...options\n    };\n\n    await this.query(this.dialect.queryGenerator.authTestQuery(), options);\n\n    return;\n  }\n\n  async databaseVersion(options) {\n    return await this.getQueryInterface().databaseVersion(options);\n  }\n\n  /**\n   * Get the fn for random based on the dialect\n   *\n   * @returns {Sequelize.fn}\n   */\n  random() {\n    if (['postgres', 'sqlite', 'snowflake'].includes(this.getDialect())) {\n      return this.fn('RANDOM');\n    }\n    return this.fn('RAND');\n  }\n\n  /**\n   * Creates an object representing a database function. This can be used in search queries, both in where and order parts, and as default values in column definitions.\n   * If you want to refer to columns in your function, you should use `sequelize.col`, so that the columns are properly interpreted as columns and not a strings.\n   *\n   * @see\n   * {@link Model.findAll}\n   * @see\n   * {@link Sequelize.define}\n   * @see\n   * {@link Sequelize.col}\n   *\n   * @param {string} fn The function you want to call\n   * @param {any} args All further arguments will be passed as arguments to the function\n   *\n   * @since v2.0.0-dev3\n   * @memberof Sequelize\n   * @returns {Sequelize.fn}\n   *\n   * @example <caption>Convert a user's username to upper case</caption>\n   * instance.update({\n   *   username: sequelize.fn('upper', sequelize.col('username'))\n   * });\n   */\n  static fn(fn, ...args) {\n    return new Utils.Fn(fn, args);\n  }\n\n  /**\n   * Creates an object which represents a column in the DB, this allows referencing another column in your query. This is often useful in conjunction with `sequelize.fn`, since raw string arguments to fn will be escaped.\n   *\n   * @see\n   * {@link Sequelize#fn}\n   *\n   * @param {string} col The name of the column\n   * @since v2.0.0-dev3\n   * @memberof Sequelize\n   *\n   * @returns {Sequelize.col}\n   */\n  static col(col) {\n    return new Utils.Col(col);\n  }\n\n  /**\n   * Creates an object representing a call to the cast function.\n   *\n   * @param {any} val The value to cast\n   * @param {string} type The type to cast it to\n   * @since v2.0.0-dev3\n   * @memberof Sequelize\n   *\n   * @returns {Sequelize.cast}\n   */\n  static cast(val, type) {\n    return new Utils.Cast(val, type);\n  }\n\n  /**\n   * Creates an object representing a literal, i.e. something that will not be escaped.\n   *\n   * @param {any} val literal value\n   * @since v2.0.0-dev3\n   * @memberof Sequelize\n   *\n   * @returns {Sequelize.literal}\n   */\n  static literal(val) {\n    return new Utils.Literal(val);\n  }\n\n  /**\n   * An AND query\n   *\n   * @see\n   * {@link Model.findAll}\n   *\n   * @param {...string|object} args Each argument will be joined by AND\n   * @since v2.0.0-dev3\n   * @memberof Sequelize\n   *\n   * @returns {Sequelize.and}\n   */\n  static and(...args) {\n    return { [Op.and]: args };\n  }\n\n  /**\n   * An OR query\n   *\n   * @see\n   * {@link Model.findAll}\n   *\n   * @param {...string|object} args Each argument will be joined by OR\n   * @since v2.0.0-dev3\n   * @memberof Sequelize\n   *\n   * @returns {Sequelize.or}\n   */\n  static or(...args) {\n    return { [Op.or]: args };\n  }\n\n  /**\n   * Creates an object representing nested where conditions for postgres/sqlite/mysql json data-type.\n   *\n   * @see\n   * {@link Model.findAll}\n   *\n   * @param {string|object} conditionsOrPath A hash containing strings/numbers or other nested hash, a string using dot notation or a string using postgres/sqlite/mysql json syntax.\n   * @param {string|number|boolean} [value] An optional value to compare against. Produces a string of the form \"<json path> = '<value>'\".\n   * @memberof Sequelize\n   *\n   * @returns {Sequelize.json}\n   */\n  static json(conditionsOrPath, value) {\n    return new Utils.Json(conditionsOrPath, value);\n  }\n\n  /**\n   * A way of specifying attr = condition.\n   *\n   * The attr can either be an object taken from `Model.rawAttributes` (for example `Model.rawAttributes.id` or `Model.rawAttributes.name`). The\n   * attribute should be defined in your model definition. The attribute can also be an object from one of the sequelize utility functions (`sequelize.fn`, `sequelize.col` etc.)\n   *\n   * For string attributes, use the regular `{ where: { attr: something }}` syntax. If you don't want your string to be escaped, use `sequelize.literal`.\n   *\n   * @see\n   * {@link Model.findAll}\n   *\n   * @param {object} attr The attribute, which can be either an attribute object from `Model.rawAttributes` or a sequelize object, for example an instance of `sequelize.fn`. For simple string attributes, use the POJO syntax\n   * @param {symbol} [comparator='Op.eq'] operator\n   * @param {string|object} logic The condition. Can be both a simply type, or a further condition (`or`, `and`, `.literal` etc.)\n   * @since v2.0.0-dev3\n   */\n  static where(attr, comparator, logic) {\n    return new Utils.Where(attr, comparator, logic);\n  }\n\n  /**\n   * Start a transaction. When using transactions, you should pass the transaction in the options argument in order for the query to happen under that transaction @see {@link Transaction}\n   *\n   * If you have [CLS](https://github.com/Jeff-Lewis/cls-hooked) enabled, the transaction will automatically be passed to any query that runs within the callback\n   *\n   * @example\n   *\n   * try {\n   *   const transaction = await sequelize.transaction();\n   *   const user = await User.findOne(..., { transaction });\n   *   await user.update(..., { transaction });\n   *   await transaction.commit();\n   * } catch {\n   *   await transaction.rollback()\n   * }\n   *\n   * @example <caption>A syntax for automatically committing or rolling back based on the promise chain resolution is also supported</caption>\n   *\n   * try {\n   *   await sequelize.transaction(transaction => { // Note that we pass a callback rather than awaiting the call with no arguments\n   *     const user = await User.findOne(..., {transaction});\n   *     await user.update(..., {transaction});\n   *   });\n   *   // Committed\n   * } catch(err) {\n   *   // Rolled back\n   *   console.error(err);\n   * }\n   * @example <caption>To enable CLS, add it do your project, create a namespace and set it on the sequelize constructor:</caption>\n   *\n   * const cls = require('cls-hooked');\n   * const namespace = cls.createNamespace('....');\n   * const Sequelize = require('sequelize');\n   * Sequelize.useCLS(namespace);\n   *\n   * // Note, that CLS is enabled for all sequelize instances, and all instances will share the same namespace\n   *\n   * @param {object}   [options] Transaction options\n   * @param {string}   [options.type='DEFERRED'] See `Sequelize.Transaction.TYPES` for possible options. Sqlite only.\n   * @param {string}   [options.isolationLevel] See `Sequelize.Transaction.ISOLATION_LEVELS` for possible options\n   * @param {string}   [options.deferrable] Sets the constraints to be deferred or immediately checked. See `Sequelize.Deferrable`. PostgreSQL Only\n   * @param {boolean}  [options.readOnly] Whether this transaction will only be used to read data. Used to determine whether sequelize is allowed to use a read replication server.\n   * @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.\n   * @param {Function} [autoCallback] The callback is called with the transaction object, and should return a promise. If the promise is resolved, the transaction commits; if the promise rejects, the transaction rolls back\n   *\n   * @returns {Promise}\n   */\n  async transaction(options, autoCallback) {\n    if (typeof options === 'function') {\n      autoCallback = options;\n      options = undefined;\n    }\n\n    const transaction = new Transaction(this, options);\n\n    if (!autoCallback) {\n      await transaction.prepareEnvironment(/* cls */ false);\n      return transaction;\n    }\n\n    // autoCallback provided\n    return Sequelize._clsRun(async () => {\n      await transaction.prepareEnvironment(/* cls */ true);\n\n      let result;\n      try {\n        result = await autoCallback(transaction);\n      } catch (err) {\n        try {\n          await transaction.rollback();\n        } catch (ignore) {\n          // ignore, because 'rollback' will already print the error before killing the connection\n        }\n\n        throw err;\n      }\n\n      await transaction.commit();\n      return result;\n    });\n  }\n\n  /**\n   * Use CLS (Continuation Local Storage) with Sequelize. With Continuation\n   * Local Storage, all queries within the transaction callback will\n   * automatically receive the transaction object.\n   *\n   * CLS namespace provided is stored as `Sequelize._cls`\n   *\n   * @param {object} ns CLS namespace\n   * @returns {object} Sequelize constructor\n   */\n  static useCLS(ns) {\n    // check `ns` is valid CLS namespace\n    if (!ns || typeof ns !== 'object' || typeof ns.bind !== 'function' || typeof ns.run !== 'function') throw new Error('Must provide CLS namespace');\n\n    // save namespace as `Sequelize._cls`\n    Sequelize._cls = ns;\n\n    // return Sequelize for chaining\n    return this;\n  }\n\n  /**\n   * Run function in CLS context.\n   * If no CLS context in use, just runs the function normally\n   *\n   * @private\n   * @param {Function} fn Function to run\n   * @returns {*} Return value of function\n   */\n  static _clsRun(fn) {\n    const ns = Sequelize._cls;\n    if (!ns) return fn();\n\n    let res;\n    ns.run(context => res = fn(context));\n    return res;\n  }\n\n  log(...args) {\n    let options;\n\n    const last = _.last(args);\n\n    if (last && _.isPlainObject(last) && Object.prototype.hasOwnProperty.call(last, 'logging')) {\n      options = last;\n\n      // remove options from set of logged arguments if options.logging is equal to console.log\n      // eslint-disable-next-line no-console\n      if (options.logging === console.log) {\n        args.splice(args.length - 1, 1);\n      }\n    } else {\n      options = this.options;\n    }\n\n    if (options.logging) {\n      if (options.logging === true) {\n        deprecations.noTrueLogging();\n        // eslint-disable-next-line no-console\n        options.logging = console.log;\n      }\n\n      // second argument is sql-timings, when benchmarking option enabled\n      // eslint-disable-next-line no-console\n      if ((this.options.benchmark || options.benchmark) && options.logging === console.log) {\n        args = [`${args[0]} Elapsed time: ${args[1]}ms`];\n      }\n\n      options.logging(...args);\n    }\n  }\n\n  /**\n   * Close all connections used by this sequelize instance, and free all references so the instance can be garbage collected.\n   *\n   * Normally this is done on process exit, so you only need to call this method if you are creating multiple instances, and want\n   * to garbage collect some of them.\n   *\n   * @returns {Promise}\n   */\n  close() {\n    return this.connectionManager.close();\n  }\n\n  normalizeDataType(Type) {\n    let type = typeof Type === 'function' ? new Type() : Type;\n    const dialectTypes = this.dialect.DataTypes || {};\n\n    if (dialectTypes[type.key]) {\n      type = dialectTypes[type.key].extend(type);\n    }\n\n    if (type instanceof DataTypes.ARRAY) {\n      if (!type.type) {\n        throw new Error('ARRAY is missing type definition for its values.');\n      }\n      if (dialectTypes[type.type.key]) {\n        type.type = dialectTypes[type.type.key].extend(type.type);\n      }\n    }\n\n    return type;\n  }\n\n  normalizeAttribute(attribute) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = { type: attribute };\n    }\n\n    if (!attribute.type) return attribute;\n\n    attribute.type = this.normalizeDataType(attribute.type);\n\n    if (Object.prototype.hasOwnProperty.call(attribute, 'defaultValue')) {\n      if (typeof attribute.defaultValue === 'function' &&\n        [DataTypes.NOW, DataTypes.UUIDV1, DataTypes.UUIDV4].includes(attribute.defaultValue)\n      ) {\n        attribute.defaultValue = new attribute.defaultValue();\n      }\n    }\n\n    if (attribute.type instanceof DataTypes.ENUM) {\n      // The ENUM is a special case where the type is an object containing the values\n      if (attribute.values) {\n        attribute.type.values = attribute.type.options.values = attribute.values;\n      } else {\n        attribute.values = attribute.type.values;\n      }\n\n      if (!attribute.values.length) {\n        throw new Error('Values for ENUM have not been defined.');\n      }\n    }\n\n    return attribute;\n  }\n}\n\n// Aliases\nSequelize.prototype.fn = Sequelize.fn;\nSequelize.prototype.col = Sequelize.col;\nSequelize.prototype.cast = Sequelize.cast;\nSequelize.prototype.literal = Sequelize.literal;\nSequelize.prototype.and = Sequelize.and;\nSequelize.prototype.or = Sequelize.or;\nSequelize.prototype.json = Sequelize.json;\nSequelize.prototype.where = Sequelize.where;\nSequelize.prototype.validate = Sequelize.prototype.authenticate;\n\n/**\n * Sequelize version number.\n */\n// To avoid any errors on startup when this field is unused, only resolve it as needed.\n// this is to prevent any potential issues on startup with unusual environments (eg, bundled code)\n// where relative paths may fail that are unnecessary.\nObject.defineProperty(Sequelize, 'version', {\n  enumerable: true,\n  get() {\n    return require('../package.json').version;\n  }\n});\n\nSequelize.options = { hooks: {} };\n\n/**\n * @private\n */\nSequelize.Utils = Utils;\n\n/**\n * Operators symbols to be used for querying data\n *\n * @see  {@link Operators}\n */\nSequelize.Op = Op;\n\n/**\n * Available table hints to be used for querying data in mssql for table hints\n *\n * @see {@link TableHints}\n */\nSequelize.TableHints = TableHints;\n\n/**\n * Available index hints to be used for querying data in mysql for index hints\n *\n * @see {@link IndexHints}\n */\nSequelize.IndexHints = IndexHints;\n\n/**\n * A reference to the sequelize transaction class. Use this to access isolationLevels and types when creating a transaction\n *\n * @see {@link Transaction}\n * @see {@link Sequelize.transaction}\n */\nSequelize.Transaction = Transaction;\n\n/**\n * A reference to Sequelize constructor from sequelize. Useful for accessing DataTypes, Errors etc.\n *\n * @see {@link Sequelize}\n */\nSequelize.prototype.Sequelize = Sequelize;\n\n/**\n * Available query types for use with `sequelize.query`\n *\n * @see {@link QueryTypes}\n */\nSequelize.prototype.QueryTypes = Sequelize.QueryTypes = QueryTypes;\n\n/**\n * Exposes the validator.js object, so you can extend it with custom validation functions. The validator is exposed both on the instance, and on the constructor.\n *\n * @see https://github.com/chriso/validator.js\n */\nSequelize.prototype.Validator = Sequelize.Validator = Validator;\n\nSequelize.Model = Model;\n\nSequelize.QueryInterface = QueryInterface;\nSequelize.BelongsTo = BelongsTo;\nSequelize.HasOne = HasOne;\nSequelize.HasMany = HasMany;\nSequelize.BelongsToMany = BelongsToMany;\n\nSequelize.DataTypes = DataTypes;\nfor (const dataType in DataTypes) {\n  Sequelize[dataType] = DataTypes[dataType];\n}\n\n/**\n * A reference to the deferrable collection. Use this to access the different deferrable options.\n *\n * @see {@link Transaction.Deferrable}\n * @see {@link Sequelize#transaction}\n */\nSequelize.Deferrable = Deferrable;\n\n/**\n * A reference to the sequelize association class.\n *\n * @see {@link Association}\n */\nSequelize.prototype.Association = Sequelize.Association = Association;\n\n/**\n * Provide alternative version of `inflection` module to be used by `Utils.pluralize` etc.\n *\n * @param {object} _inflection - `inflection` module\n */\nSequelize.useInflection = Utils.useInflection;\n\n/**\n * Allow hooks to be defined on Sequelize + on sequelize instance as universal hooks to run on all models\n * and on Sequelize/sequelize methods e.g. Sequelize(), Sequelize#define()\n */\nHooks.applyTo(Sequelize);\nHooks.applyTo(Sequelize.prototype);\n\n/**\n * Expose various errors available\n */\n\n// expose alias to BaseError\nSequelize.Error = sequelizeErrors.BaseError;\n\nfor (const error of Object.keys(sequelizeErrors)) {\n  Sequelize[error] = sequelizeErrors[error];\n}\n\nmodule.exports = Sequelize;\nmodule.exports.Sequelize = Sequelize;\nmodule.exports.default = Sequelize;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 26423, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 26428, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/src/index.js"],"sourcesContent":["'use strict';\n\n/**\n  * A Sequelize module that contains the sequelize entry point.\n  *\n  * @module sequelize\n  */\n\n/** Exports the sequelize entry point. */\nmodule.exports = require('./sequelize');\n"],"names":[],"mappings":";AASA,OAAO,OAAA,GAAU,QAAQ","ignoreList":[0]}},
    {"offset": {"line": 26430, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 26436, "column": 0}, "map": {"version":3,"sources":["file:///home/daart/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/file%20David%60s/web/Sites/Shop/my-site/node_modules/sequelize/lib/index.mjs"],"sourcesContent":["import Pkg from './index.js';\n\nexport default Pkg;\n\n// export * from './lib/sequelize';\nexport const Sequelize = Pkg.Sequelize;\nexport const fn = Pkg.fn;\nexport const col = Pkg.col;\nexport const cast = Pkg.cast;\nexport const literal = Pkg.literal;\nexport const and = Pkg.and;\nexport const or = Pkg.or;\nexport const json = Pkg.json;\nexport const where = Pkg.where;\n\n// export * from './lib/query-interface';\nexport const QueryInterface = Pkg.QueryInterface;\n\n// export * from './lib/data-types';\n// 'DOUBLE PRECISION' is missing because its name is not a valid export identifier.\nexport const ABSTRACT = Pkg.ABSTRACT;\nexport const STRING = Pkg.STRING;\nexport const CHAR = Pkg.CHAR;\nexport const TEXT = Pkg.TEXT;\nexport const NUMBER = Pkg.NUMBER;\nexport const TINYINT = Pkg.TINYINT;\nexport const SMALLINT = Pkg.SMALLINT;\nexport const MEDIUMINT = Pkg.MEDIUMINT;\nexport const INTEGER = Pkg.INTEGER;\nexport const BIGINT = Pkg.BIGINT;\nexport const FLOAT = Pkg.FLOAT;\nexport const TIME = Pkg.TIME;\nexport const DATE = Pkg.DATE;\nexport const DATEONLY = Pkg.DATEONLY;\nexport const BOOLEAN = Pkg.BOOLEAN;\nexport const NOW = Pkg.NOW;\nexport const BLOB = Pkg.BLOB;\nexport const DECIMAL = Pkg.DECIMAL;\nexport const NUMERIC = Pkg.NUMERIC;\nexport const UUID = Pkg.UUID;\nexport const UUIDV1 = Pkg.UUIDV1;\nexport const UUIDV4 = Pkg.UUIDV4;\nexport const HSTORE = Pkg.HSTORE;\nexport const JSON = Pkg.JSON;\nexport const JSONB = Pkg.JSONB;\nexport const VIRTUAL = Pkg.VIRTUAL;\nexport const ARRAY = Pkg.ARRAY;\nexport const ENUM = Pkg.ENUM;\nexport const RANGE = Pkg.RANGE;\nexport const REAL = Pkg.REAL;\nexport const DOUBLE = Pkg.DOUBLE;\nexport const GEOMETRY = Pkg.GEOMETRY;\nexport const GEOGRAPHY = Pkg.GEOGRAPHY;\nexport const CIDR = Pkg.CIDR;\nexport const INET = Pkg.INET;\nexport const MACADDR = Pkg.MACADDR;\nexport const CITEXT = Pkg.CITEXT;\nexport const TSVECTOR = Pkg.TSVECTOR;\n\n// export * from './lib/model';\nexport const Model = Pkg.Model;\n\n// export * from './lib/transaction';\nexport const Transaction = Pkg.Transaction;\n\n// export * from './lib/associations/index';\nexport const Association = Pkg.Association;\nexport const BelongsTo = Pkg.BelongsTo;\nexport const HasOne = Pkg.HasOne;\nexport const HasMany = Pkg.HasMany;\nexport const BelongsToMany = Pkg.BelongsToMany;\n\n// export * from './lib/errors';\nexport const BaseError = Pkg.BaseError;\n\nexport const AggregateError = Pkg.AggregateError;\nexport const AsyncQueueError = Pkg.AsyncQueueError;\nexport const AssociationError = Pkg.AssociationError;\nexport const BulkRecordError = Pkg.BulkRecordError;\nexport const ConnectionError = Pkg.ConnectionError;\nexport const DatabaseError = Pkg.DatabaseError;\nexport const EagerLoadingError = Pkg.EagerLoadingError;\nexport const EmptyResultError = Pkg.EmptyResultError;\nexport const InstanceError = Pkg.InstanceError;\nexport const OptimisticLockError = Pkg.OptimisticLockError;\nexport const QueryError = Pkg.QueryError;\nexport const SequelizeScopeError = Pkg.SequelizeScopeError;\nexport const ValidationError = Pkg.ValidationError;\nexport const ValidationErrorItem = Pkg.ValidationErrorItem;\n\nexport const AccessDeniedError = Pkg.AccessDeniedError;\nexport const ConnectionAcquireTimeoutError = Pkg.ConnectionAcquireTimeoutError;\nexport const ConnectionRefusedError = Pkg.ConnectionRefusedError;\nexport const ConnectionTimedOutError = Pkg.ConnectionTimedOutError;\nexport const HostNotFoundError = Pkg.HostNotFoundError;\nexport const HostNotReachableError = Pkg.HostNotReachableError;\nexport const InvalidConnectionError = Pkg.InvalidConnectionError;\n\nexport const ExclusionConstraintError = Pkg.ExclusionConstraintError;\nexport const ForeignKeyConstraintError = Pkg.ForeignKeyConstraintError;\nexport const TimeoutError = Pkg.TimeoutError;\nexport const UnknownConstraintError = Pkg.UnknownConstraintError;\n\nexport const UniqueConstraintError = Pkg.UniqueConstraintError;\n\n// export { BaseError as Error } from './lib/errors';\nexport const Error = Pkg.Error;\n\n// export { useInflection } from './lib/utils';\nexport const useInflection = Pkg.useInflection;\n\n// export { Utils, QueryTypes, Op, TableHints, IndexHints, DataTypes, Deferrable };\nexport const Utils = Pkg.Utils;\nexport const QueryTypes = Pkg.QueryTypes;\nexport const Op = Pkg.Op;\nexport const TableHints = Pkg.TableHints;\nexport const IndexHints = Pkg.IndexHints;\nexport const DataTypes = Pkg.DataTypes;\nexport const Deferrable = Pkg.Deferrable;\n\n// export { Validator as validator } from './lib/utils/validator-extras';\nexport const Validator = Pkg.Validator;\n\nexport const ValidationErrorItemOrigin = Pkg.ValidationErrorItemOrigin;\nexport const ValidationErrorItemType = Pkg.ValidationErrorItemType;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;uCAEe,4IAAA,CAAA,UAAG;AAGX,MAAM,YAAY,4IAAA,CAAA,UAAG,CAAC,SAAS;AAC/B,MAAM,KAAK,4IAAA,CAAA,UAAG,CAAC,EAAE;AACjB,MAAM,MAAM,4IAAA,CAAA,UAAG,CAAC,GAAG;AACnB,MAAM,OAAO,4IAAA,CAAA,UAAG,CAAC,IAAI;AACrB,MAAM,UAAU,4IAAA,CAAA,UAAG,CAAC,OAAO;AAC3B,MAAM,MAAM,4IAAA,CAAA,UAAG,CAAC,GAAG;AACnB,MAAM,KAAK,4IAAA,CAAA,UAAG,CAAC,EAAE;AACjB,MAAM,OAAO,4IAAA,CAAA,UAAG,CAAC,IAAI;AACrB,MAAM,QAAQ,4IAAA,CAAA,UAAG,CAAC,KAAK;AAGvB,MAAM,iBAAiB,4IAAA,CAAA,UAAG,CAAC,cAAc;AAIzC,MAAM,WAAW,4IAAA,CAAA,UAAG,CAAC,QAAQ;AAC7B,MAAM,SAAS,4IAAA,CAAA,UAAG,CAAC,MAAM;AACzB,MAAM,OAAO,4IAAA,CAAA,UAAG,CAAC,IAAI;AACrB,MAAM,OAAO,4IAAA,CAAA,UAAG,CAAC,IAAI;AACrB,MAAM,SAAS,4IAAA,CAAA,UAAG,CAAC,MAAM;AACzB,MAAM,UAAU,4IAAA,CAAA,UAAG,CAAC,OAAO;AAC3B,MAAM,WAAW,4IAAA,CAAA,UAAG,CAAC,QAAQ;AAC7B,MAAM,YAAY,4IAAA,CAAA,UAAG,CAAC,SAAS;AAC/B,MAAM,UAAU,4IAAA,CAAA,UAAG,CAAC,OAAO;AAC3B,MAAM,SAAS,4IAAA,CAAA,UAAG,CAAC,MAAM;AACzB,MAAM,QAAQ,4IAAA,CAAA,UAAG,CAAC,KAAK;AACvB,MAAM,OAAO,4IAAA,CAAA,UAAG,CAAC,IAAI;AACrB,MAAM,OAAO,4IAAA,CAAA,UAAG,CAAC,IAAI;AACrB,MAAM,WAAW,4IAAA,CAAA,UAAG,CAAC,QAAQ;AAC7B,MAAM,UAAU,4IAAA,CAAA,UAAG,CAAC,OAAO;AAC3B,MAAM,MAAM,4IAAA,CAAA,UAAG,CAAC,GAAG;AACnB,MAAM,OAAO,4IAAA,CAAA,UAAG,CAAC,IAAI;AACrB,MAAM,UAAU,4IAAA,CAAA,UAAG,CAAC,OAAO;AAC3B,MAAM,UAAU,4IAAA,CAAA,UAAG,CAAC,OAAO;AAC3B,MAAM,OAAO,4IAAA,CAAA,UAAG,CAAC,IAAI;AACrB,MAAM,SAAS,4IAAA,CAAA,UAAG,CAAC,MAAM;AACzB,MAAM,SAAS,4IAAA,CAAA,UAAG,CAAC,MAAM;AACzB,MAAM,SAAS,4IAAA,CAAA,UAAG,CAAC,MAAM;AACzB,MAAM,OAAO,4IAAA,CAAA,UAAG,CAAC,IAAI;AACrB,MAAM,QAAQ,4IAAA,CAAA,UAAG,CAAC,KAAK;AACvB,MAAM,UAAU,4IAAA,CAAA,UAAG,CAAC,OAAO;AAC3B,MAAM,QAAQ,4IAAA,CAAA,UAAG,CAAC,KAAK;AACvB,MAAM,OAAO,4IAAA,CAAA,UAAG,CAAC,IAAI;AACrB,MAAM,QAAQ,4IAAA,CAAA,UAAG,CAAC,KAAK;AACvB,MAAM,OAAO,4IAAA,CAAA,UAAG,CAAC,IAAI;AACrB,MAAM,SAAS,4IAAA,CAAA,UAAG,CAAC,MAAM;AACzB,MAAM,WAAW,4IAAA,CAAA,UAAG,CAAC,QAAQ;AAC7B,MAAM,YAAY,4IAAA,CAAA,UAAG,CAAC,SAAS;AAC/B,MAAM,OAAO,4IAAA,CAAA,UAAG,CAAC,IAAI;AACrB,MAAM,OAAO,4IAAA,CAAA,UAAG,CAAC,IAAI;AACrB,MAAM,UAAU,4IAAA,CAAA,UAAG,CAAC,OAAO;AAC3B,MAAM,SAAS,4IAAA,CAAA,UAAG,CAAC,MAAM;AACzB,MAAM,WAAW,4IAAA,CAAA,UAAG,CAAC,QAAQ;AAG7B,MAAM,QAAQ,4IAAA,CAAA,UAAG,CAAC,KAAK;AAGvB,MAAM,cAAc,4IAAA,CAAA,UAAG,CAAC,WAAW;AAGnC,MAAM,cAAc,4IAAA,CAAA,UAAG,CAAC,WAAW;AACnC,MAAM,YAAY,4IAAA,CAAA,UAAG,CAAC,SAAS;AAC/B,MAAM,SAAS,4IAAA,CAAA,UAAG,CAAC,MAAM;AACzB,MAAM,UAAU,4IAAA,CAAA,UAAG,CAAC,OAAO;AAC3B,MAAM,gBAAgB,4IAAA,CAAA,UAAG,CAAC,aAAa;AAGvC,MAAM,YAAY,4IAAA,CAAA,UAAG,CAAC,SAAS;AAE/B,MAAM,iBAAiB,4IAAA,CAAA,UAAG,CAAC,cAAc;AACzC,MAAM,kBAAkB,4IAAA,CAAA,UAAG,CAAC,eAAe;AAC3C,MAAM,mBAAmB,4IAAA,CAAA,UAAG,CAAC,gBAAgB;AAC7C,MAAM,kBAAkB,4IAAA,CAAA,UAAG,CAAC,eAAe;AAC3C,MAAM,kBAAkB,4IAAA,CAAA,UAAG,CAAC,eAAe;AAC3C,MAAM,gBAAgB,4IAAA,CAAA,UAAG,CAAC,aAAa;AACvC,MAAM,oBAAoB,4IAAA,CAAA,UAAG,CAAC,iBAAiB;AAC/C,MAAM,mBAAmB,4IAAA,CAAA,UAAG,CAAC,gBAAgB;AAC7C,MAAM,gBAAgB,4IAAA,CAAA,UAAG,CAAC,aAAa;AACvC,MAAM,sBAAsB,4IAAA,CAAA,UAAG,CAAC,mBAAmB;AACnD,MAAM,aAAa,4IAAA,CAAA,UAAG,CAAC,UAAU;AACjC,MAAM,sBAAsB,4IAAA,CAAA,UAAG,CAAC,mBAAmB;AACnD,MAAM,kBAAkB,4IAAA,CAAA,UAAG,CAAC,eAAe;AAC3C,MAAM,sBAAsB,4IAAA,CAAA,UAAG,CAAC,mBAAmB;AAEnD,MAAM,oBAAoB,4IAAA,CAAA,UAAG,CAAC,iBAAiB;AAC/C,MAAM,gCAAgC,4IAAA,CAAA,UAAG,CAAC,6BAA6B;AACvE,MAAM,yBAAyB,4IAAA,CAAA,UAAG,CAAC,sBAAsB;AACzD,MAAM,0BAA0B,4IAAA,CAAA,UAAG,CAAC,uBAAuB;AAC3D,MAAM,oBAAoB,4IAAA,CAAA,UAAG,CAAC,iBAAiB;AAC/C,MAAM,wBAAwB,4IAAA,CAAA,UAAG,CAAC,qBAAqB;AACvD,MAAM,yBAAyB,4IAAA,CAAA,UAAG,CAAC,sBAAsB;AAEzD,MAAM,2BAA2B,4IAAA,CAAA,UAAG,CAAC,wBAAwB;AAC7D,MAAM,4BAA4B,4IAAA,CAAA,UAAG,CAAC,yBAAyB;AAC/D,MAAM,eAAe,4IAAA,CAAA,UAAG,CAAC,YAAY;AACrC,MAAM,yBAAyB,4IAAA,CAAA,UAAG,CAAC,sBAAsB;AAEzD,MAAM,wBAAwB,4IAAA,CAAA,UAAG,CAAC,qBAAqB;AAGvD,MAAM,QAAQ,4IAAA,CAAA,UAAG,CAAC,KAAK;AAGvB,MAAM,gBAAgB,4IAAA,CAAA,UAAG,CAAC,aAAa;AAGvC,MAAM,QAAQ,4IAAA,CAAA,UAAG,CAAC,KAAK;AACvB,MAAM,aAAa,4IAAA,CAAA,UAAG,CAAC,UAAU;AACjC,MAAM,KAAK,4IAAA,CAAA,UAAG,CAAC,EAAE;AACjB,MAAM,aAAa,4IAAA,CAAA,UAAG,CAAC,UAAU;AACjC,MAAM,aAAa,4IAAA,CAAA,UAAG,CAAC,UAAU;AACjC,MAAM,YAAY,4IAAA,CAAA,UAAG,CAAC,SAAS;AAC/B,MAAM,aAAa,4IAAA,CAAA,UAAG,CAAC,UAAU;AAGjC,MAAM,YAAY,4IAAA,CAAA,UAAG,CAAC,SAAS;AAE/B,MAAM,4BAA4B,4IAAA,CAAA,UAAG,CAAC,yBAAyB;AAC/D,MAAM,0BAA0B,4IAAA,CAAA,UAAG,CAAC,uBAAuB","ignoreList":[0]}},
    {"offset": {"line": 26630, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}